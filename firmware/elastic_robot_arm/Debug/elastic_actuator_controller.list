
elastic_actuator_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a45c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800a630  0800a630  0001a630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a928  0800a928  000209e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a928  0800a928  0001a928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a930  0800a930  000209e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a930  0800a930  0001a930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a938  0800a938  0001a938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e8  20000000  0800a93c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200009e8  0800b324  000209e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d38  0800b324  00020d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bcb  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002adb  00000000  00000000  000335e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  000360c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  00037188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022149  00000000  00000000  000380f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec61  00000000  00000000  0005a241  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2c37  00000000  00000000  00068ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff8  00000000  00000000  0013bb54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e8 	.word	0x200009e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a614 	.word	0x0800a614

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009ec 	.word	0x200009ec
 800020c:	0800a614 	.word	0x0800a614

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MRAC>:
 * @return:
 */
void MRAC(double theta_l, double theta_l_dot, double theta_m, double theta_m_dot,
		double theta_m_d, double phi_k_1[5], double theta_r_k_1[2],
		double *V_control, double phi_k[5], double theta_r[2])
{
 8000ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eec:	b0d1      	sub	sp, #324	; 0x144
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
 8000ef4:	ed87 1b12 	vstr	d1, [r7, #72]	; 0x48
 8000ef8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000efc:	ed84 2b00 	vstr	d2, [r4]
 8000f00:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f04:	ed84 3b00 	vstr	d3, [r4]
 8000f08:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000f0c:	ed84 4b00 	vstr	d4, [r4]
 8000f10:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000f14:	6020      	str	r0, [r4, #0]
 8000f16:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f1a:	6001      	str	r1, [r0, #0]
 8000f1c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f20:	600a      	str	r2, [r1, #0]
 8000f22:	f107 0220 	add.w	r2, r7, #32
 8000f26:	6013      	str	r3, [r2, #0]
	/*  State variable */
	/*  Error between System respond and reference model respond */
	/*  Regressor */
	/*  Derivative of parameters calculated from parameter */
	/*  adaption law */
	theta_idx_1 = 1.9599999999999997 / phi_k_1[2];
 8000f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3310      	adds	r3, #16
 8000f30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4623      	mov	r3, r4
 8000f38:	f20f 51a8 	addw	r1, pc, #1448	; 0x5a8
 8000f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f40:	f7ff fca4 	bl	800088c <__aeabi_ddiv>
 8000f44:	4603      	mov	r3, r0
 8000f46:	460c      	mov	r4, r1
 8000f48:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	theta_r[0] = (theta_r_k_1[0] + T * theta_r_k_1[1]) + 0.0 * theta_m_d;
 8000f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	e9d3 5600 	ldrd	r5, r6, [r3]
 8000f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f62:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	f7ff fb65 	bl	8000638 <__aeabi_dmul>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	460c      	mov	r4, r1
 8000f72:	461a      	mov	r2, r3
 8000f74:	4623      	mov	r3, r4
 8000f76:	4628      	mov	r0, r5
 8000f78:	4631      	mov	r1, r6
 8000f7a:	f7ff f9a7 	bl	80002cc <__adddf3>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460c      	mov	r4, r1
 8000f82:	461d      	mov	r5, r3
 8000f84:	4626      	mov	r6, r4
 8000f86:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f96:	f7ff fb4f 	bl	8000638 <__aeabi_dmul>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460c      	mov	r4, r1
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4623      	mov	r3, r4
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	f7ff f991 	bl	80002cc <__adddf3>
 8000faa:	4603      	mov	r3, r0
 8000fac:	460c      	mov	r4, r1
 8000fae:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000fb2:	e9c2 3400 	strd	r3, r4, [r2]
	theta[0] = -theta_m;
 8000fb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	61ba      	str	r2, [r7, #24]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	ed97 7b06 	vldr	d7, [r7, #24]
 8000fca:	ed87 7b3e 	vstr	d7, [r7, #248]	; 0xf8
	theta_r[1] = (-0.00196 * theta_r_k_1[0] + 0.9972 * theta_r_k_1[1]) + 0.00196 *
 8000fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd8:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fb2a 	bl	8000638 <__aeabi_dmul>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	460c      	mov	r4, r1
 8000fe8:	461d      	mov	r5, r3
 8000fea:	4626      	mov	r6, r4
 8000fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff8:	f20f 5300 	addw	r3, pc, #1280	; 0x500
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4603      	mov	r3, r0
 8001006:	460c      	mov	r4, r1
 8001008:	461a      	mov	r2, r3
 800100a:	4623      	mov	r3, r4
 800100c:	4628      	mov	r0, r5
 800100e:	4631      	mov	r1, r6
 8001010:	f7ff f95c 	bl	80002cc <__adddf3>
 8001014:	4603      	mov	r3, r0
 8001016:	460c      	mov	r4, r1
 8001018:	4698      	mov	r8, r3
 800101a:	46a1      	mov	r9, r4
 800101c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001020:	f20f 43e0 	addw	r3, pc, #1248	; 0x4e0
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800102c:	f7ff fb04 	bl	8000638 <__aeabi_dmul>
 8001030:	4603      	mov	r3, r0
 8001032:	460c      	mov	r4, r1
 8001034:	4619      	mov	r1, r3
 8001036:	4622      	mov	r2, r4
 8001038:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800103c:	f103 0508 	add.w	r5, r3, #8
 8001040:	4613      	mov	r3, r2
 8001042:	460a      	mov	r2, r1
 8001044:	4640      	mov	r0, r8
 8001046:	4649      	mov	r1, r9
 8001048:	f7ff f940 	bl	80002cc <__adddf3>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	e9c5 3400 	strd	r3, r4, [r5]
			theta_m_d;
	theta[1] = -theta_m_dot;
 8001054:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	613a      	str	r2, [r7, #16]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	ed97 7b04 	vldr	d7, [r7, #16]
 8001068:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
	theta[2] = theta_m_d;
 800106c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001070:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001074:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	theta[3] = -1.0 / N * theta_l;
 8001078:	f20f 4390 	addw	r3, pc, #1168	; 0x490
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001084:	f7ff fad8 	bl	8000638 <__aeabi_dmul>
 8001088:	4603      	mov	r3, r0
 800108a:	460c      	mov	r4, r1
 800108c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	theta[4] = -1.0 / N * theta_l_dot;
 8001090:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800109c:	f7ff facc 	bl	8000638 <__aeabi_dmul>
 80010a0:	4603      	mov	r3, r0
 80010a2:	460c      	mov	r4, r1
 80010a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	for (i0 = 0; i0 < 5; i0++) {
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80010ae:	e037      	b.n	8001120 <MRAC+0x238>
		c_gamma[i0] = 0.0 * theta[i0];
 80010b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80010ba:	4413      	add	r3, r2
 80010bc:	3b48      	subs	r3, #72	; 0x48
 80010be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	f7ff fab5 	bl	8000638 <__aeabi_dmul>
 80010ce:	4603      	mov	r3, r0
 80010d0:	460c      	mov	r4, r1
 80010d2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80010d6:	00d2      	lsls	r2, r2, #3
 80010d8:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80010dc:	440a      	add	r2, r1
 80010de:	3a98      	subs	r2, #152	; 0x98
 80010e0:	e9c2 3400 	strd	r3, r4, [r2]
		c_gamma[i0 + 5] = theta_idx_1 * theta[i0];
 80010e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80010ee:	4413      	add	r3, r2
 80010f0:	3b48      	subs	r3, #72	; 0x48
 80010f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010fa:	1d5d      	adds	r5, r3, #5
 80010fc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001100:	f7ff fa9a 	bl	8000638 <__aeabi_dmul>
 8001104:	4603      	mov	r3, r0
 8001106:	460c      	mov	r4, r1
 8001108:	00ea      	lsls	r2, r5, #3
 800110a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800110e:	440a      	add	r2, r1
 8001110:	3a98      	subs	r2, #152	; 0x98
 8001112:	e9c2 3400 	strd	r3, r4, [r2]
	for (i0 = 0; i0 < 5; i0++) {
 8001116:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800111a:	3301      	adds	r3, #1
 800111c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001120:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001124:	2b04      	cmp	r3, #4
 8001126:	ddc3      	ble.n	80010b0 <MRAC+0x1c8>
	}

	for (i0 = 0; i0 < 10; i0++) {
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800112e:	e019      	b.n	8001164 <MRAC+0x27c>
		c_gamma[i0] *= -gamma;
 8001130:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800113a:	4413      	add	r3, r2
 800113c:	3b98      	subs	r3, #152	; 0x98
 800113e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001142:	469a      	mov	sl, r3
 8001144:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8001148:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001152:	4413      	add	r3, r2
 8001154:	3b98      	subs	r3, #152	; 0x98
 8001156:	e9c3 ab00 	strd	sl, fp, [r3]
	for (i0 = 0; i0 < 10; i0++) {
 800115a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800115e:	3301      	adds	r3, #1
 8001160:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001164:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001168:	2b09      	cmp	r3, #9
 800116a:	dde1      	ble.n	8001130 <MRAC+0x248>
	}

	for (i0 = 0; i0 < 5; i0++) {
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001172:	e086      	b.n	8001282 <MRAC+0x39a>
		d_gamma[i0] = 0.0;
 8001174:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800117e:	4413      	add	r3, r2
 8001180:	f1a3 02e8 	sub.w	r2, r3, #232	; 0xe8
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	f04f 0400 	mov.w	r4, #0
 800118c:	e9c2 3400 	strd	r3, r4, [r2]
		d0 = c_gamma[i0 + 5];
 8001190:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001194:	3305      	adds	r3, #5
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800119c:	4413      	add	r3, r2
 800119e:	3b98      	subs	r3, #152	; 0x98
 80011a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011a4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		d_gamma[i0] = c_gamma[i0] * 1.26 + d0 * 0.26;
 80011a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80011b2:	4413      	add	r3, r2
 80011b4:	3b98      	subs	r3, #152	; 0x98
 80011b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ba:	a3d6      	add	r3, pc, #856	; (adr r3, 8001514 <MRAC+0x62c>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fa3a 	bl	8000638 <__aeabi_dmul>
 80011c4:	4603      	mov	r3, r0
 80011c6:	460c      	mov	r4, r1
 80011c8:	4625      	mov	r5, r4
 80011ca:	461c      	mov	r4, r3
 80011cc:	a3d3      	add	r3, pc, #844	; (adr r3, 800151c <MRAC+0x634>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80011d6:	f7ff fa2f 	bl	8000638 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4620      	mov	r0, r4
 80011e0:	4629      	mov	r1, r5
 80011e2:	f7ff f873 	bl	80002cc <__adddf3>
 80011e6:	4603      	mov	r3, r0
 80011e8:	460c      	mov	r4, r1
 80011ea:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80011ee:	00d2      	lsls	r2, r2, #3
 80011f0:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80011f4:	440a      	add	r2, r1
 80011f6:	3ae8      	subs	r2, #232	; 0xe8
 80011f8:	e9c2 3400 	strd	r3, r4, [r2]
		d_gamma[i0 + 5] = 0.0;
 80011fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001200:	3305      	adds	r3, #5
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001208:	4413      	add	r3, r2
 800120a:	f1a3 02e8 	sub.w	r2, r3, #232	; 0xe8
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	f04f 0400 	mov.w	r4, #0
 8001216:	e9c2 3400 	strd	r3, r4, [r2]
		d_gamma[i0 + 5] = c_gamma[i0] * 0.26 + d0 * 0.27;
 800121a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001224:	4413      	add	r3, r2
 8001226:	3b98      	subs	r3, #152	; 0x98
 8001228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800122c:	a3bb      	add	r3, pc, #748	; (adr r3, 800151c <MRAC+0x634>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7ff fa01 	bl	8000638 <__aeabi_dmul>
 8001236:	4603      	mov	r3, r0
 8001238:	460c      	mov	r4, r1
 800123a:	4698      	mov	r8, r3
 800123c:	46a1      	mov	r9, r4
 800123e:	a3b9      	add	r3, pc, #740	; (adr r3, 8001524 <MRAC+0x63c>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001248:	f7ff f9f6 	bl	8000638 <__aeabi_dmul>
 800124c:	4603      	mov	r3, r0
 800124e:	460c      	mov	r4, r1
 8001250:	4619      	mov	r1, r3
 8001252:	4622      	mov	r2, r4
 8001254:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001258:	1d5d      	adds	r5, r3, #5
 800125a:	4613      	mov	r3, r2
 800125c:	460a      	mov	r2, r1
 800125e:	4640      	mov	r0, r8
 8001260:	4649      	mov	r1, r9
 8001262:	f7ff f833 	bl	80002cc <__adddf3>
 8001266:	4603      	mov	r3, r0
 8001268:	460c      	mov	r4, r1
 800126a:	00ea      	lsls	r2, r5, #3
 800126c:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001270:	440a      	add	r2, r1
 8001272:	3ae8      	subs	r2, #232	; 0xe8
 8001274:	e9c2 3400 	strd	r3, r4, [r2]
	for (i0 = 0; i0 < 5; i0++) {
 8001278:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800127c:	3301      	adds	r3, #1
 800127e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001282:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001286:	2b04      	cmp	r3, #4
 8001288:	f77f af74 	ble.w	8001174 <MRAC+0x28c>
	}

	theta_idx_0 = theta_m - theta_r[0];
 800128c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001290:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001294:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001298:	461a      	mov	r2, r3
 800129a:	4623      	mov	r3, r4
 800129c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012a0:	f7ff f812 	bl	80002c8 <__aeabi_dsub>
 80012a4:	4603      	mov	r3, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	theta_idx_1 = theta_m_dot - theta_r[1];
 80012ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012b0:	3308      	adds	r3, #8
 80012b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012b6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80012ba:	461a      	mov	r2, r3
 80012bc:	4623      	mov	r3, r4
 80012be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012c2:	f7ff f801 	bl	80002c8 <__aeabi_dsub>
 80012c6:	4603      	mov	r3, r0
 80012c8:	460c      	mov	r4, r1
 80012ca:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	for (i0 = 0; i0 < 5; i0++) {
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80012d4:	e06a      	b.n	80013ac <MRAC+0x4c4>
		phi_k[i0] = 0.0;
 80012d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	f107 0220 	add.w	r2, r7, #32
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	441a      	add	r2, r3
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	f04f 0400 	mov.w	r4, #0
 80012ec:	e9c2 3400 	strd	r3, r4, [r2]
		d0 = d_gamma[i0] * theta_idx_0 + d_gamma[i0 + 5] * theta_idx_1;
 80012f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80012fa:	4413      	add	r3, r2
 80012fc:	3be8      	subs	r3, #232	; 0xe8
 80012fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001302:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001306:	f7ff f997 	bl	8000638 <__aeabi_dmul>
 800130a:	4603      	mov	r3, r0
 800130c:	460c      	mov	r4, r1
 800130e:	4625      	mov	r5, r4
 8001310:	461c      	mov	r4, r3
 8001312:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001316:	3305      	adds	r3, #5
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800131e:	4413      	add	r3, r2
 8001320:	3be8      	subs	r3, #232	; 0xe8
 8001322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001326:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800132a:	f7ff f985 	bl	8000638 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4620      	mov	r0, r4
 8001334:	4629      	mov	r1, r5
 8001336:	f7fe ffc9 	bl	80002cc <__adddf3>
 800133a:	4603      	mov	r3, r0
 800133c:	460c      	mov	r4, r1
 800133e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		phi_k[i0] = d0;
 8001342:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	f107 0220 	add.w	r2, r7, #32
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	441a      	add	r2, r3
 8001350:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8001354:	e9c2 3400 	strd	r3, r4, [r2]
		phi_k[i0] = phi_k_1[i0] + T * d0;
 8001358:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	4413      	add	r3, r2
 8001366:	e9d3 4500 	ldrd	r4, r5, [r3]
 800136a:	a360      	add	r3, pc, #384	; (adr r3, 80014ec <MRAC+0x604>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001374:	f7ff f960 	bl	8000638 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	f107 0220 	add.w	r2, r7, #32
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	18d6      	adds	r6, r2, r3
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7fe ff99 	bl	80002cc <__adddf3>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	e9c6 3400 	strd	r3, r4, [r6]
	for (i0 = 0; i0 < 5; i0++) {
 80013a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013a6:	3301      	adds	r3, #1
 80013a8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80013ac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	dd90      	ble.n	80012d6 <MRAC+0x3ee>

	/*  Appoximated parameters calculated from its derivative */
	/*  [L^T M Ks_hat Ds_hat] */
	/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
	/* %%%%%%%% Control Signal %%%%%%%%% */
	*V_control = Kv * ((((-phi_k[0] * theta_m + -phi_k[1] * theta_m_dot) + phi_k[2]
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013d2:	f7ff f931 	bl	8000638 <__aeabi_dmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	460c      	mov	r4, r1
 80013da:	461d      	mov	r5, r3
 80013dc:	4626      	mov	r6, r4
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3308      	adds	r3, #8
 80013e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013fe:	f7ff f91b 	bl	8000638 <__aeabi_dmul>
 8001402:	4603      	mov	r3, r0
 8001404:	460c      	mov	r4, r1
 8001406:	461a      	mov	r2, r3
 8001408:	4623      	mov	r3, r4
 800140a:	4628      	mov	r0, r5
 800140c:	4631      	mov	r1, r6
 800140e:	f7fe ff5d 	bl	80002cc <__adddf3>
 8001412:	4603      	mov	r3, r0
 8001414:	460c      	mov	r4, r1
 8001416:	4625      	mov	r5, r4
 8001418:	461c      	mov	r4, r3
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3310      	adds	r3, #16
 8001422:	e9d3 0100 	ldrd	r0, r1, [r3]
																				 * theta_m_d) - phi_k[3] * (1.0 / N) * theta_l) - phi_k[4]
 8001426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f903 	bl	8000638 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
	*V_control = Kv * ((((-phi_k[0] * theta_m + -phi_k[1] * theta_m_dot) + phi_k[2]
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7fe ff47 	bl	80002cc <__adddf3>
 800143e:	4603      	mov	r3, r0
 8001440:	460c      	mov	r4, r1
 8001442:	4625      	mov	r5, r4
 8001444:	461c      	mov	r4, r3
																				 * theta_m_d) - phi_k[3] * (1.0 / N) * theta_l) - phi_k[4]
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3318      	adds	r3, #24
 800144e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001452:	a336      	add	r3, pc, #216	; (adr r3, 800152c <MRAC+0x644>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f8ee 	bl	8000638 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001468:	f7ff f8e6 	bl	8000638 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f7fe ff28 	bl	80002c8 <__aeabi_dsub>
 8001478:	4603      	mov	r3, r0
 800147a:	460c      	mov	r4, r1
 800147c:	4625      	mov	r5, r4
 800147e:	461c      	mov	r4, r3
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3320      	adds	r3, #32
 8001488:	e9d3 0100 	ldrd	r0, r1, [r3]
																																		* (1.0 / N) * theta_l_dot);
 800148c:	a327      	add	r3, pc, #156	; (adr r3, 800152c <MRAC+0x644>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f8d1 	bl	8000638 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80014a2:	f7ff f8c9 	bl	8000638 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
																				 * theta_m_d) - phi_k[3] * (1.0 / N) * theta_l) - phi_k[4]
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe ff0b 	bl	80002c8 <__aeabi_dsub>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
	*V_control = Kv * ((((-phi_k[0] * theta_m + -phi_k[1] * theta_m_dot) + phi_k[2]
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MRAC+0x5f8>)
 80014c0:	f7ff f8ba 	bl	8000638 <__aeabi_dmul>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	e9c2 3400 	strd	r3, r4, [r2]

	/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
}
 80014d2:	bf00      	nop
 80014d4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80014d8:	46bd      	mov	sp, r7
 80014da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014de:	bf00      	nop
 80014e0:	40280000 	.word	0x40280000
 80014e4:	f5c28f5b 	.word	0xf5c28f5b
 80014e8:	3fff5c28 	.word	0x3fff5c28
 80014ec:	47ae147b 	.word	0x47ae147b
 80014f0:	3f847ae1 	.word	0x3f847ae1
 80014f4:	fcce1c58 	.word	0xfcce1c58
 80014f8:	bf600e6a 	.word	0xbf600e6a
 80014fc:	f9724745 	.word	0xf9724745
 8001500:	3fefe90f 	.word	0x3fefe90f
 8001504:	fcce1c58 	.word	0xfcce1c58
 8001508:	3f600e6a 	.word	0x3f600e6a
 800150c:	9999999a 	.word	0x9999999a
 8001510:	bfb99999 	.word	0xbfb99999
 8001514:	c28f5c29 	.word	0xc28f5c29
 8001518:	3ff428f5 	.word	0x3ff428f5
 800151c:	0a3d70a4 	.word	0x0a3d70a4
 8001520:	3fd0a3d7 	.word	0x3fd0a3d7
 8001524:	147ae148 	.word	0x147ae148
 8001528:	3fd147ae 	.word	0x3fd147ae
 800152c:	9999999a 	.word	0x9999999a
 8001530:	3fb99999 	.word	0x3fb99999

08001534 <InitController>:
 * @brief :
 * @param :
 * @return:
 */
void InitController()
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_MspInit+0x4c>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x4c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001582:	2007      	movs	r0, #7
 8001584:	f001 f904 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d10d      	bne.n	80015c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_TIM_PWM_MspInit+0x40>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_TIM_PWM_MspInit+0x40>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <HAL_TIM_PWM_MspInit+0x40>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40010000 	.word	0x40010000
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e8:	d115      	bne.n	8001616 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_TIM_Base_MspInit+0x48>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <HAL_TIM_Base_MspInit+0x48>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_TIM_Base_MspInit+0x48>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	201c      	movs	r0, #28
 800160c:	f001 f8cb 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001610:	201c      	movs	r0, #28
 8001612:	f001 f8e4 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a32      	ldr	r2, [pc, #200]	; (800170c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d12c      	bne.n	80016a0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a30      	ldr	r2, [pc, #192]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a29      	ldr	r2, [pc, #164]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800167e:	23c0      	movs	r3, #192	; 0xc0
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001686:	2301      	movs	r3, #1
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800168e:	2302      	movs	r3, #2
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	481e      	ldr	r0, [pc, #120]	; (8001714 <HAL_TIM_Encoder_MspInit+0xf0>)
 800169a:	f001 fc59 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800169e:	e030      	b.n	8001702 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_TIM_Encoder_MspInit+0xf4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d12b      	bne.n	8001702 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a17      	ldr	r2, [pc, #92]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_TIM_Encoder_MspInit+0xec>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e2:	23c0      	movs	r3, #192	; 0xc0
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016f2:	2302      	movs	r3, #2
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <HAL_TIM_Encoder_MspInit+0xf8>)
 80016fe:	f001 fc27 	bl	8002f50 <HAL_GPIO_Init>
}
 8001702:	bf00      	nop
 8001704:	3730      	adds	r7, #48	; 0x30
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40000400 	.word	0x40000400
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000
 8001718:	40000800 	.word	0x40000800
 800171c:	40020400 	.word	0x40020400

08001720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <HAL_TIM_MspPostInit+0x68>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d11e      	bne.n	8001780 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_TIM_MspPostInit+0x6c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_TIM_MspPostInit+0x6c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_TIM_MspPostInit+0x6c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800175e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001762:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001770:	2301      	movs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4619      	mov	r1, r3
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_TIM_MspPostInit+0x70>)
 800177c:	f001 fbe8 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40010000 	.word	0x40010000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000

08001794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a34      	ldr	r2, [pc, #208]	; (8001884 <HAL_UART_MspInit+0xf0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d161      	bne.n	800187a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b33      	ldr	r3, [pc, #204]	; (8001888 <HAL_UART_MspInit+0xf4>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a32      	ldr	r2, [pc, #200]	; (8001888 <HAL_UART_MspInit+0xf4>)
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b30      	ldr	r3, [pc, #192]	; (8001888 <HAL_UART_MspInit+0xf4>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <HAL_UART_MspInit+0xf4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a2b      	ldr	r2, [pc, #172]	; (8001888 <HAL_UART_MspInit+0xf4>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_UART_MspInit+0xf4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017ee:	230c      	movs	r3, #12
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fe:	2307      	movs	r3, #7
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4820      	ldr	r0, [pc, #128]	; (800188c <HAL_UART_MspInit+0xf8>)
 800180a:	f001 fba1 	bl	8002f50 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_UART_MspInit+0xfc>)
 8001810:	4a20      	ldr	r2, [pc, #128]	; (8001894 <HAL_UART_MspInit+0x100>)
 8001812:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_UART_MspInit+0xfc>)
 8001816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800181a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_UART_MspInit+0xfc>)
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_UART_MspInit+0xfc>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_UART_MspInit+0xfc>)
 800182a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_UART_MspInit+0xfc>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_UART_MspInit+0xfc>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_UART_MspInit+0xfc>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_UART_MspInit+0xfc>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_UART_MspInit+0xfc>)
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800184e:	4810      	ldr	r0, [pc, #64]	; (8001890 <HAL_UART_MspInit+0xfc>)
 8001850:	f000 ffe0 	bl	8002814 <HAL_DMA_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800185a:	f000 f8ef 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <HAL_UART_MspInit+0xfc>)
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
 8001864:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_UART_MspInit+0xfc>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	2026      	movs	r0, #38	; 0x26
 8001870:	f000 ff99 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001874:	2026      	movs	r0, #38	; 0x26
 8001876:	f000 ffb2 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40004400 	.word	0x40004400
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000
 8001890:	20000c44 	.word	0x20000c44
 8001894:	400260a0 	.word	0x400260a0

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 fe60 	bl	80025b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA1_Stream6_IRQHandler+0x10>)
 80018fa:	f001 f8b3 	bl	8002a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000c44 	.word	0x20000c44

08001908 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM2_IRQHandler+0x10>)
 800190e:	f003 fea8 	bl	8005662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000ce4 	.word	0x20000ce4

0800191c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <I2C1_EV_IRQHandler+0x10>)
 8001922:	f001 fcc0 	bl	80032a6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000bf0 	.word	0x20000bf0

08001930 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <USART2_IRQHandler+0x10>)
 8001936:	f004 fdef 	bl	8006518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000ca4 	.word	0x20000ca4

08001944 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <DMA1_Stream7_IRQHandler+0x10>)
 800194a:	f001 f88b 	bl	8002a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000b90 	.word	0x20000b90

08001958 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x50>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x16>
		heap_end = &end;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <_sbrk+0x50>)
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <_sbrk+0x54>)
 800196c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <_sbrk+0x50>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <_sbrk+0x50>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	466a      	mov	r2, sp
 800197e:	4293      	cmp	r3, r2
 8001980:	d907      	bls.n	8001992 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001982:	f005 fc1b 	bl	80071bc <__errno>
 8001986:	4602      	mov	r2, r0
 8001988:	230c      	movs	r3, #12
 800198a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
 8001990:	e006      	b.n	80019a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <_sbrk+0x50>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <_sbrk+0x50>)
 800199c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000a04 	.word	0x20000a04
 80019ac:	20000d38 	.word	0x20000d38

080019b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <SystemInit+0x28>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <SystemInit+0x28>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SystemInit+0x28>)
 80019c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ca:	609a      	str	r2, [r3, #8]
#endif
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019e2:	e003      	b.n	80019ec <LoopCopyDataInit>

080019e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ea:	3104      	adds	r1, #4

080019ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019ec:	480b      	ldr	r0, [pc, #44]	; (8001a1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019f4:	d3f6      	bcc.n	80019e4 <CopyDataInit>
  ldr  r2, =_sbss
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019f8:	e002      	b.n	8001a00 <LoopFillZerobss>

080019fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019fc:	f842 3b04 	str.w	r3, [r2], #4

08001a00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a04:	d3f9      	bcc.n	80019fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a06:	f7ff ffd3 	bl	80019b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f005 fbdd 	bl	80071c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0e:	f000 f80e 	bl	8001a2e <main>
  bx  lr    
 8001a12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a18:	0800a93c 	.word	0x0800a93c
  ldr  r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a20:	200009e8 	.word	0x200009e8
  ldr  r2, =_sbss
 8001a24:	200009e8 	.word	0x200009e8
  ldr  r3, = _ebss
 8001a28:	20000d38 	.word	0x20000d38

08001a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC_IRQHandler>

08001a2e <main>:
 * @brief :
 * @param :
 * @return:
 */
int main(void)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/
	InitSystem();
 8001a32:	f000 fb03 	bl	800203c <InitSystem>

	/* Infinite loop */
	while (1)
	{
		SystemStateMachineProcessing();
 8001a36:	f000 fb37 	bl	80020a8 <SystemStateMachineProcessing>
 8001a3a:	e7fc      	b.n	8001a36 <main+0x8>

08001a3c <Error_Handler>:
 * @brief :
 * @param : None
 * @return: None
 */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
	/* User can add his own implementation to report the HAL error return state */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <InitEncoder>:
 * @brief :
 * @param :
 * @return:
 */
void InitEncoder()
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 8001a50:	f000 f852 	bl	8001af8 <MX_TIM4_Init>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001a54:	213c      	movs	r1, #60	; 0x3c
 8001a56:	4802      	ldr	r0, [pc, #8]	; (8001a60 <InitEncoder+0x14>)
 8001a58:	f003 fdcc 	bl	80055f4 <HAL_TIM_Encoder_Start>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000a08 	.word	0x20000a08
 8001a64:	00000000 	.word	0x00000000

08001a68 <EncoderReadEncoder>:
 * @param velocity    : Current velocity (unit: radian/second)
 * @param samplingTime: Sampling time (unit: second)
 * @return: None
 */
void EncoderReadEncoder(double *position, double *velocity, double samplingTime)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	ed87 0b00 	vstr	d0, [r7]
	uint16_t currPulse;
	double encoderIncrement;

	currPulse = TIM4->CNT;
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <EncoderReadEncoder+0x88>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	83fb      	strh	r3, [r7, #30]
	encoderIncrement = (double)((currPulse - prevPulse)*ENC_RAD_PER_PULSE);
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001a82:	3b7f      	subs	r3, #127	; 0x7f
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd6d 	bl	8000564 <__aeabi_i2d>
 8001a8a:	a317      	add	r3, pc, #92	; (adr r3, 8001ae8 <EncoderReadEncoder+0x80>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fdd2 	bl	8000638 <__aeabi_dmul>
 8001a94:	4603      	mov	r3, r0
 8001a96:	460c      	mov	r4, r1
 8001a98:	e9c7 3404 	strd	r3, r4, [r7, #16]

	motorPosition += encoderIncrement;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <EncoderReadEncoder+0x8c>)
 8001a9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aa6:	f7fe fc11 	bl	80002cc <__adddf3>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <EncoderReadEncoder+0x8c>)
 8001ab0:	e9c2 3400 	strd	r3, r4, [r2]
	*position = motorPosition;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <EncoderReadEncoder+0x8c>)
 8001ab6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	e9c2 3400 	strd	r3, r4, [r2]
	*velocity = encoderIncrement/samplingTime;
 8001ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ac4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ac8:	f7fe fee0 	bl	800088c <__aeabi_ddiv>
 8001acc:	4603      	mov	r3, r0
 8001ace:	460c      	mov	r4, r1
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	e9c2 3400 	strd	r3, r4, [r2]

	/* Reset counter */
	TIM4->CNT = 32767;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <EncoderReadEncoder+0x88>)
 8001ad8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ade:	bf00      	nop
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd90      	pop	{r4, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	b68b71c3 	.word	0xb68b71c3
 8001aec:	3f59bc65 	.word	0x3f59bc65
 8001af0:	40000800 	.word	0x40000800
 8001af4:	20000a48 	.word	0x20000a48

08001af8 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static inline void MX_TIM4_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig = {0};
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f005 fb82 	bl	8007210 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <MX_TIM4_Init+0xa8>)
 8001b16:	4a23      	ldr	r2, [pc, #140]	; (8001ba4 <MX_TIM4_Init+0xac>)
 8001b18:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <MX_TIM4_Init+0xa8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <MX_TIM4_Init+0xa8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <MX_TIM4_Init+0xa8>)
 8001b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <MX_TIM4_Init+0xa8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_TIM4_Init+0xa8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b42:	2301      	movs	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b52:	2301      	movs	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	4619      	mov	r1, r3
 8001b64:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <MX_TIM4_Init+0xa8>)
 8001b66:	f003 fcb3 	bl	80054d0 <HAL_TIM_Encoder_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM4_Init+0x7c>
	{
		Error_Handler();
 8001b70:	f7ff ff64 	bl	8001a3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <MX_TIM4_Init+0xa8>)
 8001b82:	f004 fb2d 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM4_Init+0x98>
	{
		Error_Handler();
 8001b8c:	f7ff ff56 	bl	8001a3c <Error_Handler>
	}

	/* Reset Counter */
	TIM4->CNT = 32767;
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <MX_TIM4_Init+0xac>)
 8001b92:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b98:	bf00      	nop
 8001b9a:	3730      	adds	r7, #48	; 0x30
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000a08 	.word	0x20000a08
 8001ba4:	40000800 	.word	0x40000800

08001ba8 <InitLog>:
 * @brief :
 * @param :
 * @return:
 */
void InitLog()
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 8001bac:	f000 f87e 	bl	8001cac <MX_USART2_UART_Init>
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <LogPrint>:

void LogPrint(LOG_MESSAGE_TYPE_t messageType, const char *string,...)
{
 8001bb4:	b40e      	push	{r1, r2, r3}
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
	while(transmitInProgress);
 8001bc0:	bf00      	nop
 8001bc2:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <LogPrint+0xdc>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1fb      	bne.n	8001bc2 <LogPrint+0xe>

	uint8_t userStringStartPosition = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
	memset((void *) LogTxBuffer, 0, sizeof(LogTxBuffer));
 8001bce:	2264      	movs	r2, #100	; 0x64
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4830      	ldr	r0, [pc, #192]	; (8001c94 <LogPrint+0xe0>)
 8001bd4:	f005 fb1c 	bl	8007210 <memset>

	switch (messageType)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d836      	bhi.n	8001c4c <LogPrint+0x98>
 8001bde:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <LogPrint+0x30>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001bf5 	.word	0x08001bf5
 8001be8:	08001c09 	.word	0x08001c09
 8001bec:	08001c23 	.word	0x08001c23
 8001bf0:	08001c33 	.word	0x08001c33
	{
	case LOG_INFO:
		strncpy(LogTxBuffer, "INFO: ", 6);
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <LogPrint+0xe0>)
 8001bf6:	4a28      	ldr	r2, [pc, #160]	; (8001c98 <LogPrint+0xe4>)
 8001bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bfc:	6018      	str	r0, [r3, #0]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	8019      	strh	r1, [r3, #0]
		userStringStartPosition = 6;
 8001c02:	2306      	movs	r3, #6
 8001c04:	73fb      	strb	r3, [r7, #15]
		break;
 8001c06:	e022      	b.n	8001c4e <LogPrint+0x9a>
	case LOG_DEBUG:
		strncpy(LogTxBuffer, "DEBUG: ", 7);
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <LogPrint+0xe0>)
 8001c0a:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <LogPrint+0xe8>)
 8001c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c10:	6018      	str	r0, [r3, #0]
 8001c12:	3304      	adds	r3, #4
 8001c14:	8019      	strh	r1, [r3, #0]
 8001c16:	3302      	adds	r3, #2
 8001c18:	0c0a      	lsrs	r2, r1, #16
 8001c1a:	701a      	strb	r2, [r3, #0]
		userStringStartPosition = 7;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	73fb      	strb	r3, [r7, #15]
		break;
 8001c20:	e015      	b.n	8001c4e <LogPrint+0x9a>
	case LOG_WARNING:
		strncpy(LogTxBuffer, "WARNING: ", 9);
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <LogPrint+0xe0>)
 8001c24:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <LogPrint+0xec>)
 8001c26:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c28:	c303      	stmia	r3!, {r0, r1}
 8001c2a:	701a      	strb	r2, [r3, #0]
		userStringStartPosition = 9;
 8001c2c:	2309      	movs	r3, #9
 8001c2e:	73fb      	strb	r3, [r7, #15]
		break;
 8001c30:	e00d      	b.n	8001c4e <LogPrint+0x9a>
	case LOG_ERROR:
		strncpy(LogTxBuffer, "ERROR: ", 7);
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <LogPrint+0xe0>)
 8001c34:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <LogPrint+0xf0>)
 8001c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c3a:	6018      	str	r0, [r3, #0]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	8019      	strh	r1, [r3, #0]
 8001c40:	3302      	adds	r3, #2
 8001c42:	0c0a      	lsrs	r2, r1, #16
 8001c44:	701a      	strb	r2, [r3, #0]
		userStringStartPosition = 7;
 8001c46:	2307      	movs	r3, #7
 8001c48:	73fb      	strb	r3, [r7, #15]
		break;
 8001c4a:	e000      	b.n	8001c4e <LogPrint+0x9a>
	default:
		break;
 8001c4c:	bf00      	nop
	}

	va_list arg;

	va_start(arg, string);
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	60bb      	str	r3, [r7, #8]
	vsprintf((char *) (LogTxBuffer+userStringStartPosition), string, arg);
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <LogPrint+0xe0>)
 8001c58:	4413      	add	r3, r2
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	69f9      	ldr	r1, [r7, #28]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f005 faf4 	bl	800724c <vsprintf>
	va_end(arg);

	uint16_t len = strlen(LogTxBuffer);
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <LogPrint+0xe0>)
 8001c66:	f7fe fad3 	bl	8000210 <strlen>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)(LogTxBuffer), len);
 8001c6e:	89bb      	ldrh	r3, [r7, #12]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4908      	ldr	r1, [pc, #32]	; (8001c94 <LogPrint+0xe0>)
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <LogPrint+0xf4>)
 8001c76:	f004 fbe3 	bl	8006440 <HAL_UART_Transmit_DMA>

	transmitInProgress = true;
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <LogPrint+0xdc>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c8a:	b003      	add	sp, #12
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000a50 	.word	0x20000a50
 8001c94:	20000a54 	.word	0x20000a54
 8001c98:	0800a630 	.word	0x0800a630
 8001c9c:	0800a638 	.word	0x0800a638
 8001ca0:	0800a640 	.word	0x0800a640
 8001ca4:	0800a64c 	.word	0x0800a64c
 8001ca8:	20000ca4 	.word	0x20000ca4

08001cac <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static inline void MX_USART2_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <MX_USART2_UART_Init+0x50>)
 8001cb4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	f004 fb5e 	bl	80063a4 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001cee:	f7ff fea5 	bl	8001a3c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000ca4 	.word	0x20000ca4
 8001cfc:	40004400 	.word	0x40004400

08001d00 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	transmitInProgress = false;
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <HAL_UART_TxCpltCallback+0x1c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000a50 	.word	0x20000a50

08001d20 <InitMotorController>:
 * 			- ENC for encoder reading
 * @param : None
 * @return: None
 */
void InitMotorController()
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	/* Configure PWM for H-bridge controlling */
	MX_TIM1_Init();
 8001d24:	f000 f8ae 	bl	8001e84 <MX_TIM1_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <InitMotorController+0x20>)
 8001d2c:	f003 fb92 	bl	8005454 <HAL_TIM_PWM_Start>
	/* Configure ENC for encoder reading */
	MX_TIM3_Init();
 8001d30:	f000 f92c 	bl	8001f8c <MX_TIM3_Init>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001d34:	213c      	movs	r1, #60	; 0x3c
 8001d36:	4803      	ldr	r0, [pc, #12]	; (8001d44 <InitMotorController+0x24>)
 8001d38:	f003 fc5c 	bl	80055f4 <HAL_TIM_Encoder_Start>
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000ab8 	.word	0x20000ab8
 8001d44:	20000af8 	.word	0x20000af8

08001d48 <MotorSetDutyCycle>:

void MotorSetDutyCycle(float dutyCycle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(dutyCycle > 1)
 8001d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	dd03      	ble.n	8001d6c <MotorSetDutyCycle+0x24>
		dutyCycle = 1;
 8001d64:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	e009      	b.n	8001d80 <MotorSetDutyCycle+0x38>
	else if (dutyCycle < 0)
 8001d6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	d502      	bpl.n	8001d80 <MotorSetDutyCycle+0x38>
		dutyCycle = 0;
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]

	uint16_t counterValue = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	84fb      	strh	r3, [r7, #38]	; 0x26
	counterValue = (uint16_t)(dutyCycle*TIM_PWM_CCR_COUNTER-1);
 8001d84:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d88:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001dd0 <MotorSetDutyCycle+0x88>
 8001d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d9c:	ee17 3a90 	vmov	r3, s15
 8001da0:	84fb      	strh	r3, [r7, #38]	; 0x26

	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da2:	2360      	movs	r3, #96	; 0x60
 8001da4:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = counterValue;
 8001da6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001da8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	2200      	movs	r2, #0
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <MotorSetDutyCycle+0x8c>)
 8001dbc:	f003 fd5a 	bl	8005874 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <MotorSetDutyCycle+0x8c>)
 8001dc4:	f003 fb46 	bl	8005454 <HAL_TIM_PWM_Start>
}
 8001dc8:	bf00      	nop
 8001dca:	3728      	adds	r7, #40	; 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	43c80000 	.word	0x43c80000
 8001dd4:	20000ab8 	.word	0x20000ab8

08001dd8 <MotorReadEncoder>:
 * @param velocity    : Current velocity (unit: radian/second)
 * @param samplingTime: Sampling time (unit: second)
 * @return: None
 */
void MotorReadEncoder(double *position, double *velocity, double samplingTime)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	ed87 0b00 	vstr	d0, [r7]
	uint16_t currPulse;
	double encoderIncrement;

	currPulse = TIM3->CNT;
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <MotorReadEncoder+0xa0>)
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	83fb      	strh	r3, [r7, #30]
	encoderIncrement = (double)((currPulse - prevPulse)*ENC_RAD_PER_PULSE);
 8001dec:	8bfb      	ldrh	r3, [r7, #30]
 8001dee:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001df2:	3b7f      	subs	r3, #127	; 0x7f
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fbb5 	bl	8000564 <__aeabi_i2d>
 8001dfa:	a31d      	add	r3, pc, #116	; (adr r3, 8001e70 <MotorReadEncoder+0x98>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fc1a 	bl	8000638 <__aeabi_dmul>
 8001e04:	4603      	mov	r3, r0
 8001e06:	460c      	mov	r4, r1
 8001e08:	e9c7 3404 	strd	r3, r4, [r7, #16]
	encoderIncrement /= MOTOR_GEAR_REDUCTION_RATIO;
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <MotorReadEncoder+0xa4>)
 8001e12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e16:	f7fe fd39 	bl	800088c <__aeabi_ddiv>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	e9c7 3404 	strd	r3, r4, [r7, #16]

	motorPosition += encoderIncrement;
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <MotorReadEncoder+0xa8>)
 8001e24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e2c:	f7fe fa4e 	bl	80002cc <__adddf3>
 8001e30:	4603      	mov	r3, r0
 8001e32:	460c      	mov	r4, r1
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <MotorReadEncoder+0xa8>)
 8001e36:	e9c2 3400 	strd	r3, r4, [r2]
	*position = motorPosition;
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MotorReadEncoder+0xa8>)
 8001e3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	e9c2 3400 	strd	r3, r4, [r2]
	*velocity = encoderIncrement/samplingTime;
 8001e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e4e:	f7fe fd1d 	bl	800088c <__aeabi_ddiv>
 8001e52:	4603      	mov	r3, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	e9c2 3400 	strd	r3, r4, [r2]

	/* Reset counter */
	TIM3->CNT = prevPulse;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MotorReadEncoder+0xa0>)
 8001e5e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e64:	bf00      	nop
 8001e66:	3724      	adds	r7, #36	; 0x24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd90      	pop	{r4, r7, pc}
 8001e6c:	f3af 8000 	nop.w
 8001e70:	b68b71c3 	.word	0xb68b71c3
 8001e74:	3f59bc65 	.word	0x3f59bc65
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	403b0000 	.word	0x403b0000
 8001e80:	20000b38 	.word	0x20000b38

08001e84 <MX_TIM1_Init>:
 * @brief : TIM1 Initialization Function
 * @param : None
 * @return: None
 */
static inline void MX_TIM1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b092      	sub	sp, #72	; 0x48
 8001e88:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
 8001ea4:	615a      	str	r2, [r3, #20]
 8001ea6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	2220      	movs	r2, #32
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f005 f9ae 	bl	8007210 <memset>

	htim1.Instance = TIM1;
 8001eb4:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001eb6:	4a34      	ldr	r2, [pc, #208]	; (8001f88 <MX_TIM1_Init+0x104>)
 8001eb8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = TIM_PWM_PRESCALER-1;
 8001eba:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001ebc:	2211      	movs	r2, #17
 8001ebe:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = TIM_PWM_CCR_COUNTER-1;
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001ec8:	f240 128f 	movw	r2, #399	; 0x18f
 8001ecc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ece:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ee0:	4828      	ldr	r0, [pc, #160]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001ee2:	f003 fa8c 	bl	80053fe <HAL_TIM_PWM_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM1_Init+0x6c>
	{
		Error_Handler();
 8001eec:	f7ff fda6 	bl	8001a3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001efc:	4619      	mov	r1, r3
 8001efe:	4821      	ldr	r0, [pc, #132]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001f00:	f004 f96e 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM1_Init+0x8a>
	{
		Error_Handler();
 8001f0a:	f7ff fd97 	bl	8001a3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0e:	2360      	movs	r3, #96	; 0x60
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = TIM_PWM_CCR_COUNTER*0.5-1;
 8001f12:	23c7      	movs	r3, #199	; 0xc7
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4619      	mov	r1, r3
 8001f32:	4814      	ldr	r0, [pc, #80]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001f34:	f003 fc9e 	bl	8005874 <HAL_TIM_PWM_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM1_Init+0xbe>
	{
		Error_Handler();
 8001f3e:	f7ff fd7d 	bl	8001a3c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f5a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001f66:	f004 f9b7 	bl	80062d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM1_Init+0xf0>
	{
		Error_Handler();
 8001f70:	f7ff fd64 	bl	8001a3c <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim1);
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <MX_TIM1_Init+0x100>)
 8001f76:	f7ff fbd3 	bl	8001720 <HAL_TIM_MspPostInit>

}
 8001f7a:	bf00      	nop
 8001f7c:	3748      	adds	r7, #72	; 0x48
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000ab8 	.word	0x20000ab8
 8001f88:	40010000 	.word	0x40010000

08001f8c <MX_TIM3_Init>:
 * @brief : TIM3 Initialization Function
 * @param : None
 * @return: None
 */
static inline void MX_TIM3_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig = {0};
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	2224      	movs	r2, #36	; 0x24
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f005 f938 	bl	8007210 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]

	htim3.Instance = TIM3;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <MX_TIM3_Init+0xa8>)
 8001faa:	4a23      	ldr	r2, [pc, #140]	; (8002038 <MX_TIM3_Init+0xac>)
 8001fac:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001fae:	4b21      	ldr	r3, [pc, #132]	; (8002034 <MX_TIM3_Init+0xa8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <MX_TIM3_Init+0xa8>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001fba:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <MX_TIM3_Init+0xa8>)
 8001fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <MX_TIM3_Init+0xa8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <MX_TIM3_Init+0xa8>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480e      	ldr	r0, [pc, #56]	; (8002034 <MX_TIM3_Init+0xa8>)
 8001ffa:	f003 fa69 	bl	80054d0 <HAL_TIM_Encoder_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 8002004:	f7ff fd1a 	bl	8001a3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4619      	mov	r1, r3
 8002014:	4807      	ldr	r0, [pc, #28]	; (8002034 <MX_TIM3_Init+0xa8>)
 8002016:	f004 f8e3 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 8002020:	f7ff fd0c 	bl	8001a3c <Error_Handler>
	}

	/* Reset Counter */
	TIM3->CNT = 32767;
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <MX_TIM3_Init+0xac>)
 8002026:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800202c:	bf00      	nop
 800202e:	3730      	adds	r7, #48	; 0x30
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000af8 	.word	0x20000af8
 8002038:	40000400 	.word	0x40000400

0800203c <InitSystem>:
 * @brief : Configure essential peripherals
 * @param :
 * @return:
 */
void InitSystem()
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002040:	f000 fa64 	bl	800250c <HAL_Init>

	/* Configure the system clock */
	SystemClockConfig();
 8002044:	f000 f8c4 	bl	80021d0 <SystemClockConfig>

	/* Configure GPIO */
	InitSystemGPIO();
 8002048:	f000 f8bc 	bl	80021c4 <InitSystemGPIO>

	/* Configure DMA */
	InitSystemDMA();
 800204c:	f000 f8b4 	bl	80021b8 <InitSystemDMA>

	/* Configure logger for outputting data */
	InitLog();
 8002050:	f7ff fdaa 	bl	8001ba8 <InitLog>
	LogPrint(LOG_INFO, "Configuring!\n");
 8002054:	490f      	ldr	r1, [pc, #60]	; (8002094 <InitSystem+0x58>)
 8002056:	2000      	movs	r0, #0
 8002058:	f7ff fdac 	bl	8001bb4 <LogPrint>

	/* Configure system timer */
	InitSystemTimer();
 800205c:	f000 f8a6 	bl	80021ac <InitSystemTimer>

	/* Configure the motor controller's essential peripherals */
	InitMotorController();
 8002060:	f7ff fe5e 	bl	8001d20 <InitMotorController>
	MotorSetDirection(MOTOR_DIR_POSITIVE);
 8002064:	2200      	movs	r2, #0
 8002066:	2120      	movs	r1, #32
 8002068:	480b      	ldr	r0, [pc, #44]	; (8002098 <InitSystem+0x5c>)
 800206a:	f001 f903 	bl	8003274 <HAL_GPIO_WritePin>
	MotorSetDutyCycle(0); // min: 0.16
 800206e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800209c <InitSystem+0x60>
 8002072:	f7ff fe69 	bl	8001d48 <MotorSetDutyCycle>

	/* Configure controller */
	InitController();
 8002076:	f7ff fa5d 	bl	8001534 <InitController>

	/* Configure encoder */
	InitEncoder();
 800207a:	f7ff fce7 	bl	8001a4c <InitEncoder>

	/* Configure EEPROM module */
//	InitEEPROM();

	/* Start system timer */
	SystemStartTimer();
 800207e:	f000 f941 	bl	8002304 <SystemStartTimer>

	LogPrint(LOG_INFO, "Done, ready to run.....\n");
 8002082:	4907      	ldr	r1, [pc, #28]	; (80020a0 <InitSystem+0x64>)
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff fd95 	bl	8001bb4 <LogPrint>
	systemState = SYSTEM_STATE_RUN;
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <InitSystem+0x68>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	0800a654 	.word	0x0800a654
 8002098:	40020000 	.word	0x40020000
 800209c:	00000000 	.word	0x00000000
 80020a0:	0800a664 	.word	0x0800a664
 80020a4:	20000b41 	.word	0x20000b41

080020a8 <SystemStateMachineProcessing>:

void SystemStateMachineProcessing()
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b09d      	sub	sp, #116	; 0x74
 80020ac:	af02      	add	r7, sp, #8
	switch (systemState) {
 80020ae:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <SystemStateMachineProcessing+0xf0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d061      	beq.n	800217a <SystemStateMachineProcessing+0xd2>
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d000      	beq.n	80020bc <SystemStateMachineProcessing+0x14>
				/* Clear flag */
				systemFlags.System_Flags_storeParamters = false;
			}
			break;
		default:
			break;
 80020ba:	e061      	b.n	8002180 <SystemStateMachineProcessing+0xd8>
			if(systemFlags.System_Flags_runAlgorithm)
 80020bc:	4b37      	ldr	r3, [pc, #220]	; (800219c <SystemStateMachineProcessing+0xf4>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d04a      	beq.n	8002160 <SystemStateMachineProcessing+0xb8>
				systemFlags.System_Flags_runAlgorithm = false;
 80020ca:	4a34      	ldr	r2, [pc, #208]	; (800219c <SystemStateMachineProcessing+0xf4>)
 80020cc:	7813      	ldrb	r3, [r2, #0]
 80020ce:	f36f 0300 	bfc	r3, #0, #1
 80020d2:	7013      	strb	r3, [r2, #0]
				MotorReadEncoder(&motorAngle, &motorVelocity, CONTROLLER_SAMPLING_TIME_SEC);
 80020d4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80020d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020dc:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8002188 <SystemStateMachineProcessing+0xe0>
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fe78 	bl	8001dd8 <MotorReadEncoder>
				EncoderReadEncoder(&loadAngle, &loadVelocity, CONTROLLER_SAMPLING_TIME_SEC);
 80020e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80020ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020f0:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8002188 <SystemStateMachineProcessing+0xe0>
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fcb6 	bl	8001a68 <EncoderReadEncoder>
				LogPrint(LOG_DEBUG, "motor: %f\tload: %f\n", motorAngle, loadAngle);
 80020fc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002100:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002104:	e9cd 3400 	strd	r3, r4, [sp]
 8002108:	4613      	mov	r3, r2
 800210a:	460a      	mov	r2, r1
 800210c:	4924      	ldr	r1, [pc, #144]	; (80021a0 <SystemStateMachineProcessing+0xf8>)
 800210e:	2001      	movs	r0, #1
 8002110:	f7ff fd50 	bl	8001bb4 <LogPrint>
				currMotorDesiredAngle = 2*3.14;
 8002114:	a41e      	add	r4, pc, #120	; (adr r4, 8002190 <SystemStateMachineProcessing+0xe8>)
 8002116:	e9d4 3400 	ldrd	r3, r4, [r4]
 800211a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
				MRAC(loadAngle, loadVelocity, motorAngle, motorVelocity, currMotorDesiredAngle, prevParameter, prevReferenceModel,
 800211e:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002122:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8002126:	ed97 5b16 	vldr	d5, [r7, #88]	; 0x58
 800212a:	ed97 3b14 	vldr	d3, [r7, #80]	; 0x50
 800212e:	4639      	mov	r1, r7
 8002130:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	460b      	mov	r3, r1
 800213c:	4919      	ldr	r1, [pc, #100]	; (80021a4 <SystemStateMachineProcessing+0xfc>)
 800213e:	481a      	ldr	r0, [pc, #104]	; (80021a8 <SystemStateMachineProcessing+0x100>)
 8002140:	ed97 4b18 	vldr	d4, [r7, #96]	; 0x60
 8002144:	eeb0 2a45 	vmov.f32	s4, s10
 8002148:	eef0 2a65 	vmov.f32	s5, s11
 800214c:	eeb0 1a46 	vmov.f32	s2, s12
 8002150:	eef0 1a66 	vmov.f32	s3, s13
 8002154:	eeb0 0a47 	vmov.f32	s0, s14
 8002158:	eef0 0a67 	vmov.f32	s1, s15
 800215c:	f7fe fec4 	bl	8000ee8 <MRAC>
			if(systemFlags.System_Flags_storeParamters)
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <SystemStateMachineProcessing+0xf4>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <SystemStateMachineProcessing+0xd6>
				systemFlags.System_Flags_storeParamters = false;
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <SystemStateMachineProcessing+0xf4>)
 8002170:	7813      	ldrb	r3, [r2, #0]
 8002172:	f36f 0341 	bfc	r3, #1, #1
 8002176:	7013      	strb	r3, [r2, #0]
			break;
 8002178:	e001      	b.n	800217e <SystemStateMachineProcessing+0xd6>
			break;
 800217a:	bf00      	nop
 800217c:	e000      	b.n	8002180 <SystemStateMachineProcessing+0xd8>
			break;
 800217e:	bf00      	nop
	}
}
 8002180:	bf00      	nop
 8002182:	376c      	adds	r7, #108	; 0x6c
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}
 8002188:	47ae147b 	.word	0x47ae147b
 800218c:	3f847ae1 	.word	0x3f847ae1
 8002190:	51eb851f 	.word	0x51eb851f
 8002194:	40191eb8 	.word	0x40191eb8
 8002198:	20000b41 	.word	0x20000b41
 800219c:	20000b40 	.word	0x20000b40
 80021a0:	0800a680 	.word	0x0800a680
 80021a4:	20000b48 	.word	0x20000b48
 80021a8:	20000008 	.word	0x20000008

080021ac <InitSystemTimer>:
 * @brief : System timer configuration
 * @param : None
 * @return: None
 */
static inline void InitSystemTimer()
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 80021b0:	f000 f8b2 	bl	8002318 <MX_TIM2_Init>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <InitSystemDMA>:

static inline void InitSystemDMA()
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	MX_DMA_Init();
 80021bc:	f000 f87a 	bl	80022b4 <MX_DMA_Init>
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <InitSystemGPIO>:

static inline void InitSystemGPIO()
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80021c8:	f000 f8f2 	bl	80023b0 <MX_GPIO_Init>
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <SystemClockConfig>:
 * @brief : System Clock Configuration
 * @param : None
 * @return: None
 */
void SystemClockConfig()
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b094      	sub	sp, #80	; 0x50
 80021d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	2234      	movs	r2, #52	; 0x34
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f005 f816 	bl	8007210 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e4:	f107 0308 	add.w	r3, r7, #8
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <SystemClockConfig+0xdc>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	4a2b      	ldr	r2, [pc, #172]	; (80022ac <SystemClockConfig+0xdc>)
 80021fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002202:	6413      	str	r3, [r2, #64]	; 0x40
 8002204:	4b29      	ldr	r3, [pc, #164]	; (80022ac <SystemClockConfig+0xdc>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002210:	2300      	movs	r3, #0
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <SystemClockConfig+0xe0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a25      	ldr	r2, [pc, #148]	; (80022b0 <SystemClockConfig+0xe0>)
 800221a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <SystemClockConfig+0xe0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800222c:	2302      	movs	r3, #2
 800222e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002230:	2301      	movs	r3, #1
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002234:	2310      	movs	r3, #16
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002238:	2302      	movs	r3, #2
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800223c:	2300      	movs	r3, #0
 800223e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002240:	2308      	movs	r3, #8
 8002242:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002244:	23b4      	movs	r3, #180	; 0xb4
 8002246:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002248:	2302      	movs	r3, #2
 800224a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800224c:	2302      	movs	r3, #2
 800224e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002250:	2302      	movs	r3, #2
 8002252:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fe27 	bl	8004eac <HAL_RCC_OscConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <SystemClockConfig+0x98>
	{
		Error_Handler();
 8002264:	f7ff fbea 	bl	8001a3c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002268:	f002 fb16 	bl	8004898 <HAL_PWREx_EnableOverDrive>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClockConfig+0xa6>
	{
		Error_Handler();
 8002272:	f7ff fbe3 	bl	8001a3c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002276:	230f      	movs	r3, #15
 8002278:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227a:	2302      	movs	r3, #2
 800227c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002282:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002286:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	2105      	movs	r1, #5
 8002294:	4618      	mov	r0, r3
 8002296:	f002 fb4f 	bl	8004938 <HAL_RCC_ClockConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <SystemClockConfig+0xd4>
	{
		Error_Handler();
 80022a0:	f7ff fbcc 	bl	8001a3c <Error_Handler>
	}
}
 80022a4:	bf00      	nop
 80022a6:	3750      	adds	r7, #80	; 0x50
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40007000 	.word	0x40007000

080022b4 <MX_DMA_Init>:
 * @brief : Enable DMA controller clock
 * @param : None
 * @return: None
 */
static inline void MX_DMA_Init()
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <MX_DMA_Init+0x4c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <MX_DMA_Init+0x4c>)
 80022c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <MX_DMA_Init+0x4c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	2011      	movs	r0, #17
 80022dc:	f000 fa63 	bl	80027a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80022e0:	2011      	movs	r0, #17
 80022e2:	f000 fa7c 	bl	80027de <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	202f      	movs	r0, #47	; 0x2f
 80022ec:	f000 fa5b 	bl	80027a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80022f0:	202f      	movs	r0, #47	; 0x2f
 80022f2:	f000 fa74 	bl	80027de <HAL_NVIC_EnableIRQ>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800

08002304 <SystemStartTimer>:
 * @brief : Start system 1ms timer
 * @param : None
 * @return: None
 */
static inline void SystemStartTimer()
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <SystemStartTimer+0x10>)
 800230a:	f003 f854 	bl	80053b6 <HAL_TIM_Base_Start_IT>
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000ce4 	.word	0x20000ce4

08002318 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static inline void MX_TIM2_Init()
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231e:	f107 0308 	add.w	r3, r7, #8
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232c:	463b      	mov	r3, r7
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]

	htim2.Instance = TIM2;
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <MX_TIM2_Init+0x94>)
 8002336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800233a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9000-1;
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <MX_TIM2_Init+0x94>)
 800233e:	f242 3227 	movw	r2, #8999	; 0x2327
 8002342:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <MX_TIM2_Init+0x94>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10-1;
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <MX_TIM2_Init+0x94>)
 800234c:	2209      	movs	r2, #9
 800234e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <MX_TIM2_Init+0x94>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <MX_TIM2_Init+0x94>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800235c:	4813      	ldr	r0, [pc, #76]	; (80023ac <MX_TIM2_Init+0x94>)
 800235e:	f002 ffff 	bl	8005360 <HAL_TIM_Base_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8002368:	f7ff fb68 	bl	8001a3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002370:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002372:	f107 0308 	add.w	r3, r7, #8
 8002376:	4619      	mov	r1, r3
 8002378:	480c      	ldr	r0, [pc, #48]	; (80023ac <MX_TIM2_Init+0x94>)
 800237a:	f003 fb41 	bl	8005a00 <HAL_TIM_ConfigClockSource>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8002384:	f7ff fb5a 	bl	8001a3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002390:	463b      	mov	r3, r7
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_TIM2_Init+0x94>)
 8002396:	f003 ff23 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 80023a0:	f7ff fb4c 	bl	8001a3c <Error_Handler>
	}
}
 80023a4:	bf00      	nop
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000ce4 	.word	0x20000ce4

080023b0 <MX_GPIO_Init>:
 * @brief : GPIO Initialization Function
 * @param : None
 * @return: None
 */
static inline void MX_GPIO_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	60da      	str	r2, [r3, #12]
 80023c4:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <MX_GPIO_Init+0xd0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a2c      	ldr	r2, [pc, #176]	; (8002480 <MX_GPIO_Init+0xd0>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <MX_GPIO_Init+0xd0>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <MX_GPIO_Init+0xd0>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a25      	ldr	r2, [pc, #148]	; (8002480 <MX_GPIO_Init+0xd0>)
 80023ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b23      	ldr	r3, [pc, #140]	; (8002480 <MX_GPIO_Init+0xd0>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <MX_GPIO_Init+0xd0>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <MX_GPIO_Init+0xd0>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <MX_GPIO_Init+0xd0>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_GPIO_Init+0xd0>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a17      	ldr	r2, [pc, #92]	; (8002480 <MX_GPIO_Init+0xd0>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_GPIO_Init+0xd0>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8002436:	2200      	movs	r2, #0
 8002438:	2120      	movs	r1, #32
 800243a:	4812      	ldr	r0, [pc, #72]	; (8002484 <MX_GPIO_Init+0xd4>)
 800243c:	f000 ff1a 	bl	8003274 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 8002440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002444:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <MX_GPIO_Init+0xd8>)
 8002448:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4619      	mov	r1, r3
 8002454:	480d      	ldr	r0, [pc, #52]	; (800248c <MX_GPIO_Init+0xdc>)
 8002456:	f000 fd7b 	bl	8002f50 <HAL_GPIO_Init>

	  /*Configure GPIO pin : DIR_Pin */
	  GPIO_InitStruct.Pin = DIR_Pin;
 800245a:	2320      	movs	r3, #32
 800245c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245e:	2301      	movs	r3, #1
 8002460:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	4804      	ldr	r0, [pc, #16]	; (8002484 <MX_GPIO_Init+0xd4>)
 8002472:	f000 fd6d 	bl	8002f50 <HAL_GPIO_Init>
}
 8002476:	bf00      	nop
 8002478:	3728      	adds	r7, #40	; 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40020000 	.word	0x40020000
 8002488:	10210000 	.word	0x10210000
 800248c:	40020800 	.word	0x40020800

08002490 <HAL_TIM_PeriodElapsedCallback>:
  * @brief : Period elapsed callback in non blocking mode
  * @param htim: TIM handle
  * @return: None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	static uint32_t timerCount = 0;
    if (htim->Instance == htim2.Instance)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d124      	bne.n	80024ee <HAL_TIM_PeriodElapsedCallback+0x5e>
    {
    	timerCount++;
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	4a15      	ldr	r2, [pc, #84]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024ac:	6013      	str	r3, [r2, #0]
    	/* 10ms */
    	if(timerCount%CONTROLLER_SAMPLING_TIME_MSEC == 0)
 80024ae:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024b0:	6819      	ldr	r1, [r3, #0]
 80024b2:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80024b4:	fba3 2301 	umull	r2, r3, r3, r1
 80024b8:	08da      	lsrs	r2, r3, #3
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	1aca      	subs	r2, r1, r3
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d104      	bne.n	80024d2 <HAL_TIM_PeriodElapsedCallback+0x42>
    	{
    		systemFlags.System_Flags_runAlgorithm = true;
 80024c8:	4a0f      	ldr	r2, [pc, #60]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80024ca:	7813      	ldrb	r3, [r2, #0]
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	7013      	strb	r3, [r2, #0]
    	}

    	/* 60s */
    	if(timerCount >= 60000)
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80024da:	4293      	cmp	r3, r2
 80024dc:	d907      	bls.n	80024ee <HAL_TIM_PeriodElapsedCallback+0x5e>
    	{
    		timerCount = 0;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
    		systemFlags.System_Flags_storeParamters = true;
 80024e4:	4a08      	ldr	r2, [pc, #32]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80024e6:	7813      	ldrb	r3, [r2, #0]
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	7013      	strb	r3, [r2, #0]
    	}
    }
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000ce4 	.word	0x20000ce4
 8002500:	20000b58 	.word	0x20000b58
 8002504:	cccccccd 	.word	0xcccccccd
 8002508:	20000b40 	.word	0x20000b40

0800250c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0d      	ldr	r2, [pc, #52]	; (800254c <HAL_Init+0x40>)
 8002516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0a      	ldr	r2, [pc, #40]	; (800254c <HAL_Init+0x40>)
 8002522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002526:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <HAL_Init+0x40>)
 800252e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002532:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002534:	2003      	movs	r0, #3
 8002536:	f000 f92b 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800253a:	2000      	movs	r0, #0
 800253c:	f000 f808 	bl	8002550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002540:	f7ff f800 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023c00 	.word	0x40023c00

08002550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_InitTick+0x54>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_InitTick+0x58>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002566:	fbb3 f3f1 	udiv	r3, r3, r1
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f943 	bl	80027fa <HAL_SYSTICK_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00e      	b.n	800259c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d80a      	bhi.n	800259a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002584:	2200      	movs	r2, #0
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	f000 f90b 	bl	80027a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002590:	4a06      	ldr	r2, [pc, #24]	; (80025ac <HAL_InitTick+0x5c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000034 	.word	0x20000034
 80025ac:	20000030 	.word	0x20000030

080025b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_IncTick+0x20>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_IncTick+0x24>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <HAL_IncTick+0x24>)
 80025c2:	6013      	str	r3, [r2, #0]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000034 	.word	0x20000034
 80025d4:	20000d24 	.word	0x20000d24

080025d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_GetTick+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000d24 	.word	0x20000d24

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002622:	4a04      	ldr	r2, [pc, #16]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60d3      	str	r3, [r2, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0b      	blt.n	800267e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <__NVIC_EnableIRQ+0x38>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	; (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f7ff ff8e 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff29 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b8:	f7ff ff3e 	bl	8002638 <__NVIC_GetPriorityGrouping>
 80027bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff8e 	bl	80026e4 <NVIC_EncodePriority>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff5d 	bl	8002690 <__NVIC_SetPriority>
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff31 	bl	8002654 <__NVIC_EnableIRQ>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffa2 	bl	800274c <SysTick_Config>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff feda 	bl	80025d8 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e099      	b.n	8002964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002850:	e00f      	b.n	8002872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002852:	f7ff fec1 	bl	80025d8 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b05      	cmp	r3, #5
 800285e:	d908      	bls.n	8002872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2203      	movs	r2, #3
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e078      	b.n	8002964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1e8      	bne.n	8002852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4b38      	ldr	r3, [pc, #224]	; (800296c <HAL_DMA_Init+0x158>)
 800288c:	4013      	ands	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d107      	bne.n	80028dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	4313      	orrs	r3, r2
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f023 0307 	bic.w	r3, r3, #7
 80028f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	2b04      	cmp	r3, #4
 8002904:	d117      	bne.n	8002936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00e      	beq.n	8002936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fa9f 	bl	8002e5c <DMA_CheckFifoParam>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2240      	movs	r2, #64	; 0x40
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002932:	2301      	movs	r3, #1
 8002934:	e016      	b.n	8002964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa56 	bl	8002df0 <DMA_CalcBaseAndBitshift>
 8002944:	4603      	mov	r3, r0
 8002946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	223f      	movs	r2, #63	; 0x3f
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	f010803f 	.word	0xf010803f

08002970 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_DMA_Start_IT+0x26>
 8002992:	2302      	movs	r3, #2
 8002994:	e040      	b.n	8002a18 <HAL_DMA_Start_IT+0xa8>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d12f      	bne.n	8002a0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2202      	movs	r2, #2
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f9e8 	bl	8002d94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	223f      	movs	r2, #63	; 0x3f
 80029ca:	409a      	lsls	r2, r3
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0216 	orr.w	r2, r2, #22
 80029de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0208 	orr.w	r2, r2, #8
 80029f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e005      	b.n	8002a16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
 8002a14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d004      	beq.n	8002a3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2280      	movs	r2, #128	; 0x80
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00c      	b.n	8002a58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2205      	movs	r2, #5
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a70:	4b92      	ldr	r3, [pc, #584]	; (8002cbc <HAL_DMA_IRQHandler+0x258>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a92      	ldr	r2, [pc, #584]	; (8002cc0 <HAL_DMA_IRQHandler+0x25c>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0a9b      	lsrs	r3, r3, #10
 8002a7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	2208      	movs	r2, #8
 8002a90:	409a      	lsls	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01a      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0204 	bic.w	r2, r2, #4
 8002ab6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	2208      	movs	r2, #8
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d012      	beq.n	8002b06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af2:	2201      	movs	r2, #1
 8002af4:	409a      	lsls	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f043 0202 	orr.w	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d012      	beq.n	8002b3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00b      	beq.n	8002b3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	2204      	movs	r2, #4
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	f043 0204 	orr.w	r2, r3, #4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	2210      	movs	r2, #16
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d043      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d03c      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5e:	2210      	movs	r2, #16
 8002b60:	409a      	lsls	r2, r3
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d018      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d108      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d024      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
 8002b92:	e01f      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01b      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
 8002ba4:	e016      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0208 	bic.w	r2, r2, #8
 8002bc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	2220      	movs	r2, #32
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 808e 	beq.w	8002d02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8086 	beq.w	8002d02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d136      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0216 	bic.w	r2, r2, #22
 8002c1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <HAL_DMA_IRQHandler+0x1da>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0208 	bic.w	r2, r2, #8
 8002c4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	223f      	movs	r2, #63	; 0x3f
 8002c54:	409a      	lsls	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d07d      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
        }
        return;
 8002c7a:	e078      	b.n	8002d6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01c      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d108      	bne.n	8002caa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d030      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
 8002ca8:	e02b      	b.n	8002d02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d027      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
 8002cba:	e022      	b.n	8002d02 <HAL_DMA_IRQHandler+0x29e>
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10f      	bne.n	8002cf2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0210 	bic.w	r2, r2, #16
 8002ce0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d032      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d022      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2205      	movs	r2, #5
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0201 	bic.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	3301      	adds	r3, #1
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d307      	bcc.n	8002d4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f2      	bne.n	8002d2e <HAL_DMA_IRQHandler+0x2ca>
 8002d48:	e000      	b.n	8002d4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
 8002d6c:	e000      	b.n	8002d70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d6e:	bf00      	nop
    }
  }
}
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop

08002d78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d86:	b2db      	uxtb	r3, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002db0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d108      	bne.n	8002dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dd2:	e007      	b.n	8002de4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	60da      	str	r2, [r3, #12]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	3b10      	subs	r3, #16
 8002e00:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <DMA_CalcBaseAndBitshift+0x64>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <DMA_CalcBaseAndBitshift+0x68>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d909      	bls.n	8002e32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	1d1a      	adds	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e30:	e007      	b.n	8002e42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	aaaaaaab 	.word	0xaaaaaaab
 8002e58:	0800a6ac 	.word	0x0800a6ac

08002e5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11f      	bne.n	8002eb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d855      	bhi.n	8002f28 <DMA_CheckFifoParam+0xcc>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <DMA_CheckFifoParam+0x28>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002ea7 	.word	0x08002ea7
 8002e8c:	08002e95 	.word	0x08002e95
 8002e90:	08002f29 	.word	0x08002f29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d045      	beq.n	8002f2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea4:	e042      	b.n	8002f2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eae:	d13f      	bne.n	8002f30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb4:	e03c      	b.n	8002f30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebe:	d121      	bne.n	8002f04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d836      	bhi.n	8002f34 <DMA_CheckFifoParam+0xd8>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <DMA_CheckFifoParam+0x70>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	08002ee3 	.word	0x08002ee3
 8002ed4:	08002edd 	.word	0x08002edd
 8002ed8:	08002ef5 	.word	0x08002ef5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee0:	e02f      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d024      	beq.n	8002f38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef2:	e021      	b.n	8002f38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002efc:	d11e      	bne.n	8002f3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f02:	e01b      	b.n	8002f3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <DMA_CheckFifoParam+0xb4>
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d003      	beq.n	8002f16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f0e:	e018      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e015      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00e      	beq.n	8002f40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      break;
 8002f26:	e00b      	b.n	8002f40 <DMA_CheckFifoParam+0xe4>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e00a      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f2c:	bf00      	nop
 8002f2e:	e008      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f30:	bf00      	nop
 8002f32:	e006      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f34:	bf00      	nop
 8002f36:	e004      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f38:	bf00      	nop
 8002f3a:	e002      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;   
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f40:	bf00      	nop
    }
  } 
  
  return status; 
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e165      	b.n	8003238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	f040 8154 	bne.w	8003232 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d00b      	beq.n	8002faa <HAL_GPIO_Init+0x5a>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d007      	beq.n	8002faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f9e:	2b11      	cmp	r3, #17
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b12      	cmp	r3, #18
 8002fa8:	d130      	bne.n	800300c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 0201 	and.w	r2, r3, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0xfc>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b12      	cmp	r3, #18
 800304a:	d123      	bne.n	8003094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	220f      	movs	r2, #15
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	08da      	lsrs	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80ae 	beq.w	8003232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b5c      	ldr	r3, [pc, #368]	; (800324c <HAL_GPIO_Init+0x2fc>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	4a5b      	ldr	r2, [pc, #364]	; (800324c <HAL_GPIO_Init+0x2fc>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e4:	6453      	str	r3, [r2, #68]	; 0x44
 80030e6:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_GPIO_Init+0x2fc>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f2:	4a57      	ldr	r2, [pc, #348]	; (8003250 <HAL_GPIO_Init+0x300>)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4e      	ldr	r2, [pc, #312]	; (8003254 <HAL_GPIO_Init+0x304>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d025      	beq.n	800316a <HAL_GPIO_Init+0x21a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4d      	ldr	r2, [pc, #308]	; (8003258 <HAL_GPIO_Init+0x308>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01f      	beq.n	8003166 <HAL_GPIO_Init+0x216>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_GPIO_Init+0x30c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d019      	beq.n	8003162 <HAL_GPIO_Init+0x212>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4b      	ldr	r2, [pc, #300]	; (8003260 <HAL_GPIO_Init+0x310>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <HAL_GPIO_Init+0x20e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a4a      	ldr	r2, [pc, #296]	; (8003264 <HAL_GPIO_Init+0x314>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00d      	beq.n	800315a <HAL_GPIO_Init+0x20a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a49      	ldr	r2, [pc, #292]	; (8003268 <HAL_GPIO_Init+0x318>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d007      	beq.n	8003156 <HAL_GPIO_Init+0x206>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a48      	ldr	r2, [pc, #288]	; (800326c <HAL_GPIO_Init+0x31c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d101      	bne.n	8003152 <HAL_GPIO_Init+0x202>
 800314e:	2306      	movs	r3, #6
 8003150:	e00c      	b.n	800316c <HAL_GPIO_Init+0x21c>
 8003152:	2307      	movs	r3, #7
 8003154:	e00a      	b.n	800316c <HAL_GPIO_Init+0x21c>
 8003156:	2305      	movs	r3, #5
 8003158:	e008      	b.n	800316c <HAL_GPIO_Init+0x21c>
 800315a:	2304      	movs	r3, #4
 800315c:	e006      	b.n	800316c <HAL_GPIO_Init+0x21c>
 800315e:	2303      	movs	r3, #3
 8003160:	e004      	b.n	800316c <HAL_GPIO_Init+0x21c>
 8003162:	2302      	movs	r3, #2
 8003164:	e002      	b.n	800316c <HAL_GPIO_Init+0x21c>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_GPIO_Init+0x21c>
 800316a:	2300      	movs	r3, #0
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	f002 0203 	and.w	r2, r2, #3
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4093      	lsls	r3, r2
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800317c:	4934      	ldr	r1, [pc, #208]	; (8003250 <HAL_GPIO_Init+0x300>)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	089b      	lsrs	r3, r3, #2
 8003182:	3302      	adds	r3, #2
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800318a:	4b39      	ldr	r3, [pc, #228]	; (8003270 <HAL_GPIO_Init+0x320>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ae:	4a30      	ldr	r2, [pc, #192]	; (8003270 <HAL_GPIO_Init+0x320>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031b4:	4b2e      	ldr	r3, [pc, #184]	; (8003270 <HAL_GPIO_Init+0x320>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d8:	4a25      	ldr	r2, [pc, #148]	; (8003270 <HAL_GPIO_Init+0x320>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_GPIO_Init+0x320>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003202:	4a1b      	ldr	r2, [pc, #108]	; (8003270 <HAL_GPIO_Init+0x320>)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_GPIO_Init+0x320>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800322c:	4a10      	ldr	r2, [pc, #64]	; (8003270 <HAL_GPIO_Init+0x320>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3301      	adds	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b0f      	cmp	r3, #15
 800323c:	f67f ae96 	bls.w	8002f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003240:	bf00      	nop
 8003242:	3724      	adds	r7, #36	; 0x24
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40023800 	.word	0x40023800
 8003250:	40013800 	.word	0x40013800
 8003254:	40020000 	.word	0x40020000
 8003258:	40020400 	.word	0x40020400
 800325c:	40020800 	.word	0x40020800
 8003260:	40020c00 	.word	0x40020c00
 8003264:	40021000 	.word	0x40021000
 8003268:	40021400 	.word	0x40021400
 800326c:	40021800 	.word	0x40021800
 8003270:	40013c00 	.word	0x40013c00

08003274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
 8003280:	4613      	mov	r3, r2
 8003282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003284:	787b      	ldrb	r3, [r7, #1]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003290:	e003      	b.n	800329a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	041a      	lsls	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	619a      	str	r2, [r3, #24]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b088      	sub	sp, #32
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ce:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d003      	beq.n	80032de <HAL_I2C_EV_IRQHandler+0x38>
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	f040 80b6 	bne.w	800344a <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10d      	bne.n	8003314 <HAL_I2C_EV_IRQHandler+0x6e>
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80032fe:	d003      	beq.n	8003308 <HAL_I2C_EV_IRQHandler+0x62>
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003306:	d101      	bne.n	800330c <HAL_I2C_EV_IRQHandler+0x66>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_I2C_EV_IRQHandler+0x68>
 800330c:	2300      	movs	r3, #0
 800330e:	2b01      	cmp	r3, #1
 8003310:	f000 8127 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00c      	beq.n	8003338 <HAL_I2C_EV_IRQHandler+0x92>
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	0a5b      	lsrs	r3, r3, #9
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f001 fa99 	bl	8004862 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fc75 	bl	8003c20 <I2C_Master_SB>
 8003336:	e087      	b.n	8003448 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	08db      	lsrs	r3, r3, #3
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <HAL_I2C_EV_IRQHandler+0xb2>
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	0a5b      	lsrs	r3, r3, #9
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fceb 	bl	8003d2c <I2C_Master_ADD10>
 8003356:	e077      	b.n	8003448 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <HAL_I2C_EV_IRQHandler+0xd2>
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	0a5b      	lsrs	r3, r3, #9
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fd05 	bl	8003d80 <I2C_Master_ADDR>
 8003376:	e067      	b.n	8003448 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d030      	beq.n	80033e6 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800338e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003392:	f000 80e8 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	09db      	lsrs	r3, r3, #7
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00f      	beq.n	80033c2 <HAL_I2C_EV_IRQHandler+0x11c>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	0a9b      	lsrs	r3, r3, #10
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_I2C_EV_IRQHandler+0x11c>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f941 	bl	8003642 <I2C_MasterTransmit_TXE>
 80033c0:	e042      	b.n	8003448 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	089b      	lsrs	r3, r3, #2
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80cb 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2c0>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	0a5b      	lsrs	r3, r3, #9
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80c4 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f9cb 	bl	800377a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e4:	e0bf      	b.n	8003566 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f4:	f000 80b7 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00f      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x17e>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	0a9b      	lsrs	r3, r3, #10
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x17e>
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d103      	bne.n	8003424 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fa93 	bl	8003948 <I2C_MasterReceive_RXNE>
 8003422:	e011      	b.n	8003448 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 809a 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	0a5b      	lsrs	r3, r3, #9
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8093 	beq.w	8003566 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fb03 	bl	8003a4c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003446:	e08e      	b.n	8003566 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003448:	e08d      	b.n	8003566 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d004      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e007      	b.n	800346c <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x1f8>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	0a5b      	lsrs	r3, r3, #9
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003494:	69b9      	ldr	r1, [r7, #24]
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fec1 	bl	800421e <I2C_Slave_ADDR>
 800349c:	e066      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_I2C_EV_IRQHandler+0x218>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	0a5b      	lsrs	r3, r3, #9
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fef6 	bl	80042a8 <I2C_Slave_STOPF>
 80034bc:	e056      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034be:	7bbb      	ldrb	r3, [r7, #14]
 80034c0:	2b21      	cmp	r3, #33	; 0x21
 80034c2:	d002      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x224>
 80034c4:	7bbb      	ldrb	r3, [r7, #14]
 80034c6:	2b29      	cmp	r3, #41	; 0x29
 80034c8:	d125      	bne.n	8003516 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	09db      	lsrs	r3, r3, #7
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00f      	beq.n	80034f6 <HAL_I2C_EV_IRQHandler+0x250>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	0a9b      	lsrs	r3, r3, #10
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_I2C_EV_IRQHandler+0x250>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fdd7 	bl	80040a2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034f4:	e039      	b.n	800356a <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d033      	beq.n	800356a <HAL_I2C_EV_IRQHandler+0x2c4>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	0a5b      	lsrs	r3, r3, #9
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d02d      	beq.n	800356a <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fe04 	bl	800411c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003514:	e029      	b.n	800356a <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00f      	beq.n	8003542 <HAL_I2C_EV_IRQHandler+0x29c>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	0a9b      	lsrs	r3, r3, #10
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_I2C_EV_IRQHandler+0x29c>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fe0f 	bl	800415e <I2C_SlaveReceive_RXNE>
 8003540:	e014      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00e      	beq.n	800356c <HAL_I2C_EV_IRQHandler+0x2c6>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	0a5b      	lsrs	r3, r3, #9
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fe3d 	bl	80041da <I2C_SlaveReceive_BTF>
 8003560:	e004      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003562:	bf00      	nop
 8003564:	e002      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800356a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800356c:	3720      	adds	r7, #32
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	70fb      	strb	r3, [r7, #3]
 80035ce:	4613      	mov	r3, r2
 80035d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003658:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d150      	bne.n	800370a <I2C_MasterTransmit_TXE+0xc8>
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b21      	cmp	r3, #33	; 0x21
 800366c:	d14d      	bne.n	800370a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b08      	cmp	r3, #8
 8003672:	d01d      	beq.n	80036b0 <I2C_MasterTransmit_TXE+0x6e>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b20      	cmp	r3, #32
 8003678:	d01a      	beq.n	80036b0 <I2C_MasterTransmit_TXE+0x6e>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003680:	d016      	beq.n	80036b0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003690:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2211      	movs	r2, #17
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff ff62 	bl	8003572 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036ae:	e060      	b.n	8003772 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036be:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ce:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b40      	cmp	r3, #64	; 0x40
 80036e8:	d107      	bne.n	80036fa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ff7d 	bl	80035f2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036f8:	e03b      	b.n	8003772 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ff35 	bl	8003572 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003708:	e033      	b.n	8003772 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b21      	cmp	r3, #33	; 0x21
 800370e:	d005      	beq.n	800371c <I2C_MasterTransmit_TXE+0xda>
 8003710:	7bbb      	ldrb	r3, [r7, #14]
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d12d      	bne.n	8003772 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	2b22      	cmp	r3, #34	; 0x22
 800371a:	d12a      	bne.n	8003772 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d108      	bne.n	8003738 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003734:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003736:	e01c      	b.n	8003772 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d103      	bne.n	800374c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f898 	bl	800387a <I2C_MemoryTransmit_TXE_BTF>
}
 800374a:	e012      	b.n	8003772 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003770:	e7ff      	b.n	8003772 <I2C_MasterTransmit_TXE+0x130>
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b21      	cmp	r3, #33	; 0x21
 8003792:	d165      	bne.n	8003860 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d012      	beq.n	80037c4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	781a      	ldrb	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80037c2:	e056      	b.n	8003872 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d01d      	beq.n	8003806 <I2C_MasterTransmit_BTF+0x8c>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d01a      	beq.n	8003806 <I2C_MasterTransmit_BTF+0x8c>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037d6:	d016      	beq.n	8003806 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037e6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2211      	movs	r2, #17
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff feb7 	bl	8003572 <HAL_I2C_MasterTxCpltCallback>
}
 8003804:	e035      	b.n	8003872 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003814:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003824:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d107      	bne.n	8003850 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fed2 	bl	80035f2 <HAL_I2C_MemTxCpltCallback>
}
 800384e:	e010      	b.n	8003872 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fe8a 	bl	8003572 <HAL_I2C_MasterTxCpltCallback>
}
 800385e:	e008      	b.n	8003872 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b40      	cmp	r3, #64	; 0x40
 800386a:	d102      	bne.n	8003872 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f804 	bl	800387a <I2C_MemoryTransmit_TXE_BTF>
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003886:	2b00      	cmp	r3, #0
 8003888:	d11d      	bne.n	80038c6 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d10b      	bne.n	80038aa <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003896:	b2da      	uxtb	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a2:	1c9a      	adds	r2, r3, #2
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80038a8:	e048      	b.n	800393c <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	121b      	asrs	r3, r3, #8
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038c4:	e03a      	b.n	800393c <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10b      	bne.n	80038e6 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038e4:	e02a      	b.n	800393c <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d126      	bne.n	800393c <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b22      	cmp	r3, #34	; 0x22
 80038f8:	d108      	bne.n	800390c <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	e017      	b.n	800393c <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b21      	cmp	r3, #33	; 0x21
 8003916:	d111      	bne.n	800393c <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b22      	cmp	r3, #34	; 0x22
 800395a:	d173      	bne.n	8003a44 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d920      	bls.n	80039ac <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b03      	cmp	r3, #3
 8003998:	d154      	bne.n	8003a44 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80039aa:	e04b      	b.n	8003a44 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d047      	beq.n	8003a44 <I2C_MasterReceive_RXNE+0xfc>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d002      	beq.n	80039c0 <I2C_MasterReceive_RXNE+0x78>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d141      	bne.n	8003a44 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ce:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039de:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d10a      	bne.n	8003a30 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff fdec 	bl	8003606 <HAL_I2C_MemRxCpltCallback>
}
 8003a2e:	e009      	b.n	8003a44 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2212      	movs	r2, #18
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fda1 	bl	8003586 <HAL_I2C_MasterRxCpltCallback>
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d11b      	bne.n	8003a9c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a72:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a9a:	e0bd      	b.n	8003c18 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d129      	bne.n	8003afa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d00a      	beq.n	8003ad2 <I2C_MasterReceive_BTF+0x86>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d007      	beq.n	8003ad2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003af8:	e08e      	b.n	8003c18 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d176      	bne.n	8003bf2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d002      	beq.n	8003b10 <I2C_MasterReceive_BTF+0xc4>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d108      	bne.n	8003b22 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e019      	b.n	8003b56 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d002      	beq.n	8003b2e <I2C_MasterReceive_BTF+0xe2>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d108      	bne.n	8003b40 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	e00a      	b.n	8003b56 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d007      	beq.n	8003b56 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b54:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bb0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d10a      	bne.n	8003bdc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fd16 	bl	8003606 <HAL_I2C_MemRxCpltCallback>
}
 8003bda:	e01d      	b.n	8003c18 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2212      	movs	r2, #18
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fccb 	bl	8003586 <HAL_I2C_MasterRxCpltCallback>
}
 8003bf0:	e012      	b.n	8003c18 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d117      	bne.n	8003c64 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c4c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003c4e:	e067      	b.n	8003d20 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	611a      	str	r2, [r3, #16]
}
 8003c62:	e05d      	b.n	8003d20 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c6c:	d133      	bne.n	8003cd6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b21      	cmp	r3, #33	; 0x21
 8003c78:	d109      	bne.n	8003c8e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c8a:	611a      	str	r2, [r3, #16]
 8003c8c:	e008      	b.n	8003ca0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <I2C_Master_SB+0x92>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d032      	beq.n	8003d20 <I2C_Master_SB+0x100>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d02d      	beq.n	8003d20 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd2:	605a      	str	r2, [r3, #4]
}
 8003cd4:	e024      	b.n	8003d20 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10e      	bne.n	8003cfc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	11db      	asrs	r3, r3, #7
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f003 0306 	and.w	r3, r3, #6
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f063 030f 	orn	r3, r3, #15
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	611a      	str	r2, [r3, #16]
}
 8003cfa:	e011      	b.n	8003d20 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d10d      	bne.n	8003d20 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	11db      	asrs	r3, r3, #7
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 0306 	and.w	r3, r3, #6
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f063 030e 	orn	r3, r3, #14
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <I2C_Master_ADD10+0x24>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d011      	beq.n	8003d74 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <I2C_Master_ADD10+0x38>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d72:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b091      	sub	sp, #68	; 0x44
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b22      	cmp	r3, #34	; 0x22
 8003da8:	f040 8169 	bne.w	800407e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10f      	bne.n	8003dd4 <I2C_Master_ADDR+0x54>
 8003db4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d10b      	bne.n	8003dd4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	633b      	str	r3, [r7, #48]	; 0x30
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	e160      	b.n	8004096 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d11d      	bne.n	8003e18 <I2C_Master_ADDR+0x98>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003de4:	d118      	bne.n	8003e18 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de6:	2300      	movs	r3, #0
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	651a      	str	r2, [r3, #80]	; 0x50
 8003e16:	e13e      	b.n	8004096 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d113      	bne.n	8003e4a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e115      	b.n	8004076 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	f040 808a 	bne.w	8003f6a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e5c:	d137      	bne.n	8003ece <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e7c:	d113      	bne.n	8003ea6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	e0e7      	b.n	8004076 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	623b      	str	r3, [r7, #32]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	623b      	str	r3, [r7, #32]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	623b      	str	r3, [r7, #32]
 8003eba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e0d3      	b.n	8004076 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d02e      	beq.n	8003f32 <I2C_Master_ADDR+0x1b2>
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d02b      	beq.n	8003f32 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003edc:	2b12      	cmp	r3, #18
 8003ede:	d102      	bne.n	8003ee6 <I2C_Master_ADDR+0x166>
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d125      	bne.n	8003f32 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d00e      	beq.n	8003f0a <I2C_Master_ADDR+0x18a>
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d00b      	beq.n	8003f0a <I2C_Master_ADDR+0x18a>
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d008      	beq.n	8003f0a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e007      	b.n	8003f1a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f18:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	e0a1      	b.n	8004076 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f40:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f42:	2300      	movs	r3, #0
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e085      	b.n	8004076 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d14d      	bne.n	8004010 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d016      	beq.n	8003fa8 <I2C_Master_ADDR+0x228>
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d013      	beq.n	8003fa8 <I2C_Master_ADDR+0x228>
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d010      	beq.n	8003fa8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f94:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e007      	b.n	8003fb8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fb6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc6:	d117      	bne.n	8003ff8 <I2C_Master_ADDR+0x278>
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fce:	d00b      	beq.n	8003fe8 <I2C_Master_ADDR+0x268>
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d008      	beq.n	8003fe8 <I2C_Master_ADDR+0x268>
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d005      	beq.n	8003fe8 <I2C_Master_ADDR+0x268>
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d002      	beq.n	8003fe8 <I2C_Master_ADDR+0x268>
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d107      	bne.n	8003ff8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ff6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	e032      	b.n	8004076 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800401e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402e:	d117      	bne.n	8004060 <I2C_Master_ADDR+0x2e0>
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004036:	d00b      	beq.n	8004050 <I2C_Master_ADDR+0x2d0>
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	2b01      	cmp	r3, #1
 800403c:	d008      	beq.n	8004050 <I2C_Master_ADDR+0x2d0>
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	2b08      	cmp	r3, #8
 8004042:	d005      	beq.n	8004050 <I2C_Master_ADDR+0x2d0>
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	2b10      	cmp	r3, #16
 8004048:	d002      	beq.n	8004050 <I2C_Master_ADDR+0x2d0>
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	2b20      	cmp	r3, #32
 800404e:	d107      	bne.n	8004060 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800405e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800407c:	e00b      	b.n	8004096 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	e7ff      	b.n	8004096 <I2C_Master_ADDR+0x316>
 8004096:	bf00      	nop
 8004098:	3744      	adds	r7, #68	; 0x44
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d02b      	beq.n	8004114 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d114      	bne.n	8004114 <I2C_SlaveTransmit_TXE+0x72>
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b29      	cmp	r3, #41	; 0x29
 80040ee:	d111      	bne.n	8004114 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2221      	movs	r2, #33	; 0x21
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2228      	movs	r2, #40	; 0x28
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff fa43 	bl	800359a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d011      	beq.n	8004152 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d02c      	beq.n	80041d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d114      	bne.n	80041d2 <I2C_SlaveReceive_RXNE+0x74>
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	2b2a      	cmp	r3, #42	; 0x2a
 80041ac:	d111      	bne.n	80041d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2222      	movs	r2, #34	; 0x22
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2228      	movs	r2, #40	; 0x28
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff f9ee 	bl	80035ae <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d012      	beq.n	8004212 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004238:	2b28      	cmp	r3, #40	; 0x28
 800423a:	d127      	bne.n	800428c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	09db      	lsrs	r3, r3, #7
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d103      	bne.n	8004270 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	81bb      	strh	r3, [r7, #12]
 800426e:	e002      	b.n	8004276 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800427e:	89ba      	ldrh	r2, [r7, #12]
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff f99c 	bl	80035c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800428a:	e008      	b.n	800429e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0202 	mvn.w	r2, #2
 8004294:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004304:	d172      	bne.n	80043ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	2b22      	cmp	r3, #34	; 0x22
 800430a:	d002      	beq.n	8004312 <I2C_Slave_STOPF+0x6a>
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b2a      	cmp	r3, #42	; 0x2a
 8004310:	d135      	bne.n	800437e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	b29a      	uxth	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f043 0204 	orr.w	r2, r3, #4
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004344:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fd14 	bl	8002d78 <HAL_DMA_GetState>
 8004350:	4603      	mov	r3, r0
 8004352:	2b01      	cmp	r3, #1
 8004354:	d049      	beq.n	80043ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	4a69      	ldr	r2, [pc, #420]	; (8004500 <I2C_Slave_STOPF+0x258>)
 800435c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fb5c 	bl	8002a20 <HAL_DMA_Abort_IT>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d03d      	beq.n	80043ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004378:	4610      	mov	r0, r2
 800437a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800437c:	e035      	b.n	80043ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	b29a      	uxth	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f043 0204 	orr.w	r2, r3, #4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe fcde 	bl	8002d78 <HAL_DMA_GetState>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d014      	beq.n	80043ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	4a4e      	ldr	r2, [pc, #312]	; (8004500 <I2C_Slave_STOPF+0x258>)
 80043c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fb26 	bl	8002a20 <HAL_DMA_Abort_IT>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043e4:	4610      	mov	r0, r2
 80043e6:	4798      	blx	r3
 80043e8:	e000      	b.n	80043ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d03e      	beq.n	8004474 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b04      	cmp	r3, #4
 8004402:	d112      	bne.n	800442a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b40      	cmp	r3, #64	; 0x40
 8004436:	d112      	bne.n	800445e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	f043 0204 	orr.w	r2, r3, #4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f843 	bl	8004508 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004482:	e039      	b.n	80044f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b2a      	cmp	r3, #42	; 0x2a
 8004488:	d109      	bne.n	800449e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2228      	movs	r2, #40	; 0x28
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff f888 	bl	80035ae <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b28      	cmp	r3, #40	; 0x28
 80044a8:	d111      	bne.n	80044ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a15      	ldr	r2, [pc, #84]	; (8004504 <I2C_Slave_STOPF+0x25c>)
 80044ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff f889 	bl	80035de <HAL_I2C_ListenCpltCallback>
}
 80044cc:	e014      	b.n	80044f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	2b22      	cmp	r3, #34	; 0x22
 80044d4:	d002      	beq.n	80044dc <I2C_Slave_STOPF+0x234>
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	2b22      	cmp	r3, #34	; 0x22
 80044da:	d10d      	bne.n	80044f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff f85b 	bl	80035ae <HAL_I2C_SlaveRxCpltCallback>
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	08004765 	.word	0x08004765
 8004504:	ffff0000 	.word	0xffff0000

08004508 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004516:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b10      	cmp	r3, #16
 8004522:	d10a      	bne.n	800453a <I2C_ITError+0x32>
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	2b22      	cmp	r3, #34	; 0x22
 8004528:	d107      	bne.n	800453a <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004538:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004540:	2b28      	cmp	r3, #40	; 0x28
 8004542:	d107      	bne.n	8004554 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2228      	movs	r2, #40	; 0x28
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004552:	e015      	b.n	8004580 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004562:	d006      	beq.n	8004572 <I2C_ITError+0x6a>
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b60      	cmp	r3, #96	; 0x60
 8004568:	d003      	beq.n	8004572 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458e:	d162      	bne.n	8004656 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d020      	beq.n	80045f0 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	4a6a      	ldr	r2, [pc, #424]	; (800475c <I2C_ITError+0x254>)
 80045b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fa30 	bl	8002a20 <HAL_DMA_Abort_IT>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8089 	beq.w	80046da <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045ea:	4610      	mov	r0, r2
 80045ec:	4798      	blx	r3
 80045ee:	e074      	b.n	80046da <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	4a59      	ldr	r2, [pc, #356]	; (800475c <I2C_ITError+0x254>)
 80045f6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fa0f 	bl	8002a20 <HAL_DMA_Abort_IT>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d068      	beq.n	80046da <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d10b      	bne.n	800462e <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004650:	4610      	mov	r0, r2
 8004652:	4798      	blx	r3
 8004654:	e041      	b.n	80046da <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b60      	cmp	r3, #96	; 0x60
 8004660:	d125      	bne.n	80046ae <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	d10b      	bne.n	8004696 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fe ffc1 	bl	800362e <HAL_I2C_AbortCpltCallback>
 80046ac:	e015      	b.n	80046da <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d10b      	bne.n	80046d4 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fe ffa0 	bl	800361a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10e      	bne.n	8004708 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004716:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b04      	cmp	r3, #4
 800472a:	d113      	bne.n	8004754 <I2C_ITError+0x24c>
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b28      	cmp	r3, #40	; 0x28
 8004730:	d110      	bne.n	8004754 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <I2C_ITError+0x258>)
 8004736:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fe ff45 	bl	80035de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	08004765 	.word	0x08004765
 8004760:	ffff0000 	.word	0xffff0000

08004764 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004778:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004786:	2200      	movs	r2, #0
 8004788:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	2200      	movs	r2, #0
 8004798:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	2200      	movs	r2, #0
 80047be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	2200      	movs	r2, #0
 80047ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0201 	bic.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d10e      	bne.n	800480a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f7fe ff13 	bl	800362e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004808:	e027      	b.n	800485a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800480a:	7afb      	ldrb	r3, [r7, #11]
 800480c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004810:	2b28      	cmp	r3, #40	; 0x28
 8004812:	d117      	bne.n	8004844 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004832:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2228      	movs	r2, #40	; 0x28
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004842:	e007      	b.n	8004854 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7fe fee0 	bl	800361a <HAL_I2C_ErrorCallback>
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004872:	d103      	bne.n	800487c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800487a:	e007      	b.n	800488c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004884:	d102      	bne.n	800488c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2208      	movs	r2, #8
 800488a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_PWREx_EnableOverDrive+0x90>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	4a1f      	ldr	r2, [pc, #124]	; (8004928 <HAL_PWREx_EnableOverDrive+0x90>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6413      	str	r3, [r2, #64]	; 0x40
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <HAL_PWREx_EnableOverDrive+0x90>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048be:	4b1b      	ldr	r3, [pc, #108]	; (800492c <HAL_PWREx_EnableOverDrive+0x94>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048c4:	f7fd fe88 	bl	80025d8 <HAL_GetTick>
 80048c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048ca:	e009      	b.n	80048e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048cc:	f7fd fe84 	bl	80025d8 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048da:	d901      	bls.n	80048e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e01f      	b.n	8004920 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048e0:	4b13      	ldr	r3, [pc, #76]	; (8004930 <HAL_PWREx_EnableOverDrive+0x98>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ec:	d1ee      	bne.n	80048cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048f4:	f7fd fe70 	bl	80025d8 <HAL_GetTick>
 80048f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048fa:	e009      	b.n	8004910 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048fc:	f7fd fe6c 	bl	80025d8 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800490a:	d901      	bls.n	8004910 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e007      	b.n	8004920 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <HAL_PWREx_EnableOverDrive+0x98>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800491c:	d1ee      	bne.n	80048fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	420e0040 	.word	0x420e0040
 8004930:	40007000 	.word	0x40007000
 8004934:	420e0044 	.word	0x420e0044

08004938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0cc      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800494c:	4b68      	ldr	r3, [pc, #416]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d90c      	bls.n	8004974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b65      	ldr	r3, [pc, #404]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b63      	ldr	r3, [pc, #396]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0b8      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d020      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800498c:	4b59      	ldr	r3, [pc, #356]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4a58      	ldr	r2, [pc, #352]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a4:	4b53      	ldr	r3, [pc, #332]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4a52      	ldr	r2, [pc, #328]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b0:	4b50      	ldr	r3, [pc, #320]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	494d      	ldr	r1, [pc, #308]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d044      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d107      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	4b47      	ldr	r3, [pc, #284]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d119      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e07f      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d003      	beq.n	80049f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f6:	4b3f      	ldr	r3, [pc, #252]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e06f      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a06:	4b3b      	ldr	r3, [pc, #236]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e067      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a16:	4b37      	ldr	r3, [pc, #220]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 0203 	bic.w	r2, r3, #3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	4934      	ldr	r1, [pc, #208]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a28:	f7fd fdd6 	bl	80025d8 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a30:	f7fd fdd2 	bl	80025d8 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e04f      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 020c 	and.w	r2, r3, #12
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d1eb      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d20c      	bcs.n	8004a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b20      	ldr	r3, [pc, #128]	; (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e032      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a8c:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4916      	ldr	r1, [pc, #88]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	490e      	ldr	r1, [pc, #56]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004abe:	f000 f855 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad0:	5cd3      	ldrb	r3, [r2, r3]
 8004ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8004ad6:	4a09      	ldr	r2, [pc, #36]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ada:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <HAL_RCC_ClockConfig+0x1c8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fd fd36 	bl	8002550 <HAL_InitTick>

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40023c00 	.word	0x40023c00
 8004af4:	40023800 	.word	0x40023800
 8004af8:	0800a694 	.word	0x0800a694
 8004afc:	20000000 	.word	0x20000000
 8004b00:	20000030 	.word	0x20000030

08004b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000000 	.word	0x20000000

08004b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b20:	f7ff fff0 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b24:	4601      	mov	r1, r0
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0a9b      	lsrs	r3, r3, #10
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4a03      	ldr	r2, [pc, #12]	; (8004b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b32:	5cd3      	ldrb	r3, [r2, r3]
 8004b34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	0800a6a4 	.word	0x0800a6a4

08004b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b48:	f7ff ffdc 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b4c:	4601      	mov	r1, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0b5b      	lsrs	r3, r3, #13
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4a03      	ldr	r2, [pc, #12]	; (8004b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b5a:	5cd3      	ldrb	r3, [r2, r3]
 8004b5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	0800a6a4 	.word	0x0800a6a4

08004b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b86:	4bc6      	ldr	r3, [pc, #792]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 030c 	and.w	r3, r3, #12
 8004b8e:	2b0c      	cmp	r3, #12
 8004b90:	f200 817e 	bhi.w	8004e90 <HAL_RCC_GetSysClockFreq+0x324>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <HAL_RCC_GetSysClockFreq+0x30>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004e91 	.word	0x08004e91
 8004ba4:	08004e91 	.word	0x08004e91
 8004ba8:	08004e91 	.word	0x08004e91
 8004bac:	08004bd7 	.word	0x08004bd7
 8004bb0:	08004e91 	.word	0x08004e91
 8004bb4:	08004e91 	.word	0x08004e91
 8004bb8:	08004e91 	.word	0x08004e91
 8004bbc:	08004bdd 	.word	0x08004bdd
 8004bc0:	08004e91 	.word	0x08004e91
 8004bc4:	08004e91 	.word	0x08004e91
 8004bc8:	08004e91 	.word	0x08004e91
 8004bcc:	08004d39 	.word	0x08004d39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bd0:	4bb4      	ldr	r3, [pc, #720]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x338>)
 8004bd2:	613b      	str	r3, [r7, #16]
       break;
 8004bd4:	e15f      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bd6:	4bb4      	ldr	r3, [pc, #720]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004bd8:	613b      	str	r3, [r7, #16]
      break;
 8004bda:	e15c      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bdc:	4bb0      	ldr	r3, [pc, #704]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004be6:	4bae      	ldr	r3, [pc, #696]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d04a      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf2:	4bab      	ldr	r3, [pc, #684]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	099b      	lsrs	r3, r3, #6
 8004bf8:	f04f 0400 	mov.w	r4, #0
 8004bfc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	ea03 0501 	and.w	r5, r3, r1
 8004c08:	ea04 0602 	and.w	r6, r4, r2
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	4632      	mov	r2, r6
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	f04f 0400 	mov.w	r4, #0
 8004c18:	0154      	lsls	r4, r2, #5
 8004c1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c1e:	014b      	lsls	r3, r1, #5
 8004c20:	4619      	mov	r1, r3
 8004c22:	4622      	mov	r2, r4
 8004c24:	1b49      	subs	r1, r1, r5
 8004c26:	eb62 0206 	sbc.w	r2, r2, r6
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	f04f 0400 	mov.w	r4, #0
 8004c32:	0194      	lsls	r4, r2, #6
 8004c34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c38:	018b      	lsls	r3, r1, #6
 8004c3a:	1a5b      	subs	r3, r3, r1
 8004c3c:	eb64 0402 	sbc.w	r4, r4, r2
 8004c40:	f04f 0100 	mov.w	r1, #0
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	00e2      	lsls	r2, r4, #3
 8004c4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c4e:	00d9      	lsls	r1, r3, #3
 8004c50:	460b      	mov	r3, r1
 8004c52:	4614      	mov	r4, r2
 8004c54:	195b      	adds	r3, r3, r5
 8004c56:	eb44 0406 	adc.w	r4, r4, r6
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	0262      	lsls	r2, r4, #9
 8004c64:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c68:	0259      	lsls	r1, r3, #9
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	4621      	mov	r1, r4
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f04f 0400 	mov.w	r4, #0
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4623      	mov	r3, r4
 8004c7c:	f7fb ffb4 	bl	8000be8 <__aeabi_uldivmod>
 8004c80:	4603      	mov	r3, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e049      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c88:	4b85      	ldr	r3, [pc, #532]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	099b      	lsrs	r3, r3, #6
 8004c8e:	f04f 0400 	mov.w	r4, #0
 8004c92:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	ea03 0501 	and.w	r5, r3, r1
 8004c9e:	ea04 0602 	and.w	r6, r4, r2
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	4632      	mov	r2, r6
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	f04f 0400 	mov.w	r4, #0
 8004cae:	0154      	lsls	r4, r2, #5
 8004cb0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cb4:	014b      	lsls	r3, r1, #5
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4622      	mov	r2, r4
 8004cba:	1b49      	subs	r1, r1, r5
 8004cbc:	eb62 0206 	sbc.w	r2, r2, r6
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	f04f 0400 	mov.w	r4, #0
 8004cc8:	0194      	lsls	r4, r2, #6
 8004cca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004cce:	018b      	lsls	r3, r1, #6
 8004cd0:	1a5b      	subs	r3, r3, r1
 8004cd2:	eb64 0402 	sbc.w	r4, r4, r2
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	00e2      	lsls	r2, r4, #3
 8004ce0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ce4:	00d9      	lsls	r1, r3, #3
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4614      	mov	r4, r2
 8004cea:	195b      	adds	r3, r3, r5
 8004cec:	eb44 0406 	adc.w	r4, r4, r6
 8004cf0:	f04f 0100 	mov.w	r1, #0
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	02a2      	lsls	r2, r4, #10
 8004cfa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004cfe:	0299      	lsls	r1, r3, #10
 8004d00:	460b      	mov	r3, r1
 8004d02:	4614      	mov	r4, r2
 8004d04:	4618      	mov	r0, r3
 8004d06:	4621      	mov	r1, r4
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f04f 0400 	mov.w	r4, #0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4623      	mov	r3, r4
 8004d12:	f7fb ff69 	bl	8000be8 <__aeabi_uldivmod>
 8004d16:	4603      	mov	r3, r0
 8004d18:	460c      	mov	r4, r1
 8004d1a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d1c:	4b60      	ldr	r3, [pc, #384]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	3301      	adds	r3, #1
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	613b      	str	r3, [r7, #16]
      break;
 8004d36:	e0ae      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d38:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d40:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d42:	4b57      	ldr	r3, [pc, #348]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d04a      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d4e:	4b54      	ldr	r3, [pc, #336]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	099b      	lsrs	r3, r3, #6
 8004d54:	f04f 0400 	mov.w	r4, #0
 8004d58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	ea03 0501 	and.w	r5, r3, r1
 8004d64:	ea04 0602 	and.w	r6, r4, r2
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4632      	mov	r2, r6
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	f04f 0400 	mov.w	r4, #0
 8004d74:	0154      	lsls	r4, r2, #5
 8004d76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d7a:	014b      	lsls	r3, r1, #5
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4622      	mov	r2, r4
 8004d80:	1b49      	subs	r1, r1, r5
 8004d82:	eb62 0206 	sbc.w	r2, r2, r6
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	f04f 0400 	mov.w	r4, #0
 8004d8e:	0194      	lsls	r4, r2, #6
 8004d90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d94:	018b      	lsls	r3, r1, #6
 8004d96:	1a5b      	subs	r3, r3, r1
 8004d98:	eb64 0402 	sbc.w	r4, r4, r2
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	00e2      	lsls	r2, r4, #3
 8004da6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004daa:	00d9      	lsls	r1, r3, #3
 8004dac:	460b      	mov	r3, r1
 8004dae:	4614      	mov	r4, r2
 8004db0:	195b      	adds	r3, r3, r5
 8004db2:	eb44 0406 	adc.w	r4, r4, r6
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	0262      	lsls	r2, r4, #9
 8004dc0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004dc4:	0259      	lsls	r1, r3, #9
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4614      	mov	r4, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	4621      	mov	r1, r4
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f04f 0400 	mov.w	r4, #0
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	f7fb ff06 	bl	8000be8 <__aeabi_uldivmod>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e049      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de4:	4b2e      	ldr	r3, [pc, #184]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	099b      	lsrs	r3, r3, #6
 8004dea:	f04f 0400 	mov.w	r4, #0
 8004dee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	ea03 0501 	and.w	r5, r3, r1
 8004dfa:	ea04 0602 	and.w	r6, r4, r2
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4632      	mov	r2, r6
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	f04f 0400 	mov.w	r4, #0
 8004e0a:	0154      	lsls	r4, r2, #5
 8004e0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e10:	014b      	lsls	r3, r1, #5
 8004e12:	4619      	mov	r1, r3
 8004e14:	4622      	mov	r2, r4
 8004e16:	1b49      	subs	r1, r1, r5
 8004e18:	eb62 0206 	sbc.w	r2, r2, r6
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	0194      	lsls	r4, r2, #6
 8004e26:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e2a:	018b      	lsls	r3, r1, #6
 8004e2c:	1a5b      	subs	r3, r3, r1
 8004e2e:	eb64 0402 	sbc.w	r4, r4, r2
 8004e32:	f04f 0100 	mov.w	r1, #0
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	00e2      	lsls	r2, r4, #3
 8004e3c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e40:	00d9      	lsls	r1, r3, #3
 8004e42:	460b      	mov	r3, r1
 8004e44:	4614      	mov	r4, r2
 8004e46:	195b      	adds	r3, r3, r5
 8004e48:	eb44 0406 	adc.w	r4, r4, r6
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	02a2      	lsls	r2, r4, #10
 8004e56:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e5a:	0299      	lsls	r1, r3, #10
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4614      	mov	r4, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	4621      	mov	r1, r4
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f04f 0400 	mov.w	r4, #0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4623      	mov	r3, r4
 8004e6e:	f7fb febb 	bl	8000be8 <__aeabi_uldivmod>
 8004e72:	4603      	mov	r3, r0
 8004e74:	460c      	mov	r4, r1
 8004e76:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	0f1b      	lsrs	r3, r3, #28
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	613b      	str	r3, [r7, #16]
      break;
 8004e8e:	e002      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x338>)
 8004e92:	613b      	str	r3, [r7, #16]
      break;
 8004e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e96:	693b      	ldr	r3, [r7, #16]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	00f42400 	.word	0x00f42400
 8004ea8:	007a1200 	.word	0x007a1200

08004eac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8083 	beq.w	8004fcc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ec6:	4b95      	ldr	r3, [pc, #596]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d019      	beq.n	8004f06 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ed2:	4b92      	ldr	r3, [pc, #584]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d106      	bne.n	8004eec <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ede:	4b8f      	ldr	r3, [pc, #572]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eea:	d00c      	beq.n	8004f06 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eec:	4b8b      	ldr	r3, [pc, #556]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	d112      	bne.n	8004f1e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ef8:	4b88      	ldr	r3, [pc, #544]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f04:	d10b      	bne.n	8004f1e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f06:	4b85      	ldr	r3, [pc, #532]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d05b      	beq.n	8004fca <HAL_RCC_OscConfig+0x11e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d157      	bne.n	8004fca <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e216      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f26:	d106      	bne.n	8004f36 <HAL_RCC_OscConfig+0x8a>
 8004f28:	4b7c      	ldr	r3, [pc, #496]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a7b      	ldr	r2, [pc, #492]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	e01d      	b.n	8004f72 <HAL_RCC_OscConfig+0xc6>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f3e:	d10c      	bne.n	8004f5a <HAL_RCC_OscConfig+0xae>
 8004f40:	4b76      	ldr	r3, [pc, #472]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a75      	ldr	r2, [pc, #468]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b73      	ldr	r3, [pc, #460]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a72      	ldr	r2, [pc, #456]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	e00b      	b.n	8004f72 <HAL_RCC_OscConfig+0xc6>
 8004f5a:	4b70      	ldr	r3, [pc, #448]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a6f      	ldr	r2, [pc, #444]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	4b6d      	ldr	r3, [pc, #436]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a6c      	ldr	r2, [pc, #432]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d013      	beq.n	8004fa2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7a:	f7fd fb2d 	bl	80025d8 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f82:	f7fd fb29 	bl	80025d8 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b64      	cmp	r3, #100	; 0x64
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e1db      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f94:	4b61      	ldr	r3, [pc, #388]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0xd6>
 8004fa0:	e014      	b.n	8004fcc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fd fb19 	bl	80025d8 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004faa:	f7fd fb15 	bl	80025d8 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b64      	cmp	r3, #100	; 0x64
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e1c7      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fbc:	4b57      	ldr	r3, [pc, #348]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0xfe>
 8004fc8:	e000      	b.n	8004fcc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d06f      	beq.n	80050b8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fd8:	4b50      	ldr	r3, [pc, #320]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 030c 	and.w	r3, r3, #12
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d017      	beq.n	8005014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fe4:	4b4d      	ldr	r3, [pc, #308]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d105      	bne.n	8004ffc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ff0:	4b4a      	ldr	r3, [pc, #296]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ffc:	4b47      	ldr	r3, [pc, #284]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d11c      	bne.n	8005042 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005008:	4b44      	ldr	r3, [pc, #272]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d116      	bne.n	8005042 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005014:	4b41      	ldr	r3, [pc, #260]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_RCC_OscConfig+0x180>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d001      	beq.n	800502c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e18f      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502c:	4b3b      	ldr	r3, [pc, #236]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4938      	ldr	r1, [pc, #224]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005040:	e03a      	b.n	80050b8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d020      	beq.n	800508c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800504a:	4b35      	ldr	r3, [pc, #212]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fd fac2 	bl	80025d8 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005058:	f7fd fabe 	bl	80025d8 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e170      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506a:	4b2c      	ldr	r3, [pc, #176]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005076:	4b29      	ldr	r3, [pc, #164]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4925      	ldr	r1, [pc, #148]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
 800508a:	e015      	b.n	80050b8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800508c:	4b24      	ldr	r3, [pc, #144]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005092:	f7fd faa1 	bl	80025d8 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800509a:	f7fd fa9d 	bl	80025d8 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e14f      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <HAL_RCC_OscConfig+0x270>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f0      	bne.n	800509a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d037      	beq.n	8005134 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d016      	beq.n	80050fa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050cc:	4b15      	ldr	r3, [pc, #84]	; (8005124 <HAL_RCC_OscConfig+0x278>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d2:	f7fd fa81 	bl	80025d8 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050da:	f7fd fa7d 	bl	80025d8 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e12f      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <HAL_RCC_OscConfig+0x270>)
 80050ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f0      	beq.n	80050da <HAL_RCC_OscConfig+0x22e>
 80050f8:	e01c      	b.n	8005134 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050fa:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <HAL_RCC_OscConfig+0x278>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005100:	f7fd fa6a 	bl	80025d8 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005106:	e00f      	b.n	8005128 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005108:	f7fd fa66 	bl	80025d8 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d908      	bls.n	8005128 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e118      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
 800511a:	bf00      	nop
 800511c:	40023800 	.word	0x40023800
 8005120:	42470000 	.word	0x42470000
 8005124:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005128:	4b8a      	ldr	r3, [pc, #552]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 800512a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e9      	bne.n	8005108 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8097 	beq.w	8005270 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005146:	4b83      	ldr	r3, [pc, #524]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10f      	bne.n	8005172 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	4b7f      	ldr	r3, [pc, #508]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	4a7e      	ldr	r2, [pc, #504]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 800515c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005160:	6413      	str	r3, [r2, #64]	; 0x40
 8005162:	4b7c      	ldr	r3, [pc, #496]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800516e:	2301      	movs	r3, #1
 8005170:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005172:	4b79      	ldr	r3, [pc, #484]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d118      	bne.n	80051b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800517e:	4b76      	ldr	r3, [pc, #472]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a75      	ldr	r2, [pc, #468]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 8005184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518a:	f7fd fa25 	bl	80025d8 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005192:	f7fd fa21 	bl	80025d8 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e0d3      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a4:	4b6c      	ldr	r3, [pc, #432]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d106      	bne.n	80051c6 <HAL_RCC_OscConfig+0x31a>
 80051b8:	4b66      	ldr	r3, [pc, #408]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80051ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051bc:	4a65      	ldr	r2, [pc, #404]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6713      	str	r3, [r2, #112]	; 0x70
 80051c4:	e01c      	b.n	8005200 <HAL_RCC_OscConfig+0x354>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d10c      	bne.n	80051e8 <HAL_RCC_OscConfig+0x33c>
 80051ce:	4b61      	ldr	r3, [pc, #388]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	4a60      	ldr	r2, [pc, #384]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80051d4:	f043 0304 	orr.w	r3, r3, #4
 80051d8:	6713      	str	r3, [r2, #112]	; 0x70
 80051da:	4b5e      	ldr	r3, [pc, #376]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	4a5d      	ldr	r2, [pc, #372]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6713      	str	r3, [r2, #112]	; 0x70
 80051e6:	e00b      	b.n	8005200 <HAL_RCC_OscConfig+0x354>
 80051e8:	4b5a      	ldr	r3, [pc, #360]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	4a59      	ldr	r2, [pc, #356]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	6713      	str	r3, [r2, #112]	; 0x70
 80051f4:	4b57      	ldr	r3, [pc, #348]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	4a56      	ldr	r2, [pc, #344]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80051fa:	f023 0304 	bic.w	r3, r3, #4
 80051fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d015      	beq.n	8005234 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005208:	f7fd f9e6 	bl	80025d8 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520e:	e00a      	b.n	8005226 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005210:	f7fd f9e2 	bl	80025d8 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	; 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e092      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005226:	4b4b      	ldr	r3, [pc, #300]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0ee      	beq.n	8005210 <HAL_RCC_OscConfig+0x364>
 8005232:	e014      	b.n	800525e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fd f9d0 	bl	80025d8 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523a:	e00a      	b.n	8005252 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800523c:	f7fd f9cc 	bl	80025d8 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e07c      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005252:	4b40      	ldr	r3, [pc, #256]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1ee      	bne.n	800523c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005264:	4b3b      	ldr	r3, [pc, #236]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	4a3a      	ldr	r2, [pc, #232]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 800526a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800526e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d068      	beq.n	800534a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005278:	4b36      	ldr	r3, [pc, #216]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 030c 	and.w	r3, r3, #12
 8005280:	2b08      	cmp	r3, #8
 8005282:	d060      	beq.n	8005346 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b02      	cmp	r3, #2
 800528a:	d145      	bne.n	8005318 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800528c:	4b33      	ldr	r3, [pc, #204]	; (800535c <HAL_RCC_OscConfig+0x4b0>)
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7fd f9a1 	bl	80025d8 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800529a:	f7fd f99d 	bl	80025d8 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e04f      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ac:	4b29      	ldr	r3, [pc, #164]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1f0      	bne.n	800529a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	019b      	lsls	r3, r3, #6
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	3b01      	subs	r3, #1
 80052d2:	041b      	lsls	r3, r3, #16
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	061b      	lsls	r3, r3, #24
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	071b      	lsls	r3, r3, #28
 80052e4:	491b      	ldr	r1, [pc, #108]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052ea:	4b1c      	ldr	r3, [pc, #112]	; (800535c <HAL_RCC_OscConfig+0x4b0>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f0:	f7fd f972 	bl	80025d8 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f8:	f7fd f96e 	bl	80025d8 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e020      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530a:	4b12      	ldr	r3, [pc, #72]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0x44c>
 8005316:	e018      	b.n	800534a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005318:	4b10      	ldr	r3, [pc, #64]	; (800535c <HAL_RCC_OscConfig+0x4b0>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531e:	f7fd f95b 	bl	80025d8 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005326:	f7fd f957 	bl	80025d8 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e009      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <HAL_RCC_OscConfig+0x4a8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f0      	bne.n	8005326 <HAL_RCC_OscConfig+0x47a>
 8005344:	e001      	b.n	800534a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40023800 	.word	0x40023800
 8005358:	40007000 	.word	0x40007000
 800535c:	42470060 	.word	0x42470060

08005360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e01d      	b.n	80053ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fc f926 	bl	80015d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f000 fc0e 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b06      	cmp	r3, #6
 80053de:	d007      	beq.n	80053f0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e01d      	b.n	800544c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fc f8b5 	bl	8001594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f000 fbbf 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2201      	movs	r2, #1
 8005464:	6839      	ldr	r1, [r7, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fe94 	bl	8006194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a15      	ldr	r2, [pc, #84]	; (80054c8 <HAL_TIM_PWM_Start+0x74>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <HAL_TIM_PWM_Start+0x2c>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a14      	ldr	r2, [pc, #80]	; (80054cc <HAL_TIM_PWM_Start+0x78>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d101      	bne.n	8005484 <HAL_TIM_PWM_Start+0x30>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <HAL_TIM_PWM_Start+0x32>
 8005484:	2300      	movs	r3, #0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b06      	cmp	r3, #6
 80054aa:	d007      	beq.n	80054bc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40010400 	.word	0x40010400

080054d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e083      	b.n	80055ec <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d106      	bne.n	80054fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7fc f893 	bl	8001624 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005514:	f023 0307 	bic.w	r3, r3, #7
 8005518:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3304      	adds	r3, #4
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f000 fb4b 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005552:	f023 0303 	bic.w	r3, r3, #3
 8005556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	4313      	orrs	r3, r2
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005570:	f023 030c 	bic.w	r3, r3, #12
 8005574:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800557c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	4313      	orrs	r3, r2
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	011a      	lsls	r2, r3, #4
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	031b      	lsls	r3, r3, #12
 80055a0:	4313      	orrs	r3, r2
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	4313      	orrs	r3, r2
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_TIM_Encoder_Start+0x16>
 8005604:	2b04      	cmp	r3, #4
 8005606:	d008      	beq.n	800561a <HAL_TIM_Encoder_Start+0x26>
 8005608:	e00f      	b.n	800562a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2201      	movs	r2, #1
 8005610:	2100      	movs	r1, #0
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fdbe 	bl	8006194 <TIM_CCxChannelCmd>
      break;
 8005618:	e016      	b.n	8005648 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2201      	movs	r2, #1
 8005620:	2104      	movs	r1, #4
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fdb6 	bl	8006194 <TIM_CCxChannelCmd>
      break;
 8005628:	e00e      	b.n	8005648 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2201      	movs	r2, #1
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fdae 	bl	8006194 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2201      	movs	r2, #1
 800563e:	2104      	movs	r1, #4
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fda7 	bl	8006194 <TIM_CCxChannelCmd>
      break;
 8005646:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b02      	cmp	r3, #2
 8005676:	d122      	bne.n	80056be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b02      	cmp	r3, #2
 8005684:	d11b      	bne.n	80056be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f06f 0202 	mvn.w	r2, #2
 800568e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	f003 0303 	and.w	r3, r3, #3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fa6c 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80056aa:	e005      	b.n	80056b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fa5e 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fa6f 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d122      	bne.n	8005712 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d11b      	bne.n	8005712 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f06f 0204 	mvn.w	r2, #4
 80056e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fa42 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80056fe:	e005      	b.n	800570c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fa34 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fa45 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b08      	cmp	r3, #8
 800571e:	d122      	bne.n	8005766 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b08      	cmp	r3, #8
 800572c:	d11b      	bne.n	8005766 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f06f 0208 	mvn.w	r2, #8
 8005736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2204      	movs	r2, #4
 800573c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fa18 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 8005752:	e005      	b.n	8005760 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fa0a 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa1b 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b10      	cmp	r3, #16
 8005772:	d122      	bne.n	80057ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b10      	cmp	r3, #16
 8005780:	d11b      	bne.n	80057ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f06f 0210 	mvn.w	r2, #16
 800578a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2208      	movs	r2, #8
 8005790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f9ee 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80057a6:	e005      	b.n	80057b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f9e0 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f9f1 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d10e      	bne.n	80057e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d107      	bne.n	80057e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f06f 0201 	mvn.w	r2, #1
 80057de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7fc fe55 	bl	8002490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f0:	2b80      	cmp	r3, #128	; 0x80
 80057f2:	d10e      	bne.n	8005812 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d107      	bne.n	8005812 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800580a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fdbf 	bl	8006390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d10e      	bne.n	800583e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b40      	cmp	r3, #64	; 0x40
 800582c:	d107      	bne.n	800583e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f9b6 	bl	8005baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b20      	cmp	r3, #32
 800584a:	d10e      	bne.n	800586a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b20      	cmp	r3, #32
 8005858:	d107      	bne.n	800586a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f06f 0220 	mvn.w	r2, #32
 8005862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fd89 	bl	800637c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800588a:	2302      	movs	r3, #2
 800588c:	e0b4      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2202      	movs	r2, #2
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b0c      	cmp	r3, #12
 80058a2:	f200 809f 	bhi.w	80059e4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058e1 	.word	0x080058e1
 80058b0:	080059e5 	.word	0x080059e5
 80058b4:	080059e5 	.word	0x080059e5
 80058b8:	080059e5 	.word	0x080059e5
 80058bc:	08005921 	.word	0x08005921
 80058c0:	080059e5 	.word	0x080059e5
 80058c4:	080059e5 	.word	0x080059e5
 80058c8:	080059e5 	.word	0x080059e5
 80058cc:	08005963 	.word	0x08005963
 80058d0:	080059e5 	.word	0x080059e5
 80058d4:	080059e5 	.word	0x080059e5
 80058d8:	080059e5 	.word	0x080059e5
 80058dc:	080059a3 	.word	0x080059a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fa0a 	bl	8005d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0208 	orr.w	r2, r2, #8
 80058fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0204 	bic.w	r2, r2, #4
 800590a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6999      	ldr	r1, [r3, #24]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	619a      	str	r2, [r3, #24]
      break;
 800591e:	e062      	b.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fa5a 	bl	8005de0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800593a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	619a      	str	r2, [r3, #24]
      break;
 8005960:	e041      	b.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	4618      	mov	r0, r3
 800596a:	f000 faaf 	bl	8005ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0208 	orr.w	r2, r2, #8
 800597c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0204 	bic.w	r2, r2, #4
 800598c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69d9      	ldr	r1, [r3, #28]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	61da      	str	r2, [r3, #28]
      break;
 80059a0:	e021      	b.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fb03 	bl	8005fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69d9      	ldr	r1, [r3, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	021a      	lsls	r2, r3, #8
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	61da      	str	r2, [r3, #28]
      break;
 80059e2:	e000      	b.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80059e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_ConfigClockSource+0x18>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e0a6      	b.n	8005b66 <HAL_TIM_ConfigClockSource+0x166>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b40      	cmp	r3, #64	; 0x40
 8005a4e:	d067      	beq.n	8005b20 <HAL_TIM_ConfigClockSource+0x120>
 8005a50:	2b40      	cmp	r3, #64	; 0x40
 8005a52:	d80b      	bhi.n	8005a6c <HAL_TIM_ConfigClockSource+0x6c>
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	d073      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0x140>
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d802      	bhi.n	8005a62 <HAL_TIM_ConfigClockSource+0x62>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d06f      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005a60:	e078      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d06c      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0x140>
 8005a66:	2b30      	cmp	r3, #48	; 0x30
 8005a68:	d06a      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005a6a:	e073      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a6c:	2b70      	cmp	r3, #112	; 0x70
 8005a6e:	d00d      	beq.n	8005a8c <HAL_TIM_ConfigClockSource+0x8c>
 8005a70:	2b70      	cmp	r3, #112	; 0x70
 8005a72:	d804      	bhi.n	8005a7e <HAL_TIM_ConfigClockSource+0x7e>
 8005a74:	2b50      	cmp	r3, #80	; 0x50
 8005a76:	d033      	beq.n	8005ae0 <HAL_TIM_ConfigClockSource+0xe0>
 8005a78:	2b60      	cmp	r3, #96	; 0x60
 8005a7a:	d041      	beq.n	8005b00 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005a7c:	e06a      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a82:	d066      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x152>
 8005a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a88:	d017      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005a8a:	e063      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	6899      	ldr	r1, [r3, #8]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f000 fb5a 	bl	8006154 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	609a      	str	r2, [r3, #8]
      break;
 8005ab8:	e04c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6899      	ldr	r1, [r3, #8]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f000 fb43 	bl	8006154 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005adc:	609a      	str	r2, [r3, #8]
      break;
 8005ade:	e039      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	6859      	ldr	r1, [r3, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	461a      	mov	r2, r3
 8005aee:	f000 fab7 	bl	8006060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2150      	movs	r1, #80	; 0x50
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fb10 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005afe:	e029      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6859      	ldr	r1, [r3, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f000 fad6 	bl	80060be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2160      	movs	r1, #96	; 0x60
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fb00 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005b1e:	e019      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6859      	ldr	r1, [r3, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f000 fa97 	bl	8006060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2140      	movs	r1, #64	; 0x40
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 faf0 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005b3e:	e009      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f000 fae7 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005b50:	e000      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a40      	ldr	r2, [pc, #256]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d013      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d00f      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3d      	ldr	r2, [pc, #244]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3c      	ldr	r2, [pc, #240]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3b      	ldr	r2, [pc, #236]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3a      	ldr	r2, [pc, #232]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d108      	bne.n	8005c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2f      	ldr	r2, [pc, #188]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d02b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c20:	d027      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2c      	ldr	r2, [pc, #176]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d023      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01f      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2a      	ldr	r2, [pc, #168]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a29      	ldr	r2, [pc, #164]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d017      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a28      	ldr	r2, [pc, #160]	; (8005ce8 <TIM_Base_SetConfig+0x128>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a27      	ldr	r2, [pc, #156]	; (8005cec <TIM_Base_SetConfig+0x12c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00f      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <TIM_Base_SetConfig+0x130>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a25      	ldr	r2, [pc, #148]	; (8005cf4 <TIM_Base_SetConfig+0x134>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a24      	ldr	r2, [pc, #144]	; (8005cf8 <TIM_Base_SetConfig+0x138>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a23      	ldr	r2, [pc, #140]	; (8005cfc <TIM_Base_SetConfig+0x13c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d108      	bne.n	8005c84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a0a      	ldr	r2, [pc, #40]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a0c      	ldr	r2, [pc, #48]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d103      	bne.n	8005cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	615a      	str	r2, [r3, #20]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40010000 	.word	0x40010000
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	40010400 	.word	0x40010400
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	40014800 	.word	0x40014800
 8005cf4:	40001800 	.word	0x40001800
 8005cf8:	40001c00 	.word	0x40001c00
 8005cfc:	40002000 	.word	0x40002000

08005d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0201 	bic.w	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0303 	bic.w	r3, r3, #3
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f023 0302 	bic.w	r3, r3, #2
 8005d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a20      	ldr	r2, [pc, #128]	; (8005dd8 <TIM_OC1_SetConfig+0xd8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC1_SetConfig+0x64>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a1f      	ldr	r2, [pc, #124]	; (8005ddc <TIM_OC1_SetConfig+0xdc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d10c      	bne.n	8005d7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 0308 	bic.w	r3, r3, #8
 8005d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 0304 	bic.w	r3, r3, #4
 8005d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a15      	ldr	r2, [pc, #84]	; (8005dd8 <TIM_OC1_SetConfig+0xd8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC1_SetConfig+0x8e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a14      	ldr	r2, [pc, #80]	; (8005ddc <TIM_OC1_SetConfig+0xdc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d111      	bne.n	8005db2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	621a      	str	r2, [r3, #32]
}
 8005dcc:	bf00      	nop
 8005dce:	371c      	adds	r7, #28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	40010000 	.word	0x40010000
 8005ddc:	40010400 	.word	0x40010400

08005de0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f023 0210 	bic.w	r2, r3, #16
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	021b      	lsls	r3, r3, #8
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f023 0320 	bic.w	r3, r3, #32
 8005e2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a22      	ldr	r2, [pc, #136]	; (8005ec4 <TIM_OC2_SetConfig+0xe4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <TIM_OC2_SetConfig+0x68>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a21      	ldr	r2, [pc, #132]	; (8005ec8 <TIM_OC2_SetConfig+0xe8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d10d      	bne.n	8005e64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a17      	ldr	r2, [pc, #92]	; (8005ec4 <TIM_OC2_SetConfig+0xe4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d003      	beq.n	8005e74 <TIM_OC2_SetConfig+0x94>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a16      	ldr	r2, [pc, #88]	; (8005ec8 <TIM_OC2_SetConfig+0xe8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d113      	bne.n	8005e9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40010400 	.word	0x40010400

08005ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	021b      	lsls	r3, r3, #8
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a21      	ldr	r2, [pc, #132]	; (8005fac <TIM_OC3_SetConfig+0xe0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_OC3_SetConfig+0x66>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a20      	ldr	r2, [pc, #128]	; (8005fb0 <TIM_OC3_SetConfig+0xe4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d10d      	bne.n	8005f4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a16      	ldr	r2, [pc, #88]	; (8005fac <TIM_OC3_SetConfig+0xe0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_OC3_SetConfig+0x92>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <TIM_OC3_SetConfig+0xe4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d113      	bne.n	8005f86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40010400 	.word	0x40010400

08005fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	021b      	lsls	r3, r3, #8
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	031b      	lsls	r3, r3, #12
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a12      	ldr	r2, [pc, #72]	; (8006058 <TIM_OC4_SetConfig+0xa4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_OC4_SetConfig+0x68>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a11      	ldr	r2, [pc, #68]	; (800605c <TIM_OC4_SetConfig+0xa8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d109      	bne.n	8006030 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	019b      	lsls	r3, r3, #6
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	621a      	str	r2, [r3, #32]
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40010000 	.word	0x40010000
 800605c:	40010400 	.word	0x40010400

08006060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f023 0201 	bic.w	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800608a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f023 030a 	bic.w	r3, r3, #10
 800609c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	621a      	str	r2, [r3, #32]
}
 80060b2:	bf00      	nop
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060be:	b480      	push	{r7}
 80060c0:	b087      	sub	sp, #28
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f023 0210 	bic.w	r2, r3, #16
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	031b      	lsls	r3, r3, #12
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	4313      	orrs	r3, r2
 8006104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	f043 0307 	orr.w	r3, r3, #7
 8006140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800616e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	021a      	lsls	r2, r3, #8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	431a      	orrs	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4313      	orrs	r3, r2
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	bf00      	nop
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	2201      	movs	r2, #1
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1a      	ldr	r2, [r3, #32]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	43db      	mvns	r3, r3
 80061b6:	401a      	ands	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1a      	ldr	r2, [r3, #32]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f003 031f 	and.w	r3, r3, #31
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	fa01 f303 	lsl.w	r3, r1, r3
 80061cc:	431a      	orrs	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
	...

080061e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e05a      	b.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a21      	ldr	r2, [pc, #132]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d022      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006244:	d01d      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d018      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1a      	ldr	r2, [pc, #104]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00e      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a18      	ldr	r2, [pc, #96]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d009      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a17      	ldr	r2, [pc, #92]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d10c      	bne.n	800629c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	4313      	orrs	r3, r2
 8006292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40010000 	.word	0x40010000
 80062c0:	40000400 	.word	0x40000400
 80062c4:	40000800 	.word	0x40000800
 80062c8:	40000c00 	.word	0x40000c00
 80062cc:	40010400 	.word	0x40010400
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40001800 	.word	0x40001800

080062d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e03d      	b.n	8006370 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e03f      	b.n	8006436 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fb f9e2 	bl	8001794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2224      	movs	r2, #36	; 0x24
 80063d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fb6b 	bl	8006ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695a      	ldr	r2, [r3, #20]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800640c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800641c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b20      	cmp	r3, #32
 8006458:	d153      	bne.n	8006502 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <HAL_UART_Transmit_DMA+0x26>
 8006460:	88fb      	ldrh	r3, [r7, #6]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e04c      	b.n	8006504 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_UART_Transmit_DMA+0x38>
 8006474:	2302      	movs	r3, #2
 8006476:	e045      	b.n	8006504 <HAL_UART_Transmit_DMA+0xc4>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	88fa      	ldrh	r2, [r7, #6]
 800648a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	88fa      	ldrh	r2, [r7, #6]
 8006490:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2221      	movs	r2, #33	; 0x21
 800649c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a4:	4a19      	ldr	r2, [pc, #100]	; (800650c <HAL_UART_Transmit_DMA+0xcc>)
 80064a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	4a18      	ldr	r2, [pc, #96]	; (8006510 <HAL_UART_Transmit_DMA+0xd0>)
 80064ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	4a17      	ldr	r2, [pc, #92]	; (8006514 <HAL_UART_Transmit_DMA+0xd4>)
 80064b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	2200      	movs	r2, #0
 80064be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80064c0:	f107 0308 	add.w	r3, r7, #8
 80064c4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	6819      	ldr	r1, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3304      	adds	r3, #4
 80064d4:	461a      	mov	r2, r3
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	f7fc fa4a 	bl	8002970 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064e4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695a      	ldr	r2, [r3, #20]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064fc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	e000      	b.n	8006504 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006502:	2302      	movs	r3, #2
  }
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	08006755 	.word	0x08006755
 8006510:	080067a7 	.word	0x080067a7
 8006514:	080067c3 	.word	0x080067c3

08006518 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10d      	bne.n	800656a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_UART_IRQHandler+0x52>
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa2d 	bl	80069c2 <UART_Receive_IT>
      return;
 8006568:	e0d1      	b.n	800670e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80b0 	beq.w	80066d2 <HAL_UART_IRQHandler+0x1ba>
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d105      	bne.n	8006588 <HAL_UART_IRQHandler+0x70>
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 80a5 	beq.w	80066d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <HAL_UART_IRQHandler+0x90>
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a0:	f043 0201 	orr.w	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <HAL_UART_IRQHandler+0xb0>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	f043 0202 	orr.w	r2, r3, #2
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <HAL_UART_IRQHandler+0xd0>
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e0:	f043 0204 	orr.w	r2, r3, #4
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00f      	beq.n	8006612 <HAL_UART_IRQHandler+0xfa>
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <HAL_UART_IRQHandler+0xee>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	f043 0208 	orr.w	r2, r3, #8
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d078      	beq.n	800670c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <HAL_UART_IRQHandler+0x11c>
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f9c7 	bl	80069c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663e:	2b40      	cmp	r3, #64	; 0x40
 8006640:	bf0c      	ite	eq
 8006642:	2301      	moveq	r3, #1
 8006644:	2300      	movne	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d102      	bne.n	800665c <HAL_UART_IRQHandler+0x144>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d031      	beq.n	80066c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f910 	bl	8006882 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d123      	bne.n	80066b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695a      	ldr	r2, [r3, #20]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800667e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006684:	2b00      	cmp	r3, #0
 8006686:	d013      	beq.n	80066b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668c:	4a21      	ldr	r2, [pc, #132]	; (8006714 <HAL_UART_IRQHandler+0x1fc>)
 800668e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006694:	4618      	mov	r0, r3
 8006696:	f7fc f9c3 	bl	8002a20 <HAL_DMA_Abort_IT>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d016      	beq.n	80066ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066aa:	4610      	mov	r0, r2
 80066ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ae:	e00e      	b.n	80066ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f845 	bl	8006740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b6:	e00a      	b.n	80066ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f841 	bl	8006740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066be:	e006      	b.n	80066ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f83d 	bl	8006740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80066cc:	e01e      	b.n	800670c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ce:	bf00      	nop
    return;
 80066d0:	e01c      	b.n	800670c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <HAL_UART_IRQHandler+0x1d6>
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8fd 	bl	80068e6 <UART_Transmit_IT>
    return;
 80066ec:	e00f      	b.n	800670e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <HAL_UART_IRQHandler+0x1f6>
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f945 	bl	8006992 <UART_EndTransmit_IT>
    return;
 8006708:	bf00      	nop
 800670a:	e000      	b.n	800670e <HAL_UART_IRQHandler+0x1f6>
    return;
 800670c:	bf00      	nop
  }
}
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	080068bf 	.word	0x080068bf

08006718 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676c:	2b00      	cmp	r3, #0
 800676e:	d113      	bne.n	8006798 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006784:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006794:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006796:	e002      	b.n	800679e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7fb fab1 	bl	8001d00 <HAL_UART_TxCpltCallback>
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff ffaf 	bl	8006718 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067de:	2b80      	cmp	r3, #128	; 0x80
 80067e0:	bf0c      	ite	eq
 80067e2:	2301      	moveq	r3, #1
 80067e4:	2300      	movne	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b21      	cmp	r3, #33	; 0x21
 80067f4:	d108      	bne.n	8006808 <UART_DMAError+0x46>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2200      	movs	r2, #0
 8006800:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006802:	68b8      	ldr	r0, [r7, #8]
 8006804:	f000 f827 	bl	8006856 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b40      	cmp	r3, #64	; 0x40
 8006814:	bf0c      	ite	eq
 8006816:	2301      	moveq	r3, #1
 8006818:	2300      	movne	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b22      	cmp	r3, #34	; 0x22
 8006828:	d108      	bne.n	800683c <UART_DMAError+0x7a>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2200      	movs	r2, #0
 8006834:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006836:	68b8      	ldr	r0, [r7, #8]
 8006838:	f000 f823 	bl	8006882 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006840:	f043 0210 	orr.w	r2, r3, #16
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006848:	68b8      	ldr	r0, [r7, #8]
 800684a:	f7ff ff79 	bl	8006740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800686c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006898:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695a      	ldr	r2, [r3, #20]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7ff ff31 	bl	8006740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b21      	cmp	r3, #33	; 0x21
 80068f8:	d144      	bne.n	8006984 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006902:	d11a      	bne.n	800693a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006918:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d105      	bne.n	800692e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	1c9a      	adds	r2, r3, #2
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	621a      	str	r2, [r3, #32]
 800692c:	e00e      	b.n	800694c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	621a      	str	r2, [r3, #32]
 8006938:	e008      	b.n	800694c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	1c59      	adds	r1, r3, #1
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6211      	str	r1, [r2, #32]
 8006944:	781a      	ldrb	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29b      	uxth	r3, r3
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	4619      	mov	r1, r3
 800695a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10f      	bne.n	8006980 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800696e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800697e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006984:	2302      	movs	r3, #2
  }
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7fb f9a4 	bl	8001d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b22      	cmp	r3, #34	; 0x22
 80069d4:	d171      	bne.n	8006aba <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069de:	d123      	bne.n	8006a28 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10e      	bne.n	8006a0c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	1c9a      	adds	r2, r3, #2
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	629a      	str	r2, [r3, #40]	; 0x28
 8006a0a:	e029      	b.n	8006a60 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	629a      	str	r2, [r3, #40]	; 0x28
 8006a26:	e01b      	b.n	8006a60 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6858      	ldr	r0, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	1c59      	adds	r1, r3, #1
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6291      	str	r1, [r2, #40]	; 0x28
 8006a40:	b2c2      	uxtb	r2, r0
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e00c      	b.n	8006a60 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	1c58      	adds	r0, r3, #1
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	6288      	str	r0, [r1, #40]	; 0x28
 8006a58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d120      	bne.n	8006ab6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0220 	bic.w	r2, r2, #32
 8006a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff fe3d 	bl	800672c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e002      	b.n	8006abc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e000      	b.n	8006abc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
  }
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b06:	f023 030c 	bic.w	r3, r3, #12
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6812      	ldr	r2, [r2, #0]
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	430b      	orrs	r3, r1
 8006b12:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b32:	f040 818b 	bne.w	8006e4c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4ac1      	ldr	r2, [pc, #772]	; (8006e40 <UART_SetConfig+0x37c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d005      	beq.n	8006b4c <UART_SetConfig+0x88>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4abf      	ldr	r2, [pc, #764]	; (8006e44 <UART_SetConfig+0x380>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	f040 80bd 	bne.w	8006cc6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b4c:	f7fd fffa 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 8006b50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	461d      	mov	r5, r3
 8006b56:	f04f 0600 	mov.w	r6, #0
 8006b5a:	46a8      	mov	r8, r5
 8006b5c:	46b1      	mov	r9, r6
 8006b5e:	eb18 0308 	adds.w	r3, r8, r8
 8006b62:	eb49 0409 	adc.w	r4, r9, r9
 8006b66:	4698      	mov	r8, r3
 8006b68:	46a1      	mov	r9, r4
 8006b6a:	eb18 0805 	adds.w	r8, r8, r5
 8006b6e:	eb49 0906 	adc.w	r9, r9, r6
 8006b72:	f04f 0100 	mov.w	r1, #0
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b86:	4688      	mov	r8, r1
 8006b88:	4691      	mov	r9, r2
 8006b8a:	eb18 0005 	adds.w	r0, r8, r5
 8006b8e:	eb49 0106 	adc.w	r1, r9, r6
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	461d      	mov	r5, r3
 8006b98:	f04f 0600 	mov.w	r6, #0
 8006b9c:	196b      	adds	r3, r5, r5
 8006b9e:	eb46 0406 	adc.w	r4, r6, r6
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4623      	mov	r3, r4
 8006ba6:	f7fa f81f 	bl	8000be8 <__aeabi_uldivmod>
 8006baa:	4603      	mov	r3, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4ba5      	ldr	r3, [pc, #660]	; (8006e48 <UART_SetConfig+0x384>)
 8006bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	461d      	mov	r5, r3
 8006bc0:	f04f 0600 	mov.w	r6, #0
 8006bc4:	46a9      	mov	r9, r5
 8006bc6:	46b2      	mov	sl, r6
 8006bc8:	eb19 0309 	adds.w	r3, r9, r9
 8006bcc:	eb4a 040a 	adc.w	r4, sl, sl
 8006bd0:	4699      	mov	r9, r3
 8006bd2:	46a2      	mov	sl, r4
 8006bd4:	eb19 0905 	adds.w	r9, r9, r5
 8006bd8:	eb4a 0a06 	adc.w	sl, sl, r6
 8006bdc:	f04f 0100 	mov.w	r1, #0
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006be8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bf0:	4689      	mov	r9, r1
 8006bf2:	4692      	mov	sl, r2
 8006bf4:	eb19 0005 	adds.w	r0, r9, r5
 8006bf8:	eb4a 0106 	adc.w	r1, sl, r6
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	461d      	mov	r5, r3
 8006c02:	f04f 0600 	mov.w	r6, #0
 8006c06:	196b      	adds	r3, r5, r5
 8006c08:	eb46 0406 	adc.w	r4, r6, r6
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	4623      	mov	r3, r4
 8006c10:	f7f9 ffea 	bl	8000be8 <__aeabi_uldivmod>
 8006c14:	4603      	mov	r3, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4b8b      	ldr	r3, [pc, #556]	; (8006e48 <UART_SetConfig+0x384>)
 8006c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	2164      	movs	r1, #100	; 0x64
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	3332      	adds	r3, #50	; 0x32
 8006c2e:	4a86      	ldr	r2, [pc, #536]	; (8006e48 <UART_SetConfig+0x384>)
 8006c30:	fba2 2303 	umull	r2, r3, r2, r3
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c3c:	4498      	add	r8, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	461d      	mov	r5, r3
 8006c42:	f04f 0600 	mov.w	r6, #0
 8006c46:	46a9      	mov	r9, r5
 8006c48:	46b2      	mov	sl, r6
 8006c4a:	eb19 0309 	adds.w	r3, r9, r9
 8006c4e:	eb4a 040a 	adc.w	r4, sl, sl
 8006c52:	4699      	mov	r9, r3
 8006c54:	46a2      	mov	sl, r4
 8006c56:	eb19 0905 	adds.w	r9, r9, r5
 8006c5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c5e:	f04f 0100 	mov.w	r1, #0
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c72:	4689      	mov	r9, r1
 8006c74:	4692      	mov	sl, r2
 8006c76:	eb19 0005 	adds.w	r0, r9, r5
 8006c7a:	eb4a 0106 	adc.w	r1, sl, r6
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	461d      	mov	r5, r3
 8006c84:	f04f 0600 	mov.w	r6, #0
 8006c88:	196b      	adds	r3, r5, r5
 8006c8a:	eb46 0406 	adc.w	r4, r6, r6
 8006c8e:	461a      	mov	r2, r3
 8006c90:	4623      	mov	r3, r4
 8006c92:	f7f9 ffa9 	bl	8000be8 <__aeabi_uldivmod>
 8006c96:	4603      	mov	r3, r0
 8006c98:	460c      	mov	r4, r1
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4b6a      	ldr	r3, [pc, #424]	; (8006e48 <UART_SetConfig+0x384>)
 8006c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca2:	095b      	lsrs	r3, r3, #5
 8006ca4:	2164      	movs	r1, #100	; 0x64
 8006ca6:	fb01 f303 	mul.w	r3, r1, r3
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	3332      	adds	r3, #50	; 0x32
 8006cb0:	4a65      	ldr	r2, [pc, #404]	; (8006e48 <UART_SetConfig+0x384>)
 8006cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	f003 0207 	and.w	r2, r3, #7
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4442      	add	r2, r8
 8006cc2:	609a      	str	r2, [r3, #8]
 8006cc4:	e26f      	b.n	80071a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cc6:	f7fd ff29 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 8006cca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	461d      	mov	r5, r3
 8006cd0:	f04f 0600 	mov.w	r6, #0
 8006cd4:	46a8      	mov	r8, r5
 8006cd6:	46b1      	mov	r9, r6
 8006cd8:	eb18 0308 	adds.w	r3, r8, r8
 8006cdc:	eb49 0409 	adc.w	r4, r9, r9
 8006ce0:	4698      	mov	r8, r3
 8006ce2:	46a1      	mov	r9, r4
 8006ce4:	eb18 0805 	adds.w	r8, r8, r5
 8006ce8:	eb49 0906 	adc.w	r9, r9, r6
 8006cec:	f04f 0100 	mov.w	r1, #0
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cf8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cfc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d00:	4688      	mov	r8, r1
 8006d02:	4691      	mov	r9, r2
 8006d04:	eb18 0005 	adds.w	r0, r8, r5
 8006d08:	eb49 0106 	adc.w	r1, r9, r6
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	461d      	mov	r5, r3
 8006d12:	f04f 0600 	mov.w	r6, #0
 8006d16:	196b      	adds	r3, r5, r5
 8006d18:	eb46 0406 	adc.w	r4, r6, r6
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	4623      	mov	r3, r4
 8006d20:	f7f9 ff62 	bl	8000be8 <__aeabi_uldivmod>
 8006d24:	4603      	mov	r3, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4b47      	ldr	r3, [pc, #284]	; (8006e48 <UART_SetConfig+0x384>)
 8006d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	461d      	mov	r5, r3
 8006d3a:	f04f 0600 	mov.w	r6, #0
 8006d3e:	46a9      	mov	r9, r5
 8006d40:	46b2      	mov	sl, r6
 8006d42:	eb19 0309 	adds.w	r3, r9, r9
 8006d46:	eb4a 040a 	adc.w	r4, sl, sl
 8006d4a:	4699      	mov	r9, r3
 8006d4c:	46a2      	mov	sl, r4
 8006d4e:	eb19 0905 	adds.w	r9, r9, r5
 8006d52:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d56:	f04f 0100 	mov.w	r1, #0
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d6a:	4689      	mov	r9, r1
 8006d6c:	4692      	mov	sl, r2
 8006d6e:	eb19 0005 	adds.w	r0, r9, r5
 8006d72:	eb4a 0106 	adc.w	r1, sl, r6
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	461d      	mov	r5, r3
 8006d7c:	f04f 0600 	mov.w	r6, #0
 8006d80:	196b      	adds	r3, r5, r5
 8006d82:	eb46 0406 	adc.w	r4, r6, r6
 8006d86:	461a      	mov	r2, r3
 8006d88:	4623      	mov	r3, r4
 8006d8a:	f7f9 ff2d 	bl	8000be8 <__aeabi_uldivmod>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	461a      	mov	r2, r3
 8006d94:	4b2c      	ldr	r3, [pc, #176]	; (8006e48 <UART_SetConfig+0x384>)
 8006d96:	fba3 1302 	umull	r1, r3, r3, r2
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	2164      	movs	r1, #100	; 0x64
 8006d9e:	fb01 f303 	mul.w	r3, r1, r3
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	3332      	adds	r3, #50	; 0x32
 8006da8:	4a27      	ldr	r2, [pc, #156]	; (8006e48 <UART_SetConfig+0x384>)
 8006daa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006db6:	4498      	add	r8, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	461d      	mov	r5, r3
 8006dbc:	f04f 0600 	mov.w	r6, #0
 8006dc0:	46a9      	mov	r9, r5
 8006dc2:	46b2      	mov	sl, r6
 8006dc4:	eb19 0309 	adds.w	r3, r9, r9
 8006dc8:	eb4a 040a 	adc.w	r4, sl, sl
 8006dcc:	4699      	mov	r9, r3
 8006dce:	46a2      	mov	sl, r4
 8006dd0:	eb19 0905 	adds.w	r9, r9, r5
 8006dd4:	eb4a 0a06 	adc.w	sl, sl, r6
 8006dd8:	f04f 0100 	mov.w	r1, #0
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006de4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006de8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dec:	4689      	mov	r9, r1
 8006dee:	4692      	mov	sl, r2
 8006df0:	eb19 0005 	adds.w	r0, r9, r5
 8006df4:	eb4a 0106 	adc.w	r1, sl, r6
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	461d      	mov	r5, r3
 8006dfe:	f04f 0600 	mov.w	r6, #0
 8006e02:	196b      	adds	r3, r5, r5
 8006e04:	eb46 0406 	adc.w	r4, r6, r6
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4623      	mov	r3, r4
 8006e0c:	f7f9 feec 	bl	8000be8 <__aeabi_uldivmod>
 8006e10:	4603      	mov	r3, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	461a      	mov	r2, r3
 8006e16:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <UART_SetConfig+0x384>)
 8006e18:	fba3 1302 	umull	r1, r3, r3, r2
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	2164      	movs	r1, #100	; 0x64
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	3332      	adds	r3, #50	; 0x32
 8006e2a:	4a07      	ldr	r2, [pc, #28]	; (8006e48 <UART_SetConfig+0x384>)
 8006e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	f003 0207 	and.w	r2, r3, #7
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4442      	add	r2, r8
 8006e3c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006e3e:	e1b2      	b.n	80071a6 <UART_SetConfig+0x6e2>
 8006e40:	40011000 	.word	0x40011000
 8006e44:	40011400 	.word	0x40011400
 8006e48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4ad7      	ldr	r2, [pc, #860]	; (80071b0 <UART_SetConfig+0x6ec>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d005      	beq.n	8006e62 <UART_SetConfig+0x39e>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4ad6      	ldr	r2, [pc, #856]	; (80071b4 <UART_SetConfig+0x6f0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	f040 80d1 	bne.w	8007004 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e62:	f7fd fe6f 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 8006e66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	469a      	mov	sl, r3
 8006e6c:	f04f 0b00 	mov.w	fp, #0
 8006e70:	46d0      	mov	r8, sl
 8006e72:	46d9      	mov	r9, fp
 8006e74:	eb18 0308 	adds.w	r3, r8, r8
 8006e78:	eb49 0409 	adc.w	r4, r9, r9
 8006e7c:	4698      	mov	r8, r3
 8006e7e:	46a1      	mov	r9, r4
 8006e80:	eb18 080a 	adds.w	r8, r8, sl
 8006e84:	eb49 090b 	adc.w	r9, r9, fp
 8006e88:	f04f 0100 	mov.w	r1, #0
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e9c:	4688      	mov	r8, r1
 8006e9e:	4691      	mov	r9, r2
 8006ea0:	eb1a 0508 	adds.w	r5, sl, r8
 8006ea4:	eb4b 0609 	adc.w	r6, fp, r9
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	4619      	mov	r1, r3
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	f04f 0400 	mov.w	r4, #0
 8006eba:	0094      	lsls	r4, r2, #2
 8006ebc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ec0:	008b      	lsls	r3, r1, #2
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	4631      	mov	r1, r6
 8006eca:	f7f9 fe8d 	bl	8000be8 <__aeabi_uldivmod>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4bb8      	ldr	r3, [pc, #736]	; (80071b8 <UART_SetConfig+0x6f4>)
 8006ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eda:	095b      	lsrs	r3, r3, #5
 8006edc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	469b      	mov	fp, r3
 8006ee4:	f04f 0c00 	mov.w	ip, #0
 8006ee8:	46d9      	mov	r9, fp
 8006eea:	46e2      	mov	sl, ip
 8006eec:	eb19 0309 	adds.w	r3, r9, r9
 8006ef0:	eb4a 040a 	adc.w	r4, sl, sl
 8006ef4:	4699      	mov	r9, r3
 8006ef6:	46a2      	mov	sl, r4
 8006ef8:	eb19 090b 	adds.w	r9, r9, fp
 8006efc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f00:	f04f 0100 	mov.w	r1, #0
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f14:	4689      	mov	r9, r1
 8006f16:	4692      	mov	sl, r2
 8006f18:	eb1b 0509 	adds.w	r5, fp, r9
 8006f1c:	eb4c 060a 	adc.w	r6, ip, sl
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	4619      	mov	r1, r3
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	f04f 0400 	mov.w	r4, #0
 8006f32:	0094      	lsls	r4, r2, #2
 8006f34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f38:	008b      	lsls	r3, r1, #2
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	4623      	mov	r3, r4
 8006f3e:	4628      	mov	r0, r5
 8006f40:	4631      	mov	r1, r6
 8006f42:	f7f9 fe51 	bl	8000be8 <__aeabi_uldivmod>
 8006f46:	4603      	mov	r3, r0
 8006f48:	460c      	mov	r4, r1
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4b9a      	ldr	r3, [pc, #616]	; (80071b8 <UART_SetConfig+0x6f4>)
 8006f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	2164      	movs	r1, #100	; 0x64
 8006f56:	fb01 f303 	mul.w	r3, r1, r3
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	3332      	adds	r3, #50	; 0x32
 8006f60:	4a95      	ldr	r2, [pc, #596]	; (80071b8 <UART_SetConfig+0x6f4>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f6c:	4498      	add	r8, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	469b      	mov	fp, r3
 8006f72:	f04f 0c00 	mov.w	ip, #0
 8006f76:	46d9      	mov	r9, fp
 8006f78:	46e2      	mov	sl, ip
 8006f7a:	eb19 0309 	adds.w	r3, r9, r9
 8006f7e:	eb4a 040a 	adc.w	r4, sl, sl
 8006f82:	4699      	mov	r9, r3
 8006f84:	46a2      	mov	sl, r4
 8006f86:	eb19 090b 	adds.w	r9, r9, fp
 8006f8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f8e:	f04f 0100 	mov.w	r1, #0
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fa2:	4689      	mov	r9, r1
 8006fa4:	4692      	mov	sl, r2
 8006fa6:	eb1b 0509 	adds.w	r5, fp, r9
 8006faa:	eb4c 060a 	adc.w	r6, ip, sl
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	f04f 0400 	mov.w	r4, #0
 8006fc0:	0094      	lsls	r4, r2, #2
 8006fc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fc6:	008b      	lsls	r3, r1, #2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4623      	mov	r3, r4
 8006fcc:	4628      	mov	r0, r5
 8006fce:	4631      	mov	r1, r6
 8006fd0:	f7f9 fe0a 	bl	8000be8 <__aeabi_uldivmod>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4b77      	ldr	r3, [pc, #476]	; (80071b8 <UART_SetConfig+0x6f4>)
 8006fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe0:	095b      	lsrs	r3, r3, #5
 8006fe2:	2164      	movs	r1, #100	; 0x64
 8006fe4:	fb01 f303 	mul.w	r3, r1, r3
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	3332      	adds	r3, #50	; 0x32
 8006fee:	4a72      	ldr	r2, [pc, #456]	; (80071b8 <UART_SetConfig+0x6f4>)
 8006ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	f003 020f 	and.w	r2, r3, #15
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4442      	add	r2, r8
 8007000:	609a      	str	r2, [r3, #8]
 8007002:	e0d0      	b.n	80071a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007004:	f7fd fd8a 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 8007008:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	469a      	mov	sl, r3
 800700e:	f04f 0b00 	mov.w	fp, #0
 8007012:	46d0      	mov	r8, sl
 8007014:	46d9      	mov	r9, fp
 8007016:	eb18 0308 	adds.w	r3, r8, r8
 800701a:	eb49 0409 	adc.w	r4, r9, r9
 800701e:	4698      	mov	r8, r3
 8007020:	46a1      	mov	r9, r4
 8007022:	eb18 080a 	adds.w	r8, r8, sl
 8007026:	eb49 090b 	adc.w	r9, r9, fp
 800702a:	f04f 0100 	mov.w	r1, #0
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007036:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800703a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800703e:	4688      	mov	r8, r1
 8007040:	4691      	mov	r9, r2
 8007042:	eb1a 0508 	adds.w	r5, sl, r8
 8007046:	eb4b 0609 	adc.w	r6, fp, r9
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	4619      	mov	r1, r3
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	f04f 0400 	mov.w	r4, #0
 800705c:	0094      	lsls	r4, r2, #2
 800705e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007062:	008b      	lsls	r3, r1, #2
 8007064:	461a      	mov	r2, r3
 8007066:	4623      	mov	r3, r4
 8007068:	4628      	mov	r0, r5
 800706a:	4631      	mov	r1, r6
 800706c:	f7f9 fdbc 	bl	8000be8 <__aeabi_uldivmod>
 8007070:	4603      	mov	r3, r0
 8007072:	460c      	mov	r4, r1
 8007074:	461a      	mov	r2, r3
 8007076:	4b50      	ldr	r3, [pc, #320]	; (80071b8 <UART_SetConfig+0x6f4>)
 8007078:	fba3 2302 	umull	r2, r3, r3, r2
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	469b      	mov	fp, r3
 8007086:	f04f 0c00 	mov.w	ip, #0
 800708a:	46d9      	mov	r9, fp
 800708c:	46e2      	mov	sl, ip
 800708e:	eb19 0309 	adds.w	r3, r9, r9
 8007092:	eb4a 040a 	adc.w	r4, sl, sl
 8007096:	4699      	mov	r9, r3
 8007098:	46a2      	mov	sl, r4
 800709a:	eb19 090b 	adds.w	r9, r9, fp
 800709e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070a2:	f04f 0100 	mov.w	r1, #0
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070b6:	4689      	mov	r9, r1
 80070b8:	4692      	mov	sl, r2
 80070ba:	eb1b 0509 	adds.w	r5, fp, r9
 80070be:	eb4c 060a 	adc.w	r6, ip, sl
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	4619      	mov	r1, r3
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	f04f 0400 	mov.w	r4, #0
 80070d4:	0094      	lsls	r4, r2, #2
 80070d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070da:	008b      	lsls	r3, r1, #2
 80070dc:	461a      	mov	r2, r3
 80070de:	4623      	mov	r3, r4
 80070e0:	4628      	mov	r0, r5
 80070e2:	4631      	mov	r1, r6
 80070e4:	f7f9 fd80 	bl	8000be8 <__aeabi_uldivmod>
 80070e8:	4603      	mov	r3, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	461a      	mov	r2, r3
 80070ee:	4b32      	ldr	r3, [pc, #200]	; (80071b8 <UART_SetConfig+0x6f4>)
 80070f0:	fba3 1302 	umull	r1, r3, r3, r2
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	2164      	movs	r1, #100	; 0x64
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	3332      	adds	r3, #50	; 0x32
 8007102:	4a2d      	ldr	r2, [pc, #180]	; (80071b8 <UART_SetConfig+0x6f4>)
 8007104:	fba2 2303 	umull	r2, r3, r2, r3
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800710e:	4498      	add	r8, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	469b      	mov	fp, r3
 8007114:	f04f 0c00 	mov.w	ip, #0
 8007118:	46d9      	mov	r9, fp
 800711a:	46e2      	mov	sl, ip
 800711c:	eb19 0309 	adds.w	r3, r9, r9
 8007120:	eb4a 040a 	adc.w	r4, sl, sl
 8007124:	4699      	mov	r9, r3
 8007126:	46a2      	mov	sl, r4
 8007128:	eb19 090b 	adds.w	r9, r9, fp
 800712c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007130:	f04f 0100 	mov.w	r1, #0
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800713c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007140:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007144:	4689      	mov	r9, r1
 8007146:	4692      	mov	sl, r2
 8007148:	eb1b 0509 	adds.w	r5, fp, r9
 800714c:	eb4c 060a 	adc.w	r6, ip, sl
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	4619      	mov	r1, r3
 8007156:	f04f 0200 	mov.w	r2, #0
 800715a:	f04f 0300 	mov.w	r3, #0
 800715e:	f04f 0400 	mov.w	r4, #0
 8007162:	0094      	lsls	r4, r2, #2
 8007164:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007168:	008b      	lsls	r3, r1, #2
 800716a:	461a      	mov	r2, r3
 800716c:	4623      	mov	r3, r4
 800716e:	4628      	mov	r0, r5
 8007170:	4631      	mov	r1, r6
 8007172:	f7f9 fd39 	bl	8000be8 <__aeabi_uldivmod>
 8007176:	4603      	mov	r3, r0
 8007178:	460c      	mov	r4, r1
 800717a:	461a      	mov	r2, r3
 800717c:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <UART_SetConfig+0x6f4>)
 800717e:	fba3 1302 	umull	r1, r3, r3, r2
 8007182:	095b      	lsrs	r3, r3, #5
 8007184:	2164      	movs	r1, #100	; 0x64
 8007186:	fb01 f303 	mul.w	r3, r1, r3
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	011b      	lsls	r3, r3, #4
 800718e:	3332      	adds	r3, #50	; 0x32
 8007190:	4a09      	ldr	r2, [pc, #36]	; (80071b8 <UART_SetConfig+0x6f4>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	095b      	lsrs	r3, r3, #5
 8007198:	f003 020f 	and.w	r2, r3, #15
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4442      	add	r2, r8
 80071a2:	609a      	str	r2, [r3, #8]
}
 80071a4:	e7ff      	b.n	80071a6 <UART_SetConfig+0x6e2>
 80071a6:	bf00      	nop
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b0:	40011000 	.word	0x40011000
 80071b4:	40011400 	.word	0x40011400
 80071b8:	51eb851f 	.word	0x51eb851f

080071bc <__errno>:
 80071bc:	4b01      	ldr	r3, [pc, #4]	; (80071c4 <__errno+0x8>)
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20000038 	.word	0x20000038

080071c8 <__libc_init_array>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	4e0d      	ldr	r6, [pc, #52]	; (8007200 <__libc_init_array+0x38>)
 80071cc:	4c0d      	ldr	r4, [pc, #52]	; (8007204 <__libc_init_array+0x3c>)
 80071ce:	1ba4      	subs	r4, r4, r6
 80071d0:	10a4      	asrs	r4, r4, #2
 80071d2:	2500      	movs	r5, #0
 80071d4:	42a5      	cmp	r5, r4
 80071d6:	d109      	bne.n	80071ec <__libc_init_array+0x24>
 80071d8:	4e0b      	ldr	r6, [pc, #44]	; (8007208 <__libc_init_array+0x40>)
 80071da:	4c0c      	ldr	r4, [pc, #48]	; (800720c <__libc_init_array+0x44>)
 80071dc:	f003 fa1a 	bl	800a614 <_init>
 80071e0:	1ba4      	subs	r4, r4, r6
 80071e2:	10a4      	asrs	r4, r4, #2
 80071e4:	2500      	movs	r5, #0
 80071e6:	42a5      	cmp	r5, r4
 80071e8:	d105      	bne.n	80071f6 <__libc_init_array+0x2e>
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
 80071ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071f0:	4798      	blx	r3
 80071f2:	3501      	adds	r5, #1
 80071f4:	e7ee      	b.n	80071d4 <__libc_init_array+0xc>
 80071f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071fa:	4798      	blx	r3
 80071fc:	3501      	adds	r5, #1
 80071fe:	e7f2      	b.n	80071e6 <__libc_init_array+0x1e>
 8007200:	0800a930 	.word	0x0800a930
 8007204:	0800a930 	.word	0x0800a930
 8007208:	0800a930 	.word	0x0800a930
 800720c:	0800a938 	.word	0x0800a938

08007210 <memset>:
 8007210:	4402      	add	r2, r0
 8007212:	4603      	mov	r3, r0
 8007214:	4293      	cmp	r3, r2
 8007216:	d100      	bne.n	800721a <memset+0xa>
 8007218:	4770      	bx	lr
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f9      	b.n	8007214 <memset+0x4>

08007220 <_vsprintf_r>:
 8007220:	b500      	push	{lr}
 8007222:	b09b      	sub	sp, #108	; 0x6c
 8007224:	9100      	str	r1, [sp, #0]
 8007226:	9104      	str	r1, [sp, #16]
 8007228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800722c:	9105      	str	r1, [sp, #20]
 800722e:	9102      	str	r1, [sp, #8]
 8007230:	4905      	ldr	r1, [pc, #20]	; (8007248 <_vsprintf_r+0x28>)
 8007232:	9103      	str	r1, [sp, #12]
 8007234:	4669      	mov	r1, sp
 8007236:	f000 f83b 	bl	80072b0 <_svfprintf_r>
 800723a:	9b00      	ldr	r3, [sp, #0]
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	b01b      	add	sp, #108	; 0x6c
 8007242:	f85d fb04 	ldr.w	pc, [sp], #4
 8007246:	bf00      	nop
 8007248:	ffff0208 	.word	0xffff0208

0800724c <vsprintf>:
 800724c:	4613      	mov	r3, r2
 800724e:	460a      	mov	r2, r1
 8007250:	4601      	mov	r1, r0
 8007252:	4802      	ldr	r0, [pc, #8]	; (800725c <vsprintf+0x10>)
 8007254:	6800      	ldr	r0, [r0, #0]
 8007256:	f7ff bfe3 	b.w	8007220 <_vsprintf_r>
 800725a:	bf00      	nop
 800725c:	20000038 	.word	0x20000038

08007260 <register_fini>:
 8007260:	4b02      	ldr	r3, [pc, #8]	; (800726c <register_fini+0xc>)
 8007262:	b113      	cbz	r3, 800726a <register_fini+0xa>
 8007264:	4802      	ldr	r0, [pc, #8]	; (8007270 <register_fini+0x10>)
 8007266:	f000 b805 	b.w	8007274 <atexit>
 800726a:	4770      	bx	lr
 800726c:	00000000 	.word	0x00000000
 8007270:	08007281 	.word	0x08007281

08007274 <atexit>:
 8007274:	2300      	movs	r3, #0
 8007276:	4601      	mov	r1, r0
 8007278:	461a      	mov	r2, r3
 800727a:	4618      	mov	r0, r3
 800727c:	f001 ba36 	b.w	80086ec <__register_exitproc>

08007280 <__libc_fini_array>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4d07      	ldr	r5, [pc, #28]	; (80072a0 <__libc_fini_array+0x20>)
 8007284:	4c07      	ldr	r4, [pc, #28]	; (80072a4 <__libc_fini_array+0x24>)
 8007286:	1b64      	subs	r4, r4, r5
 8007288:	10a4      	asrs	r4, r4, #2
 800728a:	b91c      	cbnz	r4, 8007294 <__libc_fini_array+0x14>
 800728c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007290:	f003 b9c6 	b.w	800a620 <_fini>
 8007294:	3c01      	subs	r4, #1
 8007296:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800729a:	4798      	blx	r3
 800729c:	e7f5      	b.n	800728a <__libc_fini_array+0xa>
 800729e:	bf00      	nop
 80072a0:	0800a938 	.word	0x0800a938
 80072a4:	0800a93c 	.word	0x0800a93c

080072a8 <__retarget_lock_acquire_recursive>:
 80072a8:	4770      	bx	lr

080072aa <__retarget_lock_release_recursive>:
 80072aa:	4770      	bx	lr
 80072ac:	0000      	movs	r0, r0
	...

080072b0 <_svfprintf_r>:
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	b0d3      	sub	sp, #332	; 0x14c
 80072b6:	4688      	mov	r8, r1
 80072b8:	4693      	mov	fp, r2
 80072ba:	461e      	mov	r6, r3
 80072bc:	9003      	str	r0, [sp, #12]
 80072be:	f002 f9af 	bl	8009620 <_localeconv_r>
 80072c2:	6803      	ldr	r3, [r0, #0]
 80072c4:	9316      	str	r3, [sp, #88]	; 0x58
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7f8 ffa2 	bl	8000210 <strlen>
 80072cc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80072d0:	900d      	str	r0, [sp, #52]	; 0x34
 80072d2:	0618      	lsls	r0, r3, #24
 80072d4:	d518      	bpl.n	8007308 <_svfprintf_r+0x58>
 80072d6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80072da:	b9ab      	cbnz	r3, 8007308 <_svfprintf_r+0x58>
 80072dc:	2140      	movs	r1, #64	; 0x40
 80072de:	9803      	ldr	r0, [sp, #12]
 80072e0:	f002 f9ac 	bl	800963c <_malloc_r>
 80072e4:	f8c8 0000 	str.w	r0, [r8]
 80072e8:	f8c8 0010 	str.w	r0, [r8, #16]
 80072ec:	b948      	cbnz	r0, 8007302 <_svfprintf_r+0x52>
 80072ee:	9a03      	ldr	r2, [sp, #12]
 80072f0:	230c      	movs	r3, #12
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295
 80072f8:	930e      	str	r3, [sp, #56]	; 0x38
 80072fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80072fc:	b053      	add	sp, #332	; 0x14c
 80072fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007302:	2340      	movs	r3, #64	; 0x40
 8007304:	f8c8 3014 	str.w	r3, [r8, #20]
 8007308:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 8007630 <_svfprintf_r+0x380>
 800730c:	2300      	movs	r3, #0
 800730e:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8007312:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007316:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800731a:	ac29      	add	r4, sp, #164	; 0xa4
 800731c:	9426      	str	r4, [sp, #152]	; 0x98
 800731e:	9304      	str	r3, [sp, #16]
 8007320:	9309      	str	r3, [sp, #36]	; 0x24
 8007322:	9312      	str	r3, [sp, #72]	; 0x48
 8007324:	9319      	str	r3, [sp, #100]	; 0x64
 8007326:	930e      	str	r3, [sp, #56]	; 0x38
 8007328:	465d      	mov	r5, fp
 800732a:	462b      	mov	r3, r5
 800732c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007330:	b112      	cbz	r2, 8007338 <_svfprintf_r+0x88>
 8007332:	2a25      	cmp	r2, #37	; 0x25
 8007334:	f040 80e4 	bne.w	8007500 <_svfprintf_r+0x250>
 8007338:	ebb5 070b 	subs.w	r7, r5, fp
 800733c:	d00e      	beq.n	800735c <_svfprintf_r+0xac>
 800733e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007340:	443b      	add	r3, r7
 8007342:	9328      	str	r3, [sp, #160]	; 0xa0
 8007344:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007346:	3301      	adds	r3, #1
 8007348:	2b07      	cmp	r3, #7
 800734a:	e9c4 b700 	strd	fp, r7, [r4]
 800734e:	9327      	str	r3, [sp, #156]	; 0x9c
 8007350:	f300 80d8 	bgt.w	8007504 <_svfprintf_r+0x254>
 8007354:	3408      	adds	r4, #8
 8007356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007358:	443b      	add	r3, r7
 800735a:	930e      	str	r3, [sp, #56]	; 0x38
 800735c:	782b      	ldrb	r3, [r5, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f001 81b4 	beq.w	80086cc <_svfprintf_r+0x141c>
 8007364:	1c6b      	adds	r3, r5, #1
 8007366:	930c      	str	r3, [sp, #48]	; 0x30
 8007368:	2300      	movs	r3, #0
 800736a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800736e:	f04f 35ff 	mov.w	r5, #4294967295
 8007372:	930f      	str	r3, [sp, #60]	; 0x3c
 8007374:	469a      	mov	sl, r3
 8007376:	270a      	movs	r7, #10
 8007378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	9306      	str	r3, [sp, #24]
 800737e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007380:	3301      	adds	r3, #1
 8007382:	930c      	str	r3, [sp, #48]	; 0x30
 8007384:	9b06      	ldr	r3, [sp, #24]
 8007386:	3b20      	subs	r3, #32
 8007388:	2b5a      	cmp	r3, #90	; 0x5a
 800738a:	f200 8624 	bhi.w	8007fd6 <_svfprintf_r+0xd26>
 800738e:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <_svfprintf_r+0xe4>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	08007597 	.word	0x08007597
 8007398:	08007fd7 	.word	0x08007fd7
 800739c:	08007fd7 	.word	0x08007fd7
 80073a0:	080075a9 	.word	0x080075a9
 80073a4:	08007fd7 	.word	0x08007fd7
 80073a8:	08007fd7 	.word	0x08007fd7
 80073ac:	08007fd7 	.word	0x08007fd7
 80073b0:	0800755d 	.word	0x0800755d
 80073b4:	08007fd7 	.word	0x08007fd7
 80073b8:	08007fd7 	.word	0x08007fd7
 80073bc:	080075af 	.word	0x080075af
 80073c0:	080075c7 	.word	0x080075c7
 80073c4:	08007fd7 	.word	0x08007fd7
 80073c8:	080075c1 	.word	0x080075c1
 80073cc:	080075cb 	.word	0x080075cb
 80073d0:	08007fd7 	.word	0x08007fd7
 80073d4:	080075ff 	.word	0x080075ff
 80073d8:	08007605 	.word	0x08007605
 80073dc:	08007605 	.word	0x08007605
 80073e0:	08007605 	.word	0x08007605
 80073e4:	08007605 	.word	0x08007605
 80073e8:	08007605 	.word	0x08007605
 80073ec:	08007605 	.word	0x08007605
 80073f0:	08007605 	.word	0x08007605
 80073f4:	08007605 	.word	0x08007605
 80073f8:	08007605 	.word	0x08007605
 80073fc:	08007fd7 	.word	0x08007fd7
 8007400:	08007fd7 	.word	0x08007fd7
 8007404:	08007fd7 	.word	0x08007fd7
 8007408:	08007fd7 	.word	0x08007fd7
 800740c:	08007fd7 	.word	0x08007fd7
 8007410:	08007fd7 	.word	0x08007fd7
 8007414:	08007fd7 	.word	0x08007fd7
 8007418:	08007707 	.word	0x08007707
 800741c:	08007fd7 	.word	0x08007fd7
 8007420:	08007671 	.word	0x08007671
 8007424:	08007693 	.word	0x08007693
 8007428:	08007707 	.word	0x08007707
 800742c:	08007707 	.word	0x08007707
 8007430:	08007707 	.word	0x08007707
 8007434:	08007fd7 	.word	0x08007fd7
 8007438:	08007fd7 	.word	0x08007fd7
 800743c:	08007fd7 	.word	0x08007fd7
 8007440:	08007fd7 	.word	0x08007fd7
 8007444:	08007625 	.word	0x08007625
 8007448:	08007fd7 	.word	0x08007fd7
 800744c:	08007fd7 	.word	0x08007fd7
 8007450:	08007bd9 	.word	0x08007bd9
 8007454:	08007fd7 	.word	0x08007fd7
 8007458:	08007fd7 	.word	0x08007fd7
 800745c:	08007fd7 	.word	0x08007fd7
 8007460:	08007c65 	.word	0x08007c65
 8007464:	08007fd7 	.word	0x08007fd7
 8007468:	08007e47 	.word	0x08007e47
 800746c:	08007fd7 	.word	0x08007fd7
 8007470:	08007fd7 	.word	0x08007fd7
 8007474:	0800751d 	.word	0x0800751d
 8007478:	08007fd7 	.word	0x08007fd7
 800747c:	08007fd7 	.word	0x08007fd7
 8007480:	08007fd7 	.word	0x08007fd7
 8007484:	08007fd7 	.word	0x08007fd7
 8007488:	08007fd7 	.word	0x08007fd7
 800748c:	08007fd7 	.word	0x08007fd7
 8007490:	08007fd7 	.word	0x08007fd7
 8007494:	08007fd7 	.word	0x08007fd7
 8007498:	08007707 	.word	0x08007707
 800749c:	08007fd7 	.word	0x08007fd7
 80074a0:	08007671 	.word	0x08007671
 80074a4:	08007697 	.word	0x08007697
 80074a8:	08007707 	.word	0x08007707
 80074ac:	08007707 	.word	0x08007707
 80074b0:	08007707 	.word	0x08007707
 80074b4:	0800763d 	.word	0x0800763d
 80074b8:	08007697 	.word	0x08007697
 80074bc:	08007665 	.word	0x08007665
 80074c0:	08007fd7 	.word	0x08007fd7
 80074c4:	08007657 	.word	0x08007657
 80074c8:	08007fd7 	.word	0x08007fd7
 80074cc:	08007b93 	.word	0x08007b93
 80074d0:	08007bdd 	.word	0x08007bdd
 80074d4:	08007c45 	.word	0x08007c45
 80074d8:	08007665 	.word	0x08007665
 80074dc:	08007fd7 	.word	0x08007fd7
 80074e0:	08007c65 	.word	0x08007c65
 80074e4:	08007379 	.word	0x08007379
 80074e8:	08007e4b 	.word	0x08007e4b
 80074ec:	08007fd7 	.word	0x08007fd7
 80074f0:	08007fd7 	.word	0x08007fd7
 80074f4:	08007e89 	.word	0x08007e89
 80074f8:	08007fd7 	.word	0x08007fd7
 80074fc:	08007379 	.word	0x08007379
 8007500:	461d      	mov	r5, r3
 8007502:	e712      	b.n	800732a <_svfprintf_r+0x7a>
 8007504:	aa26      	add	r2, sp, #152	; 0x98
 8007506:	4641      	mov	r1, r8
 8007508:	9803      	ldr	r0, [sp, #12]
 800750a:	f002 fdf0 	bl	800a0ee <__ssprint_r>
 800750e:	2800      	cmp	r0, #0
 8007510:	f040 8166 	bne.w	80077e0 <_svfprintf_r+0x530>
 8007514:	ac29      	add	r4, sp, #164	; 0xa4
 8007516:	e71e      	b.n	8007356 <_svfprintf_r+0xa6>
 8007518:	461e      	mov	r6, r3
 800751a:	e72d      	b.n	8007378 <_svfprintf_r+0xc8>
 800751c:	4b46      	ldr	r3, [pc, #280]	; (8007638 <_svfprintf_r+0x388>)
 800751e:	9318      	str	r3, [sp, #96]	; 0x60
 8007520:	f01a 0f20 	tst.w	sl, #32
 8007524:	f000 84b3 	beq.w	8007e8e <_svfprintf_r+0xbde>
 8007528:	3607      	adds	r6, #7
 800752a:	f026 0607 	bic.w	r6, r6, #7
 800752e:	f106 0308 	add.w	r3, r6, #8
 8007532:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007536:	9308      	str	r3, [sp, #32]
 8007538:	f01a 0f01 	tst.w	sl, #1
 800753c:	d00a      	beq.n	8007554 <_svfprintf_r+0x2a4>
 800753e:	ea56 0307 	orrs.w	r3, r6, r7
 8007542:	d007      	beq.n	8007554 <_svfprintf_r+0x2a4>
 8007544:	2330      	movs	r3, #48	; 0x30
 8007546:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800754a:	9b06      	ldr	r3, [sp, #24]
 800754c:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8007550:	f04a 0a02 	orr.w	sl, sl, #2
 8007554:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007558:	2302      	movs	r3, #2
 800755a:	e34d      	b.n	8007bf8 <_svfprintf_r+0x948>
 800755c:	9803      	ldr	r0, [sp, #12]
 800755e:	f002 f85f 	bl	8009620 <_localeconv_r>
 8007562:	6843      	ldr	r3, [r0, #4]
 8007564:	9319      	str	r3, [sp, #100]	; 0x64
 8007566:	4618      	mov	r0, r3
 8007568:	f7f8 fe52 	bl	8000210 <strlen>
 800756c:	9012      	str	r0, [sp, #72]	; 0x48
 800756e:	9803      	ldr	r0, [sp, #12]
 8007570:	f002 f856 	bl	8009620 <_localeconv_r>
 8007574:	6883      	ldr	r3, [r0, #8]
 8007576:	9309      	str	r3, [sp, #36]	; 0x24
 8007578:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800757a:	2b00      	cmp	r3, #0
 800757c:	f43f aefc 	beq.w	8007378 <_svfprintf_r+0xc8>
 8007580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007582:	2b00      	cmp	r3, #0
 8007584:	f43f aef8 	beq.w	8007378 <_svfprintf_r+0xc8>
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	f43f aef4 	beq.w	8007378 <_svfprintf_r+0xc8>
 8007590:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8007594:	e6f0      	b.n	8007378 <_svfprintf_r+0xc8>
 8007596:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800759a:	2b00      	cmp	r3, #0
 800759c:	f47f aeec 	bne.w	8007378 <_svfprintf_r+0xc8>
 80075a0:	2320      	movs	r3, #32
 80075a2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80075a6:	e6e7      	b.n	8007378 <_svfprintf_r+0xc8>
 80075a8:	f04a 0a01 	orr.w	sl, sl, #1
 80075ac:	e6e4      	b.n	8007378 <_svfprintf_r+0xc8>
 80075ae:	6832      	ldr	r2, [r6, #0]
 80075b0:	920f      	str	r2, [sp, #60]	; 0x3c
 80075b2:	2a00      	cmp	r2, #0
 80075b4:	f106 0304 	add.w	r3, r6, #4
 80075b8:	daae      	bge.n	8007518 <_svfprintf_r+0x268>
 80075ba:	4252      	negs	r2, r2
 80075bc:	920f      	str	r2, [sp, #60]	; 0x3c
 80075be:	461e      	mov	r6, r3
 80075c0:	f04a 0a04 	orr.w	sl, sl, #4
 80075c4:	e6d8      	b.n	8007378 <_svfprintf_r+0xc8>
 80075c6:	232b      	movs	r3, #43	; 0x2b
 80075c8:	e7eb      	b.n	80075a2 <_svfprintf_r+0x2f2>
 80075ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	9206      	str	r2, [sp, #24]
 80075d2:	2a2a      	cmp	r2, #42	; 0x2a
 80075d4:	f103 0301 	add.w	r3, r3, #1
 80075d8:	d10f      	bne.n	80075fa <_svfprintf_r+0x34a>
 80075da:	6835      	ldr	r5, [r6, #0]
 80075dc:	930c      	str	r3, [sp, #48]	; 0x30
 80075de:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80075e2:	3604      	adds	r6, #4
 80075e4:	e6c8      	b.n	8007378 <_svfprintf_r+0xc8>
 80075e6:	fb07 2505 	mla	r5, r7, r5, r2
 80075ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ee:	9206      	str	r2, [sp, #24]
 80075f0:	9a06      	ldr	r2, [sp, #24]
 80075f2:	3a30      	subs	r2, #48	; 0x30
 80075f4:	2a09      	cmp	r2, #9
 80075f6:	d9f6      	bls.n	80075e6 <_svfprintf_r+0x336>
 80075f8:	e6c3      	b.n	8007382 <_svfprintf_r+0xd2>
 80075fa:	2500      	movs	r5, #0
 80075fc:	e7f8      	b.n	80075f0 <_svfprintf_r+0x340>
 80075fe:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8007602:	e6b9      	b.n	8007378 <_svfprintf_r+0xc8>
 8007604:	2200      	movs	r2, #0
 8007606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007608:	920f      	str	r2, [sp, #60]	; 0x3c
 800760a:	9a06      	ldr	r2, [sp, #24]
 800760c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800760e:	3a30      	subs	r2, #48	; 0x30
 8007610:	fb07 2201 	mla	r2, r7, r1, r2
 8007614:	920f      	str	r2, [sp, #60]	; 0x3c
 8007616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800761a:	9206      	str	r2, [sp, #24]
 800761c:	3a30      	subs	r2, #48	; 0x30
 800761e:	2a09      	cmp	r2, #9
 8007620:	d9f3      	bls.n	800760a <_svfprintf_r+0x35a>
 8007622:	e6ae      	b.n	8007382 <_svfprintf_r+0xd2>
 8007624:	f04a 0a08 	orr.w	sl, sl, #8
 8007628:	e6a6      	b.n	8007378 <_svfprintf_r+0xc8>
 800762a:	bf00      	nop
 800762c:	f3af 8000 	nop.w
	...
 8007638:	0800a6d9 	.word	0x0800a6d9
 800763c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b68      	cmp	r3, #104	; 0x68
 8007642:	bf01      	itttt	eq
 8007644:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 8007646:	3301      	addeq	r3, #1
 8007648:	930c      	streq	r3, [sp, #48]	; 0x30
 800764a:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800764e:	bf18      	it	ne
 8007650:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8007654:	e690      	b.n	8007378 <_svfprintf_r+0xc8>
 8007656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b6c      	cmp	r3, #108	; 0x6c
 800765c:	d105      	bne.n	800766a <_svfprintf_r+0x3ba>
 800765e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007660:	3301      	adds	r3, #1
 8007662:	930c      	str	r3, [sp, #48]	; 0x30
 8007664:	f04a 0a20 	orr.w	sl, sl, #32
 8007668:	e686      	b.n	8007378 <_svfprintf_r+0xc8>
 800766a:	f04a 0a10 	orr.w	sl, sl, #16
 800766e:	e683      	b.n	8007378 <_svfprintf_r+0xc8>
 8007670:	1d33      	adds	r3, r6, #4
 8007672:	9308      	str	r3, [sp, #32]
 8007674:	2000      	movs	r0, #0
 8007676:	6833      	ldr	r3, [r6, #0]
 8007678:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800767c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8007680:	4681      	mov	r9, r0
 8007682:	2501      	movs	r5, #1
 8007684:	9010      	str	r0, [sp, #64]	; 0x40
 8007686:	4607      	mov	r7, r0
 8007688:	9007      	str	r0, [sp, #28]
 800768a:	4606      	mov	r6, r0
 800768c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8007690:	e301      	b.n	8007c96 <_svfprintf_r+0x9e6>
 8007692:	f04a 0a10 	orr.w	sl, sl, #16
 8007696:	f01a 0f20 	tst.w	sl, #32
 800769a:	d021      	beq.n	80076e0 <_svfprintf_r+0x430>
 800769c:	3607      	adds	r6, #7
 800769e:	f026 0607 	bic.w	r6, r6, #7
 80076a2:	f106 0308 	add.w	r3, r6, #8
 80076a6:	e9d6 6700 	ldrd	r6, r7, [r6]
 80076aa:	9308      	str	r3, [sp, #32]
 80076ac:	2e00      	cmp	r6, #0
 80076ae:	f177 0300 	sbcs.w	r3, r7, #0
 80076b2:	da06      	bge.n	80076c2 <_svfprintf_r+0x412>
 80076b4:	4276      	negs	r6, r6
 80076b6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80076ba:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80076be:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80076c2:	1c6b      	adds	r3, r5, #1
 80076c4:	f040 83f6 	bne.w	8007eb4 <_svfprintf_r+0xc04>
 80076c8:	2f00      	cmp	r7, #0
 80076ca:	bf08      	it	eq
 80076cc:	2e0a      	cmpeq	r6, #10
 80076ce:	f080 8427 	bcs.w	8007f20 <_svfprintf_r+0xc70>
 80076d2:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 80076d6:	3630      	adds	r6, #48	; 0x30
 80076d8:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 80076dc:	f000 bc0d 	b.w	8007efa <_svfprintf_r+0xc4a>
 80076e0:	1d33      	adds	r3, r6, #4
 80076e2:	f01a 0f10 	tst.w	sl, #16
 80076e6:	9308      	str	r3, [sp, #32]
 80076e8:	d002      	beq.n	80076f0 <_svfprintf_r+0x440>
 80076ea:	6836      	ldr	r6, [r6, #0]
 80076ec:	17f7      	asrs	r7, r6, #31
 80076ee:	e7dd      	b.n	80076ac <_svfprintf_r+0x3fc>
 80076f0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80076f4:	6836      	ldr	r6, [r6, #0]
 80076f6:	d001      	beq.n	80076fc <_svfprintf_r+0x44c>
 80076f8:	b236      	sxth	r6, r6
 80076fa:	e7f7      	b.n	80076ec <_svfprintf_r+0x43c>
 80076fc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007700:	bf18      	it	ne
 8007702:	b276      	sxtbne	r6, r6
 8007704:	e7f2      	b.n	80076ec <_svfprintf_r+0x43c>
 8007706:	3607      	adds	r6, #7
 8007708:	f026 0607 	bic.w	r6, r6, #7
 800770c:	ed96 7b00 	vldr	d7, [r6]
 8007710:	f106 0308 	add.w	r3, r6, #8
 8007714:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007718:	9308      	str	r3, [sp, #32]
 800771a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800771c:	931a      	str	r3, [sp, #104]	; 0x68
 800771e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007724:	931b      	str	r3, [sp, #108]	; 0x6c
 8007726:	f04f 32ff 	mov.w	r2, #4294967295
 800772a:	4bb2      	ldr	r3, [pc, #712]	; (80079f4 <_svfprintf_r+0x744>)
 800772c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8007730:	f7f9 fa1c 	bl	8000b6c <__aeabi_dcmpun>
 8007734:	bb00      	cbnz	r0, 8007778 <_svfprintf_r+0x4c8>
 8007736:	f04f 32ff 	mov.w	r2, #4294967295
 800773a:	4bae      	ldr	r3, [pc, #696]	; (80079f4 <_svfprintf_r+0x744>)
 800773c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8007740:	f7f9 f9f6 	bl	8000b30 <__aeabi_dcmple>
 8007744:	b9c0      	cbnz	r0, 8007778 <_svfprintf_r+0x4c8>
 8007746:	2200      	movs	r2, #0
 8007748:	2300      	movs	r3, #0
 800774a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800774e:	f7f9 f9e5 	bl	8000b1c <__aeabi_dcmplt>
 8007752:	b110      	cbz	r0, 800775a <_svfprintf_r+0x4aa>
 8007754:	232d      	movs	r3, #45	; 0x2d
 8007756:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800775a:	4aa7      	ldr	r2, [pc, #668]	; (80079f8 <_svfprintf_r+0x748>)
 800775c:	4ba7      	ldr	r3, [pc, #668]	; (80079fc <_svfprintf_r+0x74c>)
 800775e:	9906      	ldr	r1, [sp, #24]
 8007760:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007764:	2947      	cmp	r1, #71	; 0x47
 8007766:	bfcc      	ite	gt
 8007768:	4693      	movgt	fp, r2
 800776a:	469b      	movle	fp, r3
 800776c:	f04f 0900 	mov.w	r9, #0
 8007770:	2503      	movs	r5, #3
 8007772:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8007776:	e3c6      	b.n	8007f06 <_svfprintf_r+0xc56>
 8007778:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800777c:	4610      	mov	r0, r2
 800777e:	4619      	mov	r1, r3
 8007780:	f7f9 f9f4 	bl	8000b6c <__aeabi_dcmpun>
 8007784:	4681      	mov	r9, r0
 8007786:	b140      	cbz	r0, 800779a <_svfprintf_r+0x4ea>
 8007788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800778a:	4a9d      	ldr	r2, [pc, #628]	; (8007a00 <_svfprintf_r+0x750>)
 800778c:	2b00      	cmp	r3, #0
 800778e:	bfbc      	itt	lt
 8007790:	232d      	movlt	r3, #45	; 0x2d
 8007792:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8007796:	4b9b      	ldr	r3, [pc, #620]	; (8007a04 <_svfprintf_r+0x754>)
 8007798:	e7e1      	b.n	800775e <_svfprintf_r+0x4ae>
 800779a:	9b06      	ldr	r3, [sp, #24]
 800779c:	f023 0320 	bic.w	r3, r3, #32
 80077a0:	2b41      	cmp	r3, #65	; 0x41
 80077a2:	9307      	str	r3, [sp, #28]
 80077a4:	d125      	bne.n	80077f2 <_svfprintf_r+0x542>
 80077a6:	2330      	movs	r3, #48	; 0x30
 80077a8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80077ac:	9b06      	ldr	r3, [sp, #24]
 80077ae:	2b61      	cmp	r3, #97	; 0x61
 80077b0:	bf14      	ite	ne
 80077b2:	2358      	movne	r3, #88	; 0x58
 80077b4:	2378      	moveq	r3, #120	; 0x78
 80077b6:	2d63      	cmp	r5, #99	; 0x63
 80077b8:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80077bc:	f04a 0a02 	orr.w	sl, sl, #2
 80077c0:	f340 8108 	ble.w	80079d4 <_svfprintf_r+0x724>
 80077c4:	1c69      	adds	r1, r5, #1
 80077c6:	9803      	ldr	r0, [sp, #12]
 80077c8:	f001 ff38 	bl	800963c <_malloc_r>
 80077cc:	4683      	mov	fp, r0
 80077ce:	2800      	cmp	r0, #0
 80077d0:	f040 8103 	bne.w	80079da <_svfprintf_r+0x72a>
 80077d4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80077d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077dc:	f8a8 300c 	strh.w	r3, [r8, #12]
 80077e0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80077e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80077e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077ea:	bf18      	it	ne
 80077ec:	f04f 33ff 	movne.w	r3, #4294967295
 80077f0:	e582      	b.n	80072f8 <_svfprintf_r+0x48>
 80077f2:	1c69      	adds	r1, r5, #1
 80077f4:	f000 80f3 	beq.w	80079de <_svfprintf_r+0x72e>
 80077f8:	9b07      	ldr	r3, [sp, #28]
 80077fa:	2b47      	cmp	r3, #71	; 0x47
 80077fc:	d102      	bne.n	8007804 <_svfprintf_r+0x554>
 80077fe:	2d00      	cmp	r5, #0
 8007800:	f000 80ef 	beq.w	80079e2 <_svfprintf_r+0x732>
 8007804:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8007808:	9310      	str	r3, [sp, #64]	; 0x40
 800780a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780c:	2b00      	cmp	r3, #0
 800780e:	f280 80eb 	bge.w	80079e8 <_svfprintf_r+0x738>
 8007812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007814:	9314      	str	r3, [sp, #80]	; 0x50
 8007816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007818:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800781c:	9315      	str	r3, [sp, #84]	; 0x54
 800781e:	232d      	movs	r3, #45	; 0x2d
 8007820:	9313      	str	r3, [sp, #76]	; 0x4c
 8007822:	9b07      	ldr	r3, [sp, #28]
 8007824:	2b41      	cmp	r3, #65	; 0x41
 8007826:	f040 8105 	bne.w	8007a34 <_svfprintf_r+0x784>
 800782a:	a820      	add	r0, sp, #128	; 0x80
 800782c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8007830:	f002 fc02 	bl	800a038 <frexp>
 8007834:	2200      	movs	r2, #0
 8007836:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800783a:	ec51 0b10 	vmov	r0, r1, d0
 800783e:	f7f8 fefb 	bl	8000638 <__aeabi_dmul>
 8007842:	2200      	movs	r2, #0
 8007844:	2300      	movs	r3, #0
 8007846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800784a:	f7f9 f95d 	bl	8000b08 <__aeabi_dcmpeq>
 800784e:	b108      	cbz	r0, 8007854 <_svfprintf_r+0x5a4>
 8007850:	2301      	movs	r3, #1
 8007852:	9320      	str	r3, [sp, #128]	; 0x80
 8007854:	4f6c      	ldr	r7, [pc, #432]	; (8007a08 <_svfprintf_r+0x758>)
 8007856:	4b6d      	ldr	r3, [pc, #436]	; (8007a0c <_svfprintf_r+0x75c>)
 8007858:	9a06      	ldr	r2, [sp, #24]
 800785a:	2a61      	cmp	r2, #97	; 0x61
 800785c:	bf08      	it	eq
 800785e:	461f      	moveq	r7, r3
 8007860:	9711      	str	r7, [sp, #68]	; 0x44
 8007862:	465e      	mov	r6, fp
 8007864:	1e6f      	subs	r7, r5, #1
 8007866:	2200      	movs	r2, #0
 8007868:	4b69      	ldr	r3, [pc, #420]	; (8007a10 <_svfprintf_r+0x760>)
 800786a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800786e:	f7f8 fee3 	bl	8000638 <__aeabi_dmul>
 8007872:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007876:	f7f9 f98f 	bl	8000b98 <__aeabi_d2iz>
 800787a:	901c      	str	r0, [sp, #112]	; 0x70
 800787c:	f7f8 fe72 	bl	8000564 <__aeabi_i2d>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007888:	f7f8 fd1e 	bl	80002c8 <__aeabi_dsub>
 800788c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800788e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007890:	971d      	str	r7, [sp, #116]	; 0x74
 8007892:	5c9b      	ldrb	r3, [r3, r2]
 8007894:	f806 3b01 	strb.w	r3, [r6], #1
 8007898:	1c7a      	adds	r2, r7, #1
 800789a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800789e:	d006      	beq.n	80078ae <_svfprintf_r+0x5fe>
 80078a0:	2200      	movs	r2, #0
 80078a2:	2300      	movs	r3, #0
 80078a4:	3f01      	subs	r7, #1
 80078a6:	f7f9 f92f 	bl	8000b08 <__aeabi_dcmpeq>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d0db      	beq.n	8007866 <_svfprintf_r+0x5b6>
 80078ae:	2200      	movs	r2, #0
 80078b0:	4b58      	ldr	r3, [pc, #352]	; (8007a14 <_svfprintf_r+0x764>)
 80078b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078b6:	f7f9 f94f 	bl	8000b58 <__aeabi_dcmpgt>
 80078ba:	b960      	cbnz	r0, 80078d6 <_svfprintf_r+0x626>
 80078bc:	2200      	movs	r2, #0
 80078be:	4b55      	ldr	r3, [pc, #340]	; (8007a14 <_svfprintf_r+0x764>)
 80078c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078c4:	f7f9 f920 	bl	8000b08 <__aeabi_dcmpeq>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	f000 80ae 	beq.w	8007a2a <_svfprintf_r+0x77a>
 80078ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80078d0:	07db      	lsls	r3, r3, #31
 80078d2:	f140 80aa 	bpl.w	8007a2a <_svfprintf_r+0x77a>
 80078d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078d8:	9624      	str	r6, [sp, #144]	; 0x90
 80078da:	7bd9      	ldrb	r1, [r3, #15]
 80078dc:	2030      	movs	r0, #48	; 0x30
 80078de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078e0:	1e53      	subs	r3, r2, #1
 80078e2:	9324      	str	r3, [sp, #144]	; 0x90
 80078e4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80078e8:	428b      	cmp	r3, r1
 80078ea:	f000 8095 	beq.w	8007a18 <_svfprintf_r+0x768>
 80078ee:	2b39      	cmp	r3, #57	; 0x39
 80078f0:	bf0b      	itete	eq
 80078f2:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 80078f4:	3301      	addne	r3, #1
 80078f6:	7a9b      	ldrbeq	r3, [r3, #10]
 80078f8:	b2db      	uxtbne	r3, r3
 80078fa:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078fe:	4633      	mov	r3, r6
 8007900:	eba3 030b 	sub.w	r3, r3, fp
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	9b07      	ldr	r3, [sp, #28]
 8007908:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800790a:	2b47      	cmp	r3, #71	; 0x47
 800790c:	f040 80d7 	bne.w	8007abe <_svfprintf_r+0x80e>
 8007910:	1cf7      	adds	r7, r6, #3
 8007912:	db02      	blt.n	800791a <_svfprintf_r+0x66a>
 8007914:	42b5      	cmp	r5, r6
 8007916:	f280 80fd 	bge.w	8007b14 <_svfprintf_r+0x864>
 800791a:	9b06      	ldr	r3, [sp, #24]
 800791c:	3b02      	subs	r3, #2
 800791e:	9306      	str	r3, [sp, #24]
 8007920:	9906      	ldr	r1, [sp, #24]
 8007922:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8007926:	f021 0120 	bic.w	r1, r1, #32
 800792a:	2941      	cmp	r1, #65	; 0x41
 800792c:	bf08      	it	eq
 800792e:	320f      	addeq	r2, #15
 8007930:	f106 33ff 	add.w	r3, r6, #4294967295
 8007934:	bf06      	itte	eq
 8007936:	b2d2      	uxtbeq	r2, r2
 8007938:	2101      	moveq	r1, #1
 800793a:	2100      	movne	r1, #0
 800793c:	2b00      	cmp	r3, #0
 800793e:	9320      	str	r3, [sp, #128]	; 0x80
 8007940:	bfb8      	it	lt
 8007942:	f1c6 0301 	rsblt	r3, r6, #1
 8007946:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800794a:	bfb4      	ite	lt
 800794c:	222d      	movlt	r2, #45	; 0x2d
 800794e:	222b      	movge	r2, #43	; 0x2b
 8007950:	2b09      	cmp	r3, #9
 8007952:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8007956:	f340 80c9 	ble.w	8007aec <_svfprintf_r+0x83c>
 800795a:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 800795e:	250a      	movs	r5, #10
 8007960:	fb93 f0f5 	sdiv	r0, r3, r5
 8007964:	fb05 3310 	mls	r3, r5, r0, r3
 8007968:	3330      	adds	r3, #48	; 0x30
 800796a:	2809      	cmp	r0, #9
 800796c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007970:	f102 31ff 	add.w	r1, r2, #4294967295
 8007974:	4603      	mov	r3, r0
 8007976:	f300 80b2 	bgt.w	8007ade <_svfprintf_r+0x82e>
 800797a:	3330      	adds	r3, #48	; 0x30
 800797c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8007980:	3a02      	subs	r2, #2
 8007982:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8007986:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 800798a:	4282      	cmp	r2, r0
 800798c:	4619      	mov	r1, r3
 800798e:	f0c0 80a8 	bcc.w	8007ae2 <_svfprintf_r+0x832>
 8007992:	9a04      	ldr	r2, [sp, #16]
 8007994:	ab22      	add	r3, sp, #136	; 0x88
 8007996:	1acb      	subs	r3, r1, r3
 8007998:	2a01      	cmp	r2, #1
 800799a:	9317      	str	r3, [sp, #92]	; 0x5c
 800799c:	eb03 0502 	add.w	r5, r3, r2
 80079a0:	dc02      	bgt.n	80079a8 <_svfprintf_r+0x6f8>
 80079a2:	f01a 0f01 	tst.w	sl, #1
 80079a6:	d001      	beq.n	80079ac <_svfprintf_r+0x6fc>
 80079a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079aa:	441d      	add	r5, r3
 80079ac:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 80079b0:	2700      	movs	r7, #0
 80079b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079b6:	9310      	str	r3, [sp, #64]	; 0x40
 80079b8:	9707      	str	r7, [sp, #28]
 80079ba:	463e      	mov	r6, r7
 80079bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 8315 	beq.w	8007fee <_svfprintf_r+0xd3e>
 80079c4:	232d      	movs	r3, #45	; 0x2d
 80079c6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 80079ca:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80079ce:	2300      	movs	r3, #0
 80079d0:	9310      	str	r3, [sp, #64]	; 0x40
 80079d2:	e160      	b.n	8007c96 <_svfprintf_r+0x9e6>
 80079d4:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80079d8:	e714      	b.n	8007804 <_svfprintf_r+0x554>
 80079da:	4681      	mov	r9, r0
 80079dc:	e712      	b.n	8007804 <_svfprintf_r+0x554>
 80079de:	2506      	movs	r5, #6
 80079e0:	e710      	b.n	8007804 <_svfprintf_r+0x554>
 80079e2:	46a9      	mov	r9, r5
 80079e4:	2501      	movs	r5, #1
 80079e6:	e70d      	b.n	8007804 <_svfprintf_r+0x554>
 80079e8:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80079ec:	2300      	movs	r3, #0
 80079ee:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80079f2:	e715      	b.n	8007820 <_svfprintf_r+0x570>
 80079f4:	7fefffff 	.word	0x7fefffff
 80079f8:	0800a6bc 	.word	0x0800a6bc
 80079fc:	0800a6b8 	.word	0x0800a6b8
 8007a00:	0800a6c4 	.word	0x0800a6c4
 8007a04:	0800a6c0 	.word	0x0800a6c0
 8007a08:	0800a6d9 	.word	0x0800a6d9
 8007a0c:	0800a6c8 	.word	0x0800a6c8
 8007a10:	40300000 	.word	0x40300000
 8007a14:	3fe00000 	.word	0x3fe00000
 8007a18:	f802 0c01 	strb.w	r0, [r2, #-1]
 8007a1c:	e75f      	b.n	80078de <_svfprintf_r+0x62e>
 8007a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a22:	1af2      	subs	r2, r6, r3
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	dafa      	bge.n	8007a1e <_svfprintf_r+0x76e>
 8007a28:	e76a      	b.n	8007900 <_svfprintf_r+0x650>
 8007a2a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007a2c:	4633      	mov	r3, r6
 8007a2e:	2130      	movs	r1, #48	; 0x30
 8007a30:	4416      	add	r6, r2
 8007a32:	e7f6      	b.n	8007a22 <_svfprintf_r+0x772>
 8007a34:	9b07      	ldr	r3, [sp, #28]
 8007a36:	2b46      	cmp	r3, #70	; 0x46
 8007a38:	d004      	beq.n	8007a44 <_svfprintf_r+0x794>
 8007a3a:	2b45      	cmp	r3, #69	; 0x45
 8007a3c:	d13a      	bne.n	8007ab4 <_svfprintf_r+0x804>
 8007a3e:	1c6e      	adds	r6, r5, #1
 8007a40:	2102      	movs	r1, #2
 8007a42:	e001      	b.n	8007a48 <_svfprintf_r+0x798>
 8007a44:	462e      	mov	r6, r5
 8007a46:	2103      	movs	r1, #3
 8007a48:	ab24      	add	r3, sp, #144	; 0x90
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	ab21      	add	r3, sp, #132	; 0x84
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	4632      	mov	r2, r6
 8007a52:	ab20      	add	r3, sp, #128	; 0x80
 8007a54:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8007a58:	9803      	ldr	r0, [sp, #12]
 8007a5a:	f000 ff29 	bl	80088b0 <_dtoa_r>
 8007a5e:	9b07      	ldr	r3, [sp, #28]
 8007a60:	2b47      	cmp	r3, #71	; 0x47
 8007a62:	4683      	mov	fp, r0
 8007a64:	d102      	bne.n	8007a6c <_svfprintf_r+0x7bc>
 8007a66:	f01a 0f01 	tst.w	sl, #1
 8007a6a:	d026      	beq.n	8007aba <_svfprintf_r+0x80a>
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	2b46      	cmp	r3, #70	; 0x46
 8007a70:	eb0b 0706 	add.w	r7, fp, r6
 8007a74:	d10f      	bne.n	8007a96 <_svfprintf_r+0x7e6>
 8007a76:	f89b 3000 	ldrb.w	r3, [fp]
 8007a7a:	2b30      	cmp	r3, #48	; 0x30
 8007a7c:	d109      	bne.n	8007a92 <_svfprintf_r+0x7e2>
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2300      	movs	r3, #0
 8007a82:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007a86:	f7f9 f83f 	bl	8000b08 <__aeabi_dcmpeq>
 8007a8a:	b910      	cbnz	r0, 8007a92 <_svfprintf_r+0x7e2>
 8007a8c:	f1c6 0601 	rsb	r6, r6, #1
 8007a90:	9620      	str	r6, [sp, #128]	; 0x80
 8007a92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a94:	441f      	add	r7, r3
 8007a96:	2200      	movs	r2, #0
 8007a98:	2300      	movs	r3, #0
 8007a9a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007a9e:	f7f9 f833 	bl	8000b08 <__aeabi_dcmpeq>
 8007aa2:	b948      	cbnz	r0, 8007ab8 <_svfprintf_r+0x808>
 8007aa4:	2230      	movs	r2, #48	; 0x30
 8007aa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007aa8:	429f      	cmp	r7, r3
 8007aaa:	d906      	bls.n	8007aba <_svfprintf_r+0x80a>
 8007aac:	1c59      	adds	r1, r3, #1
 8007aae:	9124      	str	r1, [sp, #144]	; 0x90
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	e7f8      	b.n	8007aa6 <_svfprintf_r+0x7f6>
 8007ab4:	462e      	mov	r6, r5
 8007ab6:	e7c3      	b.n	8007a40 <_svfprintf_r+0x790>
 8007ab8:	9724      	str	r7, [sp, #144]	; 0x90
 8007aba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007abc:	e720      	b.n	8007900 <_svfprintf_r+0x650>
 8007abe:	9b07      	ldr	r3, [sp, #28]
 8007ac0:	2b46      	cmp	r3, #70	; 0x46
 8007ac2:	f47f af2d 	bne.w	8007920 <_svfprintf_r+0x670>
 8007ac6:	2e00      	cmp	r6, #0
 8007ac8:	dd1d      	ble.n	8007b06 <_svfprintf_r+0x856>
 8007aca:	b915      	cbnz	r5, 8007ad2 <_svfprintf_r+0x822>
 8007acc:	f01a 0f01 	tst.w	sl, #1
 8007ad0:	d034      	beq.n	8007b3c <_svfprintf_r+0x88c>
 8007ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ad4:	18f3      	adds	r3, r6, r3
 8007ad6:	441d      	add	r5, r3
 8007ad8:	2366      	movs	r3, #102	; 0x66
 8007ada:	9306      	str	r3, [sp, #24]
 8007adc:	e033      	b.n	8007b46 <_svfprintf_r+0x896>
 8007ade:	460a      	mov	r2, r1
 8007ae0:	e73e      	b.n	8007960 <_svfprintf_r+0x6b0>
 8007ae2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aea:	e74e      	b.n	800798a <_svfprintf_r+0x6da>
 8007aec:	b941      	cbnz	r1, 8007b00 <_svfprintf_r+0x850>
 8007aee:	2230      	movs	r2, #48	; 0x30
 8007af0:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8007af4:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8007af8:	3330      	adds	r3, #48	; 0x30
 8007afa:	1c51      	adds	r1, r2, #1
 8007afc:	7013      	strb	r3, [r2, #0]
 8007afe:	e748      	b.n	8007992 <_svfprintf_r+0x6e2>
 8007b00:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8007b04:	e7f8      	b.n	8007af8 <_svfprintf_r+0x848>
 8007b06:	b915      	cbnz	r5, 8007b0e <_svfprintf_r+0x85e>
 8007b08:	f01a 0f01 	tst.w	sl, #1
 8007b0c:	d018      	beq.n	8007b40 <_svfprintf_r+0x890>
 8007b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b10:	3301      	adds	r3, #1
 8007b12:	e7e0      	b.n	8007ad6 <_svfprintf_r+0x826>
 8007b14:	9b04      	ldr	r3, [sp, #16]
 8007b16:	42b3      	cmp	r3, r6
 8007b18:	dc06      	bgt.n	8007b28 <_svfprintf_r+0x878>
 8007b1a:	f01a 0f01 	tst.w	sl, #1
 8007b1e:	d025      	beq.n	8007b6c <_svfprintf_r+0x8bc>
 8007b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b22:	18f5      	adds	r5, r6, r3
 8007b24:	2367      	movs	r3, #103	; 0x67
 8007b26:	e7d8      	b.n	8007ada <_svfprintf_r+0x82a>
 8007b28:	9b04      	ldr	r3, [sp, #16]
 8007b2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b2c:	2e00      	cmp	r6, #0
 8007b2e:	eb03 0502 	add.w	r5, r3, r2
 8007b32:	dcf7      	bgt.n	8007b24 <_svfprintf_r+0x874>
 8007b34:	f1c6 0301 	rsb	r3, r6, #1
 8007b38:	441d      	add	r5, r3
 8007b3a:	e7f3      	b.n	8007b24 <_svfprintf_r+0x874>
 8007b3c:	4635      	mov	r5, r6
 8007b3e:	e7cb      	b.n	8007ad8 <_svfprintf_r+0x828>
 8007b40:	2366      	movs	r3, #102	; 0x66
 8007b42:	9306      	str	r3, [sp, #24]
 8007b44:	2501      	movs	r5, #1
 8007b46:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8007b4a:	9307      	str	r3, [sp, #28]
 8007b4c:	d01f      	beq.n	8007b8e <_svfprintf_r+0x8de>
 8007b4e:	2700      	movs	r7, #0
 8007b50:	2e00      	cmp	r6, #0
 8007b52:	9707      	str	r7, [sp, #28]
 8007b54:	f77f af32 	ble.w	80079bc <_svfprintf_r+0x70c>
 8007b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2bff      	cmp	r3, #255	; 0xff
 8007b5e:	d107      	bne.n	8007b70 <_svfprintf_r+0x8c0>
 8007b60:	9b07      	ldr	r3, [sp, #28]
 8007b62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b64:	443b      	add	r3, r7
 8007b66:	fb02 5503 	mla	r5, r2, r3, r5
 8007b6a:	e727      	b.n	80079bc <_svfprintf_r+0x70c>
 8007b6c:	4635      	mov	r5, r6
 8007b6e:	e7d9      	b.n	8007b24 <_svfprintf_r+0x874>
 8007b70:	42b3      	cmp	r3, r6
 8007b72:	daf5      	bge.n	8007b60 <_svfprintf_r+0x8b0>
 8007b74:	1af6      	subs	r6, r6, r3
 8007b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b78:	785b      	ldrb	r3, [r3, #1]
 8007b7a:	b133      	cbz	r3, 8007b8a <_svfprintf_r+0x8da>
 8007b7c:	9b07      	ldr	r3, [sp, #28]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	9307      	str	r3, [sp, #28]
 8007b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b84:	3301      	adds	r3, #1
 8007b86:	9309      	str	r3, [sp, #36]	; 0x24
 8007b88:	e7e6      	b.n	8007b58 <_svfprintf_r+0x8a8>
 8007b8a:	3701      	adds	r7, #1
 8007b8c:	e7e4      	b.n	8007b58 <_svfprintf_r+0x8a8>
 8007b8e:	9f07      	ldr	r7, [sp, #28]
 8007b90:	e714      	b.n	80079bc <_svfprintf_r+0x70c>
 8007b92:	4632      	mov	r2, r6
 8007b94:	f01a 0f20 	tst.w	sl, #32
 8007b98:	f852 3b04 	ldr.w	r3, [r2], #4
 8007b9c:	9208      	str	r2, [sp, #32]
 8007b9e:	d009      	beq.n	8007bb4 <_svfprintf_r+0x904>
 8007ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	17d1      	asrs	r1, r2, #31
 8007ba6:	e9c3 0100 	strd	r0, r1, [r3]
 8007baa:	9e08      	ldr	r6, [sp, #32]
 8007bac:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8007bb0:	f7ff bbba 	b.w	8007328 <_svfprintf_r+0x78>
 8007bb4:	f01a 0f10 	tst.w	sl, #16
 8007bb8:	d002      	beq.n	8007bc0 <_svfprintf_r+0x910>
 8007bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	e7f4      	b.n	8007baa <_svfprintf_r+0x8fa>
 8007bc0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007bc4:	d002      	beq.n	8007bcc <_svfprintf_r+0x91c>
 8007bc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bc8:	801a      	strh	r2, [r3, #0]
 8007bca:	e7ee      	b.n	8007baa <_svfprintf_r+0x8fa>
 8007bcc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007bd0:	d0f3      	beq.n	8007bba <_svfprintf_r+0x90a>
 8007bd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	e7e8      	b.n	8007baa <_svfprintf_r+0x8fa>
 8007bd8:	f04a 0a10 	orr.w	sl, sl, #16
 8007bdc:	f01a 0f20 	tst.w	sl, #32
 8007be0:	d01e      	beq.n	8007c20 <_svfprintf_r+0x970>
 8007be2:	3607      	adds	r6, #7
 8007be4:	f026 0607 	bic.w	r6, r6, #7
 8007be8:	f106 0308 	add.w	r3, r6, #8
 8007bec:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007bf0:	9308      	str	r3, [sp, #32]
 8007bf2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	1c69      	adds	r1, r5, #1
 8007bfc:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8007c00:	f000 815b 	beq.w	8007eba <_svfprintf_r+0xc0a>
 8007c04:	4652      	mov	r2, sl
 8007c06:	ea56 0107 	orrs.w	r1, r6, r7
 8007c0a:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007c0e:	f040 8154 	bne.w	8007eba <_svfprintf_r+0xc0a>
 8007c12:	2d00      	cmp	r5, #0
 8007c14:	f000 81d5 	beq.w	8007fc2 <_svfprintf_r+0xd12>
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	f040 8151 	bne.w	8007ec0 <_svfprintf_r+0xc10>
 8007c1e:	e558      	b.n	80076d2 <_svfprintf_r+0x422>
 8007c20:	1d33      	adds	r3, r6, #4
 8007c22:	f01a 0f10 	tst.w	sl, #16
 8007c26:	9308      	str	r3, [sp, #32]
 8007c28:	d001      	beq.n	8007c2e <_svfprintf_r+0x97e>
 8007c2a:	6836      	ldr	r6, [r6, #0]
 8007c2c:	e003      	b.n	8007c36 <_svfprintf_r+0x986>
 8007c2e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007c32:	d002      	beq.n	8007c3a <_svfprintf_r+0x98a>
 8007c34:	8836      	ldrh	r6, [r6, #0]
 8007c36:	2700      	movs	r7, #0
 8007c38:	e7db      	b.n	8007bf2 <_svfprintf_r+0x942>
 8007c3a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007c3e:	d0f4      	beq.n	8007c2a <_svfprintf_r+0x97a>
 8007c40:	7836      	ldrb	r6, [r6, #0]
 8007c42:	e7f8      	b.n	8007c36 <_svfprintf_r+0x986>
 8007c44:	1d33      	adds	r3, r6, #4
 8007c46:	9308      	str	r3, [sp, #32]
 8007c48:	f647 0330 	movw	r3, #30768	; 0x7830
 8007c4c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8007c50:	2278      	movs	r2, #120	; 0x78
 8007c52:	4bb0      	ldr	r3, [pc, #704]	; (8007f14 <_svfprintf_r+0xc64>)
 8007c54:	9318      	str	r3, [sp, #96]	; 0x60
 8007c56:	6836      	ldr	r6, [r6, #0]
 8007c58:	9206      	str	r2, [sp, #24]
 8007c5a:	2700      	movs	r7, #0
 8007c5c:	f04a 0a02 	orr.w	sl, sl, #2
 8007c60:	2302      	movs	r3, #2
 8007c62:	e7c9      	b.n	8007bf8 <_svfprintf_r+0x948>
 8007c64:	1d33      	adds	r3, r6, #4
 8007c66:	f8d6 b000 	ldr.w	fp, [r6]
 8007c6a:	9308      	str	r3, [sp, #32]
 8007c6c:	2600      	movs	r6, #0
 8007c6e:	1c68      	adds	r0, r5, #1
 8007c70:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8007c74:	f000 80e1 	beq.w	8007e3a <_svfprintf_r+0xb8a>
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4658      	mov	r0, fp
 8007c7e:	f7f8 facf 	bl	8000220 <memchr>
 8007c82:	4681      	mov	r9, r0
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f43f ad74 	beq.w	8007772 <_svfprintf_r+0x4c2>
 8007c8a:	eba0 050b 	sub.w	r5, r0, fp
 8007c8e:	46b1      	mov	r9, r6
 8007c90:	9610      	str	r6, [sp, #64]	; 0x40
 8007c92:	4637      	mov	r7, r6
 8007c94:	9607      	str	r6, [sp, #28]
 8007c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	bfb8      	it	lt
 8007c9c:	462b      	movlt	r3, r5
 8007c9e:	9311      	str	r3, [sp, #68]	; 0x44
 8007ca0:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8007ca4:	b113      	cbz	r3, 8007cac <_svfprintf_r+0x9fc>
 8007ca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ca8:	3301      	adds	r3, #1
 8007caa:	9311      	str	r3, [sp, #68]	; 0x44
 8007cac:	f01a 0302 	ands.w	r3, sl, #2
 8007cb0:	931c      	str	r3, [sp, #112]	; 0x70
 8007cb2:	bf1e      	ittt	ne
 8007cb4:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8007cb6:	3302      	addne	r3, #2
 8007cb8:	9311      	strne	r3, [sp, #68]	; 0x44
 8007cba:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8007cbe:	931d      	str	r3, [sp, #116]	; 0x74
 8007cc0:	d122      	bne.n	8007d08 <_svfprintf_r+0xa58>
 8007cc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007cc6:	1a9b      	subs	r3, r3, r2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ccc:	dd1c      	ble.n	8007d08 <_svfprintf_r+0xa58>
 8007cce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007cd0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8007cd4:	2810      	cmp	r0, #16
 8007cd6:	4890      	ldr	r0, [pc, #576]	; (8007f18 <_svfprintf_r+0xc68>)
 8007cd8:	6020      	str	r0, [r4, #0]
 8007cda:	f102 0201 	add.w	r2, r2, #1
 8007cde:	f104 0108 	add.w	r1, r4, #8
 8007ce2:	f300 8188 	bgt.w	8007ff6 <_svfprintf_r+0xd46>
 8007ce6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007ce8:	6060      	str	r0, [r4, #4]
 8007cea:	4403      	add	r3, r0
 8007cec:	2a07      	cmp	r2, #7
 8007cee:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8007cf2:	f340 8195 	ble.w	8008020 <_svfprintf_r+0xd70>
 8007cf6:	aa26      	add	r2, sp, #152	; 0x98
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	9803      	ldr	r0, [sp, #12]
 8007cfc:	f002 f9f7 	bl	800a0ee <__ssprint_r>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f040 84c1 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8007d06:	ac29      	add	r4, sp, #164	; 0xa4
 8007d08:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8007d0c:	b173      	cbz	r3, 8007d2c <_svfprintf_r+0xa7c>
 8007d0e:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8007d12:	6023      	str	r3, [r4, #0]
 8007d14:	2301      	movs	r3, #1
 8007d16:	6063      	str	r3, [r4, #4]
 8007d18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	9328      	str	r3, [sp, #160]	; 0xa0
 8007d1e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007d20:	3301      	adds	r3, #1
 8007d22:	2b07      	cmp	r3, #7
 8007d24:	9327      	str	r3, [sp, #156]	; 0x9c
 8007d26:	f300 817d 	bgt.w	8008024 <_svfprintf_r+0xd74>
 8007d2a:	3408      	adds	r4, #8
 8007d2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007d2e:	b16b      	cbz	r3, 8007d4c <_svfprintf_r+0xa9c>
 8007d30:	ab1f      	add	r3, sp, #124	; 0x7c
 8007d32:	6023      	str	r3, [r4, #0]
 8007d34:	2302      	movs	r3, #2
 8007d36:	6063      	str	r3, [r4, #4]
 8007d38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007d3a:	3302      	adds	r3, #2
 8007d3c:	9328      	str	r3, [sp, #160]	; 0xa0
 8007d3e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007d40:	3301      	adds	r3, #1
 8007d42:	2b07      	cmp	r3, #7
 8007d44:	9327      	str	r3, [sp, #156]	; 0x9c
 8007d46:	f300 8177 	bgt.w	8008038 <_svfprintf_r+0xd88>
 8007d4a:	3408      	adds	r4, #8
 8007d4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d4e:	2b80      	cmp	r3, #128	; 0x80
 8007d50:	d122      	bne.n	8007d98 <_svfprintf_r+0xae8>
 8007d52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d56:	1a9b      	subs	r3, r3, r2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d5c:	dd1c      	ble.n	8007d98 <_svfprintf_r+0xae8>
 8007d5e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007d60:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8007d64:	2810      	cmp	r0, #16
 8007d66:	486d      	ldr	r0, [pc, #436]	; (8007f1c <_svfprintf_r+0xc6c>)
 8007d68:	6020      	str	r0, [r4, #0]
 8007d6a:	f102 0201 	add.w	r2, r2, #1
 8007d6e:	f104 0108 	add.w	r1, r4, #8
 8007d72:	f300 816b 	bgt.w	800804c <_svfprintf_r+0xd9c>
 8007d76:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007d78:	6060      	str	r0, [r4, #4]
 8007d7a:	4403      	add	r3, r0
 8007d7c:	2a07      	cmp	r2, #7
 8007d7e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8007d82:	f340 8178 	ble.w	8008076 <_svfprintf_r+0xdc6>
 8007d86:	aa26      	add	r2, sp, #152	; 0x98
 8007d88:	4641      	mov	r1, r8
 8007d8a:	9803      	ldr	r0, [sp, #12]
 8007d8c:	f002 f9af 	bl	800a0ee <__ssprint_r>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	f040 8479 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8007d96:	ac29      	add	r4, sp, #164	; 0xa4
 8007d98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d9a:	1b5b      	subs	r3, r3, r5
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	9310      	str	r3, [sp, #64]	; 0x40
 8007da0:	dd1c      	ble.n	8007ddc <_svfprintf_r+0xb2c>
 8007da2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007da4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8007da8:	2810      	cmp	r0, #16
 8007daa:	485c      	ldr	r0, [pc, #368]	; (8007f1c <_svfprintf_r+0xc6c>)
 8007dac:	6020      	str	r0, [r4, #0]
 8007dae:	f102 0201 	add.w	r2, r2, #1
 8007db2:	f104 0108 	add.w	r1, r4, #8
 8007db6:	f300 8160 	bgt.w	800807a <_svfprintf_r+0xdca>
 8007dba:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007dbc:	6060      	str	r0, [r4, #4]
 8007dbe:	4403      	add	r3, r0
 8007dc0:	2a07      	cmp	r2, #7
 8007dc2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8007dc6:	f340 816d 	ble.w	80080a4 <_svfprintf_r+0xdf4>
 8007dca:	aa26      	add	r2, sp, #152	; 0x98
 8007dcc:	4641      	mov	r1, r8
 8007dce:	9803      	ldr	r0, [sp, #12]
 8007dd0:	f002 f98d 	bl	800a0ee <__ssprint_r>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	f040 8457 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8007dda:	ac29      	add	r4, sp, #164	; 0xa4
 8007ddc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007dde:	9310      	str	r3, [sp, #64]	; 0x40
 8007de0:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007de4:	f040 8160 	bne.w	80080a8 <_svfprintf_r+0xdf8>
 8007de8:	e9c4 b500 	strd	fp, r5, [r4]
 8007dec:	441d      	add	r5, r3
 8007dee:	9528      	str	r5, [sp, #160]	; 0xa0
 8007df0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007df2:	3301      	adds	r3, #1
 8007df4:	2b07      	cmp	r3, #7
 8007df6:	9327      	str	r3, [sp, #156]	; 0x9c
 8007df8:	f300 819c 	bgt.w	8008134 <_svfprintf_r+0xe84>
 8007dfc:	3408      	adds	r4, #8
 8007dfe:	f01a 0f04 	tst.w	sl, #4
 8007e02:	f040 8423 	bne.w	800864c <_svfprintf_r+0x139c>
 8007e06:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8007e0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007e0c:	428a      	cmp	r2, r1
 8007e0e:	bfac      	ite	ge
 8007e10:	189b      	addge	r3, r3, r2
 8007e12:	185b      	addlt	r3, r3, r1
 8007e14:	930e      	str	r3, [sp, #56]	; 0x38
 8007e16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007e18:	b13b      	cbz	r3, 8007e2a <_svfprintf_r+0xb7a>
 8007e1a:	aa26      	add	r2, sp, #152	; 0x98
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	9803      	ldr	r0, [sp, #12]
 8007e20:	f002 f965 	bl	800a0ee <__ssprint_r>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	f040 842f 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9327      	str	r3, [sp, #156]	; 0x9c
 8007e2e:	f1b9 0f00 	cmp.w	r9, #0
 8007e32:	f040 8445 	bne.w	80086c0 <_svfprintf_r+0x1410>
 8007e36:	ac29      	add	r4, sp, #164	; 0xa4
 8007e38:	e6b7      	b.n	8007baa <_svfprintf_r+0x8fa>
 8007e3a:	4658      	mov	r0, fp
 8007e3c:	f7f8 f9e8 	bl	8000210 <strlen>
 8007e40:	46b1      	mov	r9, r6
 8007e42:	4605      	mov	r5, r0
 8007e44:	e495      	b.n	8007772 <_svfprintf_r+0x4c2>
 8007e46:	f04a 0a10 	orr.w	sl, sl, #16
 8007e4a:	f01a 0f20 	tst.w	sl, #32
 8007e4e:	d009      	beq.n	8007e64 <_svfprintf_r+0xbb4>
 8007e50:	3607      	adds	r6, #7
 8007e52:	f026 0607 	bic.w	r6, r6, #7
 8007e56:	f106 0308 	add.w	r3, r6, #8
 8007e5a:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007e5e:	9308      	str	r3, [sp, #32]
 8007e60:	2301      	movs	r3, #1
 8007e62:	e6c9      	b.n	8007bf8 <_svfprintf_r+0x948>
 8007e64:	1d33      	adds	r3, r6, #4
 8007e66:	f01a 0f10 	tst.w	sl, #16
 8007e6a:	9308      	str	r3, [sp, #32]
 8007e6c:	d001      	beq.n	8007e72 <_svfprintf_r+0xbc2>
 8007e6e:	6836      	ldr	r6, [r6, #0]
 8007e70:	e003      	b.n	8007e7a <_svfprintf_r+0xbca>
 8007e72:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007e76:	d002      	beq.n	8007e7e <_svfprintf_r+0xbce>
 8007e78:	8836      	ldrh	r6, [r6, #0]
 8007e7a:	2700      	movs	r7, #0
 8007e7c:	e7f0      	b.n	8007e60 <_svfprintf_r+0xbb0>
 8007e7e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007e82:	d0f4      	beq.n	8007e6e <_svfprintf_r+0xbbe>
 8007e84:	7836      	ldrb	r6, [r6, #0]
 8007e86:	e7f8      	b.n	8007e7a <_svfprintf_r+0xbca>
 8007e88:	4b22      	ldr	r3, [pc, #136]	; (8007f14 <_svfprintf_r+0xc64>)
 8007e8a:	f7ff bb48 	b.w	800751e <_svfprintf_r+0x26e>
 8007e8e:	1d33      	adds	r3, r6, #4
 8007e90:	f01a 0f10 	tst.w	sl, #16
 8007e94:	9308      	str	r3, [sp, #32]
 8007e96:	d001      	beq.n	8007e9c <_svfprintf_r+0xbec>
 8007e98:	6836      	ldr	r6, [r6, #0]
 8007e9a:	e003      	b.n	8007ea4 <_svfprintf_r+0xbf4>
 8007e9c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007ea0:	d003      	beq.n	8007eaa <_svfprintf_r+0xbfa>
 8007ea2:	8836      	ldrh	r6, [r6, #0]
 8007ea4:	2700      	movs	r7, #0
 8007ea6:	f7ff bb47 	b.w	8007538 <_svfprintf_r+0x288>
 8007eaa:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007eae:	d0f3      	beq.n	8007e98 <_svfprintf_r+0xbe8>
 8007eb0:	7836      	ldrb	r6, [r6, #0]
 8007eb2:	e7f7      	b.n	8007ea4 <_svfprintf_r+0xbf4>
 8007eb4:	4652      	mov	r2, sl
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e6a5      	b.n	8007c06 <_svfprintf_r+0x956>
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	f43f ac04 	beq.w	80076c8 <_svfprintf_r+0x418>
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d06c      	beq.n	8007f9e <_svfprintf_r+0xcee>
 8007ec4:	ab52      	add	r3, sp, #328	; 0x148
 8007ec6:	08f1      	lsrs	r1, r6, #3
 8007ec8:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8007ecc:	08f8      	lsrs	r0, r7, #3
 8007ece:	f006 0207 	and.w	r2, r6, #7
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	460e      	mov	r6, r1
 8007ed6:	3230      	adds	r2, #48	; 0x30
 8007ed8:	ea56 0107 	orrs.w	r1, r6, r7
 8007edc:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ee0:	f803 2c01 	strb.w	r2, [r3, #-1]
 8007ee4:	d114      	bne.n	8007f10 <_svfprintf_r+0xc60>
 8007ee6:	f01a 0f01 	tst.w	sl, #1
 8007eea:	d006      	beq.n	8007efa <_svfprintf_r+0xc4a>
 8007eec:	2a30      	cmp	r2, #48	; 0x30
 8007eee:	d004      	beq.n	8007efa <_svfprintf_r+0xc4a>
 8007ef0:	2230      	movs	r2, #48	; 0x30
 8007ef2:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8007ef6:	f1a3 0b02 	sub.w	fp, r3, #2
 8007efa:	ab52      	add	r3, sp, #328	; 0x148
 8007efc:	9510      	str	r5, [sp, #64]	; 0x40
 8007efe:	f04f 0900 	mov.w	r9, #0
 8007f02:	eba3 050b 	sub.w	r5, r3, fp
 8007f06:	464f      	mov	r7, r9
 8007f08:	f8cd 901c 	str.w	r9, [sp, #28]
 8007f0c:	464e      	mov	r6, r9
 8007f0e:	e6c2      	b.n	8007c96 <_svfprintf_r+0x9e6>
 8007f10:	465b      	mov	r3, fp
 8007f12:	e7d8      	b.n	8007ec6 <_svfprintf_r+0xc16>
 8007f14:	0800a6c8 	.word	0x0800a6c8
 8007f18:	0800a6ec 	.word	0x0800a6ec
 8007f1c:	0800a6fc 	.word	0x0800a6fc
 8007f20:	2300      	movs	r3, #0
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8007f28:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8007f2c:	9307      	str	r3, [sp, #28]
 8007f2e:	220a      	movs	r2, #10
 8007f30:	2300      	movs	r3, #0
 8007f32:	4630      	mov	r0, r6
 8007f34:	4639      	mov	r1, r7
 8007f36:	f7f8 fe57 	bl	8000be8 <__aeabi_uldivmod>
 8007f3a:	9b04      	ldr	r3, [sp, #16]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	9304      	str	r3, [sp, #16]
 8007f40:	9b07      	ldr	r3, [sp, #28]
 8007f42:	3230      	adds	r2, #48	; 0x30
 8007f44:	f109 3bff 	add.w	fp, r9, #4294967295
 8007f48:	f809 2c01 	strb.w	r2, [r9, #-1]
 8007f4c:	b1d3      	cbz	r3, 8007f84 <_svfprintf_r+0xcd4>
 8007f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f50:	9a04      	ldr	r2, [sp, #16]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d115      	bne.n	8007f84 <_svfprintf_r+0xcd4>
 8007f58:	2aff      	cmp	r2, #255	; 0xff
 8007f5a:	d013      	beq.n	8007f84 <_svfprintf_r+0xcd4>
 8007f5c:	2f00      	cmp	r7, #0
 8007f5e:	bf08      	it	eq
 8007f60:	2e0a      	cmpeq	r6, #10
 8007f62:	d30f      	bcc.n	8007f84 <_svfprintf_r+0xcd4>
 8007f64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f66:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007f68:	ebab 0b03 	sub.w	fp, fp, r3
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	4658      	mov	r0, fp
 8007f70:	f002 f8a8 	bl	800a0c4 <strncpy>
 8007f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f76:	785b      	ldrb	r3, [r3, #1]
 8007f78:	b11b      	cbz	r3, 8007f82 <_svfprintf_r+0xcd2>
 8007f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f80:	2300      	movs	r3, #0
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	2300      	movs	r3, #0
 8007f86:	4630      	mov	r0, r6
 8007f88:	4639      	mov	r1, r7
 8007f8a:	220a      	movs	r2, #10
 8007f8c:	f7f8 fe2c 	bl	8000be8 <__aeabi_uldivmod>
 8007f90:	4606      	mov	r6, r0
 8007f92:	460f      	mov	r7, r1
 8007f94:	ea56 0307 	orrs.w	r3, r6, r7
 8007f98:	d0af      	beq.n	8007efa <_svfprintf_r+0xc4a>
 8007f9a:	46d9      	mov	r9, fp
 8007f9c:	e7c7      	b.n	8007f2e <_svfprintf_r+0xc7e>
 8007f9e:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8007fa2:	f006 030f 	and.w	r3, r6, #15
 8007fa6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007fa8:	5cd3      	ldrb	r3, [r2, r3]
 8007faa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8007fae:	0933      	lsrs	r3, r6, #4
 8007fb0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8007fb4:	093a      	lsrs	r2, r7, #4
 8007fb6:	461e      	mov	r6, r3
 8007fb8:	4617      	mov	r7, r2
 8007fba:	ea56 0307 	orrs.w	r3, r6, r7
 8007fbe:	d1f0      	bne.n	8007fa2 <_svfprintf_r+0xcf2>
 8007fc0:	e79b      	b.n	8007efa <_svfprintf_r+0xc4a>
 8007fc2:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d197      	bne.n	8007efa <_svfprintf_r+0xc4a>
 8007fca:	07d2      	lsls	r2, r2, #31
 8007fcc:	bf44      	itt	mi
 8007fce:	2330      	movmi	r3, #48	; 0x30
 8007fd0:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8007fd4:	e791      	b.n	8007efa <_svfprintf_r+0xc4a>
 8007fd6:	9b06      	ldr	r3, [sp, #24]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8377 	beq.w	80086cc <_svfprintf_r+0x141c>
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8007fe4:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8007fe8:	9608      	str	r6, [sp, #32]
 8007fea:	f7ff bb49 	b.w	8007680 <_svfprintf_r+0x3d0>
 8007fee:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8007ff2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ff4:	e4ec      	b.n	80079d0 <_svfprintf_r+0x720>
 8007ff6:	2010      	movs	r0, #16
 8007ff8:	4403      	add	r3, r0
 8007ffa:	2a07      	cmp	r2, #7
 8007ffc:	6060      	str	r0, [r4, #4]
 8007ffe:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8008002:	dd08      	ble.n	8008016 <_svfprintf_r+0xd66>
 8008004:	aa26      	add	r2, sp, #152	; 0x98
 8008006:	4641      	mov	r1, r8
 8008008:	9803      	ldr	r0, [sp, #12]
 800800a:	f002 f870 	bl	800a0ee <__ssprint_r>
 800800e:	2800      	cmp	r0, #0
 8008010:	f040 833a 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8008014:	a929      	add	r1, sp, #164	; 0xa4
 8008016:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008018:	3b10      	subs	r3, #16
 800801a:	9313      	str	r3, [sp, #76]	; 0x4c
 800801c:	460c      	mov	r4, r1
 800801e:	e656      	b.n	8007cce <_svfprintf_r+0xa1e>
 8008020:	460c      	mov	r4, r1
 8008022:	e671      	b.n	8007d08 <_svfprintf_r+0xa58>
 8008024:	aa26      	add	r2, sp, #152	; 0x98
 8008026:	4641      	mov	r1, r8
 8008028:	9803      	ldr	r0, [sp, #12]
 800802a:	f002 f860 	bl	800a0ee <__ssprint_r>
 800802e:	2800      	cmp	r0, #0
 8008030:	f040 832a 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8008034:	ac29      	add	r4, sp, #164	; 0xa4
 8008036:	e679      	b.n	8007d2c <_svfprintf_r+0xa7c>
 8008038:	aa26      	add	r2, sp, #152	; 0x98
 800803a:	4641      	mov	r1, r8
 800803c:	9803      	ldr	r0, [sp, #12]
 800803e:	f002 f856 	bl	800a0ee <__ssprint_r>
 8008042:	2800      	cmp	r0, #0
 8008044:	f040 8320 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8008048:	ac29      	add	r4, sp, #164	; 0xa4
 800804a:	e67f      	b.n	8007d4c <_svfprintf_r+0xa9c>
 800804c:	2010      	movs	r0, #16
 800804e:	4403      	add	r3, r0
 8008050:	2a07      	cmp	r2, #7
 8008052:	6060      	str	r0, [r4, #4]
 8008054:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8008058:	dd08      	ble.n	800806c <_svfprintf_r+0xdbc>
 800805a:	aa26      	add	r2, sp, #152	; 0x98
 800805c:	4641      	mov	r1, r8
 800805e:	9803      	ldr	r0, [sp, #12]
 8008060:	f002 f845 	bl	800a0ee <__ssprint_r>
 8008064:	2800      	cmp	r0, #0
 8008066:	f040 830f 	bne.w	8008688 <_svfprintf_r+0x13d8>
 800806a:	a929      	add	r1, sp, #164	; 0xa4
 800806c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800806e:	3b10      	subs	r3, #16
 8008070:	9313      	str	r3, [sp, #76]	; 0x4c
 8008072:	460c      	mov	r4, r1
 8008074:	e673      	b.n	8007d5e <_svfprintf_r+0xaae>
 8008076:	460c      	mov	r4, r1
 8008078:	e68e      	b.n	8007d98 <_svfprintf_r+0xae8>
 800807a:	2010      	movs	r0, #16
 800807c:	4403      	add	r3, r0
 800807e:	2a07      	cmp	r2, #7
 8008080:	6060      	str	r0, [r4, #4]
 8008082:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8008086:	dd08      	ble.n	800809a <_svfprintf_r+0xdea>
 8008088:	aa26      	add	r2, sp, #152	; 0x98
 800808a:	4641      	mov	r1, r8
 800808c:	9803      	ldr	r0, [sp, #12]
 800808e:	f002 f82e 	bl	800a0ee <__ssprint_r>
 8008092:	2800      	cmp	r0, #0
 8008094:	f040 82f8 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8008098:	a929      	add	r1, sp, #164	; 0xa4
 800809a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800809c:	3b10      	subs	r3, #16
 800809e:	9310      	str	r3, [sp, #64]	; 0x40
 80080a0:	460c      	mov	r4, r1
 80080a2:	e67e      	b.n	8007da2 <_svfprintf_r+0xaf2>
 80080a4:	460c      	mov	r4, r1
 80080a6:	e699      	b.n	8007ddc <_svfprintf_r+0xb2c>
 80080a8:	9b06      	ldr	r3, [sp, #24]
 80080aa:	2b65      	cmp	r3, #101	; 0x65
 80080ac:	f340 8234 	ble.w	8008518 <_svfprintf_r+0x1268>
 80080b0:	2200      	movs	r2, #0
 80080b2:	2300      	movs	r3, #0
 80080b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080b8:	f7f8 fd26 	bl	8000b08 <__aeabi_dcmpeq>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d069      	beq.n	8008194 <_svfprintf_r+0xee4>
 80080c0:	4b6e      	ldr	r3, [pc, #440]	; (800827c <_svfprintf_r+0xfcc>)
 80080c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	2301      	movs	r3, #1
 80080c8:	441d      	add	r5, r3
 80080ca:	6063      	str	r3, [r4, #4]
 80080cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80080ce:	9528      	str	r5, [sp, #160]	; 0xa0
 80080d0:	3301      	adds	r3, #1
 80080d2:	2b07      	cmp	r3, #7
 80080d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80080d6:	dc37      	bgt.n	8008148 <_svfprintf_r+0xe98>
 80080d8:	3408      	adds	r4, #8
 80080da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80080dc:	9a04      	ldr	r2, [sp, #16]
 80080de:	4293      	cmp	r3, r2
 80080e0:	db03      	blt.n	80080ea <_svfprintf_r+0xe3a>
 80080e2:	f01a 0f01 	tst.w	sl, #1
 80080e6:	f43f ae8a 	beq.w	8007dfe <_svfprintf_r+0xb4e>
 80080ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080f0:	6063      	str	r3, [r4, #4]
 80080f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80080f6:	4413      	add	r3, r2
 80080f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80080fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80080fc:	3301      	adds	r3, #1
 80080fe:	2b07      	cmp	r3, #7
 8008100:	9327      	str	r3, [sp, #156]	; 0x9c
 8008102:	dc2b      	bgt.n	800815c <_svfprintf_r+0xeac>
 8008104:	3408      	adds	r4, #8
 8008106:	9b04      	ldr	r3, [sp, #16]
 8008108:	1e5d      	subs	r5, r3, #1
 800810a:	2d00      	cmp	r5, #0
 800810c:	f77f ae77 	ble.w	8007dfe <_svfprintf_r+0xb4e>
 8008110:	4e5b      	ldr	r6, [pc, #364]	; (8008280 <_svfprintf_r+0xfd0>)
 8008112:	2710      	movs	r7, #16
 8008114:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8008118:	2d10      	cmp	r5, #16
 800811a:	f103 0301 	add.w	r3, r3, #1
 800811e:	f104 0108 	add.w	r1, r4, #8
 8008122:	6026      	str	r6, [r4, #0]
 8008124:	dc24      	bgt.n	8008170 <_svfprintf_r+0xec0>
 8008126:	6065      	str	r5, [r4, #4]
 8008128:	2b07      	cmp	r3, #7
 800812a:	4415      	add	r5, r2
 800812c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8008130:	f340 8289 	ble.w	8008646 <_svfprintf_r+0x1396>
 8008134:	aa26      	add	r2, sp, #152	; 0x98
 8008136:	4641      	mov	r1, r8
 8008138:	9803      	ldr	r0, [sp, #12]
 800813a:	f001 ffd8 	bl	800a0ee <__ssprint_r>
 800813e:	2800      	cmp	r0, #0
 8008140:	f040 82a2 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8008144:	ac29      	add	r4, sp, #164	; 0xa4
 8008146:	e65a      	b.n	8007dfe <_svfprintf_r+0xb4e>
 8008148:	aa26      	add	r2, sp, #152	; 0x98
 800814a:	4641      	mov	r1, r8
 800814c:	9803      	ldr	r0, [sp, #12]
 800814e:	f001 ffce 	bl	800a0ee <__ssprint_r>
 8008152:	2800      	cmp	r0, #0
 8008154:	f040 8298 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8008158:	ac29      	add	r4, sp, #164	; 0xa4
 800815a:	e7be      	b.n	80080da <_svfprintf_r+0xe2a>
 800815c:	aa26      	add	r2, sp, #152	; 0x98
 800815e:	4641      	mov	r1, r8
 8008160:	9803      	ldr	r0, [sp, #12]
 8008162:	f001 ffc4 	bl	800a0ee <__ssprint_r>
 8008166:	2800      	cmp	r0, #0
 8008168:	f040 828e 	bne.w	8008688 <_svfprintf_r+0x13d8>
 800816c:	ac29      	add	r4, sp, #164	; 0xa4
 800816e:	e7ca      	b.n	8008106 <_svfprintf_r+0xe56>
 8008170:	3210      	adds	r2, #16
 8008172:	2b07      	cmp	r3, #7
 8008174:	6067      	str	r7, [r4, #4]
 8008176:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800817a:	dd08      	ble.n	800818e <_svfprintf_r+0xede>
 800817c:	aa26      	add	r2, sp, #152	; 0x98
 800817e:	4641      	mov	r1, r8
 8008180:	9803      	ldr	r0, [sp, #12]
 8008182:	f001 ffb4 	bl	800a0ee <__ssprint_r>
 8008186:	2800      	cmp	r0, #0
 8008188:	f040 827e 	bne.w	8008688 <_svfprintf_r+0x13d8>
 800818c:	a929      	add	r1, sp, #164	; 0xa4
 800818e:	3d10      	subs	r5, #16
 8008190:	460c      	mov	r4, r1
 8008192:	e7bf      	b.n	8008114 <_svfprintf_r+0xe64>
 8008194:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008196:	2b00      	cmp	r3, #0
 8008198:	dc74      	bgt.n	8008284 <_svfprintf_r+0xfd4>
 800819a:	4b38      	ldr	r3, [pc, #224]	; (800827c <_svfprintf_r+0xfcc>)
 800819c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800819e:	6023      	str	r3, [r4, #0]
 80081a0:	2301      	movs	r3, #1
 80081a2:	441d      	add	r5, r3
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80081a8:	9528      	str	r5, [sp, #160]	; 0xa0
 80081aa:	3301      	adds	r3, #1
 80081ac:	2b07      	cmp	r3, #7
 80081ae:	9327      	str	r3, [sp, #156]	; 0x9c
 80081b0:	dc3e      	bgt.n	8008230 <_svfprintf_r+0xf80>
 80081b2:	3408      	adds	r4, #8
 80081b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80081b6:	b92b      	cbnz	r3, 80081c4 <_svfprintf_r+0xf14>
 80081b8:	9b04      	ldr	r3, [sp, #16]
 80081ba:	b91b      	cbnz	r3, 80081c4 <_svfprintf_r+0xf14>
 80081bc:	f01a 0f01 	tst.w	sl, #1
 80081c0:	f43f ae1d 	beq.w	8007dfe <_svfprintf_r+0xb4e>
 80081c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80081c6:	6023      	str	r3, [r4, #0]
 80081c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081ca:	6063      	str	r3, [r4, #4]
 80081cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80081d0:	4413      	add	r3, r2
 80081d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80081d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80081d6:	3301      	adds	r3, #1
 80081d8:	2b07      	cmp	r3, #7
 80081da:	9327      	str	r3, [sp, #156]	; 0x9c
 80081dc:	dc32      	bgt.n	8008244 <_svfprintf_r+0xf94>
 80081de:	3408      	adds	r4, #8
 80081e0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80081e2:	2d00      	cmp	r5, #0
 80081e4:	da1b      	bge.n	800821e <_svfprintf_r+0xf6e>
 80081e6:	4e26      	ldr	r6, [pc, #152]	; (8008280 <_svfprintf_r+0xfd0>)
 80081e8:	426d      	negs	r5, r5
 80081ea:	4623      	mov	r3, r4
 80081ec:	2710      	movs	r7, #16
 80081ee:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 80081f2:	2d10      	cmp	r5, #16
 80081f4:	f102 0201 	add.w	r2, r2, #1
 80081f8:	f104 0408 	add.w	r4, r4, #8
 80081fc:	601e      	str	r6, [r3, #0]
 80081fe:	dc2b      	bgt.n	8008258 <_svfprintf_r+0xfa8>
 8008200:	605d      	str	r5, [r3, #4]
 8008202:	2a07      	cmp	r2, #7
 8008204:	440d      	add	r5, r1
 8008206:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800820a:	dd08      	ble.n	800821e <_svfprintf_r+0xf6e>
 800820c:	aa26      	add	r2, sp, #152	; 0x98
 800820e:	4641      	mov	r1, r8
 8008210:	9803      	ldr	r0, [sp, #12]
 8008212:	f001 ff6c 	bl	800a0ee <__ssprint_r>
 8008216:	2800      	cmp	r0, #0
 8008218:	f040 8236 	bne.w	8008688 <_svfprintf_r+0x13d8>
 800821c:	ac29      	add	r4, sp, #164	; 0xa4
 800821e:	9b04      	ldr	r3, [sp, #16]
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	9a04      	ldr	r2, [sp, #16]
 8008224:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008226:	f8c4 b000 	str.w	fp, [r4]
 800822a:	4413      	add	r3, r2
 800822c:	9328      	str	r3, [sp, #160]	; 0xa0
 800822e:	e5df      	b.n	8007df0 <_svfprintf_r+0xb40>
 8008230:	aa26      	add	r2, sp, #152	; 0x98
 8008232:	4641      	mov	r1, r8
 8008234:	9803      	ldr	r0, [sp, #12]
 8008236:	f001 ff5a 	bl	800a0ee <__ssprint_r>
 800823a:	2800      	cmp	r0, #0
 800823c:	f040 8224 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8008240:	ac29      	add	r4, sp, #164	; 0xa4
 8008242:	e7b7      	b.n	80081b4 <_svfprintf_r+0xf04>
 8008244:	aa26      	add	r2, sp, #152	; 0x98
 8008246:	4641      	mov	r1, r8
 8008248:	9803      	ldr	r0, [sp, #12]
 800824a:	f001 ff50 	bl	800a0ee <__ssprint_r>
 800824e:	2800      	cmp	r0, #0
 8008250:	f040 821a 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8008254:	ac29      	add	r4, sp, #164	; 0xa4
 8008256:	e7c3      	b.n	80081e0 <_svfprintf_r+0xf30>
 8008258:	3110      	adds	r1, #16
 800825a:	2a07      	cmp	r2, #7
 800825c:	605f      	str	r7, [r3, #4]
 800825e:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8008262:	dd08      	ble.n	8008276 <_svfprintf_r+0xfc6>
 8008264:	aa26      	add	r2, sp, #152	; 0x98
 8008266:	4641      	mov	r1, r8
 8008268:	9803      	ldr	r0, [sp, #12]
 800826a:	f001 ff40 	bl	800a0ee <__ssprint_r>
 800826e:	2800      	cmp	r0, #0
 8008270:	f040 820a 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8008274:	ac29      	add	r4, sp, #164	; 0xa4
 8008276:	3d10      	subs	r5, #16
 8008278:	4623      	mov	r3, r4
 800827a:	e7b8      	b.n	80081ee <_svfprintf_r+0xf3e>
 800827c:	0800a6ea 	.word	0x0800a6ea
 8008280:	0800a6fc 	.word	0x0800a6fc
 8008284:	9b04      	ldr	r3, [sp, #16]
 8008286:	42b3      	cmp	r3, r6
 8008288:	bfa8      	it	ge
 800828a:	4633      	movge	r3, r6
 800828c:	2b00      	cmp	r3, #0
 800828e:	461d      	mov	r5, r3
 8008290:	dd0b      	ble.n	80082aa <_svfprintf_r+0xffa>
 8008292:	e9c4 b300 	strd	fp, r3, [r4]
 8008296:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008298:	442b      	add	r3, r5
 800829a:	9328      	str	r3, [sp, #160]	; 0xa0
 800829c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800829e:	3301      	adds	r3, #1
 80082a0:	2b07      	cmp	r3, #7
 80082a2:	9327      	str	r3, [sp, #156]	; 0x9c
 80082a4:	f300 8086 	bgt.w	80083b4 <_svfprintf_r+0x1104>
 80082a8:	3408      	adds	r4, #8
 80082aa:	2d00      	cmp	r5, #0
 80082ac:	bfac      	ite	ge
 80082ae:	1b75      	subge	r5, r6, r5
 80082b0:	4635      	movlt	r5, r6
 80082b2:	2d00      	cmp	r5, #0
 80082b4:	dd19      	ble.n	80082ea <_svfprintf_r+0x103a>
 80082b6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80082ba:	4896      	ldr	r0, [pc, #600]	; (8008514 <_svfprintf_r+0x1264>)
 80082bc:	6020      	str	r0, [r4, #0]
 80082be:	2d10      	cmp	r5, #16
 80082c0:	f103 0301 	add.w	r3, r3, #1
 80082c4:	f104 0108 	add.w	r1, r4, #8
 80082c8:	dc7e      	bgt.n	80083c8 <_svfprintf_r+0x1118>
 80082ca:	6065      	str	r5, [r4, #4]
 80082cc:	2b07      	cmp	r3, #7
 80082ce:	4415      	add	r5, r2
 80082d0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80082d4:	f340 808b 	ble.w	80083ee <_svfprintf_r+0x113e>
 80082d8:	aa26      	add	r2, sp, #152	; 0x98
 80082da:	4641      	mov	r1, r8
 80082dc:	9803      	ldr	r0, [sp, #12]
 80082de:	f001 ff06 	bl	800a0ee <__ssprint_r>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	f040 81d0 	bne.w	8008688 <_svfprintf_r+0x13d8>
 80082e8:	ac29      	add	r4, sp, #164	; 0xa4
 80082ea:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 80082ee:	445e      	add	r6, fp
 80082f0:	d009      	beq.n	8008306 <_svfprintf_r+0x1056>
 80082f2:	9b07      	ldr	r3, [sp, #28]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d17c      	bne.n	80083f2 <_svfprintf_r+0x1142>
 80082f8:	2f00      	cmp	r7, #0
 80082fa:	d17c      	bne.n	80083f6 <_svfprintf_r+0x1146>
 80082fc:	9b04      	ldr	r3, [sp, #16]
 80082fe:	445b      	add	r3, fp
 8008300:	429e      	cmp	r6, r3
 8008302:	bf28      	it	cs
 8008304:	461e      	movcs	r6, r3
 8008306:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008308:	9a04      	ldr	r2, [sp, #16]
 800830a:	4293      	cmp	r3, r2
 800830c:	db02      	blt.n	8008314 <_svfprintf_r+0x1064>
 800830e:	f01a 0f01 	tst.w	sl, #1
 8008312:	d00e      	beq.n	8008332 <_svfprintf_r+0x1082>
 8008314:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008316:	6023      	str	r3, [r4, #0]
 8008318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800831a:	6063      	str	r3, [r4, #4]
 800831c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800831e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008320:	4413      	add	r3, r2
 8008322:	9328      	str	r3, [sp, #160]	; 0xa0
 8008324:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008326:	3301      	adds	r3, #1
 8008328:	2b07      	cmp	r3, #7
 800832a:	9327      	str	r3, [sp, #156]	; 0x9c
 800832c:	f300 80dd 	bgt.w	80084ea <_svfprintf_r+0x123a>
 8008330:	3408      	adds	r4, #8
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	9a04      	ldr	r2, [sp, #16]
 8008336:	eb0b 0503 	add.w	r5, fp, r3
 800833a:	1bab      	subs	r3, r5, r6
 800833c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800833e:	1b55      	subs	r5, r2, r5
 8008340:	429d      	cmp	r5, r3
 8008342:	bfa8      	it	ge
 8008344:	461d      	movge	r5, r3
 8008346:	2d00      	cmp	r5, #0
 8008348:	dd0b      	ble.n	8008362 <_svfprintf_r+0x10b2>
 800834a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800834c:	442b      	add	r3, r5
 800834e:	9328      	str	r3, [sp, #160]	; 0xa0
 8008350:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008352:	3301      	adds	r3, #1
 8008354:	2b07      	cmp	r3, #7
 8008356:	e9c4 6500 	strd	r6, r5, [r4]
 800835a:	9327      	str	r3, [sp, #156]	; 0x9c
 800835c:	f300 80cf 	bgt.w	80084fe <_svfprintf_r+0x124e>
 8008360:	3408      	adds	r4, #8
 8008362:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008364:	9a04      	ldr	r2, [sp, #16]
 8008366:	2d00      	cmp	r5, #0
 8008368:	eba2 0303 	sub.w	r3, r2, r3
 800836c:	bfac      	ite	ge
 800836e:	1b5d      	subge	r5, r3, r5
 8008370:	461d      	movlt	r5, r3
 8008372:	2d00      	cmp	r5, #0
 8008374:	f77f ad43 	ble.w	8007dfe <_svfprintf_r+0xb4e>
 8008378:	4e66      	ldr	r6, [pc, #408]	; (8008514 <_svfprintf_r+0x1264>)
 800837a:	2710      	movs	r7, #16
 800837c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8008380:	2d10      	cmp	r5, #16
 8008382:	f103 0301 	add.w	r3, r3, #1
 8008386:	f104 0108 	add.w	r1, r4, #8
 800838a:	6026      	str	r6, [r4, #0]
 800838c:	f77f aecb 	ble.w	8008126 <_svfprintf_r+0xe76>
 8008390:	3210      	adds	r2, #16
 8008392:	2b07      	cmp	r3, #7
 8008394:	6067      	str	r7, [r4, #4]
 8008396:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800839a:	dd08      	ble.n	80083ae <_svfprintf_r+0x10fe>
 800839c:	aa26      	add	r2, sp, #152	; 0x98
 800839e:	4641      	mov	r1, r8
 80083a0:	9803      	ldr	r0, [sp, #12]
 80083a2:	f001 fea4 	bl	800a0ee <__ssprint_r>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f040 816e 	bne.w	8008688 <_svfprintf_r+0x13d8>
 80083ac:	a929      	add	r1, sp, #164	; 0xa4
 80083ae:	3d10      	subs	r5, #16
 80083b0:	460c      	mov	r4, r1
 80083b2:	e7e3      	b.n	800837c <_svfprintf_r+0x10cc>
 80083b4:	aa26      	add	r2, sp, #152	; 0x98
 80083b6:	4641      	mov	r1, r8
 80083b8:	9803      	ldr	r0, [sp, #12]
 80083ba:	f001 fe98 	bl	800a0ee <__ssprint_r>
 80083be:	2800      	cmp	r0, #0
 80083c0:	f040 8162 	bne.w	8008688 <_svfprintf_r+0x13d8>
 80083c4:	ac29      	add	r4, sp, #164	; 0xa4
 80083c6:	e770      	b.n	80082aa <_svfprintf_r+0xffa>
 80083c8:	2010      	movs	r0, #16
 80083ca:	4402      	add	r2, r0
 80083cc:	2b07      	cmp	r3, #7
 80083ce:	6060      	str	r0, [r4, #4]
 80083d0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80083d4:	dd08      	ble.n	80083e8 <_svfprintf_r+0x1138>
 80083d6:	aa26      	add	r2, sp, #152	; 0x98
 80083d8:	4641      	mov	r1, r8
 80083da:	9803      	ldr	r0, [sp, #12]
 80083dc:	f001 fe87 	bl	800a0ee <__ssprint_r>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	f040 8151 	bne.w	8008688 <_svfprintf_r+0x13d8>
 80083e6:	a929      	add	r1, sp, #164	; 0xa4
 80083e8:	3d10      	subs	r5, #16
 80083ea:	460c      	mov	r4, r1
 80083ec:	e763      	b.n	80082b6 <_svfprintf_r+0x1006>
 80083ee:	460c      	mov	r4, r1
 80083f0:	e77b      	b.n	80082ea <_svfprintf_r+0x103a>
 80083f2:	2f00      	cmp	r7, #0
 80083f4:	d049      	beq.n	800848a <_svfprintf_r+0x11da>
 80083f6:	3f01      	subs	r7, #1
 80083f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083fa:	6023      	str	r3, [r4, #0]
 80083fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083fe:	6063      	str	r3, [r4, #4]
 8008400:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008402:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008404:	4413      	add	r3, r2
 8008406:	9328      	str	r3, [sp, #160]	; 0xa0
 8008408:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800840a:	3301      	adds	r3, #1
 800840c:	2b07      	cmp	r3, #7
 800840e:	9327      	str	r3, [sp, #156]	; 0x9c
 8008410:	dc42      	bgt.n	8008498 <_svfprintf_r+0x11e8>
 8008412:	3408      	adds	r4, #8
 8008414:	9b04      	ldr	r3, [sp, #16]
 8008416:	445b      	add	r3, fp
 8008418:	1b9a      	subs	r2, r3, r6
 800841a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	4293      	cmp	r3, r2
 8008420:	bfa8      	it	ge
 8008422:	4613      	movge	r3, r2
 8008424:	2b00      	cmp	r3, #0
 8008426:	461d      	mov	r5, r3
 8008428:	dd0a      	ble.n	8008440 <_svfprintf_r+0x1190>
 800842a:	e9c4 6300 	strd	r6, r3, [r4]
 800842e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008430:	442b      	add	r3, r5
 8008432:	9328      	str	r3, [sp, #160]	; 0xa0
 8008434:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008436:	3301      	adds	r3, #1
 8008438:	2b07      	cmp	r3, #7
 800843a:	9327      	str	r3, [sp, #156]	; 0x9c
 800843c:	dc36      	bgt.n	80084ac <_svfprintf_r+0x11fc>
 800843e:	3408      	adds	r4, #8
 8008440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2d00      	cmp	r5, #0
 8008446:	bfac      	ite	ge
 8008448:	1b5d      	subge	r5, r3, r5
 800844a:	461d      	movlt	r5, r3
 800844c:	2d00      	cmp	r5, #0
 800844e:	dd18      	ble.n	8008482 <_svfprintf_r+0x11d2>
 8008450:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8008454:	482f      	ldr	r0, [pc, #188]	; (8008514 <_svfprintf_r+0x1264>)
 8008456:	6020      	str	r0, [r4, #0]
 8008458:	2d10      	cmp	r5, #16
 800845a:	f102 0201 	add.w	r2, r2, #1
 800845e:	f104 0108 	add.w	r1, r4, #8
 8008462:	dc2d      	bgt.n	80084c0 <_svfprintf_r+0x1210>
 8008464:	442b      	add	r3, r5
 8008466:	2a07      	cmp	r2, #7
 8008468:	6065      	str	r5, [r4, #4]
 800846a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800846e:	dd3a      	ble.n	80084e6 <_svfprintf_r+0x1236>
 8008470:	aa26      	add	r2, sp, #152	; 0x98
 8008472:	4641      	mov	r1, r8
 8008474:	9803      	ldr	r0, [sp, #12]
 8008476:	f001 fe3a 	bl	800a0ee <__ssprint_r>
 800847a:	2800      	cmp	r0, #0
 800847c:	f040 8104 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8008480:	ac29      	add	r4, sp, #164	; 0xa4
 8008482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	441e      	add	r6, r3
 8008488:	e733      	b.n	80082f2 <_svfprintf_r+0x1042>
 800848a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848c:	3b01      	subs	r3, #1
 800848e:	9309      	str	r3, [sp, #36]	; 0x24
 8008490:	9b07      	ldr	r3, [sp, #28]
 8008492:	3b01      	subs	r3, #1
 8008494:	9307      	str	r3, [sp, #28]
 8008496:	e7af      	b.n	80083f8 <_svfprintf_r+0x1148>
 8008498:	aa26      	add	r2, sp, #152	; 0x98
 800849a:	4641      	mov	r1, r8
 800849c:	9803      	ldr	r0, [sp, #12]
 800849e:	f001 fe26 	bl	800a0ee <__ssprint_r>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	f040 80f0 	bne.w	8008688 <_svfprintf_r+0x13d8>
 80084a8:	ac29      	add	r4, sp, #164	; 0xa4
 80084aa:	e7b3      	b.n	8008414 <_svfprintf_r+0x1164>
 80084ac:	aa26      	add	r2, sp, #152	; 0x98
 80084ae:	4641      	mov	r1, r8
 80084b0:	9803      	ldr	r0, [sp, #12]
 80084b2:	f001 fe1c 	bl	800a0ee <__ssprint_r>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f040 80e6 	bne.w	8008688 <_svfprintf_r+0x13d8>
 80084bc:	ac29      	add	r4, sp, #164	; 0xa4
 80084be:	e7bf      	b.n	8008440 <_svfprintf_r+0x1190>
 80084c0:	2010      	movs	r0, #16
 80084c2:	4403      	add	r3, r0
 80084c4:	2a07      	cmp	r2, #7
 80084c6:	6060      	str	r0, [r4, #4]
 80084c8:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80084cc:	dd08      	ble.n	80084e0 <_svfprintf_r+0x1230>
 80084ce:	aa26      	add	r2, sp, #152	; 0x98
 80084d0:	4641      	mov	r1, r8
 80084d2:	9803      	ldr	r0, [sp, #12]
 80084d4:	f001 fe0b 	bl	800a0ee <__ssprint_r>
 80084d8:	2800      	cmp	r0, #0
 80084da:	f040 80d5 	bne.w	8008688 <_svfprintf_r+0x13d8>
 80084de:	a929      	add	r1, sp, #164	; 0xa4
 80084e0:	3d10      	subs	r5, #16
 80084e2:	460c      	mov	r4, r1
 80084e4:	e7b4      	b.n	8008450 <_svfprintf_r+0x11a0>
 80084e6:	460c      	mov	r4, r1
 80084e8:	e7cb      	b.n	8008482 <_svfprintf_r+0x11d2>
 80084ea:	aa26      	add	r2, sp, #152	; 0x98
 80084ec:	4641      	mov	r1, r8
 80084ee:	9803      	ldr	r0, [sp, #12]
 80084f0:	f001 fdfd 	bl	800a0ee <__ssprint_r>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f040 80c7 	bne.w	8008688 <_svfprintf_r+0x13d8>
 80084fa:	ac29      	add	r4, sp, #164	; 0xa4
 80084fc:	e719      	b.n	8008332 <_svfprintf_r+0x1082>
 80084fe:	aa26      	add	r2, sp, #152	; 0x98
 8008500:	4641      	mov	r1, r8
 8008502:	9803      	ldr	r0, [sp, #12]
 8008504:	f001 fdf3 	bl	800a0ee <__ssprint_r>
 8008508:	2800      	cmp	r0, #0
 800850a:	f040 80bd 	bne.w	8008688 <_svfprintf_r+0x13d8>
 800850e:	ac29      	add	r4, sp, #164	; 0xa4
 8008510:	e727      	b.n	8008362 <_svfprintf_r+0x10b2>
 8008512:	bf00      	nop
 8008514:	0800a6fc 	.word	0x0800a6fc
 8008518:	9a04      	ldr	r2, [sp, #16]
 800851a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800851c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800851e:	2a01      	cmp	r2, #1
 8008520:	f105 0501 	add.w	r5, r5, #1
 8008524:	f103 0301 	add.w	r3, r3, #1
 8008528:	f104 0608 	add.w	r6, r4, #8
 800852c:	dc02      	bgt.n	8008534 <_svfprintf_r+0x1284>
 800852e:	f01a 0f01 	tst.w	sl, #1
 8008532:	d07d      	beq.n	8008630 <_svfprintf_r+0x1380>
 8008534:	2201      	movs	r2, #1
 8008536:	2b07      	cmp	r3, #7
 8008538:	f8c4 b000 	str.w	fp, [r4]
 800853c:	6062      	str	r2, [r4, #4]
 800853e:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8008542:	dd08      	ble.n	8008556 <_svfprintf_r+0x12a6>
 8008544:	aa26      	add	r2, sp, #152	; 0x98
 8008546:	4641      	mov	r1, r8
 8008548:	9803      	ldr	r0, [sp, #12]
 800854a:	f001 fdd0 	bl	800a0ee <__ssprint_r>
 800854e:	2800      	cmp	r0, #0
 8008550:	f040 809a 	bne.w	8008688 <_svfprintf_r+0x13d8>
 8008554:	ae29      	add	r6, sp, #164	; 0xa4
 8008556:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008558:	6033      	str	r3, [r6, #0]
 800855a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800855c:	6073      	str	r3, [r6, #4]
 800855e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008560:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008562:	4413      	add	r3, r2
 8008564:	9328      	str	r3, [sp, #160]	; 0xa0
 8008566:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008568:	3301      	adds	r3, #1
 800856a:	2b07      	cmp	r3, #7
 800856c:	9327      	str	r3, [sp, #156]	; 0x9c
 800856e:	dc31      	bgt.n	80085d4 <_svfprintf_r+0x1324>
 8008570:	3608      	adds	r6, #8
 8008572:	9b04      	ldr	r3, [sp, #16]
 8008574:	2200      	movs	r2, #0
 8008576:	1e5c      	subs	r4, r3, #1
 8008578:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800857c:	2300      	movs	r3, #0
 800857e:	f7f8 fac3 	bl	8000b08 <__aeabi_dcmpeq>
 8008582:	2800      	cmp	r0, #0
 8008584:	d12f      	bne.n	80085e6 <_svfprintf_r+0x1336>
 8008586:	f10b 0301 	add.w	r3, fp, #1
 800858a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800858c:	9904      	ldr	r1, [sp, #16]
 800858e:	e9c6 3400 	strd	r3, r4, [r6]
 8008592:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008594:	3201      	adds	r2, #1
 8008596:	3b01      	subs	r3, #1
 8008598:	440b      	add	r3, r1
 800859a:	2a07      	cmp	r2, #7
 800859c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80085a0:	dd4f      	ble.n	8008642 <_svfprintf_r+0x1392>
 80085a2:	aa26      	add	r2, sp, #152	; 0x98
 80085a4:	4641      	mov	r1, r8
 80085a6:	9803      	ldr	r0, [sp, #12]
 80085a8:	f001 fda1 	bl	800a0ee <__ssprint_r>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d16b      	bne.n	8008688 <_svfprintf_r+0x13d8>
 80085b0:	ae29      	add	r6, sp, #164	; 0xa4
 80085b2:	ab22      	add	r3, sp, #136	; 0x88
 80085b4:	6033      	str	r3, [r6, #0]
 80085b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085b8:	6073      	str	r3, [r6, #4]
 80085ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80085be:	4413      	add	r3, r2
 80085c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80085c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80085c4:	3301      	adds	r3, #1
 80085c6:	2b07      	cmp	r3, #7
 80085c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80085ca:	f73f adb3 	bgt.w	8008134 <_svfprintf_r+0xe84>
 80085ce:	f106 0408 	add.w	r4, r6, #8
 80085d2:	e414      	b.n	8007dfe <_svfprintf_r+0xb4e>
 80085d4:	aa26      	add	r2, sp, #152	; 0x98
 80085d6:	4641      	mov	r1, r8
 80085d8:	9803      	ldr	r0, [sp, #12]
 80085da:	f001 fd88 	bl	800a0ee <__ssprint_r>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d152      	bne.n	8008688 <_svfprintf_r+0x13d8>
 80085e2:	ae29      	add	r6, sp, #164	; 0xa4
 80085e4:	e7c5      	b.n	8008572 <_svfprintf_r+0x12c2>
 80085e6:	2c00      	cmp	r4, #0
 80085e8:	dde3      	ble.n	80085b2 <_svfprintf_r+0x1302>
 80085ea:	4d3e      	ldr	r5, [pc, #248]	; (80086e4 <_svfprintf_r+0x1434>)
 80085ec:	2710      	movs	r7, #16
 80085ee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80085f2:	2c10      	cmp	r4, #16
 80085f4:	f103 0301 	add.w	r3, r3, #1
 80085f8:	f106 0108 	add.w	r1, r6, #8
 80085fc:	6035      	str	r5, [r6, #0]
 80085fe:	dc07      	bgt.n	8008610 <_svfprintf_r+0x1360>
 8008600:	6074      	str	r4, [r6, #4]
 8008602:	2b07      	cmp	r3, #7
 8008604:	4414      	add	r4, r2
 8008606:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800860a:	dcca      	bgt.n	80085a2 <_svfprintf_r+0x12f2>
 800860c:	460e      	mov	r6, r1
 800860e:	e7d0      	b.n	80085b2 <_svfprintf_r+0x1302>
 8008610:	3210      	adds	r2, #16
 8008612:	2b07      	cmp	r3, #7
 8008614:	6077      	str	r7, [r6, #4]
 8008616:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800861a:	dd06      	ble.n	800862a <_svfprintf_r+0x137a>
 800861c:	aa26      	add	r2, sp, #152	; 0x98
 800861e:	4641      	mov	r1, r8
 8008620:	9803      	ldr	r0, [sp, #12]
 8008622:	f001 fd64 	bl	800a0ee <__ssprint_r>
 8008626:	bb78      	cbnz	r0, 8008688 <_svfprintf_r+0x13d8>
 8008628:	a929      	add	r1, sp, #164	; 0xa4
 800862a:	3c10      	subs	r4, #16
 800862c:	460e      	mov	r6, r1
 800862e:	e7de      	b.n	80085ee <_svfprintf_r+0x133e>
 8008630:	2201      	movs	r2, #1
 8008632:	2b07      	cmp	r3, #7
 8008634:	f8c4 b000 	str.w	fp, [r4]
 8008638:	6062      	str	r2, [r4, #4]
 800863a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800863e:	ddb8      	ble.n	80085b2 <_svfprintf_r+0x1302>
 8008640:	e7af      	b.n	80085a2 <_svfprintf_r+0x12f2>
 8008642:	3608      	adds	r6, #8
 8008644:	e7b5      	b.n	80085b2 <_svfprintf_r+0x1302>
 8008646:	460c      	mov	r4, r1
 8008648:	f7ff bbd9 	b.w	8007dfe <_svfprintf_r+0xb4e>
 800864c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800864e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008650:	1a9d      	subs	r5, r3, r2
 8008652:	2d00      	cmp	r5, #0
 8008654:	f77f abd7 	ble.w	8007e06 <_svfprintf_r+0xb56>
 8008658:	4e23      	ldr	r6, [pc, #140]	; (80086e8 <_svfprintf_r+0x1438>)
 800865a:	2710      	movs	r7, #16
 800865c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8008660:	2d10      	cmp	r5, #16
 8008662:	f103 0301 	add.w	r3, r3, #1
 8008666:	6026      	str	r6, [r4, #0]
 8008668:	dc18      	bgt.n	800869c <_svfprintf_r+0x13ec>
 800866a:	6065      	str	r5, [r4, #4]
 800866c:	2b07      	cmp	r3, #7
 800866e:	4415      	add	r5, r2
 8008670:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8008674:	f77f abc7 	ble.w	8007e06 <_svfprintf_r+0xb56>
 8008678:	aa26      	add	r2, sp, #152	; 0x98
 800867a:	4641      	mov	r1, r8
 800867c:	9803      	ldr	r0, [sp, #12]
 800867e:	f001 fd36 	bl	800a0ee <__ssprint_r>
 8008682:	2800      	cmp	r0, #0
 8008684:	f43f abbf 	beq.w	8007e06 <_svfprintf_r+0xb56>
 8008688:	f1b9 0f00 	cmp.w	r9, #0
 800868c:	f43f a8a8 	beq.w	80077e0 <_svfprintf_r+0x530>
 8008690:	4649      	mov	r1, r9
 8008692:	9803      	ldr	r0, [sp, #12]
 8008694:	f000 ff08 	bl	80094a8 <_free_r>
 8008698:	f7ff b8a2 	b.w	80077e0 <_svfprintf_r+0x530>
 800869c:	3210      	adds	r2, #16
 800869e:	2b07      	cmp	r3, #7
 80086a0:	6067      	str	r7, [r4, #4]
 80086a2:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80086a6:	dc02      	bgt.n	80086ae <_svfprintf_r+0x13fe>
 80086a8:	3408      	adds	r4, #8
 80086aa:	3d10      	subs	r5, #16
 80086ac:	e7d6      	b.n	800865c <_svfprintf_r+0x13ac>
 80086ae:	aa26      	add	r2, sp, #152	; 0x98
 80086b0:	4641      	mov	r1, r8
 80086b2:	9803      	ldr	r0, [sp, #12]
 80086b4:	f001 fd1b 	bl	800a0ee <__ssprint_r>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d1e5      	bne.n	8008688 <_svfprintf_r+0x13d8>
 80086bc:	ac29      	add	r4, sp, #164	; 0xa4
 80086be:	e7f4      	b.n	80086aa <_svfprintf_r+0x13fa>
 80086c0:	4649      	mov	r1, r9
 80086c2:	9803      	ldr	r0, [sp, #12]
 80086c4:	f000 fef0 	bl	80094a8 <_free_r>
 80086c8:	f7ff bbb5 	b.w	8007e36 <_svfprintf_r+0xb86>
 80086cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f43f a886 	beq.w	80077e0 <_svfprintf_r+0x530>
 80086d4:	aa26      	add	r2, sp, #152	; 0x98
 80086d6:	4641      	mov	r1, r8
 80086d8:	9803      	ldr	r0, [sp, #12]
 80086da:	f001 fd08 	bl	800a0ee <__ssprint_r>
 80086de:	f7ff b87f 	b.w	80077e0 <_svfprintf_r+0x530>
 80086e2:	bf00      	nop
 80086e4:	0800a6fc 	.word	0x0800a6fc
 80086e8:	0800a6ec 	.word	0x0800a6ec

080086ec <__register_exitproc>:
 80086ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f0:	4c26      	ldr	r4, [pc, #152]	; (800878c <__register_exitproc+0xa0>)
 80086f2:	4606      	mov	r6, r0
 80086f4:	6820      	ldr	r0, [r4, #0]
 80086f6:	4698      	mov	r8, r3
 80086f8:	460f      	mov	r7, r1
 80086fa:	4691      	mov	r9, r2
 80086fc:	f7fe fdd4 	bl	80072a8 <__retarget_lock_acquire_recursive>
 8008700:	4b23      	ldr	r3, [pc, #140]	; (8008790 <__register_exitproc+0xa4>)
 8008702:	681d      	ldr	r5, [r3, #0]
 8008704:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8008708:	b918      	cbnz	r0, 8008712 <__register_exitproc+0x26>
 800870a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800870e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8008712:	6843      	ldr	r3, [r0, #4]
 8008714:	2b1f      	cmp	r3, #31
 8008716:	dd19      	ble.n	800874c <__register_exitproc+0x60>
 8008718:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <__register_exitproc+0xa8>)
 800871a:	b933      	cbnz	r3, 800872a <__register_exitproc+0x3e>
 800871c:	6820      	ldr	r0, [r4, #0]
 800871e:	f7fe fdc4 	bl	80072aa <__retarget_lock_release_recursive>
 8008722:	f04f 30ff 	mov.w	r0, #4294967295
 8008726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800872e:	f3af 8000 	nop.w
 8008732:	2800      	cmp	r0, #0
 8008734:	d0f2      	beq.n	800871c <__register_exitproc+0x30>
 8008736:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800873a:	6003      	str	r3, [r0, #0]
 800873c:	2200      	movs	r2, #0
 800873e:	6042      	str	r2, [r0, #4]
 8008740:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8008744:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8008748:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800874c:	6843      	ldr	r3, [r0, #4]
 800874e:	b19e      	cbz	r6, 8008778 <__register_exitproc+0x8c>
 8008750:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8008754:	2201      	movs	r2, #1
 8008756:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800875a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800875e:	409a      	lsls	r2, r3
 8008760:	4311      	orrs	r1, r2
 8008762:	2e02      	cmp	r6, #2
 8008764:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8008768:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800876c:	bf02      	ittt	eq
 800876e:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8008772:	430a      	orreq	r2, r1
 8008774:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	3302      	adds	r3, #2
 800877c:	6042      	str	r2, [r0, #4]
 800877e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8008782:	6820      	ldr	r0, [r4, #0]
 8008784:	f7fe fd91 	bl	80072aa <__retarget_lock_release_recursive>
 8008788:	2000      	movs	r0, #0
 800878a:	e7cc      	b.n	8008726 <__register_exitproc+0x3a>
 800878c:	20000468 	.word	0x20000468
 8008790:	0800a6b4 	.word	0x0800a6b4
 8008794:	00000000 	.word	0x00000000

08008798 <quorem>:
 8008798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	6903      	ldr	r3, [r0, #16]
 800879e:	690c      	ldr	r4, [r1, #16]
 80087a0:	42a3      	cmp	r3, r4
 80087a2:	4680      	mov	r8, r0
 80087a4:	f2c0 8082 	blt.w	80088ac <quorem+0x114>
 80087a8:	3c01      	subs	r4, #1
 80087aa:	f101 0714 	add.w	r7, r1, #20
 80087ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80087b2:	f100 0614 	add.w	r6, r0, #20
 80087b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80087ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80087be:	eb06 030c 	add.w	r3, r6, ip
 80087c2:	3501      	adds	r5, #1
 80087c4:	eb07 090c 	add.w	r9, r7, ip
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80087ce:	b395      	cbz	r5, 8008836 <quorem+0x9e>
 80087d0:	f04f 0a00 	mov.w	sl, #0
 80087d4:	4638      	mov	r0, r7
 80087d6:	46b6      	mov	lr, r6
 80087d8:	46d3      	mov	fp, sl
 80087da:	f850 2b04 	ldr.w	r2, [r0], #4
 80087de:	b293      	uxth	r3, r2
 80087e0:	fb05 a303 	mla	r3, r5, r3, sl
 80087e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	ebab 0303 	sub.w	r3, fp, r3
 80087ee:	0c12      	lsrs	r2, r2, #16
 80087f0:	f8de b000 	ldr.w	fp, [lr]
 80087f4:	fb05 a202 	mla	r2, r5, r2, sl
 80087f8:	fa13 f38b 	uxtah	r3, r3, fp
 80087fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008800:	fa1f fb82 	uxth.w	fp, r2
 8008804:	f8de 2000 	ldr.w	r2, [lr]
 8008808:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800880c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008810:	b29b      	uxth	r3, r3
 8008812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008816:	4581      	cmp	r9, r0
 8008818:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800881c:	f84e 3b04 	str.w	r3, [lr], #4
 8008820:	d2db      	bcs.n	80087da <quorem+0x42>
 8008822:	f856 300c 	ldr.w	r3, [r6, ip]
 8008826:	b933      	cbnz	r3, 8008836 <quorem+0x9e>
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	3b04      	subs	r3, #4
 800882c:	429e      	cmp	r6, r3
 800882e:	461a      	mov	r2, r3
 8008830:	d330      	bcc.n	8008894 <quorem+0xfc>
 8008832:	f8c8 4010 	str.w	r4, [r8, #16]
 8008836:	4640      	mov	r0, r8
 8008838:	f001 fb38 	bl	8009eac <__mcmp>
 800883c:	2800      	cmp	r0, #0
 800883e:	db25      	blt.n	800888c <quorem+0xf4>
 8008840:	3501      	adds	r5, #1
 8008842:	4630      	mov	r0, r6
 8008844:	f04f 0c00 	mov.w	ip, #0
 8008848:	f857 2b04 	ldr.w	r2, [r7], #4
 800884c:	f8d0 e000 	ldr.w	lr, [r0]
 8008850:	b293      	uxth	r3, r2
 8008852:	ebac 0303 	sub.w	r3, ip, r3
 8008856:	0c12      	lsrs	r2, r2, #16
 8008858:	fa13 f38e 	uxtah	r3, r3, lr
 800885c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008864:	b29b      	uxth	r3, r3
 8008866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800886a:	45b9      	cmp	r9, r7
 800886c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008870:	f840 3b04 	str.w	r3, [r0], #4
 8008874:	d2e8      	bcs.n	8008848 <quorem+0xb0>
 8008876:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800887a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800887e:	b92a      	cbnz	r2, 800888c <quorem+0xf4>
 8008880:	3b04      	subs	r3, #4
 8008882:	429e      	cmp	r6, r3
 8008884:	461a      	mov	r2, r3
 8008886:	d30b      	bcc.n	80088a0 <quorem+0x108>
 8008888:	f8c8 4010 	str.w	r4, [r8, #16]
 800888c:	4628      	mov	r0, r5
 800888e:	b003      	add	sp, #12
 8008890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008894:	6812      	ldr	r2, [r2, #0]
 8008896:	3b04      	subs	r3, #4
 8008898:	2a00      	cmp	r2, #0
 800889a:	d1ca      	bne.n	8008832 <quorem+0x9a>
 800889c:	3c01      	subs	r4, #1
 800889e:	e7c5      	b.n	800882c <quorem+0x94>
 80088a0:	6812      	ldr	r2, [r2, #0]
 80088a2:	3b04      	subs	r3, #4
 80088a4:	2a00      	cmp	r2, #0
 80088a6:	d1ef      	bne.n	8008888 <quorem+0xf0>
 80088a8:	3c01      	subs	r4, #1
 80088aa:	e7ea      	b.n	8008882 <quorem+0xea>
 80088ac:	2000      	movs	r0, #0
 80088ae:	e7ee      	b.n	800888e <quorem+0xf6>

080088b0 <_dtoa_r>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	b097      	sub	sp, #92	; 0x5c
 80088b6:	ec57 6b10 	vmov	r6, r7, d0
 80088ba:	9106      	str	r1, [sp, #24]
 80088bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80088be:	920b      	str	r2, [sp, #44]	; 0x2c
 80088c0:	4604      	mov	r4, r0
 80088c2:	9312      	str	r3, [sp, #72]	; 0x48
 80088c4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80088c6:	e9cd 6700 	strd	r6, r7, [sp]
 80088ca:	b141      	cbz	r1, 80088de <_dtoa_r+0x2e>
 80088cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088ce:	604a      	str	r2, [r1, #4]
 80088d0:	2301      	movs	r3, #1
 80088d2:	4093      	lsls	r3, r2
 80088d4:	608b      	str	r3, [r1, #8]
 80088d6:	f001 f924 	bl	8009b22 <_Bfree>
 80088da:	2300      	movs	r3, #0
 80088dc:	6423      	str	r3, [r4, #64]	; 0x40
 80088de:	1e3b      	subs	r3, r7, #0
 80088e0:	bfb9      	ittee	lt
 80088e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088e6:	9301      	strlt	r3, [sp, #4]
 80088e8:	2300      	movge	r3, #0
 80088ea:	602b      	strge	r3, [r5, #0]
 80088ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80088f0:	4baf      	ldr	r3, [pc, #700]	; (8008bb0 <_dtoa_r+0x300>)
 80088f2:	bfbc      	itt	lt
 80088f4:	2201      	movlt	r2, #1
 80088f6:	602a      	strlt	r2, [r5, #0]
 80088f8:	ea33 0308 	bics.w	r3, r3, r8
 80088fc:	d116      	bne.n	800892c <_dtoa_r+0x7c>
 80088fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008900:	f242 730f 	movw	r3, #9999	; 0x270f
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	9b00      	ldr	r3, [sp, #0]
 8008908:	b923      	cbnz	r3, 8008914 <_dtoa_r+0x64>
 800890a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800890e:	2800      	cmp	r0, #0
 8008910:	f000 8543 	beq.w	800939a <_dtoa_r+0xaea>
 8008914:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008916:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008bc4 <_dtoa_r+0x314>
 800891a:	b11b      	cbz	r3, 8008924 <_dtoa_r+0x74>
 800891c:	f10b 0303 	add.w	r3, fp, #3
 8008920:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008922:	6013      	str	r3, [r2, #0]
 8008924:	4658      	mov	r0, fp
 8008926:	b017      	add	sp, #92	; 0x5c
 8008928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008930:	2200      	movs	r2, #0
 8008932:	2300      	movs	r3, #0
 8008934:	4630      	mov	r0, r6
 8008936:	4639      	mov	r1, r7
 8008938:	f7f8 f8e6 	bl	8000b08 <__aeabi_dcmpeq>
 800893c:	4681      	mov	r9, r0
 800893e:	b160      	cbz	r0, 800895a <_dtoa_r+0xaa>
 8008940:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008942:	2301      	movs	r3, #1
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 8522 	beq.w	8009392 <_dtoa_r+0xae2>
 800894e:	4b99      	ldr	r3, [pc, #612]	; (8008bb4 <_dtoa_r+0x304>)
 8008950:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008952:	f103 3bff 	add.w	fp, r3, #4294967295
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	e7e4      	b.n	8008924 <_dtoa_r+0x74>
 800895a:	aa14      	add	r2, sp, #80	; 0x50
 800895c:	a915      	add	r1, sp, #84	; 0x54
 800895e:	ec47 6b10 	vmov	d0, r6, r7
 8008962:	4620      	mov	r0, r4
 8008964:	f001 fb19 	bl	8009f9a <__d2b>
 8008968:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800896c:	9004      	str	r0, [sp, #16]
 800896e:	2d00      	cmp	r5, #0
 8008970:	d07c      	beq.n	8008a6c <_dtoa_r+0x1bc>
 8008972:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008976:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800897a:	46b2      	mov	sl, r6
 800897c:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008980:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008984:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008988:	2200      	movs	r2, #0
 800898a:	4b8b      	ldr	r3, [pc, #556]	; (8008bb8 <_dtoa_r+0x308>)
 800898c:	4650      	mov	r0, sl
 800898e:	4659      	mov	r1, fp
 8008990:	f7f7 fc9a 	bl	80002c8 <__aeabi_dsub>
 8008994:	a380      	add	r3, pc, #512	; (adr r3, 8008b98 <_dtoa_r+0x2e8>)
 8008996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899a:	f7f7 fe4d 	bl	8000638 <__aeabi_dmul>
 800899e:	a380      	add	r3, pc, #512	; (adr r3, 8008ba0 <_dtoa_r+0x2f0>)
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	f7f7 fc92 	bl	80002cc <__adddf3>
 80089a8:	4606      	mov	r6, r0
 80089aa:	4628      	mov	r0, r5
 80089ac:	460f      	mov	r7, r1
 80089ae:	f7f7 fdd9 	bl	8000564 <__aeabi_i2d>
 80089b2:	a37d      	add	r3, pc, #500	; (adr r3, 8008ba8 <_dtoa_r+0x2f8>)
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	f7f7 fe3e 	bl	8000638 <__aeabi_dmul>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	4630      	mov	r0, r6
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f7 fc82 	bl	80002cc <__adddf3>
 80089c8:	4606      	mov	r6, r0
 80089ca:	460f      	mov	r7, r1
 80089cc:	f7f8 f8e4 	bl	8000b98 <__aeabi_d2iz>
 80089d0:	2200      	movs	r2, #0
 80089d2:	4682      	mov	sl, r0
 80089d4:	2300      	movs	r3, #0
 80089d6:	4630      	mov	r0, r6
 80089d8:	4639      	mov	r1, r7
 80089da:	f7f8 f89f 	bl	8000b1c <__aeabi_dcmplt>
 80089de:	b148      	cbz	r0, 80089f4 <_dtoa_r+0x144>
 80089e0:	4650      	mov	r0, sl
 80089e2:	f7f7 fdbf 	bl	8000564 <__aeabi_i2d>
 80089e6:	4632      	mov	r2, r6
 80089e8:	463b      	mov	r3, r7
 80089ea:	f7f8 f88d 	bl	8000b08 <__aeabi_dcmpeq>
 80089ee:	b908      	cbnz	r0, 80089f4 <_dtoa_r+0x144>
 80089f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089f4:	f1ba 0f16 	cmp.w	sl, #22
 80089f8:	d859      	bhi.n	8008aae <_dtoa_r+0x1fe>
 80089fa:	4970      	ldr	r1, [pc, #448]	; (8008bbc <_dtoa_r+0x30c>)
 80089fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a08:	f7f8 f8a6 	bl	8000b58 <__aeabi_dcmpgt>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d050      	beq.n	8008ab2 <_dtoa_r+0x202>
 8008a10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a14:	2300      	movs	r3, #0
 8008a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a1a:	1b5d      	subs	r5, r3, r5
 8008a1c:	f1b5 0801 	subs.w	r8, r5, #1
 8008a20:	bf49      	itett	mi
 8008a22:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a26:	2300      	movpl	r3, #0
 8008a28:	9305      	strmi	r3, [sp, #20]
 8008a2a:	f04f 0800 	movmi.w	r8, #0
 8008a2e:	bf58      	it	pl
 8008a30:	9305      	strpl	r3, [sp, #20]
 8008a32:	f1ba 0f00 	cmp.w	sl, #0
 8008a36:	db3e      	blt.n	8008ab6 <_dtoa_r+0x206>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	44d0      	add	r8, sl
 8008a3c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008a40:	9307      	str	r3, [sp, #28]
 8008a42:	9b06      	ldr	r3, [sp, #24]
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	f200 808d 	bhi.w	8008b64 <_dtoa_r+0x2b4>
 8008a4a:	2b05      	cmp	r3, #5
 8008a4c:	bfc4      	itt	gt
 8008a4e:	3b04      	subgt	r3, #4
 8008a50:	9306      	strgt	r3, [sp, #24]
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	f1a3 0302 	sub.w	r3, r3, #2
 8008a58:	bfcc      	ite	gt
 8008a5a:	2500      	movgt	r5, #0
 8008a5c:	2501      	movle	r5, #1
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	f200 808c 	bhi.w	8008b7c <_dtoa_r+0x2cc>
 8008a64:	e8df f003 	tbb	[pc, r3]
 8008a68:	6e317c7a 	.word	0x6e317c7a
 8008a6c:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008a70:	441d      	add	r5, r3
 8008a72:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008a76:	2820      	cmp	r0, #32
 8008a78:	dd13      	ble.n	8008aa2 <_dtoa_r+0x1f2>
 8008a7a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008a7e:	9b00      	ldr	r3, [sp, #0]
 8008a80:	fa08 f800 	lsl.w	r8, r8, r0
 8008a84:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008a88:	fa23 f000 	lsr.w	r0, r3, r0
 8008a8c:	ea48 0000 	orr.w	r0, r8, r0
 8008a90:	f7f7 fd58 	bl	8000544 <__aeabi_ui2d>
 8008a94:	2301      	movs	r3, #1
 8008a96:	4682      	mov	sl, r0
 8008a98:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008a9c:	3d01      	subs	r5, #1
 8008a9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008aa0:	e772      	b.n	8008988 <_dtoa_r+0xd8>
 8008aa2:	9b00      	ldr	r3, [sp, #0]
 8008aa4:	f1c0 0020 	rsb	r0, r0, #32
 8008aa8:	fa03 f000 	lsl.w	r0, r3, r0
 8008aac:	e7f0      	b.n	8008a90 <_dtoa_r+0x1e0>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e7b1      	b.n	8008a16 <_dtoa_r+0x166>
 8008ab2:	900f      	str	r0, [sp, #60]	; 0x3c
 8008ab4:	e7b0      	b.n	8008a18 <_dtoa_r+0x168>
 8008ab6:	9b05      	ldr	r3, [sp, #20]
 8008ab8:	eba3 030a 	sub.w	r3, r3, sl
 8008abc:	9305      	str	r3, [sp, #20]
 8008abe:	f1ca 0300 	rsb	r3, sl, #0
 8008ac2:	9307      	str	r3, [sp, #28]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	930e      	str	r3, [sp, #56]	; 0x38
 8008ac8:	e7bb      	b.n	8008a42 <_dtoa_r+0x192>
 8008aca:	2301      	movs	r3, #1
 8008acc:	930a      	str	r3, [sp, #40]	; 0x28
 8008ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	dd56      	ble.n	8008b82 <_dtoa_r+0x2d2>
 8008ad4:	9302      	str	r3, [sp, #8]
 8008ad6:	4699      	mov	r9, r3
 8008ad8:	2200      	movs	r2, #0
 8008ada:	6462      	str	r2, [r4, #68]	; 0x44
 8008adc:	2204      	movs	r2, #4
 8008ade:	f102 0014 	add.w	r0, r2, #20
 8008ae2:	4298      	cmp	r0, r3
 8008ae4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008ae6:	d951      	bls.n	8008b8c <_dtoa_r+0x2dc>
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fff5 	bl	8009ad8 <_Balloc>
 8008aee:	f1b9 0f0e 	cmp.w	r9, #14
 8008af2:	4683      	mov	fp, r0
 8008af4:	6420      	str	r0, [r4, #64]	; 0x40
 8008af6:	f200 80e8 	bhi.w	8008cca <_dtoa_r+0x41a>
 8008afa:	2d00      	cmp	r5, #0
 8008afc:	f000 80e5 	beq.w	8008cca <_dtoa_r+0x41a>
 8008b00:	ed9d 7b00 	vldr	d7, [sp]
 8008b04:	f1ba 0f00 	cmp.w	sl, #0
 8008b08:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008b0c:	dd76      	ble.n	8008bfc <_dtoa_r+0x34c>
 8008b0e:	4a2b      	ldr	r2, [pc, #172]	; (8008bbc <_dtoa_r+0x30c>)
 8008b10:	f00a 030f 	and.w	r3, sl, #15
 8008b14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b18:	ed93 7b00 	vldr	d7, [r3]
 8008b1c:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008b20:	06f0      	lsls	r0, r6, #27
 8008b22:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008b26:	d567      	bpl.n	8008bf8 <_dtoa_r+0x348>
 8008b28:	4b25      	ldr	r3, [pc, #148]	; (8008bc0 <_dtoa_r+0x310>)
 8008b2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b32:	f7f7 feab 	bl	800088c <__aeabi_ddiv>
 8008b36:	e9cd 0100 	strd	r0, r1, [sp]
 8008b3a:	f006 060f 	and.w	r6, r6, #15
 8008b3e:	2503      	movs	r5, #3
 8008b40:	4f1f      	ldr	r7, [pc, #124]	; (8008bc0 <_dtoa_r+0x310>)
 8008b42:	e04e      	b.n	8008be2 <_dtoa_r+0x332>
 8008b44:	2301      	movs	r3, #1
 8008b46:	930a      	str	r3, [sp, #40]	; 0x28
 8008b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b4a:	4453      	add	r3, sl
 8008b4c:	f103 0901 	add.w	r9, r3, #1
 8008b50:	9302      	str	r3, [sp, #8]
 8008b52:	464b      	mov	r3, r9
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	bfb8      	it	lt
 8008b58:	2301      	movlt	r3, #1
 8008b5a:	e7bd      	b.n	8008ad8 <_dtoa_r+0x228>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e7b5      	b.n	8008acc <_dtoa_r+0x21c>
 8008b60:	2300      	movs	r3, #0
 8008b62:	e7f0      	b.n	8008b46 <_dtoa_r+0x296>
 8008b64:	2501      	movs	r5, #1
 8008b66:	2300      	movs	r3, #0
 8008b68:	9306      	str	r3, [sp, #24]
 8008b6a:	950a      	str	r5, [sp, #40]	; 0x28
 8008b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b70:	9302      	str	r3, [sp, #8]
 8008b72:	4699      	mov	r9, r3
 8008b74:	2200      	movs	r2, #0
 8008b76:	2312      	movs	r3, #18
 8008b78:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b7a:	e7ad      	b.n	8008ad8 <_dtoa_r+0x228>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b80:	e7f4      	b.n	8008b6c <_dtoa_r+0x2bc>
 8008b82:	2301      	movs	r3, #1
 8008b84:	9302      	str	r3, [sp, #8]
 8008b86:	4699      	mov	r9, r3
 8008b88:	461a      	mov	r2, r3
 8008b8a:	e7f5      	b.n	8008b78 <_dtoa_r+0x2c8>
 8008b8c:	3101      	adds	r1, #1
 8008b8e:	6461      	str	r1, [r4, #68]	; 0x44
 8008b90:	0052      	lsls	r2, r2, #1
 8008b92:	e7a4      	b.n	8008ade <_dtoa_r+0x22e>
 8008b94:	f3af 8000 	nop.w
 8008b98:	636f4361 	.word	0x636f4361
 8008b9c:	3fd287a7 	.word	0x3fd287a7
 8008ba0:	8b60c8b3 	.word	0x8b60c8b3
 8008ba4:	3fc68a28 	.word	0x3fc68a28
 8008ba8:	509f79fb 	.word	0x509f79fb
 8008bac:	3fd34413 	.word	0x3fd34413
 8008bb0:	7ff00000 	.word	0x7ff00000
 8008bb4:	0800a6eb 	.word	0x0800a6eb
 8008bb8:	3ff80000 	.word	0x3ff80000
 8008bbc:	0800a748 	.word	0x0800a748
 8008bc0:	0800a720 	.word	0x0800a720
 8008bc4:	0800a715 	.word	0x0800a715
 8008bc8:	07f1      	lsls	r1, r6, #31
 8008bca:	d508      	bpl.n	8008bde <_dtoa_r+0x32e>
 8008bcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bd4:	f7f7 fd30 	bl	8000638 <__aeabi_dmul>
 8008bd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bdc:	3501      	adds	r5, #1
 8008bde:	1076      	asrs	r6, r6, #1
 8008be0:	3708      	adds	r7, #8
 8008be2:	2e00      	cmp	r6, #0
 8008be4:	d1f0      	bne.n	8008bc8 <_dtoa_r+0x318>
 8008be6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008bea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bee:	f7f7 fe4d 	bl	800088c <__aeabi_ddiv>
 8008bf2:	e9cd 0100 	strd	r0, r1, [sp]
 8008bf6:	e01a      	b.n	8008c2e <_dtoa_r+0x37e>
 8008bf8:	2502      	movs	r5, #2
 8008bfa:	e7a1      	b.n	8008b40 <_dtoa_r+0x290>
 8008bfc:	f000 80a0 	beq.w	8008d40 <_dtoa_r+0x490>
 8008c00:	f1ca 0600 	rsb	r6, sl, #0
 8008c04:	4b9f      	ldr	r3, [pc, #636]	; (8008e84 <_dtoa_r+0x5d4>)
 8008c06:	4fa0      	ldr	r7, [pc, #640]	; (8008e88 <_dtoa_r+0x5d8>)
 8008c08:	f006 020f 	and.w	r2, r6, #15
 8008c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c18:	f7f7 fd0e 	bl	8000638 <__aeabi_dmul>
 8008c1c:	e9cd 0100 	strd	r0, r1, [sp]
 8008c20:	1136      	asrs	r6, r6, #4
 8008c22:	2300      	movs	r3, #0
 8008c24:	2502      	movs	r5, #2
 8008c26:	2e00      	cmp	r6, #0
 8008c28:	d17f      	bne.n	8008d2a <_dtoa_r+0x47a>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e1      	bne.n	8008bf2 <_dtoa_r+0x342>
 8008c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 8087 	beq.w	8008d44 <_dtoa_r+0x494>
 8008c36:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4b93      	ldr	r3, [pc, #588]	; (8008e8c <_dtoa_r+0x5dc>)
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4639      	mov	r1, r7
 8008c42:	f7f7 ff6b 	bl	8000b1c <__aeabi_dcmplt>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d07c      	beq.n	8008d44 <_dtoa_r+0x494>
 8008c4a:	f1b9 0f00 	cmp.w	r9, #0
 8008c4e:	d079      	beq.n	8008d44 <_dtoa_r+0x494>
 8008c50:	9b02      	ldr	r3, [sp, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dd35      	ble.n	8008cc2 <_dtoa_r+0x412>
 8008c56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c5a:	9308      	str	r3, [sp, #32]
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	2200      	movs	r2, #0
 8008c60:	4b8b      	ldr	r3, [pc, #556]	; (8008e90 <_dtoa_r+0x5e0>)
 8008c62:	4630      	mov	r0, r6
 8008c64:	f7f7 fce8 	bl	8000638 <__aeabi_dmul>
 8008c68:	e9cd 0100 	strd	r0, r1, [sp]
 8008c6c:	9f02      	ldr	r7, [sp, #8]
 8008c6e:	3501      	adds	r5, #1
 8008c70:	4628      	mov	r0, r5
 8008c72:	f7f7 fc77 	bl	8000564 <__aeabi_i2d>
 8008c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c7a:	f7f7 fcdd 	bl	8000638 <__aeabi_dmul>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	4b84      	ldr	r3, [pc, #528]	; (8008e94 <_dtoa_r+0x5e4>)
 8008c82:	f7f7 fb23 	bl	80002cc <__adddf3>
 8008c86:	4605      	mov	r5, r0
 8008c88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c8c:	2f00      	cmp	r7, #0
 8008c8e:	d15d      	bne.n	8008d4c <_dtoa_r+0x49c>
 8008c90:	2200      	movs	r2, #0
 8008c92:	4b81      	ldr	r3, [pc, #516]	; (8008e98 <_dtoa_r+0x5e8>)
 8008c94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c98:	f7f7 fb16 	bl	80002c8 <__aeabi_dsub>
 8008c9c:	462a      	mov	r2, r5
 8008c9e:	4633      	mov	r3, r6
 8008ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ca4:	f7f7 ff58 	bl	8000b58 <__aeabi_dcmpgt>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	f040 8288 	bne.w	80091be <_dtoa_r+0x90e>
 8008cae:	462a      	mov	r2, r5
 8008cb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cb8:	f7f7 ff30 	bl	8000b1c <__aeabi_dcmplt>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	f040 827c 	bne.w	80091ba <_dtoa_r+0x90a>
 8008cc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cc6:	e9cd 2300 	strd	r2, r3, [sp]
 8008cca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f2c0 8150 	blt.w	8008f72 <_dtoa_r+0x6c2>
 8008cd2:	f1ba 0f0e 	cmp.w	sl, #14
 8008cd6:	f300 814c 	bgt.w	8008f72 <_dtoa_r+0x6c2>
 8008cda:	4b6a      	ldr	r3, [pc, #424]	; (8008e84 <_dtoa_r+0x5d4>)
 8008cdc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ce0:	ed93 7b00 	vldr	d7, [r3]
 8008ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008cec:	f280 80d8 	bge.w	8008ea0 <_dtoa_r+0x5f0>
 8008cf0:	f1b9 0f00 	cmp.w	r9, #0
 8008cf4:	f300 80d4 	bgt.w	8008ea0 <_dtoa_r+0x5f0>
 8008cf8:	f040 825e 	bne.w	80091b8 <_dtoa_r+0x908>
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	4b66      	ldr	r3, [pc, #408]	; (8008e98 <_dtoa_r+0x5e8>)
 8008d00:	ec51 0b17 	vmov	r0, r1, d7
 8008d04:	f7f7 fc98 	bl	8000638 <__aeabi_dmul>
 8008d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d0c:	f7f7 ff1a 	bl	8000b44 <__aeabi_dcmpge>
 8008d10:	464f      	mov	r7, r9
 8008d12:	464e      	mov	r6, r9
 8008d14:	2800      	cmp	r0, #0
 8008d16:	f040 8234 	bne.w	8009182 <_dtoa_r+0x8d2>
 8008d1a:	2331      	movs	r3, #49	; 0x31
 8008d1c:	f10b 0501 	add.w	r5, fp, #1
 8008d20:	f88b 3000 	strb.w	r3, [fp]
 8008d24:	f10a 0a01 	add.w	sl, sl, #1
 8008d28:	e22f      	b.n	800918a <_dtoa_r+0x8da>
 8008d2a:	07f2      	lsls	r2, r6, #31
 8008d2c:	d505      	bpl.n	8008d3a <_dtoa_r+0x48a>
 8008d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d32:	f7f7 fc81 	bl	8000638 <__aeabi_dmul>
 8008d36:	3501      	adds	r5, #1
 8008d38:	2301      	movs	r3, #1
 8008d3a:	1076      	asrs	r6, r6, #1
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	e772      	b.n	8008c26 <_dtoa_r+0x376>
 8008d40:	2502      	movs	r5, #2
 8008d42:	e774      	b.n	8008c2e <_dtoa_r+0x37e>
 8008d44:	f8cd a020 	str.w	sl, [sp, #32]
 8008d48:	464f      	mov	r7, r9
 8008d4a:	e791      	b.n	8008c70 <_dtoa_r+0x3c0>
 8008d4c:	4b4d      	ldr	r3, [pc, #308]	; (8008e84 <_dtoa_r+0x5d4>)
 8008d4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d52:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d047      	beq.n	8008dec <_dtoa_r+0x53c>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	2000      	movs	r0, #0
 8008d62:	494e      	ldr	r1, [pc, #312]	; (8008e9c <_dtoa_r+0x5ec>)
 8008d64:	f7f7 fd92 	bl	800088c <__aeabi_ddiv>
 8008d68:	462a      	mov	r2, r5
 8008d6a:	4633      	mov	r3, r6
 8008d6c:	f7f7 faac 	bl	80002c8 <__aeabi_dsub>
 8008d70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d74:	465d      	mov	r5, fp
 8008d76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d7a:	f7f7 ff0d 	bl	8000b98 <__aeabi_d2iz>
 8008d7e:	4606      	mov	r6, r0
 8008d80:	f7f7 fbf0 	bl	8000564 <__aeabi_i2d>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d8c:	f7f7 fa9c 	bl	80002c8 <__aeabi_dsub>
 8008d90:	3630      	adds	r6, #48	; 0x30
 8008d92:	f805 6b01 	strb.w	r6, [r5], #1
 8008d96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d9a:	e9cd 0100 	strd	r0, r1, [sp]
 8008d9e:	f7f7 febd 	bl	8000b1c <__aeabi_dcmplt>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d163      	bne.n	8008e6e <_dtoa_r+0x5be>
 8008da6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008daa:	2000      	movs	r0, #0
 8008dac:	4937      	ldr	r1, [pc, #220]	; (8008e8c <_dtoa_r+0x5dc>)
 8008dae:	f7f7 fa8b 	bl	80002c8 <__aeabi_dsub>
 8008db2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008db6:	f7f7 feb1 	bl	8000b1c <__aeabi_dcmplt>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	f040 80b7 	bne.w	8008f2e <_dtoa_r+0x67e>
 8008dc0:	eba5 030b 	sub.w	r3, r5, fp
 8008dc4:	429f      	cmp	r7, r3
 8008dc6:	f77f af7c 	ble.w	8008cc2 <_dtoa_r+0x412>
 8008dca:	2200      	movs	r2, #0
 8008dcc:	4b30      	ldr	r3, [pc, #192]	; (8008e90 <_dtoa_r+0x5e0>)
 8008dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008dd2:	f7f7 fc31 	bl	8000638 <__aeabi_dmul>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ddc:	4b2c      	ldr	r3, [pc, #176]	; (8008e90 <_dtoa_r+0x5e0>)
 8008dde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008de2:	f7f7 fc29 	bl	8000638 <__aeabi_dmul>
 8008de6:	e9cd 0100 	strd	r0, r1, [sp]
 8008dea:	e7c4      	b.n	8008d76 <_dtoa_r+0x4c6>
 8008dec:	462a      	mov	r2, r5
 8008dee:	4633      	mov	r3, r6
 8008df0:	f7f7 fc22 	bl	8000638 <__aeabi_dmul>
 8008df4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008df8:	eb0b 0507 	add.w	r5, fp, r7
 8008dfc:	465e      	mov	r6, fp
 8008dfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e02:	f7f7 fec9 	bl	8000b98 <__aeabi_d2iz>
 8008e06:	4607      	mov	r7, r0
 8008e08:	f7f7 fbac 	bl	8000564 <__aeabi_i2d>
 8008e0c:	3730      	adds	r7, #48	; 0x30
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e16:	f7f7 fa57 	bl	80002c8 <__aeabi_dsub>
 8008e1a:	f806 7b01 	strb.w	r7, [r6], #1
 8008e1e:	42ae      	cmp	r6, r5
 8008e20:	e9cd 0100 	strd	r0, r1, [sp]
 8008e24:	f04f 0200 	mov.w	r2, #0
 8008e28:	d126      	bne.n	8008e78 <_dtoa_r+0x5c8>
 8008e2a:	4b1c      	ldr	r3, [pc, #112]	; (8008e9c <_dtoa_r+0x5ec>)
 8008e2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e30:	f7f7 fa4c 	bl	80002cc <__adddf3>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e3c:	f7f7 fe8c 	bl	8000b58 <__aeabi_dcmpgt>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d174      	bne.n	8008f2e <_dtoa_r+0x67e>
 8008e44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e48:	2000      	movs	r0, #0
 8008e4a:	4914      	ldr	r1, [pc, #80]	; (8008e9c <_dtoa_r+0x5ec>)
 8008e4c:	f7f7 fa3c 	bl	80002c8 <__aeabi_dsub>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e58:	f7f7 fe60 	bl	8000b1c <__aeabi_dcmplt>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	f43f af30 	beq.w	8008cc2 <_dtoa_r+0x412>
 8008e62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e66:	2b30      	cmp	r3, #48	; 0x30
 8008e68:	f105 32ff 	add.w	r2, r5, #4294967295
 8008e6c:	d002      	beq.n	8008e74 <_dtoa_r+0x5c4>
 8008e6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e72:	e04a      	b.n	8008f0a <_dtoa_r+0x65a>
 8008e74:	4615      	mov	r5, r2
 8008e76:	e7f4      	b.n	8008e62 <_dtoa_r+0x5b2>
 8008e78:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <_dtoa_r+0x5e0>)
 8008e7a:	f7f7 fbdd 	bl	8000638 <__aeabi_dmul>
 8008e7e:	e9cd 0100 	strd	r0, r1, [sp]
 8008e82:	e7bc      	b.n	8008dfe <_dtoa_r+0x54e>
 8008e84:	0800a748 	.word	0x0800a748
 8008e88:	0800a720 	.word	0x0800a720
 8008e8c:	3ff00000 	.word	0x3ff00000
 8008e90:	40240000 	.word	0x40240000
 8008e94:	401c0000 	.word	0x401c0000
 8008e98:	40140000 	.word	0x40140000
 8008e9c:	3fe00000 	.word	0x3fe00000
 8008ea0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008ea4:	465d      	mov	r5, fp
 8008ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eaa:	4630      	mov	r0, r6
 8008eac:	4639      	mov	r1, r7
 8008eae:	f7f7 fced 	bl	800088c <__aeabi_ddiv>
 8008eb2:	f7f7 fe71 	bl	8000b98 <__aeabi_d2iz>
 8008eb6:	4680      	mov	r8, r0
 8008eb8:	f7f7 fb54 	bl	8000564 <__aeabi_i2d>
 8008ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ec0:	f7f7 fbba 	bl	8000638 <__aeabi_dmul>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008ed0:	f7f7 f9fa 	bl	80002c8 <__aeabi_dsub>
 8008ed4:	f805 6b01 	strb.w	r6, [r5], #1
 8008ed8:	eba5 060b 	sub.w	r6, r5, fp
 8008edc:	45b1      	cmp	r9, r6
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	d139      	bne.n	8008f58 <_dtoa_r+0x6a8>
 8008ee4:	f7f7 f9f2 	bl	80002cc <__adddf3>
 8008ee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eec:	4606      	mov	r6, r0
 8008eee:	460f      	mov	r7, r1
 8008ef0:	f7f7 fe32 	bl	8000b58 <__aeabi_dcmpgt>
 8008ef4:	b9c8      	cbnz	r0, 8008f2a <_dtoa_r+0x67a>
 8008ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008efa:	4630      	mov	r0, r6
 8008efc:	4639      	mov	r1, r7
 8008efe:	f7f7 fe03 	bl	8000b08 <__aeabi_dcmpeq>
 8008f02:	b110      	cbz	r0, 8008f0a <_dtoa_r+0x65a>
 8008f04:	f018 0f01 	tst.w	r8, #1
 8008f08:	d10f      	bne.n	8008f2a <_dtoa_r+0x67a>
 8008f0a:	9904      	ldr	r1, [sp, #16]
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f000 fe08 	bl	8009b22 <_Bfree>
 8008f12:	2300      	movs	r3, #0
 8008f14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f16:	702b      	strb	r3, [r5, #0]
 8008f18:	f10a 0301 	add.w	r3, sl, #1
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f43f acff 	beq.w	8008924 <_dtoa_r+0x74>
 8008f26:	601d      	str	r5, [r3, #0]
 8008f28:	e4fc      	b.n	8008924 <_dtoa_r+0x74>
 8008f2a:	f8cd a020 	str.w	sl, [sp, #32]
 8008f2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f32:	2a39      	cmp	r2, #57	; 0x39
 8008f34:	f105 33ff 	add.w	r3, r5, #4294967295
 8008f38:	d108      	bne.n	8008f4c <_dtoa_r+0x69c>
 8008f3a:	459b      	cmp	fp, r3
 8008f3c:	d10a      	bne.n	8008f54 <_dtoa_r+0x6a4>
 8008f3e:	9b08      	ldr	r3, [sp, #32]
 8008f40:	3301      	adds	r3, #1
 8008f42:	9308      	str	r3, [sp, #32]
 8008f44:	2330      	movs	r3, #48	; 0x30
 8008f46:	f88b 3000 	strb.w	r3, [fp]
 8008f4a:	465b      	mov	r3, fp
 8008f4c:	781a      	ldrb	r2, [r3, #0]
 8008f4e:	3201      	adds	r2, #1
 8008f50:	701a      	strb	r2, [r3, #0]
 8008f52:	e78c      	b.n	8008e6e <_dtoa_r+0x5be>
 8008f54:	461d      	mov	r5, r3
 8008f56:	e7ea      	b.n	8008f2e <_dtoa_r+0x67e>
 8008f58:	2200      	movs	r2, #0
 8008f5a:	4b9b      	ldr	r3, [pc, #620]	; (80091c8 <_dtoa_r+0x918>)
 8008f5c:	f7f7 fb6c 	bl	8000638 <__aeabi_dmul>
 8008f60:	2200      	movs	r2, #0
 8008f62:	2300      	movs	r3, #0
 8008f64:	4606      	mov	r6, r0
 8008f66:	460f      	mov	r7, r1
 8008f68:	f7f7 fdce 	bl	8000b08 <__aeabi_dcmpeq>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d09a      	beq.n	8008ea6 <_dtoa_r+0x5f6>
 8008f70:	e7cb      	b.n	8008f0a <_dtoa_r+0x65a>
 8008f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f74:	2a00      	cmp	r2, #0
 8008f76:	f000 808b 	beq.w	8009090 <_dtoa_r+0x7e0>
 8008f7a:	9a06      	ldr	r2, [sp, #24]
 8008f7c:	2a01      	cmp	r2, #1
 8008f7e:	dc6e      	bgt.n	800905e <_dtoa_r+0x7ae>
 8008f80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f82:	2a00      	cmp	r2, #0
 8008f84:	d067      	beq.n	8009056 <_dtoa_r+0x7a6>
 8008f86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f8a:	9f07      	ldr	r7, [sp, #28]
 8008f8c:	9d05      	ldr	r5, [sp, #20]
 8008f8e:	9a05      	ldr	r2, [sp, #20]
 8008f90:	2101      	movs	r1, #1
 8008f92:	441a      	add	r2, r3
 8008f94:	4620      	mov	r0, r4
 8008f96:	9205      	str	r2, [sp, #20]
 8008f98:	4498      	add	r8, r3
 8008f9a:	f000 fe54 	bl	8009c46 <__i2b>
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	dd0c      	ble.n	8008fbe <_dtoa_r+0x70e>
 8008fa4:	f1b8 0f00 	cmp.w	r8, #0
 8008fa8:	dd09      	ble.n	8008fbe <_dtoa_r+0x70e>
 8008faa:	4545      	cmp	r5, r8
 8008fac:	9a05      	ldr	r2, [sp, #20]
 8008fae:	462b      	mov	r3, r5
 8008fb0:	bfa8      	it	ge
 8008fb2:	4643      	movge	r3, r8
 8008fb4:	1ad2      	subs	r2, r2, r3
 8008fb6:	9205      	str	r2, [sp, #20]
 8008fb8:	1aed      	subs	r5, r5, r3
 8008fba:	eba8 0803 	sub.w	r8, r8, r3
 8008fbe:	9b07      	ldr	r3, [sp, #28]
 8008fc0:	b1eb      	cbz	r3, 8008ffe <_dtoa_r+0x74e>
 8008fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d067      	beq.n	8009098 <_dtoa_r+0x7e8>
 8008fc8:	b18f      	cbz	r7, 8008fee <_dtoa_r+0x73e>
 8008fca:	4631      	mov	r1, r6
 8008fcc:	463a      	mov	r2, r7
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 fed8 	bl	8009d84 <__pow5mult>
 8008fd4:	9a04      	ldr	r2, [sp, #16]
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	4606      	mov	r6, r0
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 fe3c 	bl	8009c58 <__multiply>
 8008fe0:	9904      	ldr	r1, [sp, #16]
 8008fe2:	9008      	str	r0, [sp, #32]
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f000 fd9c 	bl	8009b22 <_Bfree>
 8008fea:	9b08      	ldr	r3, [sp, #32]
 8008fec:	9304      	str	r3, [sp, #16]
 8008fee:	9b07      	ldr	r3, [sp, #28]
 8008ff0:	1bda      	subs	r2, r3, r7
 8008ff2:	d004      	beq.n	8008ffe <_dtoa_r+0x74e>
 8008ff4:	9904      	ldr	r1, [sp, #16]
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 fec4 	bl	8009d84 <__pow5mult>
 8008ffc:	9004      	str	r0, [sp, #16]
 8008ffe:	2101      	movs	r1, #1
 8009000:	4620      	mov	r0, r4
 8009002:	f000 fe20 	bl	8009c46 <__i2b>
 8009006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009008:	4607      	mov	r7, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 81cf 	beq.w	80093ae <_dtoa_r+0xafe>
 8009010:	461a      	mov	r2, r3
 8009012:	4601      	mov	r1, r0
 8009014:	4620      	mov	r0, r4
 8009016:	f000 feb5 	bl	8009d84 <__pow5mult>
 800901a:	9b06      	ldr	r3, [sp, #24]
 800901c:	2b01      	cmp	r3, #1
 800901e:	4607      	mov	r7, r0
 8009020:	dc40      	bgt.n	80090a4 <_dtoa_r+0x7f4>
 8009022:	9b00      	ldr	r3, [sp, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d139      	bne.n	800909c <_dtoa_r+0x7ec>
 8009028:	9b01      	ldr	r3, [sp, #4]
 800902a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800902e:	2b00      	cmp	r3, #0
 8009030:	d136      	bne.n	80090a0 <_dtoa_r+0x7f0>
 8009032:	9b01      	ldr	r3, [sp, #4]
 8009034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009038:	0d1b      	lsrs	r3, r3, #20
 800903a:	051b      	lsls	r3, r3, #20
 800903c:	b12b      	cbz	r3, 800904a <_dtoa_r+0x79a>
 800903e:	9b05      	ldr	r3, [sp, #20]
 8009040:	3301      	adds	r3, #1
 8009042:	9305      	str	r3, [sp, #20]
 8009044:	f108 0801 	add.w	r8, r8, #1
 8009048:	2301      	movs	r3, #1
 800904a:	9307      	str	r3, [sp, #28]
 800904c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800904e:	2b00      	cmp	r3, #0
 8009050:	d12a      	bne.n	80090a8 <_dtoa_r+0x7f8>
 8009052:	2001      	movs	r0, #1
 8009054:	e030      	b.n	80090b8 <_dtoa_r+0x808>
 8009056:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009058:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800905c:	e795      	b.n	8008f8a <_dtoa_r+0x6da>
 800905e:	9b07      	ldr	r3, [sp, #28]
 8009060:	f109 37ff 	add.w	r7, r9, #4294967295
 8009064:	42bb      	cmp	r3, r7
 8009066:	bfbf      	itttt	lt
 8009068:	9b07      	ldrlt	r3, [sp, #28]
 800906a:	9707      	strlt	r7, [sp, #28]
 800906c:	1afa      	sublt	r2, r7, r3
 800906e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009070:	bfbb      	ittet	lt
 8009072:	189b      	addlt	r3, r3, r2
 8009074:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009076:	1bdf      	subge	r7, r3, r7
 8009078:	2700      	movlt	r7, #0
 800907a:	f1b9 0f00 	cmp.w	r9, #0
 800907e:	bfb5      	itete	lt
 8009080:	9b05      	ldrlt	r3, [sp, #20]
 8009082:	9d05      	ldrge	r5, [sp, #20]
 8009084:	eba3 0509 	sublt.w	r5, r3, r9
 8009088:	464b      	movge	r3, r9
 800908a:	bfb8      	it	lt
 800908c:	2300      	movlt	r3, #0
 800908e:	e77e      	b.n	8008f8e <_dtoa_r+0x6de>
 8009090:	9f07      	ldr	r7, [sp, #28]
 8009092:	9d05      	ldr	r5, [sp, #20]
 8009094:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009096:	e783      	b.n	8008fa0 <_dtoa_r+0x6f0>
 8009098:	9a07      	ldr	r2, [sp, #28]
 800909a:	e7ab      	b.n	8008ff4 <_dtoa_r+0x744>
 800909c:	2300      	movs	r3, #0
 800909e:	e7d4      	b.n	800904a <_dtoa_r+0x79a>
 80090a0:	9b00      	ldr	r3, [sp, #0]
 80090a2:	e7d2      	b.n	800904a <_dtoa_r+0x79a>
 80090a4:	2300      	movs	r3, #0
 80090a6:	9307      	str	r3, [sp, #28]
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80090ae:	6918      	ldr	r0, [r3, #16]
 80090b0:	f000 fd7b 	bl	8009baa <__hi0bits>
 80090b4:	f1c0 0020 	rsb	r0, r0, #32
 80090b8:	4440      	add	r0, r8
 80090ba:	f010 001f 	ands.w	r0, r0, #31
 80090be:	d047      	beq.n	8009150 <_dtoa_r+0x8a0>
 80090c0:	f1c0 0320 	rsb	r3, r0, #32
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	dd3b      	ble.n	8009140 <_dtoa_r+0x890>
 80090c8:	9b05      	ldr	r3, [sp, #20]
 80090ca:	f1c0 001c 	rsb	r0, r0, #28
 80090ce:	4403      	add	r3, r0
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	4405      	add	r5, r0
 80090d4:	4480      	add	r8, r0
 80090d6:	9b05      	ldr	r3, [sp, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	dd05      	ble.n	80090e8 <_dtoa_r+0x838>
 80090dc:	461a      	mov	r2, r3
 80090de:	9904      	ldr	r1, [sp, #16]
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 fe8f 	bl	8009e04 <__lshift>
 80090e6:	9004      	str	r0, [sp, #16]
 80090e8:	f1b8 0f00 	cmp.w	r8, #0
 80090ec:	dd05      	ble.n	80090fa <_dtoa_r+0x84a>
 80090ee:	4639      	mov	r1, r7
 80090f0:	4642      	mov	r2, r8
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fe86 	bl	8009e04 <__lshift>
 80090f8:	4607      	mov	r7, r0
 80090fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090fc:	b353      	cbz	r3, 8009154 <_dtoa_r+0x8a4>
 80090fe:	4639      	mov	r1, r7
 8009100:	9804      	ldr	r0, [sp, #16]
 8009102:	f000 fed3 	bl	8009eac <__mcmp>
 8009106:	2800      	cmp	r0, #0
 8009108:	da24      	bge.n	8009154 <_dtoa_r+0x8a4>
 800910a:	2300      	movs	r3, #0
 800910c:	220a      	movs	r2, #10
 800910e:	9904      	ldr	r1, [sp, #16]
 8009110:	4620      	mov	r0, r4
 8009112:	f000 fd0f 	bl	8009b34 <__multadd>
 8009116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009118:	9004      	str	r0, [sp, #16]
 800911a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800911e:	2b00      	cmp	r3, #0
 8009120:	f000 814c 	beq.w	80093bc <_dtoa_r+0xb0c>
 8009124:	2300      	movs	r3, #0
 8009126:	4631      	mov	r1, r6
 8009128:	220a      	movs	r2, #10
 800912a:	4620      	mov	r0, r4
 800912c:	f000 fd02 	bl	8009b34 <__multadd>
 8009130:	9b02      	ldr	r3, [sp, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	4606      	mov	r6, r0
 8009136:	dc4f      	bgt.n	80091d8 <_dtoa_r+0x928>
 8009138:	9b06      	ldr	r3, [sp, #24]
 800913a:	2b02      	cmp	r3, #2
 800913c:	dd4c      	ble.n	80091d8 <_dtoa_r+0x928>
 800913e:	e011      	b.n	8009164 <_dtoa_r+0x8b4>
 8009140:	d0c9      	beq.n	80090d6 <_dtoa_r+0x826>
 8009142:	9a05      	ldr	r2, [sp, #20]
 8009144:	331c      	adds	r3, #28
 8009146:	441a      	add	r2, r3
 8009148:	9205      	str	r2, [sp, #20]
 800914a:	441d      	add	r5, r3
 800914c:	4498      	add	r8, r3
 800914e:	e7c2      	b.n	80090d6 <_dtoa_r+0x826>
 8009150:	4603      	mov	r3, r0
 8009152:	e7f6      	b.n	8009142 <_dtoa_r+0x892>
 8009154:	f1b9 0f00 	cmp.w	r9, #0
 8009158:	dc38      	bgt.n	80091cc <_dtoa_r+0x91c>
 800915a:	9b06      	ldr	r3, [sp, #24]
 800915c:	2b02      	cmp	r3, #2
 800915e:	dd35      	ble.n	80091cc <_dtoa_r+0x91c>
 8009160:	f8cd 9008 	str.w	r9, [sp, #8]
 8009164:	9b02      	ldr	r3, [sp, #8]
 8009166:	b963      	cbnz	r3, 8009182 <_dtoa_r+0x8d2>
 8009168:	4639      	mov	r1, r7
 800916a:	2205      	movs	r2, #5
 800916c:	4620      	mov	r0, r4
 800916e:	f000 fce1 	bl	8009b34 <__multadd>
 8009172:	4601      	mov	r1, r0
 8009174:	4607      	mov	r7, r0
 8009176:	9804      	ldr	r0, [sp, #16]
 8009178:	f000 fe98 	bl	8009eac <__mcmp>
 800917c:	2800      	cmp	r0, #0
 800917e:	f73f adcc 	bgt.w	8008d1a <_dtoa_r+0x46a>
 8009182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009184:	465d      	mov	r5, fp
 8009186:	ea6f 0a03 	mvn.w	sl, r3
 800918a:	f04f 0900 	mov.w	r9, #0
 800918e:	4639      	mov	r1, r7
 8009190:	4620      	mov	r0, r4
 8009192:	f000 fcc6 	bl	8009b22 <_Bfree>
 8009196:	2e00      	cmp	r6, #0
 8009198:	f43f aeb7 	beq.w	8008f0a <_dtoa_r+0x65a>
 800919c:	f1b9 0f00 	cmp.w	r9, #0
 80091a0:	d005      	beq.n	80091ae <_dtoa_r+0x8fe>
 80091a2:	45b1      	cmp	r9, r6
 80091a4:	d003      	beq.n	80091ae <_dtoa_r+0x8fe>
 80091a6:	4649      	mov	r1, r9
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fcba 	bl	8009b22 <_Bfree>
 80091ae:	4631      	mov	r1, r6
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fcb6 	bl	8009b22 <_Bfree>
 80091b6:	e6a8      	b.n	8008f0a <_dtoa_r+0x65a>
 80091b8:	2700      	movs	r7, #0
 80091ba:	463e      	mov	r6, r7
 80091bc:	e7e1      	b.n	8009182 <_dtoa_r+0x8d2>
 80091be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80091c2:	463e      	mov	r6, r7
 80091c4:	e5a9      	b.n	8008d1a <_dtoa_r+0x46a>
 80091c6:	bf00      	nop
 80091c8:	40240000 	.word	0x40240000
 80091cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 80f9 	beq.w	80093ca <_dtoa_r+0xb1a>
 80091d8:	2d00      	cmp	r5, #0
 80091da:	dd05      	ble.n	80091e8 <_dtoa_r+0x938>
 80091dc:	4631      	mov	r1, r6
 80091de:	462a      	mov	r2, r5
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fe0f 	bl	8009e04 <__lshift>
 80091e6:	4606      	mov	r6, r0
 80091e8:	9b07      	ldr	r3, [sp, #28]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d04c      	beq.n	8009288 <_dtoa_r+0x9d8>
 80091ee:	6871      	ldr	r1, [r6, #4]
 80091f0:	4620      	mov	r0, r4
 80091f2:	f000 fc71 	bl	8009ad8 <_Balloc>
 80091f6:	6932      	ldr	r2, [r6, #16]
 80091f8:	3202      	adds	r2, #2
 80091fa:	4605      	mov	r5, r0
 80091fc:	0092      	lsls	r2, r2, #2
 80091fe:	f106 010c 	add.w	r1, r6, #12
 8009202:	300c      	adds	r0, #12
 8009204:	f000 fc50 	bl	8009aa8 <memcpy>
 8009208:	2201      	movs	r2, #1
 800920a:	4629      	mov	r1, r5
 800920c:	4620      	mov	r0, r4
 800920e:	f000 fdf9 	bl	8009e04 <__lshift>
 8009212:	9b00      	ldr	r3, [sp, #0]
 8009214:	f8cd b014 	str.w	fp, [sp, #20]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	46b1      	mov	r9, r6
 800921e:	9307      	str	r3, [sp, #28]
 8009220:	4606      	mov	r6, r0
 8009222:	4639      	mov	r1, r7
 8009224:	9804      	ldr	r0, [sp, #16]
 8009226:	f7ff fab7 	bl	8008798 <quorem>
 800922a:	4649      	mov	r1, r9
 800922c:	4605      	mov	r5, r0
 800922e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009232:	9804      	ldr	r0, [sp, #16]
 8009234:	f000 fe3a 	bl	8009eac <__mcmp>
 8009238:	4632      	mov	r2, r6
 800923a:	9000      	str	r0, [sp, #0]
 800923c:	4639      	mov	r1, r7
 800923e:	4620      	mov	r0, r4
 8009240:	f000 fe4e 	bl	8009ee0 <__mdiff>
 8009244:	68c3      	ldr	r3, [r0, #12]
 8009246:	4602      	mov	r2, r0
 8009248:	bb03      	cbnz	r3, 800928c <_dtoa_r+0x9dc>
 800924a:	4601      	mov	r1, r0
 800924c:	9008      	str	r0, [sp, #32]
 800924e:	9804      	ldr	r0, [sp, #16]
 8009250:	f000 fe2c 	bl	8009eac <__mcmp>
 8009254:	9a08      	ldr	r2, [sp, #32]
 8009256:	4603      	mov	r3, r0
 8009258:	4611      	mov	r1, r2
 800925a:	4620      	mov	r0, r4
 800925c:	9308      	str	r3, [sp, #32]
 800925e:	f000 fc60 	bl	8009b22 <_Bfree>
 8009262:	9b08      	ldr	r3, [sp, #32]
 8009264:	b9a3      	cbnz	r3, 8009290 <_dtoa_r+0x9e0>
 8009266:	9a06      	ldr	r2, [sp, #24]
 8009268:	b992      	cbnz	r2, 8009290 <_dtoa_r+0x9e0>
 800926a:	9a07      	ldr	r2, [sp, #28]
 800926c:	b982      	cbnz	r2, 8009290 <_dtoa_r+0x9e0>
 800926e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009272:	d029      	beq.n	80092c8 <_dtoa_r+0xa18>
 8009274:	9b00      	ldr	r3, [sp, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	dd01      	ble.n	800927e <_dtoa_r+0x9ce>
 800927a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800927e:	9b05      	ldr	r3, [sp, #20]
 8009280:	1c5d      	adds	r5, r3, #1
 8009282:	f883 8000 	strb.w	r8, [r3]
 8009286:	e782      	b.n	800918e <_dtoa_r+0x8de>
 8009288:	4630      	mov	r0, r6
 800928a:	e7c2      	b.n	8009212 <_dtoa_r+0x962>
 800928c:	2301      	movs	r3, #1
 800928e:	e7e3      	b.n	8009258 <_dtoa_r+0x9a8>
 8009290:	9a00      	ldr	r2, [sp, #0]
 8009292:	2a00      	cmp	r2, #0
 8009294:	db04      	blt.n	80092a0 <_dtoa_r+0x9f0>
 8009296:	d125      	bne.n	80092e4 <_dtoa_r+0xa34>
 8009298:	9a06      	ldr	r2, [sp, #24]
 800929a:	bb1a      	cbnz	r2, 80092e4 <_dtoa_r+0xa34>
 800929c:	9a07      	ldr	r2, [sp, #28]
 800929e:	bb0a      	cbnz	r2, 80092e4 <_dtoa_r+0xa34>
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	ddec      	ble.n	800927e <_dtoa_r+0x9ce>
 80092a4:	2201      	movs	r2, #1
 80092a6:	9904      	ldr	r1, [sp, #16]
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 fdab 	bl	8009e04 <__lshift>
 80092ae:	4639      	mov	r1, r7
 80092b0:	9004      	str	r0, [sp, #16]
 80092b2:	f000 fdfb 	bl	8009eac <__mcmp>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	dc03      	bgt.n	80092c2 <_dtoa_r+0xa12>
 80092ba:	d1e0      	bne.n	800927e <_dtoa_r+0x9ce>
 80092bc:	f018 0f01 	tst.w	r8, #1
 80092c0:	d0dd      	beq.n	800927e <_dtoa_r+0x9ce>
 80092c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092c6:	d1d8      	bne.n	800927a <_dtoa_r+0x9ca>
 80092c8:	9b05      	ldr	r3, [sp, #20]
 80092ca:	9a05      	ldr	r2, [sp, #20]
 80092cc:	1c5d      	adds	r5, r3, #1
 80092ce:	2339      	movs	r3, #57	; 0x39
 80092d0:	7013      	strb	r3, [r2, #0]
 80092d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092d6:	2b39      	cmp	r3, #57	; 0x39
 80092d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80092dc:	d04f      	beq.n	800937e <_dtoa_r+0xace>
 80092de:	3301      	adds	r3, #1
 80092e0:	7013      	strb	r3, [r2, #0]
 80092e2:	e754      	b.n	800918e <_dtoa_r+0x8de>
 80092e4:	9a05      	ldr	r2, [sp, #20]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f102 0501 	add.w	r5, r2, #1
 80092ec:	dd06      	ble.n	80092fc <_dtoa_r+0xa4c>
 80092ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092f2:	d0e9      	beq.n	80092c8 <_dtoa_r+0xa18>
 80092f4:	f108 0801 	add.w	r8, r8, #1
 80092f8:	9b05      	ldr	r3, [sp, #20]
 80092fa:	e7c2      	b.n	8009282 <_dtoa_r+0x9d2>
 80092fc:	9a02      	ldr	r2, [sp, #8]
 80092fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009302:	eba5 030b 	sub.w	r3, r5, fp
 8009306:	4293      	cmp	r3, r2
 8009308:	d021      	beq.n	800934e <_dtoa_r+0xa9e>
 800930a:	2300      	movs	r3, #0
 800930c:	220a      	movs	r2, #10
 800930e:	9904      	ldr	r1, [sp, #16]
 8009310:	4620      	mov	r0, r4
 8009312:	f000 fc0f 	bl	8009b34 <__multadd>
 8009316:	45b1      	cmp	r9, r6
 8009318:	9004      	str	r0, [sp, #16]
 800931a:	f04f 0300 	mov.w	r3, #0
 800931e:	f04f 020a 	mov.w	r2, #10
 8009322:	4649      	mov	r1, r9
 8009324:	4620      	mov	r0, r4
 8009326:	d105      	bne.n	8009334 <_dtoa_r+0xa84>
 8009328:	f000 fc04 	bl	8009b34 <__multadd>
 800932c:	4681      	mov	r9, r0
 800932e:	4606      	mov	r6, r0
 8009330:	9505      	str	r5, [sp, #20]
 8009332:	e776      	b.n	8009222 <_dtoa_r+0x972>
 8009334:	f000 fbfe 	bl	8009b34 <__multadd>
 8009338:	4631      	mov	r1, r6
 800933a:	4681      	mov	r9, r0
 800933c:	2300      	movs	r3, #0
 800933e:	220a      	movs	r2, #10
 8009340:	4620      	mov	r0, r4
 8009342:	f000 fbf7 	bl	8009b34 <__multadd>
 8009346:	4606      	mov	r6, r0
 8009348:	e7f2      	b.n	8009330 <_dtoa_r+0xa80>
 800934a:	f04f 0900 	mov.w	r9, #0
 800934e:	2201      	movs	r2, #1
 8009350:	9904      	ldr	r1, [sp, #16]
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fd56 	bl	8009e04 <__lshift>
 8009358:	4639      	mov	r1, r7
 800935a:	9004      	str	r0, [sp, #16]
 800935c:	f000 fda6 	bl	8009eac <__mcmp>
 8009360:	2800      	cmp	r0, #0
 8009362:	dcb6      	bgt.n	80092d2 <_dtoa_r+0xa22>
 8009364:	d102      	bne.n	800936c <_dtoa_r+0xabc>
 8009366:	f018 0f01 	tst.w	r8, #1
 800936a:	d1b2      	bne.n	80092d2 <_dtoa_r+0xa22>
 800936c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009370:	2b30      	cmp	r3, #48	; 0x30
 8009372:	f105 32ff 	add.w	r2, r5, #4294967295
 8009376:	f47f af0a 	bne.w	800918e <_dtoa_r+0x8de>
 800937a:	4615      	mov	r5, r2
 800937c:	e7f6      	b.n	800936c <_dtoa_r+0xabc>
 800937e:	4593      	cmp	fp, r2
 8009380:	d105      	bne.n	800938e <_dtoa_r+0xade>
 8009382:	2331      	movs	r3, #49	; 0x31
 8009384:	f10a 0a01 	add.w	sl, sl, #1
 8009388:	f88b 3000 	strb.w	r3, [fp]
 800938c:	e6ff      	b.n	800918e <_dtoa_r+0x8de>
 800938e:	4615      	mov	r5, r2
 8009390:	e79f      	b.n	80092d2 <_dtoa_r+0xa22>
 8009392:	f8df b064 	ldr.w	fp, [pc, #100]	; 80093f8 <_dtoa_r+0xb48>
 8009396:	f7ff bac5 	b.w	8008924 <_dtoa_r+0x74>
 800939a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800939c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 80093fc <_dtoa_r+0xb4c>
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f43f aabf 	beq.w	8008924 <_dtoa_r+0x74>
 80093a6:	f10b 0308 	add.w	r3, fp, #8
 80093aa:	f7ff bab9 	b.w	8008920 <_dtoa_r+0x70>
 80093ae:	9b06      	ldr	r3, [sp, #24]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	f77f ae36 	ble.w	8009022 <_dtoa_r+0x772>
 80093b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093b8:	9307      	str	r3, [sp, #28]
 80093ba:	e64a      	b.n	8009052 <_dtoa_r+0x7a2>
 80093bc:	9b02      	ldr	r3, [sp, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	dc03      	bgt.n	80093ca <_dtoa_r+0xb1a>
 80093c2:	9b06      	ldr	r3, [sp, #24]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	f73f aecd 	bgt.w	8009164 <_dtoa_r+0x8b4>
 80093ca:	465d      	mov	r5, fp
 80093cc:	4639      	mov	r1, r7
 80093ce:	9804      	ldr	r0, [sp, #16]
 80093d0:	f7ff f9e2 	bl	8008798 <quorem>
 80093d4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80093d8:	f805 8b01 	strb.w	r8, [r5], #1
 80093dc:	9a02      	ldr	r2, [sp, #8]
 80093de:	eba5 030b 	sub.w	r3, r5, fp
 80093e2:	429a      	cmp	r2, r3
 80093e4:	ddb1      	ble.n	800934a <_dtoa_r+0xa9a>
 80093e6:	2300      	movs	r3, #0
 80093e8:	220a      	movs	r2, #10
 80093ea:	9904      	ldr	r1, [sp, #16]
 80093ec:	4620      	mov	r0, r4
 80093ee:	f000 fba1 	bl	8009b34 <__multadd>
 80093f2:	9004      	str	r0, [sp, #16]
 80093f4:	e7ea      	b.n	80093cc <_dtoa_r+0xb1c>
 80093f6:	bf00      	nop
 80093f8:	0800a6ea 	.word	0x0800a6ea
 80093fc:	0800a70c 	.word	0x0800a70c

08009400 <_malloc_trim_r>:
 8009400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009404:	4605      	mov	r5, r0
 8009406:	2008      	movs	r0, #8
 8009408:	460c      	mov	r4, r1
 800940a:	f000 fee8 	bl	800a1de <sysconf>
 800940e:	4f23      	ldr	r7, [pc, #140]	; (800949c <_malloc_trim_r+0x9c>)
 8009410:	4680      	mov	r8, r0
 8009412:	4628      	mov	r0, r5
 8009414:	f000 fb54 	bl	8009ac0 <__malloc_lock>
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	685e      	ldr	r6, [r3, #4]
 800941c:	f026 0603 	bic.w	r6, r6, #3
 8009420:	1b34      	subs	r4, r6, r4
 8009422:	3c11      	subs	r4, #17
 8009424:	4444      	add	r4, r8
 8009426:	fbb4 f4f8 	udiv	r4, r4, r8
 800942a:	3c01      	subs	r4, #1
 800942c:	fb08 f404 	mul.w	r4, r8, r4
 8009430:	45a0      	cmp	r8, r4
 8009432:	dd05      	ble.n	8009440 <_malloc_trim_r+0x40>
 8009434:	4628      	mov	r0, r5
 8009436:	f000 fb49 	bl	8009acc <__malloc_unlock>
 800943a:	2000      	movs	r0, #0
 800943c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009440:	2100      	movs	r1, #0
 8009442:	4628      	mov	r0, r5
 8009444:	f000 fe2e 	bl	800a0a4 <_sbrk_r>
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	4433      	add	r3, r6
 800944c:	4298      	cmp	r0, r3
 800944e:	d1f1      	bne.n	8009434 <_malloc_trim_r+0x34>
 8009450:	4261      	negs	r1, r4
 8009452:	4628      	mov	r0, r5
 8009454:	f000 fe26 	bl	800a0a4 <_sbrk_r>
 8009458:	3001      	adds	r0, #1
 800945a:	d110      	bne.n	800947e <_malloc_trim_r+0x7e>
 800945c:	2100      	movs	r1, #0
 800945e:	4628      	mov	r0, r5
 8009460:	f000 fe20 	bl	800a0a4 <_sbrk_r>
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	1a83      	subs	r3, r0, r2
 8009468:	2b0f      	cmp	r3, #15
 800946a:	dde3      	ble.n	8009434 <_malloc_trim_r+0x34>
 800946c:	490c      	ldr	r1, [pc, #48]	; (80094a0 <_malloc_trim_r+0xa0>)
 800946e:	6809      	ldr	r1, [r1, #0]
 8009470:	1a40      	subs	r0, r0, r1
 8009472:	490c      	ldr	r1, [pc, #48]	; (80094a4 <_malloc_trim_r+0xa4>)
 8009474:	f043 0301 	orr.w	r3, r3, #1
 8009478:	6008      	str	r0, [r1, #0]
 800947a:	6053      	str	r3, [r2, #4]
 800947c:	e7da      	b.n	8009434 <_malloc_trim_r+0x34>
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	4a08      	ldr	r2, [pc, #32]	; (80094a4 <_malloc_trim_r+0xa4>)
 8009482:	1b36      	subs	r6, r6, r4
 8009484:	f046 0601 	orr.w	r6, r6, #1
 8009488:	605e      	str	r6, [r3, #4]
 800948a:	6813      	ldr	r3, [r2, #0]
 800948c:	4628      	mov	r0, r5
 800948e:	1b1c      	subs	r4, r3, r4
 8009490:	6014      	str	r4, [r2, #0]
 8009492:	f000 fb1b 	bl	8009acc <__malloc_unlock>
 8009496:	2001      	movs	r0, #1
 8009498:	e7d0      	b.n	800943c <_malloc_trim_r+0x3c>
 800949a:	bf00      	nop
 800949c:	2000046c 	.word	0x2000046c
 80094a0:	20000874 	.word	0x20000874
 80094a4:	20000b5c 	.word	0x20000b5c

080094a8 <_free_r>:
 80094a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ac:	4604      	mov	r4, r0
 80094ae:	4688      	mov	r8, r1
 80094b0:	2900      	cmp	r1, #0
 80094b2:	f000 80ab 	beq.w	800960c <_free_r+0x164>
 80094b6:	f000 fb03 	bl	8009ac0 <__malloc_lock>
 80094ba:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80094be:	4d54      	ldr	r5, [pc, #336]	; (8009610 <_free_r+0x168>)
 80094c0:	f022 0001 	bic.w	r0, r2, #1
 80094c4:	f1a8 0308 	sub.w	r3, r8, #8
 80094c8:	181f      	adds	r7, r3, r0
 80094ca:	68a9      	ldr	r1, [r5, #8]
 80094cc:	687e      	ldr	r6, [r7, #4]
 80094ce:	42b9      	cmp	r1, r7
 80094d0:	f026 0603 	bic.w	r6, r6, #3
 80094d4:	f002 0201 	and.w	r2, r2, #1
 80094d8:	d11b      	bne.n	8009512 <_free_r+0x6a>
 80094da:	4430      	add	r0, r6
 80094dc:	b93a      	cbnz	r2, 80094ee <_free_r+0x46>
 80094de:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	4410      	add	r0, r2
 80094e6:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80094ea:	60ca      	str	r2, [r1, #12]
 80094ec:	6091      	str	r1, [r2, #8]
 80094ee:	f040 0201 	orr.w	r2, r0, #1
 80094f2:	605a      	str	r2, [r3, #4]
 80094f4:	60ab      	str	r3, [r5, #8]
 80094f6:	4b47      	ldr	r3, [pc, #284]	; (8009614 <_free_r+0x16c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4283      	cmp	r3, r0
 80094fc:	d804      	bhi.n	8009508 <_free_r+0x60>
 80094fe:	4b46      	ldr	r3, [pc, #280]	; (8009618 <_free_r+0x170>)
 8009500:	4620      	mov	r0, r4
 8009502:	6819      	ldr	r1, [r3, #0]
 8009504:	f7ff ff7c 	bl	8009400 <_malloc_trim_r>
 8009508:	4620      	mov	r0, r4
 800950a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800950e:	f000 badd 	b.w	8009acc <__malloc_unlock>
 8009512:	607e      	str	r6, [r7, #4]
 8009514:	2a00      	cmp	r2, #0
 8009516:	d139      	bne.n	800958c <_free_r+0xe4>
 8009518:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800951c:	1a5b      	subs	r3, r3, r1
 800951e:	4408      	add	r0, r1
 8009520:	6899      	ldr	r1, [r3, #8]
 8009522:	f105 0c08 	add.w	ip, r5, #8
 8009526:	4561      	cmp	r1, ip
 8009528:	d032      	beq.n	8009590 <_free_r+0xe8>
 800952a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800952e:	f8c1 c00c 	str.w	ip, [r1, #12]
 8009532:	f8cc 1008 	str.w	r1, [ip, #8]
 8009536:	19b9      	adds	r1, r7, r6
 8009538:	6849      	ldr	r1, [r1, #4]
 800953a:	07c9      	lsls	r1, r1, #31
 800953c:	d40a      	bmi.n	8009554 <_free_r+0xac>
 800953e:	4430      	add	r0, r6
 8009540:	68b9      	ldr	r1, [r7, #8]
 8009542:	bb3a      	cbnz	r2, 8009594 <_free_r+0xec>
 8009544:	4e35      	ldr	r6, [pc, #212]	; (800961c <_free_r+0x174>)
 8009546:	42b1      	cmp	r1, r6
 8009548:	d124      	bne.n	8009594 <_free_r+0xec>
 800954a:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800954e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009552:	2201      	movs	r2, #1
 8009554:	f040 0101 	orr.w	r1, r0, #1
 8009558:	6059      	str	r1, [r3, #4]
 800955a:	5018      	str	r0, [r3, r0]
 800955c:	2a00      	cmp	r2, #0
 800955e:	d1d3      	bne.n	8009508 <_free_r+0x60>
 8009560:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009564:	d21a      	bcs.n	800959c <_free_r+0xf4>
 8009566:	08c0      	lsrs	r0, r0, #3
 8009568:	1081      	asrs	r1, r0, #2
 800956a:	2201      	movs	r2, #1
 800956c:	408a      	lsls	r2, r1
 800956e:	6869      	ldr	r1, [r5, #4]
 8009570:	3001      	adds	r0, #1
 8009572:	430a      	orrs	r2, r1
 8009574:	606a      	str	r2, [r5, #4]
 8009576:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800957a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800957e:	3a08      	subs	r2, #8
 8009580:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8009584:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8009588:	60cb      	str	r3, [r1, #12]
 800958a:	e7bd      	b.n	8009508 <_free_r+0x60>
 800958c:	2200      	movs	r2, #0
 800958e:	e7d2      	b.n	8009536 <_free_r+0x8e>
 8009590:	2201      	movs	r2, #1
 8009592:	e7d0      	b.n	8009536 <_free_r+0x8e>
 8009594:	68fe      	ldr	r6, [r7, #12]
 8009596:	60ce      	str	r6, [r1, #12]
 8009598:	60b1      	str	r1, [r6, #8]
 800959a:	e7db      	b.n	8009554 <_free_r+0xac>
 800959c:	0a42      	lsrs	r2, r0, #9
 800959e:	2a04      	cmp	r2, #4
 80095a0:	d813      	bhi.n	80095ca <_free_r+0x122>
 80095a2:	0982      	lsrs	r2, r0, #6
 80095a4:	3238      	adds	r2, #56	; 0x38
 80095a6:	1c51      	adds	r1, r2, #1
 80095a8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80095ac:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80095b0:	428e      	cmp	r6, r1
 80095b2:	d124      	bne.n	80095fe <_free_r+0x156>
 80095b4:	2001      	movs	r0, #1
 80095b6:	1092      	asrs	r2, r2, #2
 80095b8:	fa00 f202 	lsl.w	r2, r0, r2
 80095bc:	6868      	ldr	r0, [r5, #4]
 80095be:	4302      	orrs	r2, r0
 80095c0:	606a      	str	r2, [r5, #4]
 80095c2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80095c6:	60b3      	str	r3, [r6, #8]
 80095c8:	e7de      	b.n	8009588 <_free_r+0xe0>
 80095ca:	2a14      	cmp	r2, #20
 80095cc:	d801      	bhi.n	80095d2 <_free_r+0x12a>
 80095ce:	325b      	adds	r2, #91	; 0x5b
 80095d0:	e7e9      	b.n	80095a6 <_free_r+0xfe>
 80095d2:	2a54      	cmp	r2, #84	; 0x54
 80095d4:	d802      	bhi.n	80095dc <_free_r+0x134>
 80095d6:	0b02      	lsrs	r2, r0, #12
 80095d8:	326e      	adds	r2, #110	; 0x6e
 80095da:	e7e4      	b.n	80095a6 <_free_r+0xfe>
 80095dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80095e0:	d802      	bhi.n	80095e8 <_free_r+0x140>
 80095e2:	0bc2      	lsrs	r2, r0, #15
 80095e4:	3277      	adds	r2, #119	; 0x77
 80095e6:	e7de      	b.n	80095a6 <_free_r+0xfe>
 80095e8:	f240 5154 	movw	r1, #1364	; 0x554
 80095ec:	428a      	cmp	r2, r1
 80095ee:	bf9a      	itte	ls
 80095f0:	0c82      	lsrls	r2, r0, #18
 80095f2:	327c      	addls	r2, #124	; 0x7c
 80095f4:	227e      	movhi	r2, #126	; 0x7e
 80095f6:	e7d6      	b.n	80095a6 <_free_r+0xfe>
 80095f8:	6889      	ldr	r1, [r1, #8]
 80095fa:	428e      	cmp	r6, r1
 80095fc:	d004      	beq.n	8009608 <_free_r+0x160>
 80095fe:	684a      	ldr	r2, [r1, #4]
 8009600:	f022 0203 	bic.w	r2, r2, #3
 8009604:	4282      	cmp	r2, r0
 8009606:	d8f7      	bhi.n	80095f8 <_free_r+0x150>
 8009608:	68ce      	ldr	r6, [r1, #12]
 800960a:	e7da      	b.n	80095c2 <_free_r+0x11a>
 800960c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009610:	2000046c 	.word	0x2000046c
 8009614:	20000878 	.word	0x20000878
 8009618:	20000b8c 	.word	0x20000b8c
 800961c:	20000474 	.word	0x20000474

08009620 <_localeconv_r>:
 8009620:	4b04      	ldr	r3, [pc, #16]	; (8009634 <_localeconv_r+0x14>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009626:	4b04      	ldr	r3, [pc, #16]	; (8009638 <_localeconv_r+0x18>)
 8009628:	2800      	cmp	r0, #0
 800962a:	bf08      	it	eq
 800962c:	4618      	moveq	r0, r3
 800962e:	30f0      	adds	r0, #240	; 0xf0
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	20000038 	.word	0x20000038
 8009638:	2000087c 	.word	0x2000087c

0800963c <_malloc_r>:
 800963c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	f101 050b 	add.w	r5, r1, #11
 8009644:	2d16      	cmp	r5, #22
 8009646:	4606      	mov	r6, r0
 8009648:	d906      	bls.n	8009658 <_malloc_r+0x1c>
 800964a:	f035 0507 	bics.w	r5, r5, #7
 800964e:	d504      	bpl.n	800965a <_malloc_r+0x1e>
 8009650:	230c      	movs	r3, #12
 8009652:	6033      	str	r3, [r6, #0]
 8009654:	2400      	movs	r4, #0
 8009656:	e1a8      	b.n	80099aa <_malloc_r+0x36e>
 8009658:	2510      	movs	r5, #16
 800965a:	428d      	cmp	r5, r1
 800965c:	d3f8      	bcc.n	8009650 <_malloc_r+0x14>
 800965e:	4630      	mov	r0, r6
 8009660:	f000 fa2e 	bl	8009ac0 <__malloc_lock>
 8009664:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8009668:	4fc0      	ldr	r7, [pc, #768]	; (800996c <_malloc_r+0x330>)
 800966a:	d238      	bcs.n	80096de <_malloc_r+0xa2>
 800966c:	f105 0208 	add.w	r2, r5, #8
 8009670:	443a      	add	r2, r7
 8009672:	f1a2 0108 	sub.w	r1, r2, #8
 8009676:	6854      	ldr	r4, [r2, #4]
 8009678:	428c      	cmp	r4, r1
 800967a:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800967e:	d102      	bne.n	8009686 <_malloc_r+0x4a>
 8009680:	68d4      	ldr	r4, [r2, #12]
 8009682:	42a2      	cmp	r2, r4
 8009684:	d010      	beq.n	80096a8 <_malloc_r+0x6c>
 8009686:	6863      	ldr	r3, [r4, #4]
 8009688:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800968c:	f023 0303 	bic.w	r3, r3, #3
 8009690:	60ca      	str	r2, [r1, #12]
 8009692:	4423      	add	r3, r4
 8009694:	6091      	str	r1, [r2, #8]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	f042 0201 	orr.w	r2, r2, #1
 800969c:	605a      	str	r2, [r3, #4]
 800969e:	4630      	mov	r0, r6
 80096a0:	f000 fa14 	bl	8009acc <__malloc_unlock>
 80096a4:	3408      	adds	r4, #8
 80096a6:	e180      	b.n	80099aa <_malloc_r+0x36e>
 80096a8:	3302      	adds	r3, #2
 80096aa:	4ab1      	ldr	r2, [pc, #708]	; (8009970 <_malloc_r+0x334>)
 80096ac:	693c      	ldr	r4, [r7, #16]
 80096ae:	4294      	cmp	r4, r2
 80096b0:	4611      	mov	r1, r2
 80096b2:	d075      	beq.n	80097a0 <_malloc_r+0x164>
 80096b4:	6860      	ldr	r0, [r4, #4]
 80096b6:	f020 0c03 	bic.w	ip, r0, #3
 80096ba:	ebac 0005 	sub.w	r0, ip, r5
 80096be:	280f      	cmp	r0, #15
 80096c0:	dd48      	ble.n	8009754 <_malloc_r+0x118>
 80096c2:	1963      	adds	r3, r4, r5
 80096c4:	f045 0501 	orr.w	r5, r5, #1
 80096c8:	6065      	str	r5, [r4, #4]
 80096ca:	e9c7 3304 	strd	r3, r3, [r7, #16]
 80096ce:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80096d2:	f040 0201 	orr.w	r2, r0, #1
 80096d6:	605a      	str	r2, [r3, #4]
 80096d8:	f844 000c 	str.w	r0, [r4, ip]
 80096dc:	e7df      	b.n	800969e <_malloc_r+0x62>
 80096de:	0a6b      	lsrs	r3, r5, #9
 80096e0:	d02a      	beq.n	8009738 <_malloc_r+0xfc>
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d812      	bhi.n	800970c <_malloc_r+0xd0>
 80096e6:	09ab      	lsrs	r3, r5, #6
 80096e8:	3338      	adds	r3, #56	; 0x38
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80096f0:	f1a2 0c08 	sub.w	ip, r2, #8
 80096f4:	6854      	ldr	r4, [r2, #4]
 80096f6:	4564      	cmp	r4, ip
 80096f8:	d006      	beq.n	8009708 <_malloc_r+0xcc>
 80096fa:	6862      	ldr	r2, [r4, #4]
 80096fc:	f022 0203 	bic.w	r2, r2, #3
 8009700:	1b50      	subs	r0, r2, r5
 8009702:	280f      	cmp	r0, #15
 8009704:	dd1c      	ble.n	8009740 <_malloc_r+0x104>
 8009706:	3b01      	subs	r3, #1
 8009708:	3301      	adds	r3, #1
 800970a:	e7ce      	b.n	80096aa <_malloc_r+0x6e>
 800970c:	2b14      	cmp	r3, #20
 800970e:	d801      	bhi.n	8009714 <_malloc_r+0xd8>
 8009710:	335b      	adds	r3, #91	; 0x5b
 8009712:	e7ea      	b.n	80096ea <_malloc_r+0xae>
 8009714:	2b54      	cmp	r3, #84	; 0x54
 8009716:	d802      	bhi.n	800971e <_malloc_r+0xe2>
 8009718:	0b2b      	lsrs	r3, r5, #12
 800971a:	336e      	adds	r3, #110	; 0x6e
 800971c:	e7e5      	b.n	80096ea <_malloc_r+0xae>
 800971e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009722:	d802      	bhi.n	800972a <_malloc_r+0xee>
 8009724:	0beb      	lsrs	r3, r5, #15
 8009726:	3377      	adds	r3, #119	; 0x77
 8009728:	e7df      	b.n	80096ea <_malloc_r+0xae>
 800972a:	f240 5254 	movw	r2, #1364	; 0x554
 800972e:	4293      	cmp	r3, r2
 8009730:	d804      	bhi.n	800973c <_malloc_r+0x100>
 8009732:	0cab      	lsrs	r3, r5, #18
 8009734:	337c      	adds	r3, #124	; 0x7c
 8009736:	e7d8      	b.n	80096ea <_malloc_r+0xae>
 8009738:	233f      	movs	r3, #63	; 0x3f
 800973a:	e7d6      	b.n	80096ea <_malloc_r+0xae>
 800973c:	237e      	movs	r3, #126	; 0x7e
 800973e:	e7d4      	b.n	80096ea <_malloc_r+0xae>
 8009740:	2800      	cmp	r0, #0
 8009742:	68e1      	ldr	r1, [r4, #12]
 8009744:	db04      	blt.n	8009750 <_malloc_r+0x114>
 8009746:	68a3      	ldr	r3, [r4, #8]
 8009748:	60d9      	str	r1, [r3, #12]
 800974a:	608b      	str	r3, [r1, #8]
 800974c:	18a3      	adds	r3, r4, r2
 800974e:	e7a2      	b.n	8009696 <_malloc_r+0x5a>
 8009750:	460c      	mov	r4, r1
 8009752:	e7d0      	b.n	80096f6 <_malloc_r+0xba>
 8009754:	2800      	cmp	r0, #0
 8009756:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800975a:	db07      	blt.n	800976c <_malloc_r+0x130>
 800975c:	44a4      	add	ip, r4
 800975e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009762:	f043 0301 	orr.w	r3, r3, #1
 8009766:	f8cc 3004 	str.w	r3, [ip, #4]
 800976a:	e798      	b.n	800969e <_malloc_r+0x62>
 800976c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f080 8099 	bcs.w	80098a8 <_malloc_r+0x26c>
 8009776:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800977a:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800977e:	2201      	movs	r2, #1
 8009780:	f10c 0c01 	add.w	ip, ip, #1
 8009784:	fa02 f20e 	lsl.w	r2, r2, lr
 8009788:	4310      	orrs	r0, r2
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8009790:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8009794:	3a08      	subs	r2, #8
 8009796:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800979a:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800979e:	60c4      	str	r4, [r0, #12]
 80097a0:	2001      	movs	r0, #1
 80097a2:	109a      	asrs	r2, r3, #2
 80097a4:	fa00 f202 	lsl.w	r2, r0, r2
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	4290      	cmp	r0, r2
 80097ac:	d326      	bcc.n	80097fc <_malloc_r+0x1c0>
 80097ae:	4210      	tst	r0, r2
 80097b0:	d106      	bne.n	80097c0 <_malloc_r+0x184>
 80097b2:	f023 0303 	bic.w	r3, r3, #3
 80097b6:	0052      	lsls	r2, r2, #1
 80097b8:	4210      	tst	r0, r2
 80097ba:	f103 0304 	add.w	r3, r3, #4
 80097be:	d0fa      	beq.n	80097b6 <_malloc_r+0x17a>
 80097c0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 80097c4:	46e1      	mov	r9, ip
 80097c6:	4698      	mov	r8, r3
 80097c8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80097cc:	454c      	cmp	r4, r9
 80097ce:	f040 80af 	bne.w	8009930 <_malloc_r+0x2f4>
 80097d2:	f108 0801 	add.w	r8, r8, #1
 80097d6:	f018 0f03 	tst.w	r8, #3
 80097da:	f109 0908 	add.w	r9, r9, #8
 80097de:	d1f3      	bne.n	80097c8 <_malloc_r+0x18c>
 80097e0:	0798      	lsls	r0, r3, #30
 80097e2:	f040 80e8 	bne.w	80099b6 <_malloc_r+0x37a>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	ea23 0302 	bic.w	r3, r3, r2
 80097ec:	607b      	str	r3, [r7, #4]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	0052      	lsls	r2, r2, #1
 80097f2:	4290      	cmp	r0, r2
 80097f4:	d302      	bcc.n	80097fc <_malloc_r+0x1c0>
 80097f6:	2a00      	cmp	r2, #0
 80097f8:	f040 80ec 	bne.w	80099d4 <_malloc_r+0x398>
 80097fc:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8009800:	f8da 4004 	ldr.w	r4, [sl, #4]
 8009804:	f024 0203 	bic.w	r2, r4, #3
 8009808:	42aa      	cmp	r2, r5
 800980a:	d303      	bcc.n	8009814 <_malloc_r+0x1d8>
 800980c:	1b53      	subs	r3, r2, r5
 800980e:	2b0f      	cmp	r3, #15
 8009810:	f300 8140 	bgt.w	8009a94 <_malloc_r+0x458>
 8009814:	4b57      	ldr	r3, [pc, #348]	; (8009974 <_malloc_r+0x338>)
 8009816:	9200      	str	r2, [sp, #0]
 8009818:	2008      	movs	r0, #8
 800981a:	681c      	ldr	r4, [r3, #0]
 800981c:	f000 fcdf 	bl	800a1de <sysconf>
 8009820:	4b55      	ldr	r3, [pc, #340]	; (8009978 <_malloc_r+0x33c>)
 8009822:	9a00      	ldr	r2, [sp, #0]
 8009824:	6819      	ldr	r1, [r3, #0]
 8009826:	3410      	adds	r4, #16
 8009828:	3101      	adds	r1, #1
 800982a:	442c      	add	r4, r5
 800982c:	bf1f      	itttt	ne
 800982e:	f104 34ff 	addne.w	r4, r4, #4294967295
 8009832:	1824      	addne	r4, r4, r0
 8009834:	4241      	negne	r1, r0
 8009836:	400c      	andne	r4, r1
 8009838:	4680      	mov	r8, r0
 800983a:	4621      	mov	r1, r4
 800983c:	4630      	mov	r0, r6
 800983e:	e9cd 2300 	strd	r2, r3, [sp]
 8009842:	f000 fc2f 	bl	800a0a4 <_sbrk_r>
 8009846:	f1b0 3fff 	cmp.w	r0, #4294967295
 800984a:	4683      	mov	fp, r0
 800984c:	f000 80fb 	beq.w	8009a46 <_malloc_r+0x40a>
 8009850:	9a00      	ldr	r2, [sp, #0]
 8009852:	9b01      	ldr	r3, [sp, #4]
 8009854:	eb0a 0102 	add.w	r1, sl, r2
 8009858:	4281      	cmp	r1, r0
 800985a:	d902      	bls.n	8009862 <_malloc_r+0x226>
 800985c:	45ba      	cmp	sl, r7
 800985e:	f040 80f2 	bne.w	8009a46 <_malloc_r+0x40a>
 8009862:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8009984 <_malloc_r+0x348>
 8009866:	f8d9 0000 	ldr.w	r0, [r9]
 800986a:	4559      	cmp	r1, fp
 800986c:	eb00 0e04 	add.w	lr, r0, r4
 8009870:	f8c9 e000 	str.w	lr, [r9]
 8009874:	f108 3cff 	add.w	ip, r8, #4294967295
 8009878:	f040 80ae 	bne.w	80099d8 <_malloc_r+0x39c>
 800987c:	ea11 0f0c 	tst.w	r1, ip
 8009880:	f040 80aa 	bne.w	80099d8 <_malloc_r+0x39c>
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	4414      	add	r4, r2
 8009888:	f044 0401 	orr.w	r4, r4, #1
 800988c:	605c      	str	r4, [r3, #4]
 800988e:	4a3b      	ldr	r2, [pc, #236]	; (800997c <_malloc_r+0x340>)
 8009890:	f8d9 3000 	ldr.w	r3, [r9]
 8009894:	6811      	ldr	r1, [r2, #0]
 8009896:	428b      	cmp	r3, r1
 8009898:	bf88      	it	hi
 800989a:	6013      	strhi	r3, [r2, #0]
 800989c:	4a38      	ldr	r2, [pc, #224]	; (8009980 <_malloc_r+0x344>)
 800989e:	6811      	ldr	r1, [r2, #0]
 80098a0:	428b      	cmp	r3, r1
 80098a2:	bf88      	it	hi
 80098a4:	6013      	strhi	r3, [r2, #0]
 80098a6:	e0ce      	b.n	8009a46 <_malloc_r+0x40a>
 80098a8:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80098ac:	2a04      	cmp	r2, #4
 80098ae:	d818      	bhi.n	80098e2 <_malloc_r+0x2a6>
 80098b0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80098b4:	3238      	adds	r2, #56	; 0x38
 80098b6:	f102 0e01 	add.w	lr, r2, #1
 80098ba:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 80098be:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 80098c2:	45f0      	cmp	r8, lr
 80098c4:	d12b      	bne.n	800991e <_malloc_r+0x2e2>
 80098c6:	1092      	asrs	r2, r2, #2
 80098c8:	f04f 0c01 	mov.w	ip, #1
 80098cc:	fa0c f202 	lsl.w	r2, ip, r2
 80098d0:	4310      	orrs	r0, r2
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80098d8:	f8c8 4008 	str.w	r4, [r8, #8]
 80098dc:	f8ce 400c 	str.w	r4, [lr, #12]
 80098e0:	e75e      	b.n	80097a0 <_malloc_r+0x164>
 80098e2:	2a14      	cmp	r2, #20
 80098e4:	d801      	bhi.n	80098ea <_malloc_r+0x2ae>
 80098e6:	325b      	adds	r2, #91	; 0x5b
 80098e8:	e7e5      	b.n	80098b6 <_malloc_r+0x27a>
 80098ea:	2a54      	cmp	r2, #84	; 0x54
 80098ec:	d803      	bhi.n	80098f6 <_malloc_r+0x2ba>
 80098ee:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80098f2:	326e      	adds	r2, #110	; 0x6e
 80098f4:	e7df      	b.n	80098b6 <_malloc_r+0x27a>
 80098f6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80098fa:	d803      	bhi.n	8009904 <_malloc_r+0x2c8>
 80098fc:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009900:	3277      	adds	r2, #119	; 0x77
 8009902:	e7d8      	b.n	80098b6 <_malloc_r+0x27a>
 8009904:	f240 5e54 	movw	lr, #1364	; 0x554
 8009908:	4572      	cmp	r2, lr
 800990a:	bf9a      	itte	ls
 800990c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8009910:	327c      	addls	r2, #124	; 0x7c
 8009912:	227e      	movhi	r2, #126	; 0x7e
 8009914:	e7cf      	b.n	80098b6 <_malloc_r+0x27a>
 8009916:	f8de e008 	ldr.w	lr, [lr, #8]
 800991a:	45f0      	cmp	r8, lr
 800991c:	d005      	beq.n	800992a <_malloc_r+0x2ee>
 800991e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009922:	f022 0203 	bic.w	r2, r2, #3
 8009926:	4562      	cmp	r2, ip
 8009928:	d8f5      	bhi.n	8009916 <_malloc_r+0x2da>
 800992a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800992e:	e7d1      	b.n	80098d4 <_malloc_r+0x298>
 8009930:	6860      	ldr	r0, [r4, #4]
 8009932:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8009936:	f020 0003 	bic.w	r0, r0, #3
 800993a:	eba0 0a05 	sub.w	sl, r0, r5
 800993e:	f1ba 0f0f 	cmp.w	sl, #15
 8009942:	dd21      	ble.n	8009988 <_malloc_r+0x34c>
 8009944:	68a2      	ldr	r2, [r4, #8]
 8009946:	1963      	adds	r3, r4, r5
 8009948:	f045 0501 	orr.w	r5, r5, #1
 800994c:	6065      	str	r5, [r4, #4]
 800994e:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009952:	f8ce 2008 	str.w	r2, [lr, #8]
 8009956:	f04a 0201 	orr.w	r2, sl, #1
 800995a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800995e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009962:	605a      	str	r2, [r3, #4]
 8009964:	f844 a000 	str.w	sl, [r4, r0]
 8009968:	e699      	b.n	800969e <_malloc_r+0x62>
 800996a:	bf00      	nop
 800996c:	2000046c 	.word	0x2000046c
 8009970:	20000474 	.word	0x20000474
 8009974:	20000b8c 	.word	0x20000b8c
 8009978:	20000874 	.word	0x20000874
 800997c:	20000b84 	.word	0x20000b84
 8009980:	20000b88 	.word	0x20000b88
 8009984:	20000b5c 	.word	0x20000b5c
 8009988:	f1ba 0f00 	cmp.w	sl, #0
 800998c:	db11      	blt.n	80099b2 <_malloc_r+0x376>
 800998e:	4420      	add	r0, r4
 8009990:	6843      	ldr	r3, [r0, #4]
 8009992:	f043 0301 	orr.w	r3, r3, #1
 8009996:	6043      	str	r3, [r0, #4]
 8009998:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800999c:	4630      	mov	r0, r6
 800999e:	f8c3 e00c 	str.w	lr, [r3, #12]
 80099a2:	f8ce 3008 	str.w	r3, [lr, #8]
 80099a6:	f000 f891 	bl	8009acc <__malloc_unlock>
 80099aa:	4620      	mov	r0, r4
 80099ac:	b003      	add	sp, #12
 80099ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b2:	4674      	mov	r4, lr
 80099b4:	e70a      	b.n	80097cc <_malloc_r+0x190>
 80099b6:	f1ac 0008 	sub.w	r0, ip, #8
 80099ba:	f8dc c000 	ldr.w	ip, [ip]
 80099be:	4584      	cmp	ip, r0
 80099c0:	f103 33ff 	add.w	r3, r3, #4294967295
 80099c4:	f43f af0c 	beq.w	80097e0 <_malloc_r+0x1a4>
 80099c8:	e711      	b.n	80097ee <_malloc_r+0x1b2>
 80099ca:	3304      	adds	r3, #4
 80099cc:	0052      	lsls	r2, r2, #1
 80099ce:	4210      	tst	r0, r2
 80099d0:	d0fb      	beq.n	80099ca <_malloc_r+0x38e>
 80099d2:	e6f5      	b.n	80097c0 <_malloc_r+0x184>
 80099d4:	4643      	mov	r3, r8
 80099d6:	e7fa      	b.n	80099ce <_malloc_r+0x392>
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	9200      	str	r2, [sp, #0]
 80099dc:	3001      	adds	r0, #1
 80099de:	bf1b      	ittet	ne
 80099e0:	ebab 0101 	subne.w	r1, fp, r1
 80099e4:	4471      	addne	r1, lr
 80099e6:	f8c3 b000 	streq.w	fp, [r3]
 80099ea:	f8c9 1000 	strne.w	r1, [r9]
 80099ee:	f01b 0307 	ands.w	r3, fp, #7
 80099f2:	bf1c      	itt	ne
 80099f4:	f1c3 0308 	rsbne	r3, r3, #8
 80099f8:	449b      	addne	fp, r3
 80099fa:	445c      	add	r4, fp
 80099fc:	4498      	add	r8, r3
 80099fe:	ea04 030c 	and.w	r3, r4, ip
 8009a02:	eba8 0803 	sub.w	r8, r8, r3
 8009a06:	4641      	mov	r1, r8
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f000 fb4b 	bl	800a0a4 <_sbrk_r>
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	bf04      	itt	eq
 8009a12:	4658      	moveq	r0, fp
 8009a14:	f04f 0800 	moveq.w	r8, #0
 8009a18:	f8d9 3000 	ldr.w	r3, [r9]
 8009a1c:	f8c7 b008 	str.w	fp, [r7, #8]
 8009a20:	eba0 000b 	sub.w	r0, r0, fp
 8009a24:	4440      	add	r0, r8
 8009a26:	4443      	add	r3, r8
 8009a28:	f040 0001 	orr.w	r0, r0, #1
 8009a2c:	45ba      	cmp	sl, r7
 8009a2e:	9a00      	ldr	r2, [sp, #0]
 8009a30:	f8c9 3000 	str.w	r3, [r9]
 8009a34:	f8cb 0004 	str.w	r0, [fp, #4]
 8009a38:	f43f af29 	beq.w	800988e <_malloc_r+0x252>
 8009a3c:	2a0f      	cmp	r2, #15
 8009a3e:	d810      	bhi.n	8009a62 <_malloc_r+0x426>
 8009a40:	2301      	movs	r3, #1
 8009a42:	f8cb 3004 	str.w	r3, [fp, #4]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	685a      	ldr	r2, [r3, #4]
 8009a4a:	f022 0203 	bic.w	r2, r2, #3
 8009a4e:	42aa      	cmp	r2, r5
 8009a50:	eba2 0305 	sub.w	r3, r2, r5
 8009a54:	d301      	bcc.n	8009a5a <_malloc_r+0x41e>
 8009a56:	2b0f      	cmp	r3, #15
 8009a58:	dc1c      	bgt.n	8009a94 <_malloc_r+0x458>
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f000 f836 	bl	8009acc <__malloc_unlock>
 8009a60:	e5f8      	b.n	8009654 <_malloc_r+0x18>
 8009a62:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009a66:	f1a2 040c 	sub.w	r4, r2, #12
 8009a6a:	f024 0407 	bic.w	r4, r4, #7
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	4323      	orrs	r3, r4
 8009a74:	f8ca 3004 	str.w	r3, [sl, #4]
 8009a78:	2205      	movs	r2, #5
 8009a7a:	eb0a 0304 	add.w	r3, sl, r4
 8009a7e:	2c0f      	cmp	r4, #15
 8009a80:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8009a84:	f67f af03 	bls.w	800988e <_malloc_r+0x252>
 8009a88:	f10a 0108 	add.w	r1, sl, #8
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f7ff fd0b 	bl	80094a8 <_free_r>
 8009a92:	e6fc      	b.n	800988e <_malloc_r+0x252>
 8009a94:	68bc      	ldr	r4, [r7, #8]
 8009a96:	f045 0201 	orr.w	r2, r5, #1
 8009a9a:	4425      	add	r5, r4
 8009a9c:	f043 0301 	orr.w	r3, r3, #1
 8009aa0:	6062      	str	r2, [r4, #4]
 8009aa2:	60bd      	str	r5, [r7, #8]
 8009aa4:	606b      	str	r3, [r5, #4]
 8009aa6:	e5fa      	b.n	800969e <_malloc_r+0x62>

08009aa8 <memcpy>:
 8009aa8:	b510      	push	{r4, lr}
 8009aaa:	1e43      	subs	r3, r0, #1
 8009aac:	440a      	add	r2, r1
 8009aae:	4291      	cmp	r1, r2
 8009ab0:	d100      	bne.n	8009ab4 <memcpy+0xc>
 8009ab2:	bd10      	pop	{r4, pc}
 8009ab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ab8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009abc:	e7f7      	b.n	8009aae <memcpy+0x6>
	...

08009ac0 <__malloc_lock>:
 8009ac0:	4801      	ldr	r0, [pc, #4]	; (8009ac8 <__malloc_lock+0x8>)
 8009ac2:	f7fd bbf1 	b.w	80072a8 <__retarget_lock_acquire_recursive>
 8009ac6:	bf00      	nop
 8009ac8:	20000d2c 	.word	0x20000d2c

08009acc <__malloc_unlock>:
 8009acc:	4801      	ldr	r0, [pc, #4]	; (8009ad4 <__malloc_unlock+0x8>)
 8009ace:	f7fd bbec 	b.w	80072aa <__retarget_lock_release_recursive>
 8009ad2:	bf00      	nop
 8009ad4:	20000d2c 	.word	0x20000d2c

08009ad8 <_Balloc>:
 8009ad8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009ada:	b570      	push	{r4, r5, r6, lr}
 8009adc:	4605      	mov	r5, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	b17b      	cbz	r3, 8009b02 <_Balloc+0x2a>
 8009ae2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009ae4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009ae8:	b9a0      	cbnz	r0, 8009b14 <_Balloc+0x3c>
 8009aea:	2101      	movs	r1, #1
 8009aec:	fa01 f604 	lsl.w	r6, r1, r4
 8009af0:	1d72      	adds	r2, r6, #5
 8009af2:	0092      	lsls	r2, r2, #2
 8009af4:	4628      	mov	r0, r5
 8009af6:	f000 fb7f 	bl	800a1f8 <_calloc_r>
 8009afa:	b148      	cbz	r0, 8009b10 <_Balloc+0x38>
 8009afc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8009b00:	e00b      	b.n	8009b1a <_Balloc+0x42>
 8009b02:	2221      	movs	r2, #33	; 0x21
 8009b04:	2104      	movs	r1, #4
 8009b06:	f000 fb77 	bl	800a1f8 <_calloc_r>
 8009b0a:	64e8      	str	r0, [r5, #76]	; 0x4c
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d1e8      	bne.n	8009ae2 <_Balloc+0xa>
 8009b10:	2000      	movs	r0, #0
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	6802      	ldr	r2, [r0, #0]
 8009b16:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b20:	e7f7      	b.n	8009b12 <_Balloc+0x3a>

08009b22 <_Bfree>:
 8009b22:	b131      	cbz	r1, 8009b32 <_Bfree+0x10>
 8009b24:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009b26:	684a      	ldr	r2, [r1, #4]
 8009b28:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009b2c:	6008      	str	r0, [r1, #0]
 8009b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009b32:	4770      	bx	lr

08009b34 <__multadd>:
 8009b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b38:	690d      	ldr	r5, [r1, #16]
 8009b3a:	461f      	mov	r7, r3
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	460c      	mov	r4, r1
 8009b40:	f101 0c14 	add.w	ip, r1, #20
 8009b44:	2300      	movs	r3, #0
 8009b46:	f8dc 0000 	ldr.w	r0, [ip]
 8009b4a:	b281      	uxth	r1, r0
 8009b4c:	fb02 7101 	mla	r1, r2, r1, r7
 8009b50:	0c0f      	lsrs	r7, r1, #16
 8009b52:	0c00      	lsrs	r0, r0, #16
 8009b54:	fb02 7000 	mla	r0, r2, r0, r7
 8009b58:	b289      	uxth	r1, r1
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009b60:	429d      	cmp	r5, r3
 8009b62:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009b66:	f84c 1b04 	str.w	r1, [ip], #4
 8009b6a:	dcec      	bgt.n	8009b46 <__multadd+0x12>
 8009b6c:	b1d7      	cbz	r7, 8009ba4 <__multadd+0x70>
 8009b6e:	68a3      	ldr	r3, [r4, #8]
 8009b70:	42ab      	cmp	r3, r5
 8009b72:	dc12      	bgt.n	8009b9a <__multadd+0x66>
 8009b74:	6861      	ldr	r1, [r4, #4]
 8009b76:	4630      	mov	r0, r6
 8009b78:	3101      	adds	r1, #1
 8009b7a:	f7ff ffad 	bl	8009ad8 <_Balloc>
 8009b7e:	6922      	ldr	r2, [r4, #16]
 8009b80:	3202      	adds	r2, #2
 8009b82:	f104 010c 	add.w	r1, r4, #12
 8009b86:	4680      	mov	r8, r0
 8009b88:	0092      	lsls	r2, r2, #2
 8009b8a:	300c      	adds	r0, #12
 8009b8c:	f7ff ff8c 	bl	8009aa8 <memcpy>
 8009b90:	4621      	mov	r1, r4
 8009b92:	4630      	mov	r0, r6
 8009b94:	f7ff ffc5 	bl	8009b22 <_Bfree>
 8009b98:	4644      	mov	r4, r8
 8009b9a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b9e:	3501      	adds	r5, #1
 8009ba0:	615f      	str	r7, [r3, #20]
 8009ba2:	6125      	str	r5, [r4, #16]
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009baa <__hi0bits>:
 8009baa:	0c02      	lsrs	r2, r0, #16
 8009bac:	0412      	lsls	r2, r2, #16
 8009bae:	4603      	mov	r3, r0
 8009bb0:	b9b2      	cbnz	r2, 8009be0 <__hi0bits+0x36>
 8009bb2:	0403      	lsls	r3, r0, #16
 8009bb4:	2010      	movs	r0, #16
 8009bb6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009bba:	bf04      	itt	eq
 8009bbc:	021b      	lsleq	r3, r3, #8
 8009bbe:	3008      	addeq	r0, #8
 8009bc0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009bc4:	bf04      	itt	eq
 8009bc6:	011b      	lsleq	r3, r3, #4
 8009bc8:	3004      	addeq	r0, #4
 8009bca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009bce:	bf04      	itt	eq
 8009bd0:	009b      	lsleq	r3, r3, #2
 8009bd2:	3002      	addeq	r0, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	db06      	blt.n	8009be6 <__hi0bits+0x3c>
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	d503      	bpl.n	8009be4 <__hi0bits+0x3a>
 8009bdc:	3001      	adds	r0, #1
 8009bde:	4770      	bx	lr
 8009be0:	2000      	movs	r0, #0
 8009be2:	e7e8      	b.n	8009bb6 <__hi0bits+0xc>
 8009be4:	2020      	movs	r0, #32
 8009be6:	4770      	bx	lr

08009be8 <__lo0bits>:
 8009be8:	6803      	ldr	r3, [r0, #0]
 8009bea:	f013 0207 	ands.w	r2, r3, #7
 8009bee:	4601      	mov	r1, r0
 8009bf0:	d00b      	beq.n	8009c0a <__lo0bits+0x22>
 8009bf2:	07da      	lsls	r2, r3, #31
 8009bf4:	d423      	bmi.n	8009c3e <__lo0bits+0x56>
 8009bf6:	0798      	lsls	r0, r3, #30
 8009bf8:	bf49      	itett	mi
 8009bfa:	085b      	lsrmi	r3, r3, #1
 8009bfc:	089b      	lsrpl	r3, r3, #2
 8009bfe:	2001      	movmi	r0, #1
 8009c00:	600b      	strmi	r3, [r1, #0]
 8009c02:	bf5c      	itt	pl
 8009c04:	600b      	strpl	r3, [r1, #0]
 8009c06:	2002      	movpl	r0, #2
 8009c08:	4770      	bx	lr
 8009c0a:	b298      	uxth	r0, r3
 8009c0c:	b9a8      	cbnz	r0, 8009c3a <__lo0bits+0x52>
 8009c0e:	0c1b      	lsrs	r3, r3, #16
 8009c10:	2010      	movs	r0, #16
 8009c12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c16:	bf04      	itt	eq
 8009c18:	0a1b      	lsreq	r3, r3, #8
 8009c1a:	3008      	addeq	r0, #8
 8009c1c:	071a      	lsls	r2, r3, #28
 8009c1e:	bf04      	itt	eq
 8009c20:	091b      	lsreq	r3, r3, #4
 8009c22:	3004      	addeq	r0, #4
 8009c24:	079a      	lsls	r2, r3, #30
 8009c26:	bf04      	itt	eq
 8009c28:	089b      	lsreq	r3, r3, #2
 8009c2a:	3002      	addeq	r0, #2
 8009c2c:	07da      	lsls	r2, r3, #31
 8009c2e:	d402      	bmi.n	8009c36 <__lo0bits+0x4e>
 8009c30:	085b      	lsrs	r3, r3, #1
 8009c32:	d006      	beq.n	8009c42 <__lo0bits+0x5a>
 8009c34:	3001      	adds	r0, #1
 8009c36:	600b      	str	r3, [r1, #0]
 8009c38:	4770      	bx	lr
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	e7e9      	b.n	8009c12 <__lo0bits+0x2a>
 8009c3e:	2000      	movs	r0, #0
 8009c40:	4770      	bx	lr
 8009c42:	2020      	movs	r0, #32
 8009c44:	4770      	bx	lr

08009c46 <__i2b>:
 8009c46:	b510      	push	{r4, lr}
 8009c48:	460c      	mov	r4, r1
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	f7ff ff44 	bl	8009ad8 <_Balloc>
 8009c50:	2201      	movs	r2, #1
 8009c52:	6144      	str	r4, [r0, #20]
 8009c54:	6102      	str	r2, [r0, #16]
 8009c56:	bd10      	pop	{r4, pc}

08009c58 <__multiply>:
 8009c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	4614      	mov	r4, r2
 8009c5e:	690a      	ldr	r2, [r1, #16]
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	bfb8      	it	lt
 8009c66:	460b      	movlt	r3, r1
 8009c68:	4688      	mov	r8, r1
 8009c6a:	bfbc      	itt	lt
 8009c6c:	46a0      	movlt	r8, r4
 8009c6e:	461c      	movlt	r4, r3
 8009c70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009c78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c80:	eb07 0609 	add.w	r6, r7, r9
 8009c84:	42b3      	cmp	r3, r6
 8009c86:	bfb8      	it	lt
 8009c88:	3101      	addlt	r1, #1
 8009c8a:	f7ff ff25 	bl	8009ad8 <_Balloc>
 8009c8e:	f100 0514 	add.w	r5, r0, #20
 8009c92:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009c96:	462b      	mov	r3, r5
 8009c98:	2200      	movs	r2, #0
 8009c9a:	4573      	cmp	r3, lr
 8009c9c:	d316      	bcc.n	8009ccc <__multiply+0x74>
 8009c9e:	f104 0214 	add.w	r2, r4, #20
 8009ca2:	f108 0114 	add.w	r1, r8, #20
 8009ca6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009caa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	9b00      	ldr	r3, [sp, #0]
 8009cb2:	9201      	str	r2, [sp, #4]
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d80c      	bhi.n	8009cd2 <__multiply+0x7a>
 8009cb8:	2e00      	cmp	r6, #0
 8009cba:	dd03      	ble.n	8009cc4 <__multiply+0x6c>
 8009cbc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d05d      	beq.n	8009d80 <__multiply+0x128>
 8009cc4:	6106      	str	r6, [r0, #16]
 8009cc6:	b003      	add	sp, #12
 8009cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ccc:	f843 2b04 	str.w	r2, [r3], #4
 8009cd0:	e7e3      	b.n	8009c9a <__multiply+0x42>
 8009cd2:	f8b2 b000 	ldrh.w	fp, [r2]
 8009cd6:	f1bb 0f00 	cmp.w	fp, #0
 8009cda:	d023      	beq.n	8009d24 <__multiply+0xcc>
 8009cdc:	4689      	mov	r9, r1
 8009cde:	46ac      	mov	ip, r5
 8009ce0:	f04f 0800 	mov.w	r8, #0
 8009ce4:	f859 4b04 	ldr.w	r4, [r9], #4
 8009ce8:	f8dc a000 	ldr.w	sl, [ip]
 8009cec:	b2a3      	uxth	r3, r4
 8009cee:	fa1f fa8a 	uxth.w	sl, sl
 8009cf2:	fb0b a303 	mla	r3, fp, r3, sl
 8009cf6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009cfa:	f8dc 4000 	ldr.w	r4, [ip]
 8009cfe:	4443      	add	r3, r8
 8009d00:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d04:	fb0b 840a 	mla	r4, fp, sl, r8
 8009d08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009d0c:	46e2      	mov	sl, ip
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d14:	454f      	cmp	r7, r9
 8009d16:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d1a:	f84a 3b04 	str.w	r3, [sl], #4
 8009d1e:	d82b      	bhi.n	8009d78 <__multiply+0x120>
 8009d20:	f8cc 8004 	str.w	r8, [ip, #4]
 8009d24:	9b01      	ldr	r3, [sp, #4]
 8009d26:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009d2a:	3204      	adds	r2, #4
 8009d2c:	f1ba 0f00 	cmp.w	sl, #0
 8009d30:	d020      	beq.n	8009d74 <__multiply+0x11c>
 8009d32:	682b      	ldr	r3, [r5, #0]
 8009d34:	4689      	mov	r9, r1
 8009d36:	46a8      	mov	r8, r5
 8009d38:	f04f 0b00 	mov.w	fp, #0
 8009d3c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009d40:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009d44:	fb0a 440c 	mla	r4, sl, ip, r4
 8009d48:	445c      	add	r4, fp
 8009d4a:	46c4      	mov	ip, r8
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d52:	f84c 3b04 	str.w	r3, [ip], #4
 8009d56:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d5a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009d5e:	0c1b      	lsrs	r3, r3, #16
 8009d60:	fb0a b303 	mla	r3, sl, r3, fp
 8009d64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009d68:	454f      	cmp	r7, r9
 8009d6a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009d6e:	d805      	bhi.n	8009d7c <__multiply+0x124>
 8009d70:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d74:	3504      	adds	r5, #4
 8009d76:	e79b      	b.n	8009cb0 <__multiply+0x58>
 8009d78:	46d4      	mov	ip, sl
 8009d7a:	e7b3      	b.n	8009ce4 <__multiply+0x8c>
 8009d7c:	46e0      	mov	r8, ip
 8009d7e:	e7dd      	b.n	8009d3c <__multiply+0xe4>
 8009d80:	3e01      	subs	r6, #1
 8009d82:	e799      	b.n	8009cb8 <__multiply+0x60>

08009d84 <__pow5mult>:
 8009d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d88:	4615      	mov	r5, r2
 8009d8a:	f012 0203 	ands.w	r2, r2, #3
 8009d8e:	4606      	mov	r6, r0
 8009d90:	460f      	mov	r7, r1
 8009d92:	d007      	beq.n	8009da4 <__pow5mult+0x20>
 8009d94:	3a01      	subs	r2, #1
 8009d96:	4c1a      	ldr	r4, [pc, #104]	; (8009e00 <__pow5mult+0x7c>)
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d9e:	f7ff fec9 	bl	8009b34 <__multadd>
 8009da2:	4607      	mov	r7, r0
 8009da4:	10ad      	asrs	r5, r5, #2
 8009da6:	d027      	beq.n	8009df8 <__pow5mult+0x74>
 8009da8:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8009daa:	b944      	cbnz	r4, 8009dbe <__pow5mult+0x3a>
 8009dac:	f240 2171 	movw	r1, #625	; 0x271
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7ff ff48 	bl	8009c46 <__i2b>
 8009db6:	2300      	movs	r3, #0
 8009db8:	64b0      	str	r0, [r6, #72]	; 0x48
 8009dba:	4604      	mov	r4, r0
 8009dbc:	6003      	str	r3, [r0, #0]
 8009dbe:	f04f 0800 	mov.w	r8, #0
 8009dc2:	07eb      	lsls	r3, r5, #31
 8009dc4:	d50a      	bpl.n	8009ddc <__pow5mult+0x58>
 8009dc6:	4639      	mov	r1, r7
 8009dc8:	4622      	mov	r2, r4
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7ff ff44 	bl	8009c58 <__multiply>
 8009dd0:	4639      	mov	r1, r7
 8009dd2:	4681      	mov	r9, r0
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f7ff fea4 	bl	8009b22 <_Bfree>
 8009dda:	464f      	mov	r7, r9
 8009ddc:	106d      	asrs	r5, r5, #1
 8009dde:	d00b      	beq.n	8009df8 <__pow5mult+0x74>
 8009de0:	6820      	ldr	r0, [r4, #0]
 8009de2:	b938      	cbnz	r0, 8009df4 <__pow5mult+0x70>
 8009de4:	4622      	mov	r2, r4
 8009de6:	4621      	mov	r1, r4
 8009de8:	4630      	mov	r0, r6
 8009dea:	f7ff ff35 	bl	8009c58 <__multiply>
 8009dee:	6020      	str	r0, [r4, #0]
 8009df0:	f8c0 8000 	str.w	r8, [r0]
 8009df4:	4604      	mov	r4, r0
 8009df6:	e7e4      	b.n	8009dc2 <__pow5mult+0x3e>
 8009df8:	4638      	mov	r0, r7
 8009dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dfe:	bf00      	nop
 8009e00:	0800a810 	.word	0x0800a810

08009e04 <__lshift>:
 8009e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e08:	460c      	mov	r4, r1
 8009e0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e0e:	6923      	ldr	r3, [r4, #16]
 8009e10:	6849      	ldr	r1, [r1, #4]
 8009e12:	eb0a 0903 	add.w	r9, sl, r3
 8009e16:	68a3      	ldr	r3, [r4, #8]
 8009e18:	4607      	mov	r7, r0
 8009e1a:	4616      	mov	r6, r2
 8009e1c:	f109 0501 	add.w	r5, r9, #1
 8009e20:	42ab      	cmp	r3, r5
 8009e22:	db32      	blt.n	8009e8a <__lshift+0x86>
 8009e24:	4638      	mov	r0, r7
 8009e26:	f7ff fe57 	bl	8009ad8 <_Balloc>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	4680      	mov	r8, r0
 8009e2e:	f100 0114 	add.w	r1, r0, #20
 8009e32:	461a      	mov	r2, r3
 8009e34:	4553      	cmp	r3, sl
 8009e36:	db2b      	blt.n	8009e90 <__lshift+0x8c>
 8009e38:	6920      	ldr	r0, [r4, #16]
 8009e3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e3e:	f104 0314 	add.w	r3, r4, #20
 8009e42:	f016 021f 	ands.w	r2, r6, #31
 8009e46:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e4a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e4e:	d025      	beq.n	8009e9c <__lshift+0x98>
 8009e50:	f1c2 0e20 	rsb	lr, r2, #32
 8009e54:	2000      	movs	r0, #0
 8009e56:	681e      	ldr	r6, [r3, #0]
 8009e58:	468a      	mov	sl, r1
 8009e5a:	4096      	lsls	r6, r2
 8009e5c:	4330      	orrs	r0, r6
 8009e5e:	f84a 0b04 	str.w	r0, [sl], #4
 8009e62:	f853 0b04 	ldr.w	r0, [r3], #4
 8009e66:	459c      	cmp	ip, r3
 8009e68:	fa20 f00e 	lsr.w	r0, r0, lr
 8009e6c:	d814      	bhi.n	8009e98 <__lshift+0x94>
 8009e6e:	6048      	str	r0, [r1, #4]
 8009e70:	b108      	cbz	r0, 8009e76 <__lshift+0x72>
 8009e72:	f109 0502 	add.w	r5, r9, #2
 8009e76:	3d01      	subs	r5, #1
 8009e78:	4638      	mov	r0, r7
 8009e7a:	f8c8 5010 	str.w	r5, [r8, #16]
 8009e7e:	4621      	mov	r1, r4
 8009e80:	f7ff fe4f 	bl	8009b22 <_Bfree>
 8009e84:	4640      	mov	r0, r8
 8009e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8a:	3101      	adds	r1, #1
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	e7c7      	b.n	8009e20 <__lshift+0x1c>
 8009e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009e94:	3301      	adds	r3, #1
 8009e96:	e7cd      	b.n	8009e34 <__lshift+0x30>
 8009e98:	4651      	mov	r1, sl
 8009e9a:	e7dc      	b.n	8009e56 <__lshift+0x52>
 8009e9c:	3904      	subs	r1, #4
 8009e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea2:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ea6:	459c      	cmp	ip, r3
 8009ea8:	d8f9      	bhi.n	8009e9e <__lshift+0x9a>
 8009eaa:	e7e4      	b.n	8009e76 <__lshift+0x72>

08009eac <__mcmp>:
 8009eac:	6903      	ldr	r3, [r0, #16]
 8009eae:	690a      	ldr	r2, [r1, #16]
 8009eb0:	1a9b      	subs	r3, r3, r2
 8009eb2:	b530      	push	{r4, r5, lr}
 8009eb4:	d10c      	bne.n	8009ed0 <__mcmp+0x24>
 8009eb6:	0092      	lsls	r2, r2, #2
 8009eb8:	3014      	adds	r0, #20
 8009eba:	3114      	adds	r1, #20
 8009ebc:	1884      	adds	r4, r0, r2
 8009ebe:	4411      	add	r1, r2
 8009ec0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ec4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ec8:	4295      	cmp	r5, r2
 8009eca:	d003      	beq.n	8009ed4 <__mcmp+0x28>
 8009ecc:	d305      	bcc.n	8009eda <__mcmp+0x2e>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	bd30      	pop	{r4, r5, pc}
 8009ed4:	42a0      	cmp	r0, r4
 8009ed6:	d3f3      	bcc.n	8009ec0 <__mcmp+0x14>
 8009ed8:	e7fa      	b.n	8009ed0 <__mcmp+0x24>
 8009eda:	f04f 33ff 	mov.w	r3, #4294967295
 8009ede:	e7f7      	b.n	8009ed0 <__mcmp+0x24>

08009ee0 <__mdiff>:
 8009ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee4:	460d      	mov	r5, r1
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4628      	mov	r0, r5
 8009eec:	4614      	mov	r4, r2
 8009eee:	f7ff ffdd 	bl	8009eac <__mcmp>
 8009ef2:	1e06      	subs	r6, r0, #0
 8009ef4:	d108      	bne.n	8009f08 <__mdiff+0x28>
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4638      	mov	r0, r7
 8009efa:	f7ff fded 	bl	8009ad8 <_Balloc>
 8009efe:	2301      	movs	r3, #1
 8009f00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f08:	bfa4      	itt	ge
 8009f0a:	4623      	movge	r3, r4
 8009f0c:	462c      	movge	r4, r5
 8009f0e:	4638      	mov	r0, r7
 8009f10:	6861      	ldr	r1, [r4, #4]
 8009f12:	bfa6      	itte	ge
 8009f14:	461d      	movge	r5, r3
 8009f16:	2600      	movge	r6, #0
 8009f18:	2601      	movlt	r6, #1
 8009f1a:	f7ff fddd 	bl	8009ad8 <_Balloc>
 8009f1e:	692b      	ldr	r3, [r5, #16]
 8009f20:	60c6      	str	r6, [r0, #12]
 8009f22:	6926      	ldr	r6, [r4, #16]
 8009f24:	f105 0914 	add.w	r9, r5, #20
 8009f28:	f104 0214 	add.w	r2, r4, #20
 8009f2c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009f30:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009f34:	f100 0514 	add.w	r5, r0, #20
 8009f38:	f04f 0e00 	mov.w	lr, #0
 8009f3c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009f40:	f859 4b04 	ldr.w	r4, [r9], #4
 8009f44:	fa1e f18a 	uxtah	r1, lr, sl
 8009f48:	b2a3      	uxth	r3, r4
 8009f4a:	1ac9      	subs	r1, r1, r3
 8009f4c:	0c23      	lsrs	r3, r4, #16
 8009f4e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009f52:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009f56:	b289      	uxth	r1, r1
 8009f58:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009f5c:	45c8      	cmp	r8, r9
 8009f5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009f62:	4694      	mov	ip, r2
 8009f64:	f845 3b04 	str.w	r3, [r5], #4
 8009f68:	d8e8      	bhi.n	8009f3c <__mdiff+0x5c>
 8009f6a:	45bc      	cmp	ip, r7
 8009f6c:	d304      	bcc.n	8009f78 <__mdiff+0x98>
 8009f6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009f72:	b183      	cbz	r3, 8009f96 <__mdiff+0xb6>
 8009f74:	6106      	str	r6, [r0, #16]
 8009f76:	e7c5      	b.n	8009f04 <__mdiff+0x24>
 8009f78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009f7c:	fa1e f381 	uxtah	r3, lr, r1
 8009f80:	141a      	asrs	r2, r3, #16
 8009f82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f8c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009f90:	f845 3b04 	str.w	r3, [r5], #4
 8009f94:	e7e9      	b.n	8009f6a <__mdiff+0x8a>
 8009f96:	3e01      	subs	r6, #1
 8009f98:	e7e9      	b.n	8009f6e <__mdiff+0x8e>

08009f9a <__d2b>:
 8009f9a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f9e:	460e      	mov	r6, r1
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	ec59 8b10 	vmov	r8, r9, d0
 8009fa6:	4615      	mov	r5, r2
 8009fa8:	f7ff fd96 	bl	8009ad8 <_Balloc>
 8009fac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fb6:	bb34      	cbnz	r4, 800a006 <__d2b+0x6c>
 8009fb8:	9301      	str	r3, [sp, #4]
 8009fba:	f1b8 0300 	subs.w	r3, r8, #0
 8009fbe:	d027      	beq.n	800a010 <__d2b+0x76>
 8009fc0:	a802      	add	r0, sp, #8
 8009fc2:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009fc6:	f7ff fe0f 	bl	8009be8 <__lo0bits>
 8009fca:	9900      	ldr	r1, [sp, #0]
 8009fcc:	b1f0      	cbz	r0, 800a00c <__d2b+0x72>
 8009fce:	9a01      	ldr	r2, [sp, #4]
 8009fd0:	f1c0 0320 	rsb	r3, r0, #32
 8009fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd8:	430b      	orrs	r3, r1
 8009fda:	40c2      	lsrs	r2, r0
 8009fdc:	617b      	str	r3, [r7, #20]
 8009fde:	9201      	str	r2, [sp, #4]
 8009fe0:	9b01      	ldr	r3, [sp, #4]
 8009fe2:	61bb      	str	r3, [r7, #24]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	bf14      	ite	ne
 8009fe8:	2102      	movne	r1, #2
 8009fea:	2101      	moveq	r1, #1
 8009fec:	6139      	str	r1, [r7, #16]
 8009fee:	b1c4      	cbz	r4, 800a022 <__d2b+0x88>
 8009ff0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009ff4:	4404      	add	r4, r0
 8009ff6:	6034      	str	r4, [r6, #0]
 8009ff8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ffc:	6028      	str	r0, [r5, #0]
 8009ffe:	4638      	mov	r0, r7
 800a000:	b003      	add	sp, #12
 800a002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a00a:	e7d5      	b.n	8009fb8 <__d2b+0x1e>
 800a00c:	6179      	str	r1, [r7, #20]
 800a00e:	e7e7      	b.n	8009fe0 <__d2b+0x46>
 800a010:	a801      	add	r0, sp, #4
 800a012:	f7ff fde9 	bl	8009be8 <__lo0bits>
 800a016:	9b01      	ldr	r3, [sp, #4]
 800a018:	617b      	str	r3, [r7, #20]
 800a01a:	2101      	movs	r1, #1
 800a01c:	6139      	str	r1, [r7, #16]
 800a01e:	3020      	adds	r0, #32
 800a020:	e7e5      	b.n	8009fee <__d2b+0x54>
 800a022:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a026:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a02a:	6030      	str	r0, [r6, #0]
 800a02c:	6918      	ldr	r0, [r3, #16]
 800a02e:	f7ff fdbc 	bl	8009baa <__hi0bits>
 800a032:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a036:	e7e1      	b.n	8009ffc <__d2b+0x62>

0800a038 <frexp>:
 800a038:	b570      	push	{r4, r5, r6, lr}
 800a03a:	2100      	movs	r1, #0
 800a03c:	ec55 4b10 	vmov	r4, r5, d0
 800a040:	6001      	str	r1, [r0, #0]
 800a042:	4916      	ldr	r1, [pc, #88]	; (800a09c <frexp+0x64>)
 800a044:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a048:	428b      	cmp	r3, r1
 800a04a:	4606      	mov	r6, r0
 800a04c:	462a      	mov	r2, r5
 800a04e:	dc22      	bgt.n	800a096 <frexp+0x5e>
 800a050:	ee10 1a10 	vmov	r1, s0
 800a054:	4319      	orrs	r1, r3
 800a056:	d01e      	beq.n	800a096 <frexp+0x5e>
 800a058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a05c:	da0d      	bge.n	800a07a <frexp+0x42>
 800a05e:	2200      	movs	r2, #0
 800a060:	4b0f      	ldr	r3, [pc, #60]	; (800a0a0 <frexp+0x68>)
 800a062:	ee10 0a10 	vmov	r0, s0
 800a066:	4629      	mov	r1, r5
 800a068:	f7f6 fae6 	bl	8000638 <__aeabi_dmul>
 800a06c:	460a      	mov	r2, r1
 800a06e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a072:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800a076:	4604      	mov	r4, r0
 800a078:	6031      	str	r1, [r6, #0]
 800a07a:	6831      	ldr	r1, [r6, #0]
 800a07c:	151b      	asrs	r3, r3, #20
 800a07e:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a082:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a086:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800a08a:	440b      	add	r3, r1
 800a08c:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a090:	6033      	str	r3, [r6, #0]
 800a092:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800a096:	ec45 4b10 	vmov	d0, r4, r5
 800a09a:	bd70      	pop	{r4, r5, r6, pc}
 800a09c:	7fefffff 	.word	0x7fefffff
 800a0a0:	43500000 	.word	0x43500000

0800a0a4 <_sbrk_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4c06      	ldr	r4, [pc, #24]	; (800a0c0 <_sbrk_r+0x1c>)
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	6023      	str	r3, [r4, #0]
 800a0b0:	f7f7 fc52 	bl	8001958 <_sbrk>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d102      	bne.n	800a0be <_sbrk_r+0x1a>
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	b103      	cbz	r3, 800a0be <_sbrk_r+0x1a>
 800a0bc:	602b      	str	r3, [r5, #0]
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	20000d34 	.word	0x20000d34

0800a0c4 <strncpy>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	3901      	subs	r1, #1
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	b902      	cbnz	r2, 800a0ce <strncpy+0xa>
 800a0cc:	bd70      	pop	{r4, r5, r6, pc}
 800a0ce:	4623      	mov	r3, r4
 800a0d0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a0d4:	f803 5b01 	strb.w	r5, [r3], #1
 800a0d8:	1e56      	subs	r6, r2, #1
 800a0da:	b92d      	cbnz	r5, 800a0e8 <strncpy+0x24>
 800a0dc:	4414      	add	r4, r2
 800a0de:	42a3      	cmp	r3, r4
 800a0e0:	d0f4      	beq.n	800a0cc <strncpy+0x8>
 800a0e2:	f803 5b01 	strb.w	r5, [r3], #1
 800a0e6:	e7fa      	b.n	800a0de <strncpy+0x1a>
 800a0e8:	461c      	mov	r4, r3
 800a0ea:	4632      	mov	r2, r6
 800a0ec:	e7ed      	b.n	800a0ca <strncpy+0x6>

0800a0ee <__ssprint_r>:
 800a0ee:	6893      	ldr	r3, [r2, #8]
 800a0f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f4:	4681      	mov	r9, r0
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	4616      	mov	r6, r2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d05e      	beq.n	800a1bc <__ssprint_r+0xce>
 800a0fe:	f04f 0b00 	mov.w	fp, #0
 800a102:	f8d2 a000 	ldr.w	sl, [r2]
 800a106:	465f      	mov	r7, fp
 800a108:	b357      	cbz	r7, 800a160 <__ssprint_r+0x72>
 800a10a:	68a3      	ldr	r3, [r4, #8]
 800a10c:	429f      	cmp	r7, r3
 800a10e:	d340      	bcc.n	800a192 <__ssprint_r+0xa4>
 800a110:	89a2      	ldrh	r2, [r4, #12]
 800a112:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a116:	d03c      	beq.n	800a192 <__ssprint_r+0xa4>
 800a118:	6825      	ldr	r5, [r4, #0]
 800a11a:	6921      	ldr	r1, [r4, #16]
 800a11c:	eba5 0801 	sub.w	r8, r5, r1
 800a120:	6965      	ldr	r5, [r4, #20]
 800a122:	2302      	movs	r3, #2
 800a124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a128:	fb95 f5f3 	sdiv	r5, r5, r3
 800a12c:	f108 0301 	add.w	r3, r8, #1
 800a130:	443b      	add	r3, r7
 800a132:	429d      	cmp	r5, r3
 800a134:	bf38      	it	cc
 800a136:	461d      	movcc	r5, r3
 800a138:	0553      	lsls	r3, r2, #21
 800a13a:	d544      	bpl.n	800a1c6 <__ssprint_r+0xd8>
 800a13c:	4629      	mov	r1, r5
 800a13e:	4648      	mov	r0, r9
 800a140:	f7ff fa7c 	bl	800963c <_malloc_r>
 800a144:	b988      	cbnz	r0, 800a16a <__ssprint_r+0x7c>
 800a146:	230c      	movs	r3, #12
 800a148:	f8c9 3000 	str.w	r3, [r9]
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	2300      	movs	r3, #0
 800a156:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800a15a:	f04f 30ff 	mov.w	r0, #4294967295
 800a15e:	e02f      	b.n	800a1c0 <__ssprint_r+0xd2>
 800a160:	e9da b700 	ldrd	fp, r7, [sl]
 800a164:	f10a 0a08 	add.w	sl, sl, #8
 800a168:	e7ce      	b.n	800a108 <__ssprint_r+0x1a>
 800a16a:	4642      	mov	r2, r8
 800a16c:	6921      	ldr	r1, [r4, #16]
 800a16e:	9001      	str	r0, [sp, #4]
 800a170:	f7ff fc9a 	bl	8009aa8 <memcpy>
 800a174:	89a2      	ldrh	r2, [r4, #12]
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a17c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a180:	81a2      	strh	r2, [r4, #12]
 800a182:	6123      	str	r3, [r4, #16]
 800a184:	6165      	str	r5, [r4, #20]
 800a186:	4443      	add	r3, r8
 800a188:	eba5 0508 	sub.w	r5, r5, r8
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	60a5      	str	r5, [r4, #8]
 800a190:	463b      	mov	r3, r7
 800a192:	42bb      	cmp	r3, r7
 800a194:	bf28      	it	cs
 800a196:	463b      	movcs	r3, r7
 800a198:	461a      	mov	r2, r3
 800a19a:	4659      	mov	r1, fp
 800a19c:	6820      	ldr	r0, [r4, #0]
 800a19e:	9301      	str	r3, [sp, #4]
 800a1a0:	f000 f869 	bl	800a276 <memmove>
 800a1a4:	68a2      	ldr	r2, [r4, #8]
 800a1a6:	9b01      	ldr	r3, [sp, #4]
 800a1a8:	1ad2      	subs	r2, r2, r3
 800a1aa:	60a2      	str	r2, [r4, #8]
 800a1ac:	6822      	ldr	r2, [r4, #0]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	68b3      	ldr	r3, [r6, #8]
 800a1b4:	1bdf      	subs	r7, r3, r7
 800a1b6:	60b7      	str	r7, [r6, #8]
 800a1b8:	2f00      	cmp	r7, #0
 800a1ba:	d1d1      	bne.n	800a160 <__ssprint_r+0x72>
 800a1bc:	2000      	movs	r0, #0
 800a1be:	6070      	str	r0, [r6, #4]
 800a1c0:	b003      	add	sp, #12
 800a1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	4648      	mov	r0, r9
 800a1ca:	f000 f86d 	bl	800a2a8 <_realloc_r>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d1d6      	bne.n	800a182 <__ssprint_r+0x94>
 800a1d4:	6921      	ldr	r1, [r4, #16]
 800a1d6:	4648      	mov	r0, r9
 800a1d8:	f7ff f966 	bl	80094a8 <_free_r>
 800a1dc:	e7b3      	b.n	800a146 <__ssprint_r+0x58>

0800a1de <sysconf>:
 800a1de:	2808      	cmp	r0, #8
 800a1e0:	b508      	push	{r3, lr}
 800a1e2:	d006      	beq.n	800a1f2 <sysconf+0x14>
 800a1e4:	f7fc ffea 	bl	80071bc <__errno>
 800a1e8:	2316      	movs	r3, #22
 800a1ea:	6003      	str	r3, [r0, #0]
 800a1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f0:	bd08      	pop	{r3, pc}
 800a1f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a1f6:	e7fb      	b.n	800a1f0 <sysconf+0x12>

0800a1f8 <_calloc_r>:
 800a1f8:	b510      	push	{r4, lr}
 800a1fa:	4351      	muls	r1, r2
 800a1fc:	f7ff fa1e 	bl	800963c <_malloc_r>
 800a200:	4604      	mov	r4, r0
 800a202:	b198      	cbz	r0, 800a22c <_calloc_r+0x34>
 800a204:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a208:	f022 0203 	bic.w	r2, r2, #3
 800a20c:	3a04      	subs	r2, #4
 800a20e:	2a24      	cmp	r2, #36	; 0x24
 800a210:	d81b      	bhi.n	800a24a <_calloc_r+0x52>
 800a212:	2a13      	cmp	r2, #19
 800a214:	d917      	bls.n	800a246 <_calloc_r+0x4e>
 800a216:	2100      	movs	r1, #0
 800a218:	2a1b      	cmp	r2, #27
 800a21a:	e9c0 1100 	strd	r1, r1, [r0]
 800a21e:	d807      	bhi.n	800a230 <_calloc_r+0x38>
 800a220:	f100 0308 	add.w	r3, r0, #8
 800a224:	2200      	movs	r2, #0
 800a226:	e9c3 2200 	strd	r2, r2, [r3]
 800a22a:	609a      	str	r2, [r3, #8]
 800a22c:	4620      	mov	r0, r4
 800a22e:	bd10      	pop	{r4, pc}
 800a230:	2a24      	cmp	r2, #36	; 0x24
 800a232:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800a236:	bf11      	iteee	ne
 800a238:	f100 0310 	addne.w	r3, r0, #16
 800a23c:	6101      	streq	r1, [r0, #16]
 800a23e:	f100 0318 	addeq.w	r3, r0, #24
 800a242:	6141      	streq	r1, [r0, #20]
 800a244:	e7ee      	b.n	800a224 <_calloc_r+0x2c>
 800a246:	4603      	mov	r3, r0
 800a248:	e7ec      	b.n	800a224 <_calloc_r+0x2c>
 800a24a:	2100      	movs	r1, #0
 800a24c:	f7fc ffe0 	bl	8007210 <memset>
 800a250:	e7ec      	b.n	800a22c <_calloc_r+0x34>

0800a252 <__ascii_mbtowc>:
 800a252:	b082      	sub	sp, #8
 800a254:	b901      	cbnz	r1, 800a258 <__ascii_mbtowc+0x6>
 800a256:	a901      	add	r1, sp, #4
 800a258:	b142      	cbz	r2, 800a26c <__ascii_mbtowc+0x1a>
 800a25a:	b14b      	cbz	r3, 800a270 <__ascii_mbtowc+0x1e>
 800a25c:	7813      	ldrb	r3, [r2, #0]
 800a25e:	600b      	str	r3, [r1, #0]
 800a260:	7812      	ldrb	r2, [r2, #0]
 800a262:	1c10      	adds	r0, r2, #0
 800a264:	bf18      	it	ne
 800a266:	2001      	movne	r0, #1
 800a268:	b002      	add	sp, #8
 800a26a:	4770      	bx	lr
 800a26c:	4610      	mov	r0, r2
 800a26e:	e7fb      	b.n	800a268 <__ascii_mbtowc+0x16>
 800a270:	f06f 0001 	mvn.w	r0, #1
 800a274:	e7f8      	b.n	800a268 <__ascii_mbtowc+0x16>

0800a276 <memmove>:
 800a276:	4288      	cmp	r0, r1
 800a278:	b510      	push	{r4, lr}
 800a27a:	eb01 0302 	add.w	r3, r1, r2
 800a27e:	d807      	bhi.n	800a290 <memmove+0x1a>
 800a280:	1e42      	subs	r2, r0, #1
 800a282:	4299      	cmp	r1, r3
 800a284:	d00a      	beq.n	800a29c <memmove+0x26>
 800a286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a28a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a28e:	e7f8      	b.n	800a282 <memmove+0xc>
 800a290:	4283      	cmp	r3, r0
 800a292:	d9f5      	bls.n	800a280 <memmove+0xa>
 800a294:	1881      	adds	r1, r0, r2
 800a296:	1ad2      	subs	r2, r2, r3
 800a298:	42d3      	cmn	r3, r2
 800a29a:	d100      	bne.n	800a29e <memmove+0x28>
 800a29c:	bd10      	pop	{r4, pc}
 800a29e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a2a6:	e7f7      	b.n	800a298 <memmove+0x22>

0800a2a8 <_realloc_r>:
 800a2a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	4682      	mov	sl, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	b929      	cbnz	r1, 800a2be <_realloc_r+0x16>
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	b003      	add	sp, #12
 800a2b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ba:	f7ff b9bf 	b.w	800963c <_malloc_r>
 800a2be:	9201      	str	r2, [sp, #4]
 800a2c0:	f7ff fbfe 	bl	8009ac0 <__malloc_lock>
 800a2c4:	9a01      	ldr	r2, [sp, #4]
 800a2c6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a2ca:	f102 080b 	add.w	r8, r2, #11
 800a2ce:	f1b8 0f16 	cmp.w	r8, #22
 800a2d2:	f1a4 0908 	sub.w	r9, r4, #8
 800a2d6:	f025 0603 	bic.w	r6, r5, #3
 800a2da:	d90b      	bls.n	800a2f4 <_realloc_r+0x4c>
 800a2dc:	f038 0807 	bics.w	r8, r8, #7
 800a2e0:	d50a      	bpl.n	800a2f8 <_realloc_r+0x50>
 800a2e2:	230c      	movs	r3, #12
 800a2e4:	f8ca 3000 	str.w	r3, [sl]
 800a2e8:	f04f 0b00 	mov.w	fp, #0
 800a2ec:	4658      	mov	r0, fp
 800a2ee:	b003      	add	sp, #12
 800a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f4:	f04f 0810 	mov.w	r8, #16
 800a2f8:	4590      	cmp	r8, r2
 800a2fa:	d3f2      	bcc.n	800a2e2 <_realloc_r+0x3a>
 800a2fc:	45b0      	cmp	r8, r6
 800a2fe:	f340 8170 	ble.w	800a5e2 <_realloc_r+0x33a>
 800a302:	49a9      	ldr	r1, [pc, #676]	; (800a5a8 <_realloc_r+0x300>)
 800a304:	9101      	str	r1, [sp, #4]
 800a306:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a30a:	eb09 0306 	add.w	r3, r9, r6
 800a30e:	459c      	cmp	ip, r3
 800a310:	6858      	ldr	r0, [r3, #4]
 800a312:	d005      	beq.n	800a320 <_realloc_r+0x78>
 800a314:	f020 0101 	bic.w	r1, r0, #1
 800a318:	4419      	add	r1, r3
 800a31a:	6849      	ldr	r1, [r1, #4]
 800a31c:	07cf      	lsls	r7, r1, #31
 800a31e:	d447      	bmi.n	800a3b0 <_realloc_r+0x108>
 800a320:	f020 0003 	bic.w	r0, r0, #3
 800a324:	459c      	cmp	ip, r3
 800a326:	eb06 0700 	add.w	r7, r6, r0
 800a32a:	d119      	bne.n	800a360 <_realloc_r+0xb8>
 800a32c:	f108 0110 	add.w	r1, r8, #16
 800a330:	42b9      	cmp	r1, r7
 800a332:	dc3f      	bgt.n	800a3b4 <_realloc_r+0x10c>
 800a334:	eb09 0308 	add.w	r3, r9, r8
 800a338:	9a01      	ldr	r2, [sp, #4]
 800a33a:	eba7 0708 	sub.w	r7, r7, r8
 800a33e:	f047 0701 	orr.w	r7, r7, #1
 800a342:	6093      	str	r3, [r2, #8]
 800a344:	605f      	str	r7, [r3, #4]
 800a346:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	ea43 0308 	orr.w	r3, r3, r8
 800a352:	f844 3c04 	str.w	r3, [r4, #-4]
 800a356:	4650      	mov	r0, sl
 800a358:	f7ff fbb8 	bl	8009acc <__malloc_unlock>
 800a35c:	46a3      	mov	fp, r4
 800a35e:	e7c5      	b.n	800a2ec <_realloc_r+0x44>
 800a360:	45b8      	cmp	r8, r7
 800a362:	dc27      	bgt.n	800a3b4 <_realloc_r+0x10c>
 800a364:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a368:	60da      	str	r2, [r3, #12]
 800a36a:	6093      	str	r3, [r2, #8]
 800a36c:	eba7 0008 	sub.w	r0, r7, r8
 800a370:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a374:	280f      	cmp	r0, #15
 800a376:	f002 0201 	and.w	r2, r2, #1
 800a37a:	eb09 0307 	add.w	r3, r9, r7
 800a37e:	f240 8132 	bls.w	800a5e6 <_realloc_r+0x33e>
 800a382:	eb09 0108 	add.w	r1, r9, r8
 800a386:	ea48 0202 	orr.w	r2, r8, r2
 800a38a:	f040 0001 	orr.w	r0, r0, #1
 800a38e:	f8c9 2004 	str.w	r2, [r9, #4]
 800a392:	6048      	str	r0, [r1, #4]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	f042 0201 	orr.w	r2, r2, #1
 800a39a:	605a      	str	r2, [r3, #4]
 800a39c:	3108      	adds	r1, #8
 800a39e:	4650      	mov	r0, sl
 800a3a0:	f7ff f882 	bl	80094a8 <_free_r>
 800a3a4:	4650      	mov	r0, sl
 800a3a6:	f7ff fb91 	bl	8009acc <__malloc_unlock>
 800a3aa:	f109 0b08 	add.w	fp, r9, #8
 800a3ae:	e79d      	b.n	800a2ec <_realloc_r+0x44>
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	07e9      	lsls	r1, r5, #31
 800a3b6:	f100 80c6 	bmi.w	800a546 <_realloc_r+0x29e>
 800a3ba:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a3be:	eba9 0505 	sub.w	r5, r9, r5
 800a3c2:	6869      	ldr	r1, [r5, #4]
 800a3c4:	f021 0103 	bic.w	r1, r1, #3
 800a3c8:	eb01 0b06 	add.w	fp, r1, r6
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 8086 	beq.w	800a4de <_realloc_r+0x236>
 800a3d2:	459c      	cmp	ip, r3
 800a3d4:	eb00 070b 	add.w	r7, r0, fp
 800a3d8:	d149      	bne.n	800a46e <_realloc_r+0x1c6>
 800a3da:	f108 0310 	add.w	r3, r8, #16
 800a3de:	42bb      	cmp	r3, r7
 800a3e0:	dc7d      	bgt.n	800a4de <_realloc_r+0x236>
 800a3e2:	46ab      	mov	fp, r5
 800a3e4:	68eb      	ldr	r3, [r5, #12]
 800a3e6:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800a3ea:	60d3      	str	r3, [r2, #12]
 800a3ec:	609a      	str	r2, [r3, #8]
 800a3ee:	1f32      	subs	r2, r6, #4
 800a3f0:	2a24      	cmp	r2, #36	; 0x24
 800a3f2:	d837      	bhi.n	800a464 <_realloc_r+0x1bc>
 800a3f4:	2a13      	cmp	r2, #19
 800a3f6:	d933      	bls.n	800a460 <_realloc_r+0x1b8>
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	60ab      	str	r3, [r5, #8]
 800a3fc:	6863      	ldr	r3, [r4, #4]
 800a3fe:	60eb      	str	r3, [r5, #12]
 800a400:	2a1b      	cmp	r2, #27
 800a402:	d81b      	bhi.n	800a43c <_realloc_r+0x194>
 800a404:	3408      	adds	r4, #8
 800a406:	f105 0310 	add.w	r3, r5, #16
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	6862      	ldr	r2, [r4, #4]
 800a410:	605a      	str	r2, [r3, #4]
 800a412:	68a2      	ldr	r2, [r4, #8]
 800a414:	609a      	str	r2, [r3, #8]
 800a416:	eb05 0308 	add.w	r3, r5, r8
 800a41a:	9a01      	ldr	r2, [sp, #4]
 800a41c:	eba7 0708 	sub.w	r7, r7, r8
 800a420:	f047 0701 	orr.w	r7, r7, #1
 800a424:	6093      	str	r3, [r2, #8]
 800a426:	605f      	str	r7, [r3, #4]
 800a428:	686b      	ldr	r3, [r5, #4]
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	ea43 0308 	orr.w	r3, r3, r8
 800a432:	606b      	str	r3, [r5, #4]
 800a434:	4650      	mov	r0, sl
 800a436:	f7ff fb49 	bl	8009acc <__malloc_unlock>
 800a43a:	e757      	b.n	800a2ec <_realloc_r+0x44>
 800a43c:	68a3      	ldr	r3, [r4, #8]
 800a43e:	612b      	str	r3, [r5, #16]
 800a440:	68e3      	ldr	r3, [r4, #12]
 800a442:	616b      	str	r3, [r5, #20]
 800a444:	2a24      	cmp	r2, #36	; 0x24
 800a446:	bf01      	itttt	eq
 800a448:	6923      	ldreq	r3, [r4, #16]
 800a44a:	61ab      	streq	r3, [r5, #24]
 800a44c:	6962      	ldreq	r2, [r4, #20]
 800a44e:	61ea      	streq	r2, [r5, #28]
 800a450:	bf19      	ittee	ne
 800a452:	3410      	addne	r4, #16
 800a454:	f105 0318 	addne.w	r3, r5, #24
 800a458:	f105 0320 	addeq.w	r3, r5, #32
 800a45c:	3418      	addeq	r4, #24
 800a45e:	e7d4      	b.n	800a40a <_realloc_r+0x162>
 800a460:	465b      	mov	r3, fp
 800a462:	e7d2      	b.n	800a40a <_realloc_r+0x162>
 800a464:	4621      	mov	r1, r4
 800a466:	4658      	mov	r0, fp
 800a468:	f7ff ff05 	bl	800a276 <memmove>
 800a46c:	e7d3      	b.n	800a416 <_realloc_r+0x16e>
 800a46e:	45b8      	cmp	r8, r7
 800a470:	dc35      	bgt.n	800a4de <_realloc_r+0x236>
 800a472:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a476:	4628      	mov	r0, r5
 800a478:	60da      	str	r2, [r3, #12]
 800a47a:	6093      	str	r3, [r2, #8]
 800a47c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a480:	68eb      	ldr	r3, [r5, #12]
 800a482:	60d3      	str	r3, [r2, #12]
 800a484:	609a      	str	r2, [r3, #8]
 800a486:	1f32      	subs	r2, r6, #4
 800a488:	2a24      	cmp	r2, #36	; 0x24
 800a48a:	d824      	bhi.n	800a4d6 <_realloc_r+0x22e>
 800a48c:	2a13      	cmp	r2, #19
 800a48e:	d908      	bls.n	800a4a2 <_realloc_r+0x1fa>
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	60ab      	str	r3, [r5, #8]
 800a494:	6863      	ldr	r3, [r4, #4]
 800a496:	60eb      	str	r3, [r5, #12]
 800a498:	2a1b      	cmp	r2, #27
 800a49a:	d80a      	bhi.n	800a4b2 <_realloc_r+0x20a>
 800a49c:	3408      	adds	r4, #8
 800a49e:	f105 0010 	add.w	r0, r5, #16
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	6003      	str	r3, [r0, #0]
 800a4a6:	6863      	ldr	r3, [r4, #4]
 800a4a8:	6043      	str	r3, [r0, #4]
 800a4aa:	68a3      	ldr	r3, [r4, #8]
 800a4ac:	6083      	str	r3, [r0, #8]
 800a4ae:	46a9      	mov	r9, r5
 800a4b0:	e75c      	b.n	800a36c <_realloc_r+0xc4>
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	612b      	str	r3, [r5, #16]
 800a4b6:	68e3      	ldr	r3, [r4, #12]
 800a4b8:	616b      	str	r3, [r5, #20]
 800a4ba:	2a24      	cmp	r2, #36	; 0x24
 800a4bc:	bf01      	itttt	eq
 800a4be:	6923      	ldreq	r3, [r4, #16]
 800a4c0:	61ab      	streq	r3, [r5, #24]
 800a4c2:	6963      	ldreq	r3, [r4, #20]
 800a4c4:	61eb      	streq	r3, [r5, #28]
 800a4c6:	bf19      	ittee	ne
 800a4c8:	3410      	addne	r4, #16
 800a4ca:	f105 0018 	addne.w	r0, r5, #24
 800a4ce:	f105 0020 	addeq.w	r0, r5, #32
 800a4d2:	3418      	addeq	r4, #24
 800a4d4:	e7e5      	b.n	800a4a2 <_realloc_r+0x1fa>
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	f7ff fecd 	bl	800a276 <memmove>
 800a4dc:	e7e7      	b.n	800a4ae <_realloc_r+0x206>
 800a4de:	45d8      	cmp	r8, fp
 800a4e0:	dc31      	bgt.n	800a546 <_realloc_r+0x29e>
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	68eb      	ldr	r3, [r5, #12]
 800a4e6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a4ea:	60d3      	str	r3, [r2, #12]
 800a4ec:	609a      	str	r2, [r3, #8]
 800a4ee:	1f32      	subs	r2, r6, #4
 800a4f0:	2a24      	cmp	r2, #36	; 0x24
 800a4f2:	d824      	bhi.n	800a53e <_realloc_r+0x296>
 800a4f4:	2a13      	cmp	r2, #19
 800a4f6:	d908      	bls.n	800a50a <_realloc_r+0x262>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	60ab      	str	r3, [r5, #8]
 800a4fc:	6863      	ldr	r3, [r4, #4]
 800a4fe:	60eb      	str	r3, [r5, #12]
 800a500:	2a1b      	cmp	r2, #27
 800a502:	d80a      	bhi.n	800a51a <_realloc_r+0x272>
 800a504:	3408      	adds	r4, #8
 800a506:	f105 0010 	add.w	r0, r5, #16
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	6003      	str	r3, [r0, #0]
 800a50e:	6863      	ldr	r3, [r4, #4]
 800a510:	6043      	str	r3, [r0, #4]
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	6083      	str	r3, [r0, #8]
 800a516:	465f      	mov	r7, fp
 800a518:	e7c9      	b.n	800a4ae <_realloc_r+0x206>
 800a51a:	68a3      	ldr	r3, [r4, #8]
 800a51c:	612b      	str	r3, [r5, #16]
 800a51e:	68e3      	ldr	r3, [r4, #12]
 800a520:	616b      	str	r3, [r5, #20]
 800a522:	2a24      	cmp	r2, #36	; 0x24
 800a524:	bf01      	itttt	eq
 800a526:	6923      	ldreq	r3, [r4, #16]
 800a528:	61ab      	streq	r3, [r5, #24]
 800a52a:	6963      	ldreq	r3, [r4, #20]
 800a52c:	61eb      	streq	r3, [r5, #28]
 800a52e:	bf19      	ittee	ne
 800a530:	3410      	addne	r4, #16
 800a532:	f105 0018 	addne.w	r0, r5, #24
 800a536:	f105 0020 	addeq.w	r0, r5, #32
 800a53a:	3418      	addeq	r4, #24
 800a53c:	e7e5      	b.n	800a50a <_realloc_r+0x262>
 800a53e:	4621      	mov	r1, r4
 800a540:	f7ff fe99 	bl	800a276 <memmove>
 800a544:	e7e7      	b.n	800a516 <_realloc_r+0x26e>
 800a546:	4611      	mov	r1, r2
 800a548:	4650      	mov	r0, sl
 800a54a:	f7ff f877 	bl	800963c <_malloc_r>
 800a54e:	4683      	mov	fp, r0
 800a550:	2800      	cmp	r0, #0
 800a552:	f43f af6f 	beq.w	800a434 <_realloc_r+0x18c>
 800a556:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a55a:	f023 0301 	bic.w	r3, r3, #1
 800a55e:	444b      	add	r3, r9
 800a560:	f1a0 0208 	sub.w	r2, r0, #8
 800a564:	4293      	cmp	r3, r2
 800a566:	d105      	bne.n	800a574 <_realloc_r+0x2cc>
 800a568:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a56c:	f027 0703 	bic.w	r7, r7, #3
 800a570:	4437      	add	r7, r6
 800a572:	e6fb      	b.n	800a36c <_realloc_r+0xc4>
 800a574:	1f32      	subs	r2, r6, #4
 800a576:	2a24      	cmp	r2, #36	; 0x24
 800a578:	d82f      	bhi.n	800a5da <_realloc_r+0x332>
 800a57a:	2a13      	cmp	r2, #19
 800a57c:	d92a      	bls.n	800a5d4 <_realloc_r+0x32c>
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	6003      	str	r3, [r0, #0]
 800a582:	6863      	ldr	r3, [r4, #4]
 800a584:	6043      	str	r3, [r0, #4]
 800a586:	2a1b      	cmp	r2, #27
 800a588:	d810      	bhi.n	800a5ac <_realloc_r+0x304>
 800a58a:	f104 0208 	add.w	r2, r4, #8
 800a58e:	f100 0308 	add.w	r3, r0, #8
 800a592:	6811      	ldr	r1, [r2, #0]
 800a594:	6019      	str	r1, [r3, #0]
 800a596:	6851      	ldr	r1, [r2, #4]
 800a598:	6059      	str	r1, [r3, #4]
 800a59a:	6892      	ldr	r2, [r2, #8]
 800a59c:	609a      	str	r2, [r3, #8]
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4650      	mov	r0, sl
 800a5a2:	f7fe ff81 	bl	80094a8 <_free_r>
 800a5a6:	e745      	b.n	800a434 <_realloc_r+0x18c>
 800a5a8:	2000046c 	.word	0x2000046c
 800a5ac:	68a3      	ldr	r3, [r4, #8]
 800a5ae:	6083      	str	r3, [r0, #8]
 800a5b0:	68e3      	ldr	r3, [r4, #12]
 800a5b2:	60c3      	str	r3, [r0, #12]
 800a5b4:	2a24      	cmp	r2, #36	; 0x24
 800a5b6:	bf01      	itttt	eq
 800a5b8:	6923      	ldreq	r3, [r4, #16]
 800a5ba:	6103      	streq	r3, [r0, #16]
 800a5bc:	6961      	ldreq	r1, [r4, #20]
 800a5be:	6141      	streq	r1, [r0, #20]
 800a5c0:	bf19      	ittee	ne
 800a5c2:	f104 0210 	addne.w	r2, r4, #16
 800a5c6:	f100 0310 	addne.w	r3, r0, #16
 800a5ca:	f104 0218 	addeq.w	r2, r4, #24
 800a5ce:	f100 0318 	addeq.w	r3, r0, #24
 800a5d2:	e7de      	b.n	800a592 <_realloc_r+0x2ea>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	e7db      	b.n	800a592 <_realloc_r+0x2ea>
 800a5da:	4621      	mov	r1, r4
 800a5dc:	f7ff fe4b 	bl	800a276 <memmove>
 800a5e0:	e7dd      	b.n	800a59e <_realloc_r+0x2f6>
 800a5e2:	4637      	mov	r7, r6
 800a5e4:	e6c2      	b.n	800a36c <_realloc_r+0xc4>
 800a5e6:	4317      	orrs	r7, r2
 800a5e8:	f8c9 7004 	str.w	r7, [r9, #4]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	f042 0201 	orr.w	r2, r2, #1
 800a5f2:	605a      	str	r2, [r3, #4]
 800a5f4:	e6d6      	b.n	800a3a4 <_realloc_r+0xfc>
 800a5f6:	bf00      	nop

0800a5f8 <__ascii_wctomb>:
 800a5f8:	b149      	cbz	r1, 800a60e <__ascii_wctomb+0x16>
 800a5fa:	2aff      	cmp	r2, #255	; 0xff
 800a5fc:	bf85      	ittet	hi
 800a5fe:	238a      	movhi	r3, #138	; 0x8a
 800a600:	6003      	strhi	r3, [r0, #0]
 800a602:	700a      	strbls	r2, [r1, #0]
 800a604:	f04f 30ff 	movhi.w	r0, #4294967295
 800a608:	bf98      	it	ls
 800a60a:	2001      	movls	r0, #1
 800a60c:	4770      	bx	lr
 800a60e:	4608      	mov	r0, r1
 800a610:	4770      	bx	lr
	...

0800a614 <_init>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	bf00      	nop
 800a618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61a:	bc08      	pop	{r3}
 800a61c:	469e      	mov	lr, r3
 800a61e:	4770      	bx	lr

0800a620 <_fini>:
 800a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a622:	bf00      	nop
 800a624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a626:	bc08      	pop	{r3}
 800a628:	469e      	mov	lr, r3
 800a62a:	4770      	bx	lr
