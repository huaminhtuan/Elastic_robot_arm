
elastic_actuator_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c848  08000200  08000200  00010200  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800ca48  0800ca48  0001ca48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce08  0800ce08  000209e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce08  0800ce08  0001ce08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce10  0800ce10  000209e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ce10  0800ce10  0001ce10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce18  0800ce18  0001ce18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e0  20000000  0800ce1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  200009e0  0800d7fc  000209e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e74  0800d7fc  00020e74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cf5  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032a5  00000000  00000000  00036705  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  000399b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  0003ad38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024676  00000000  00000000  0003bf30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a81  00000000  00000000  000605a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6153  00000000  00000000  00073027  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007f  00000000  00000000  0014917a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c00  00000000  00000000  001491fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200009e0 	.word	0x200009e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ca30 	.word	0x0800ca30

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200009e4 	.word	0x200009e4
 800023c:	0800ca30 	.word	0x0800ca30

08000240 <strlen>:
 8000240:	f890 f000 	pld	[r0]
 8000244:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000248:	f020 0107 	bic.w	r1, r0, #7
 800024c:	f06f 0c00 	mvn.w	ip, #0
 8000250:	f010 0407 	ands.w	r4, r0, #7
 8000254:	f891 f020 	pld	[r1, #32]
 8000258:	f040 8049 	bne.w	80002ee <strlen+0xae>
 800025c:	f04f 0400 	mov.w	r4, #0
 8000260:	f06f 0007 	mvn.w	r0, #7
 8000264:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000268:	f891 f040 	pld	[r1, #64]	; 0x40
 800026c:	f100 0008 	add.w	r0, r0, #8
 8000270:	fa82 f24c 	uadd8	r2, r2, ip
 8000274:	faa4 f28c 	sel	r2, r4, ip
 8000278:	fa83 f34c 	uadd8	r3, r3, ip
 800027c:	faa2 f38c 	sel	r3, r2, ip
 8000280:	bb4b      	cbnz	r3, 80002d6 <strlen+0x96>
 8000282:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000286:	fa82 f24c 	uadd8	r2, r2, ip
 800028a:	f100 0008 	add.w	r0, r0, #8
 800028e:	faa4 f28c 	sel	r2, r4, ip
 8000292:	fa83 f34c 	uadd8	r3, r3, ip
 8000296:	faa2 f38c 	sel	r3, r2, ip
 800029a:	b9e3      	cbnz	r3, 80002d6 <strlen+0x96>
 800029c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80002a0:	fa82 f24c 	uadd8	r2, r2, ip
 80002a4:	f100 0008 	add.w	r0, r0, #8
 80002a8:	faa4 f28c 	sel	r2, r4, ip
 80002ac:	fa83 f34c 	uadd8	r3, r3, ip
 80002b0:	faa2 f38c 	sel	r3, r2, ip
 80002b4:	b97b      	cbnz	r3, 80002d6 <strlen+0x96>
 80002b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80002ba:	f101 0120 	add.w	r1, r1, #32
 80002be:	fa82 f24c 	uadd8	r2, r2, ip
 80002c2:	f100 0008 	add.w	r0, r0, #8
 80002c6:	faa4 f28c 	sel	r2, r4, ip
 80002ca:	fa83 f34c 	uadd8	r3, r3, ip
 80002ce:	faa2 f38c 	sel	r3, r2, ip
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0c6      	beq.n	8000264 <strlen+0x24>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	bf04      	itt	eq
 80002da:	3004      	addeq	r0, #4
 80002dc:	461a      	moveq	r2, r3
 80002de:	ba12      	rev	r2, r2
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80002e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80002ec:	4770      	bx	lr
 80002ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80002f2:	f004 0503 	and.w	r5, r4, #3
 80002f6:	f1c4 0000 	rsb	r0, r4, #0
 80002fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80002fe:	f014 0f04 	tst.w	r4, #4
 8000302:	f891 f040 	pld	[r1, #64]	; 0x40
 8000306:	fa0c f505 	lsl.w	r5, ip, r5
 800030a:	ea62 0205 	orn	r2, r2, r5
 800030e:	bf1c      	itt	ne
 8000310:	ea63 0305 	ornne	r3, r3, r5
 8000314:	4662      	movne	r2, ip
 8000316:	f04f 0400 	mov.w	r4, #0
 800031a:	e7a9      	b.n	8000270 <strlen+0x30>
 800031c:	0000      	movs	r0, r0
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <memcpy>:
 80003c0:	4684      	mov	ip, r0
 80003c2:	ea41 0300 	orr.w	r3, r1, r0
 80003c6:	f013 0303 	ands.w	r3, r3, #3
 80003ca:	d16d      	bne.n	80004a8 <memcpy+0xe8>
 80003cc:	3a40      	subs	r2, #64	; 0x40
 80003ce:	d341      	bcc.n	8000454 <memcpy+0x94>
 80003d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d4:	f840 3b04 	str.w	r3, [r0], #4
 80003d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003dc:	f840 3b04 	str.w	r3, [r0], #4
 80003e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e4:	f840 3b04 	str.w	r3, [r0], #4
 80003e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ec:	f840 3b04 	str.w	r3, [r0], #4
 80003f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f4:	f840 3b04 	str.w	r3, [r0], #4
 80003f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003fc:	f840 3b04 	str.w	r3, [r0], #4
 8000400:	f851 3b04 	ldr.w	r3, [r1], #4
 8000404:	f840 3b04 	str.w	r3, [r0], #4
 8000408:	f851 3b04 	ldr.w	r3, [r1], #4
 800040c:	f840 3b04 	str.w	r3, [r0], #4
 8000410:	f851 3b04 	ldr.w	r3, [r1], #4
 8000414:	f840 3b04 	str.w	r3, [r0], #4
 8000418:	f851 3b04 	ldr.w	r3, [r1], #4
 800041c:	f840 3b04 	str.w	r3, [r0], #4
 8000420:	f851 3b04 	ldr.w	r3, [r1], #4
 8000424:	f840 3b04 	str.w	r3, [r0], #4
 8000428:	f851 3b04 	ldr.w	r3, [r1], #4
 800042c:	f840 3b04 	str.w	r3, [r0], #4
 8000430:	f851 3b04 	ldr.w	r3, [r1], #4
 8000434:	f840 3b04 	str.w	r3, [r0], #4
 8000438:	f851 3b04 	ldr.w	r3, [r1], #4
 800043c:	f840 3b04 	str.w	r3, [r0], #4
 8000440:	f851 3b04 	ldr.w	r3, [r1], #4
 8000444:	f840 3b04 	str.w	r3, [r0], #4
 8000448:	f851 3b04 	ldr.w	r3, [r1], #4
 800044c:	f840 3b04 	str.w	r3, [r0], #4
 8000450:	3a40      	subs	r2, #64	; 0x40
 8000452:	d2bd      	bcs.n	80003d0 <memcpy+0x10>
 8000454:	3230      	adds	r2, #48	; 0x30
 8000456:	d311      	bcc.n	800047c <memcpy+0xbc>
 8000458:	f851 3b04 	ldr.w	r3, [r1], #4
 800045c:	f840 3b04 	str.w	r3, [r0], #4
 8000460:	f851 3b04 	ldr.w	r3, [r1], #4
 8000464:	f840 3b04 	str.w	r3, [r0], #4
 8000468:	f851 3b04 	ldr.w	r3, [r1], #4
 800046c:	f840 3b04 	str.w	r3, [r0], #4
 8000470:	f851 3b04 	ldr.w	r3, [r1], #4
 8000474:	f840 3b04 	str.w	r3, [r0], #4
 8000478:	3a10      	subs	r2, #16
 800047a:	d2ed      	bcs.n	8000458 <memcpy+0x98>
 800047c:	320c      	adds	r2, #12
 800047e:	d305      	bcc.n	800048c <memcpy+0xcc>
 8000480:	f851 3b04 	ldr.w	r3, [r1], #4
 8000484:	f840 3b04 	str.w	r3, [r0], #4
 8000488:	3a04      	subs	r2, #4
 800048a:	d2f9      	bcs.n	8000480 <memcpy+0xc0>
 800048c:	3204      	adds	r2, #4
 800048e:	d008      	beq.n	80004a2 <memcpy+0xe2>
 8000490:	07d2      	lsls	r2, r2, #31
 8000492:	bf1c      	itt	ne
 8000494:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000498:	f800 3b01 	strbne.w	r3, [r0], #1
 800049c:	d301      	bcc.n	80004a2 <memcpy+0xe2>
 800049e:	880b      	ldrh	r3, [r1, #0]
 80004a0:	8003      	strh	r3, [r0, #0]
 80004a2:	4660      	mov	r0, ip
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	2a08      	cmp	r2, #8
 80004aa:	d313      	bcc.n	80004d4 <memcpy+0x114>
 80004ac:	078b      	lsls	r3, r1, #30
 80004ae:	d08d      	beq.n	80003cc <memcpy+0xc>
 80004b0:	f010 0303 	ands.w	r3, r0, #3
 80004b4:	d08a      	beq.n	80003cc <memcpy+0xc>
 80004b6:	f1c3 0304 	rsb	r3, r3, #4
 80004ba:	1ad2      	subs	r2, r2, r3
 80004bc:	07db      	lsls	r3, r3, #31
 80004be:	bf1c      	itt	ne
 80004c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80004c4:	f800 3b01 	strbne.w	r3, [r0], #1
 80004c8:	d380      	bcc.n	80003cc <memcpy+0xc>
 80004ca:	f831 3b02 	ldrh.w	r3, [r1], #2
 80004ce:	f820 3b02 	strh.w	r3, [r0], #2
 80004d2:	e77b      	b.n	80003cc <memcpy+0xc>
 80004d4:	3a04      	subs	r2, #4
 80004d6:	d3d9      	bcc.n	800048c <memcpy+0xcc>
 80004d8:	3a01      	subs	r2, #1
 80004da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80004de:	f800 3b01 	strb.w	r3, [r0], #1
 80004e2:	d2f9      	bcs.n	80004d8 <memcpy+0x118>
 80004e4:	780b      	ldrb	r3, [r1, #0]
 80004e6:	7003      	strb	r3, [r0, #0]
 80004e8:	784b      	ldrb	r3, [r1, #1]
 80004ea:	7043      	strb	r3, [r0, #1]
 80004ec:	788b      	ldrb	r3, [r1, #2]
 80004ee:	7083      	strb	r3, [r0, #2]
 80004f0:	4660      	mov	r0, ip
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000632:	f1a4 0401 	sub.w	r4, r4, #1
 8000636:	d1e9      	bne.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_dmul>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8de 	bleq	8000a48 <__aeabi_dmul+0x1dc>
 800088c:	442c      	add	r4, r5
 800088e:	ea81 0603 	eor.w	r6, r1, r3
 8000892:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000896:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800089a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800089e:	bf18      	it	ne
 80008a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008ac:	d038      	beq.n	8000920 <__aeabi_dmul+0xb4>
 80008ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80008b2:	f04f 0500 	mov.w	r5, #0
 80008b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008c2:	f04f 0600 	mov.w	r6, #0
 80008c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008ca:	f09c 0f00 	teq	ip, #0
 80008ce:	bf18      	it	ne
 80008d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80008d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008e0:	d204      	bcs.n	80008ec <__aeabi_dmul+0x80>
 80008e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008e6:	416d      	adcs	r5, r5
 80008e8:	eb46 0606 	adc.w	r6, r6, r6
 80008ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000900:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000904:	bf88      	it	hi
 8000906:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090a:	d81e      	bhi.n	800094a <__aeabi_dmul+0xde>
 800090c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000910:	bf08      	it	eq
 8000912:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000924:	ea46 0101 	orr.w	r1, r6, r1
 8000928:	ea40 0002 	orr.w	r0, r0, r2
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	f300 80ab 	bgt.w	8000aa4 <__aeabi_dmul+0x238>
 800094e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000952:	bfde      	ittt	le
 8000954:	2000      	movle	r0, #0
 8000956:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800095a:	bd70      	pople	{r4, r5, r6, pc}
 800095c:	f1c4 0400 	rsb	r4, r4, #0
 8000960:	3c20      	subs	r4, #32
 8000962:	da35      	bge.n	80009d0 <__aeabi_dmul+0x164>
 8000964:	340c      	adds	r4, #12
 8000966:	dc1b      	bgt.n	80009a0 <__aeabi_dmul+0x134>
 8000968:	f104 0414 	add.w	r4, r4, #20
 800096c:	f1c4 0520 	rsb	r5, r4, #32
 8000970:	fa00 f305 	lsl.w	r3, r0, r5
 8000974:	fa20 f004 	lsr.w	r0, r0, r4
 8000978:	fa01 f205 	lsl.w	r2, r1, r5
 800097c:	ea40 0002 	orr.w	r0, r0, r2
 8000980:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000984:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000988:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800098c:	fa21 f604 	lsr.w	r6, r1, r4
 8000990:	eb42 0106 	adc.w	r1, r2, r6
 8000994:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000998:	bf08      	it	eq
 800099a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f1c4 040c 	rsb	r4, r4, #12
 80009a4:	f1c4 0520 	rsb	r5, r4, #32
 80009a8:	fa00 f304 	lsl.w	r3, r0, r4
 80009ac:	fa20 f005 	lsr.w	r0, r0, r5
 80009b0:	fa01 f204 	lsl.w	r2, r1, r4
 80009b4:	ea40 0002 	orr.w	r0, r0, r2
 80009b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009c0:	f141 0100 	adc.w	r1, r1, #0
 80009c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009c8:	bf08      	it	eq
 80009ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f1c4 0520 	rsb	r5, r4, #32
 80009d4:	fa00 f205 	lsl.w	r2, r0, r5
 80009d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80009dc:	fa20 f304 	lsr.w	r3, r0, r4
 80009e0:	fa01 f205 	lsl.w	r2, r1, r5
 80009e4:	ea43 0302 	orr.w	r3, r3, r2
 80009e8:	fa21 f004 	lsr.w	r0, r1, r4
 80009ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009f0:	fa21 f204 	lsr.w	r2, r1, r4
 80009f4:	ea20 0002 	bic.w	r0, r0, r2
 80009f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a00:	bf08      	it	eq
 8000a02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f094 0f00 	teq	r4, #0
 8000a0c:	d10f      	bne.n	8000a2e <__aeabi_dmul+0x1c2>
 8000a0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a12:	0040      	lsls	r0, r0, #1
 8000a14:	eb41 0101 	adc.w	r1, r1, r1
 8000a18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a1c:	bf08      	it	eq
 8000a1e:	3c01      	subeq	r4, #1
 8000a20:	d0f7      	beq.n	8000a12 <__aeabi_dmul+0x1a6>
 8000a22:	ea41 0106 	orr.w	r1, r1, r6
 8000a26:	f095 0f00 	teq	r5, #0
 8000a2a:	bf18      	it	ne
 8000a2c:	4770      	bxne	lr
 8000a2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a32:	0052      	lsls	r2, r2, #1
 8000a34:	eb43 0303 	adc.w	r3, r3, r3
 8000a38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a3c:	bf08      	it	eq
 8000a3e:	3d01      	subeq	r5, #1
 8000a40:	d0f7      	beq.n	8000a32 <__aeabi_dmul+0x1c6>
 8000a42:	ea43 0306 	orr.w	r3, r3, r6
 8000a46:	4770      	bx	lr
 8000a48:	ea94 0f0c 	teq	r4, ip
 8000a4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a50:	bf18      	it	ne
 8000a52:	ea95 0f0c 	teqne	r5, ip
 8000a56:	d00c      	beq.n	8000a72 <__aeabi_dmul+0x206>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	d1d1      	bne.n	8000a08 <__aeabi_dmul+0x19c>
 8000a64:	ea81 0103 	eor.w	r1, r1, r3
 8000a68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	bd70      	pop	{r4, r5, r6, pc}
 8000a72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a76:	bf06      	itte	eq
 8000a78:	4610      	moveq	r0, r2
 8000a7a:	4619      	moveq	r1, r3
 8000a7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a80:	d019      	beq.n	8000ab6 <__aeabi_dmul+0x24a>
 8000a82:	ea94 0f0c 	teq	r4, ip
 8000a86:	d102      	bne.n	8000a8e <__aeabi_dmul+0x222>
 8000a88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a8c:	d113      	bne.n	8000ab6 <__aeabi_dmul+0x24a>
 8000a8e:	ea95 0f0c 	teq	r5, ip
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_dmul+0x234>
 8000a94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a98:	bf1c      	itt	ne
 8000a9a:	4610      	movne	r0, r2
 8000a9c:	4619      	movne	r1, r3
 8000a9e:	d10a      	bne.n	8000ab6 <__aeabi_dmul+0x24a>
 8000aa0:	ea81 0103 	eor.w	r1, r1, r3
 8000aa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000aa8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000abe:	bd70      	pop	{r4, r5, r6, pc}

08000ac0 <__aeabi_ddiv>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ac6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000aca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ace:	bf1d      	ittte	ne
 8000ad0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ad4:	ea94 0f0c 	teqne	r4, ip
 8000ad8:	ea95 0f0c 	teqne	r5, ip
 8000adc:	f000 f8a7 	bleq	8000c2e <__aeabi_ddiv+0x16e>
 8000ae0:	eba4 0405 	sub.w	r4, r4, r5
 8000ae4:	ea81 0e03 	eor.w	lr, r1, r3
 8000ae8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000af0:	f000 8088 	beq.w	8000c04 <__aeabi_ddiv+0x144>
 8000af4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000af8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000afc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b04:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b10:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b18:	429d      	cmp	r5, r3
 8000b1a:	bf08      	it	eq
 8000b1c:	4296      	cmpeq	r6, r2
 8000b1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b22:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b26:	d202      	bcs.n	8000b2e <__aeabi_ddiv+0x6e>
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b2e:	1ab6      	subs	r6, r6, r2
 8000b30:	eb65 0503 	sbc.w	r5, r5, r3
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b42:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b46:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b4a:	bf22      	ittt	cs
 8000b4c:	1ab6      	subcs	r6, r6, r2
 8000b4e:	4675      	movcs	r5, lr
 8000b50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b54:	085b      	lsrs	r3, r3, #1
 8000b56:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b5a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b5e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b62:	bf22      	ittt	cs
 8000b64:	1ab6      	subcs	r6, r6, r2
 8000b66:	4675      	movcs	r5, lr
 8000b68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b6c:	085b      	lsrs	r3, r3, #1
 8000b6e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b72:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b76:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b7a:	bf22      	ittt	cs
 8000b7c:	1ab6      	subcs	r6, r6, r2
 8000b7e:	4675      	movcs	r5, lr
 8000b80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b92:	bf22      	ittt	cs
 8000b94:	1ab6      	subcs	r6, r6, r2
 8000b96:	4675      	movcs	r5, lr
 8000b98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b9c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000ba0:	d018      	beq.n	8000bd4 <__aeabi_ddiv+0x114>
 8000ba2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000ba6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000baa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bb2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bb6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bbe:	d1c0      	bne.n	8000b42 <__aeabi_ddiv+0x82>
 8000bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bc4:	d10b      	bne.n	8000bde <__aeabi_ddiv+0x11e>
 8000bc6:	ea41 0100 	orr.w	r1, r1, r0
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bd2:	e7b6      	b.n	8000b42 <__aeabi_ddiv+0x82>
 8000bd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bd8:	bf04      	itt	eq
 8000bda:	4301      	orreq	r1, r0
 8000bdc:	2000      	moveq	r0, #0
 8000bde:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000be2:	bf88      	it	hi
 8000be4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000be8:	f63f aeaf 	bhi.w	800094a <__aeabi_dmul+0xde>
 8000bec:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bf0:	bf04      	itt	eq
 8000bf2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bf6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bfa:	f150 0000 	adcs.w	r0, r0, #0
 8000bfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
 8000c04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c10:	bfc2      	ittt	gt
 8000c12:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c1a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c20:	f04f 0e00 	mov.w	lr, #0
 8000c24:	3c01      	subs	r4, #1
 8000c26:	e690      	b.n	800094a <__aeabi_dmul+0xde>
 8000c28:	ea45 0e06 	orr.w	lr, r5, r6
 8000c2c:	e68d      	b.n	800094a <__aeabi_dmul+0xde>
 8000c2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c32:	ea94 0f0c 	teq	r4, ip
 8000c36:	bf08      	it	eq
 8000c38:	ea95 0f0c 	teqeq	r5, ip
 8000c3c:	f43f af3b 	beq.w	8000ab6 <__aeabi_dmul+0x24a>
 8000c40:	ea94 0f0c 	teq	r4, ip
 8000c44:	d10a      	bne.n	8000c5c <__aeabi_ddiv+0x19c>
 8000c46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c4a:	f47f af34 	bne.w	8000ab6 <__aeabi_dmul+0x24a>
 8000c4e:	ea95 0f0c 	teq	r5, ip
 8000c52:	f47f af25 	bne.w	8000aa0 <__aeabi_dmul+0x234>
 8000c56:	4610      	mov	r0, r2
 8000c58:	4619      	mov	r1, r3
 8000c5a:	e72c      	b.n	8000ab6 <__aeabi_dmul+0x24a>
 8000c5c:	ea95 0f0c 	teq	r5, ip
 8000c60:	d106      	bne.n	8000c70 <__aeabi_ddiv+0x1b0>
 8000c62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c66:	f43f aefd 	beq.w	8000a64 <__aeabi_dmul+0x1f8>
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	e722      	b.n	8000ab6 <__aeabi_dmul+0x24a>
 8000c70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c74:	bf18      	it	ne
 8000c76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c7a:	f47f aec5 	bne.w	8000a08 <__aeabi_dmul+0x19c>
 8000c7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c82:	f47f af0d 	bne.w	8000aa0 <__aeabi_dmul+0x234>
 8000c86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c8a:	f47f aeeb 	bne.w	8000a64 <__aeabi_dmul+0x1f8>
 8000c8e:	e712      	b.n	8000ab6 <__aeabi_dmul+0x24a>

08000c90 <__gedf2>:
 8000c90:	f04f 3cff 	mov.w	ip, #4294967295
 8000c94:	e006      	b.n	8000ca4 <__cmpdf2+0x4>
 8000c96:	bf00      	nop

08000c98 <__ledf2>:
 8000c98:	f04f 0c01 	mov.w	ip, #1
 8000c9c:	e002      	b.n	8000ca4 <__cmpdf2+0x4>
 8000c9e:	bf00      	nop

08000ca0 <__cmpdf2>:
 8000ca0:	f04f 0c01 	mov.w	ip, #1
 8000ca4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ca8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cb4:	bf18      	it	ne
 8000cb6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cba:	d01b      	beq.n	8000cf4 <__cmpdf2+0x54>
 8000cbc:	b001      	add	sp, #4
 8000cbe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cc2:	bf0c      	ite	eq
 8000cc4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cc8:	ea91 0f03 	teqne	r1, r3
 8000ccc:	bf02      	ittt	eq
 8000cce:	ea90 0f02 	teqeq	r0, r2
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	4770      	bxeq	lr
 8000cd6:	f110 0f00 	cmn.w	r0, #0
 8000cda:	ea91 0f03 	teq	r1, r3
 8000cde:	bf58      	it	pl
 8000ce0:	4299      	cmppl	r1, r3
 8000ce2:	bf08      	it	eq
 8000ce4:	4290      	cmpeq	r0, r2
 8000ce6:	bf2c      	ite	cs
 8000ce8:	17d8      	asrcs	r0, r3, #31
 8000cea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cee:	f040 0001 	orr.w	r0, r0, #1
 8000cf2:	4770      	bx	lr
 8000cf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cfc:	d102      	bne.n	8000d04 <__cmpdf2+0x64>
 8000cfe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d02:	d107      	bne.n	8000d14 <__cmpdf2+0x74>
 8000d04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d0c:	d1d6      	bne.n	8000cbc <__cmpdf2+0x1c>
 8000d0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d12:	d0d3      	beq.n	8000cbc <__cmpdf2+0x1c>
 8000d14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <__aeabi_cdrcmple>:
 8000d1c:	4684      	mov	ip, r0
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4662      	mov	r2, ip
 8000d22:	468c      	mov	ip, r1
 8000d24:	4619      	mov	r1, r3
 8000d26:	4663      	mov	r3, ip
 8000d28:	e000      	b.n	8000d2c <__aeabi_cdcmpeq>
 8000d2a:	bf00      	nop

08000d2c <__aeabi_cdcmpeq>:
 8000d2c:	b501      	push	{r0, lr}
 8000d2e:	f7ff ffb7 	bl	8000ca0 <__cmpdf2>
 8000d32:	2800      	cmp	r0, #0
 8000d34:	bf48      	it	mi
 8000d36:	f110 0f00 	cmnmi.w	r0, #0
 8000d3a:	bd01      	pop	{r0, pc}

08000d3c <__aeabi_dcmpeq>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff fff4 	bl	8000d2c <__aeabi_cdcmpeq>
 8000d44:	bf0c      	ite	eq
 8000d46:	2001      	moveq	r0, #1
 8000d48:	2000      	movne	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_dcmplt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffea 	bl	8000d2c <__aeabi_cdcmpeq>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_dcmple>:
 8000d64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d68:	f7ff ffe0 	bl	8000d2c <__aeabi_cdcmpeq>
 8000d6c:	bf94      	ite	ls
 8000d6e:	2001      	movls	r0, #1
 8000d70:	2000      	movhi	r0, #0
 8000d72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d76:	bf00      	nop

08000d78 <__aeabi_dcmpge>:
 8000d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d7c:	f7ff ffce 	bl	8000d1c <__aeabi_cdrcmple>
 8000d80:	bf94      	ite	ls
 8000d82:	2001      	movls	r0, #1
 8000d84:	2000      	movhi	r0, #0
 8000d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8a:	bf00      	nop

08000d8c <__aeabi_dcmpgt>:
 8000d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d90:	f7ff ffc4 	bl	8000d1c <__aeabi_cdrcmple>
 8000d94:	bf34      	ite	cc
 8000d96:	2001      	movcc	r0, #1
 8000d98:	2000      	movcs	r0, #0
 8000d9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9e:	bf00      	nop

08000da0 <__aeabi_dcmpun>:
 8000da0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000da8:	d102      	bne.n	8000db0 <__aeabi_dcmpun+0x10>
 8000daa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dae:	d10a      	bne.n	8000dc6 <__aeabi_dcmpun+0x26>
 8000db0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000db4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000db8:	d102      	bne.n	8000dc0 <__aeabi_dcmpun+0x20>
 8000dba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dbe:	d102      	bne.n	8000dc6 <__aeabi_dcmpun+0x26>
 8000dc0:	f04f 0000 	mov.w	r0, #0
 8000dc4:	4770      	bx	lr
 8000dc6:	f04f 0001 	mov.w	r0, #1
 8000dca:	4770      	bx	lr

08000dcc <__aeabi_d2iz>:
 8000dcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000dd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000dd4:	d215      	bcs.n	8000e02 <__aeabi_d2iz+0x36>
 8000dd6:	d511      	bpl.n	8000dfc <__aeabi_d2iz+0x30>
 8000dd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ddc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000de0:	d912      	bls.n	8000e08 <__aeabi_d2iz+0x3c>
 8000de2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000df2:	fa23 f002 	lsr.w	r0, r3, r2
 8000df6:	bf18      	it	ne
 8000df8:	4240      	negne	r0, r0
 8000dfa:	4770      	bx	lr
 8000dfc:	f04f 0000 	mov.w	r0, #0
 8000e00:	4770      	bx	lr
 8000e02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e06:	d105      	bne.n	8000e14 <__aeabi_d2iz+0x48>
 8000e08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e12:	4770      	bx	lr
 8000e14:	f04f 0000 	mov.w	r0, #0
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <__aeabi_d2f>:
 8000e1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000e24:	bf24      	itt	cs
 8000e26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000e2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000e2e:	d90d      	bls.n	8000e4c <__aeabi_d2f+0x30>
 8000e30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000e38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000e3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000e40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000e44:	bf08      	it	eq
 8000e46:	f020 0001 	biceq.w	r0, r0, #1
 8000e4a:	4770      	bx	lr
 8000e4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000e50:	d121      	bne.n	8000e96 <__aeabi_d2f+0x7a>
 8000e52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000e56:	bfbc      	itt	lt
 8000e58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000e5c:	4770      	bxlt	lr
 8000e5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000e66:	f1c2 0218 	rsb	r2, r2, #24
 8000e6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000e6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000e72:	fa20 f002 	lsr.w	r0, r0, r2
 8000e76:	bf18      	it	ne
 8000e78:	f040 0001 	orrne.w	r0, r0, #1
 8000e7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000e84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000e88:	ea40 000c 	orr.w	r0, r0, ip
 8000e8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000e90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e94:	e7cc      	b.n	8000e30 <__aeabi_d2f+0x14>
 8000e96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000e9a:	d107      	bne.n	8000eac <__aeabi_d2f+0x90>
 8000e9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bxne	lr
 8000eac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000eb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <__aeabi_uldivmod>:
 8000ebc:	b953      	cbnz	r3, 8000ed4 <__aeabi_uldivmod+0x18>
 8000ebe:	b94a      	cbnz	r2, 8000ed4 <__aeabi_uldivmod+0x18>
 8000ec0:	2900      	cmp	r1, #0
 8000ec2:	bf08      	it	eq
 8000ec4:	2800      	cmpeq	r0, #0
 8000ec6:	bf1c      	itt	ne
 8000ec8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ecc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ed0:	f000 b972 	b.w	80011b8 <__aeabi_idiv0>
 8000ed4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000edc:	f000 f806 	bl	8000eec <__udivmoddi4>
 8000ee0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee8:	b004      	add	sp, #16
 8000eea:	4770      	bx	lr

08000eec <__udivmoddi4>:
 8000eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ef0:	9e08      	ldr	r6, [sp, #32]
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	4688      	mov	r8, r1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d14b      	bne.n	8000f92 <__udivmoddi4+0xa6>
 8000efa:	428a      	cmp	r2, r1
 8000efc:	4615      	mov	r5, r2
 8000efe:	d967      	bls.n	8000fd0 <__udivmoddi4+0xe4>
 8000f00:	fab2 f282 	clz	r2, r2
 8000f04:	b14a      	cbz	r2, 8000f1a <__udivmoddi4+0x2e>
 8000f06:	f1c2 0720 	rsb	r7, r2, #32
 8000f0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000f0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000f12:	4095      	lsls	r5, r2
 8000f14:	ea47 0803 	orr.w	r8, r7, r3
 8000f18:	4094      	lsls	r4, r2
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	0c23      	lsrs	r3, r4, #16
 8000f20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f24:	fa1f fc85 	uxth.w	ip, r5
 8000f28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f30:	fb07 f10c 	mul.w	r1, r7, ip
 8000f34:	4299      	cmp	r1, r3
 8000f36:	d909      	bls.n	8000f4c <__udivmoddi4+0x60>
 8000f38:	18eb      	adds	r3, r5, r3
 8000f3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f3e:	f080 811b 	bcs.w	8001178 <__udivmoddi4+0x28c>
 8000f42:	4299      	cmp	r1, r3
 8000f44:	f240 8118 	bls.w	8001178 <__udivmoddi4+0x28c>
 8000f48:	3f02      	subs	r7, #2
 8000f4a:	442b      	add	r3, r5
 8000f4c:	1a5b      	subs	r3, r3, r1
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f60:	45a4      	cmp	ip, r4
 8000f62:	d909      	bls.n	8000f78 <__udivmoddi4+0x8c>
 8000f64:	192c      	adds	r4, r5, r4
 8000f66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f6a:	f080 8107 	bcs.w	800117c <__udivmoddi4+0x290>
 8000f6e:	45a4      	cmp	ip, r4
 8000f70:	f240 8104 	bls.w	800117c <__udivmoddi4+0x290>
 8000f74:	3802      	subs	r0, #2
 8000f76:	442c      	add	r4, r5
 8000f78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f7c:	eba4 040c 	sub.w	r4, r4, ip
 8000f80:	2700      	movs	r7, #0
 8000f82:	b11e      	cbz	r6, 8000f8c <__udivmoddi4+0xa0>
 8000f84:	40d4      	lsrs	r4, r2
 8000f86:	2300      	movs	r3, #0
 8000f88:	e9c6 4300 	strd	r4, r3, [r6]
 8000f8c:	4639      	mov	r1, r7
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d909      	bls.n	8000faa <__udivmoddi4+0xbe>
 8000f96:	2e00      	cmp	r6, #0
 8000f98:	f000 80eb 	beq.w	8001172 <__udivmoddi4+0x286>
 8000f9c:	2700      	movs	r7, #0
 8000f9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	4639      	mov	r1, r7
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	fab3 f783 	clz	r7, r3
 8000fae:	2f00      	cmp	r7, #0
 8000fb0:	d147      	bne.n	8001042 <__udivmoddi4+0x156>
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	d302      	bcc.n	8000fbc <__udivmoddi4+0xd0>
 8000fb6:	4282      	cmp	r2, r0
 8000fb8:	f200 80fa 	bhi.w	80011b0 <__udivmoddi4+0x2c4>
 8000fbc:	1a84      	subs	r4, r0, r2
 8000fbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	2e00      	cmp	r6, #0
 8000fc8:	d0e0      	beq.n	8000f8c <__udivmoddi4+0xa0>
 8000fca:	e9c6 4800 	strd	r4, r8, [r6]
 8000fce:	e7dd      	b.n	8000f8c <__udivmoddi4+0xa0>
 8000fd0:	b902      	cbnz	r2, 8000fd4 <__udivmoddi4+0xe8>
 8000fd2:	deff      	udf	#255	; 0xff
 8000fd4:	fab2 f282 	clz	r2, r2
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	f040 808f 	bne.w	80010fc <__udivmoddi4+0x210>
 8000fde:	1b49      	subs	r1, r1, r5
 8000fe0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fe4:	fa1f f885 	uxth.w	r8, r5
 8000fe8:	2701      	movs	r7, #1
 8000fea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000fee:	0c23      	lsrs	r3, r4, #16
 8000ff0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ff4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ff8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ffc:	4299      	cmp	r1, r3
 8000ffe:	d907      	bls.n	8001010 <__udivmoddi4+0x124>
 8001000:	18eb      	adds	r3, r5, r3
 8001002:	f10c 30ff 	add.w	r0, ip, #4294967295
 8001006:	d202      	bcs.n	800100e <__udivmoddi4+0x122>
 8001008:	4299      	cmp	r1, r3
 800100a:	f200 80cd 	bhi.w	80011a8 <__udivmoddi4+0x2bc>
 800100e:	4684      	mov	ip, r0
 8001010:	1a59      	subs	r1, r3, r1
 8001012:	b2a3      	uxth	r3, r4
 8001014:	fbb1 f0fe 	udiv	r0, r1, lr
 8001018:	fb0e 1410 	mls	r4, lr, r0, r1
 800101c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001020:	fb08 f800 	mul.w	r8, r8, r0
 8001024:	45a0      	cmp	r8, r4
 8001026:	d907      	bls.n	8001038 <__udivmoddi4+0x14c>
 8001028:	192c      	adds	r4, r5, r4
 800102a:	f100 33ff 	add.w	r3, r0, #4294967295
 800102e:	d202      	bcs.n	8001036 <__udivmoddi4+0x14a>
 8001030:	45a0      	cmp	r8, r4
 8001032:	f200 80b6 	bhi.w	80011a2 <__udivmoddi4+0x2b6>
 8001036:	4618      	mov	r0, r3
 8001038:	eba4 0408 	sub.w	r4, r4, r8
 800103c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001040:	e79f      	b.n	8000f82 <__udivmoddi4+0x96>
 8001042:	f1c7 0c20 	rsb	ip, r7, #32
 8001046:	40bb      	lsls	r3, r7
 8001048:	fa22 fe0c 	lsr.w	lr, r2, ip
 800104c:	ea4e 0e03 	orr.w	lr, lr, r3
 8001050:	fa01 f407 	lsl.w	r4, r1, r7
 8001054:	fa20 f50c 	lsr.w	r5, r0, ip
 8001058:	fa21 f30c 	lsr.w	r3, r1, ip
 800105c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001060:	4325      	orrs	r5, r4
 8001062:	fbb3 f9f8 	udiv	r9, r3, r8
 8001066:	0c2c      	lsrs	r4, r5, #16
 8001068:	fb08 3319 	mls	r3, r8, r9, r3
 800106c:	fa1f fa8e 	uxth.w	sl, lr
 8001070:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001074:	fb09 f40a 	mul.w	r4, r9, sl
 8001078:	429c      	cmp	r4, r3
 800107a:	fa02 f207 	lsl.w	r2, r2, r7
 800107e:	fa00 f107 	lsl.w	r1, r0, r7
 8001082:	d90b      	bls.n	800109c <__udivmoddi4+0x1b0>
 8001084:	eb1e 0303 	adds.w	r3, lr, r3
 8001088:	f109 30ff 	add.w	r0, r9, #4294967295
 800108c:	f080 8087 	bcs.w	800119e <__udivmoddi4+0x2b2>
 8001090:	429c      	cmp	r4, r3
 8001092:	f240 8084 	bls.w	800119e <__udivmoddi4+0x2b2>
 8001096:	f1a9 0902 	sub.w	r9, r9, #2
 800109a:	4473      	add	r3, lr
 800109c:	1b1b      	subs	r3, r3, r4
 800109e:	b2ad      	uxth	r5, r5
 80010a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80010a4:	fb08 3310 	mls	r3, r8, r0, r3
 80010a8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80010ac:	fb00 fa0a 	mul.w	sl, r0, sl
 80010b0:	45a2      	cmp	sl, r4
 80010b2:	d908      	bls.n	80010c6 <__udivmoddi4+0x1da>
 80010b4:	eb1e 0404 	adds.w	r4, lr, r4
 80010b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80010bc:	d26b      	bcs.n	8001196 <__udivmoddi4+0x2aa>
 80010be:	45a2      	cmp	sl, r4
 80010c0:	d969      	bls.n	8001196 <__udivmoddi4+0x2aa>
 80010c2:	3802      	subs	r0, #2
 80010c4:	4474      	add	r4, lr
 80010c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80010ca:	fba0 8902 	umull	r8, r9, r0, r2
 80010ce:	eba4 040a 	sub.w	r4, r4, sl
 80010d2:	454c      	cmp	r4, r9
 80010d4:	46c2      	mov	sl, r8
 80010d6:	464b      	mov	r3, r9
 80010d8:	d354      	bcc.n	8001184 <__udivmoddi4+0x298>
 80010da:	d051      	beq.n	8001180 <__udivmoddi4+0x294>
 80010dc:	2e00      	cmp	r6, #0
 80010de:	d069      	beq.n	80011b4 <__udivmoddi4+0x2c8>
 80010e0:	ebb1 050a 	subs.w	r5, r1, sl
 80010e4:	eb64 0403 	sbc.w	r4, r4, r3
 80010e8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80010ec:	40fd      	lsrs	r5, r7
 80010ee:	40fc      	lsrs	r4, r7
 80010f0:	ea4c 0505 	orr.w	r5, ip, r5
 80010f4:	e9c6 5400 	strd	r5, r4, [r6]
 80010f8:	2700      	movs	r7, #0
 80010fa:	e747      	b.n	8000f8c <__udivmoddi4+0xa0>
 80010fc:	f1c2 0320 	rsb	r3, r2, #32
 8001100:	fa20 f703 	lsr.w	r7, r0, r3
 8001104:	4095      	lsls	r5, r2
 8001106:	fa01 f002 	lsl.w	r0, r1, r2
 800110a:	fa21 f303 	lsr.w	r3, r1, r3
 800110e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001112:	4338      	orrs	r0, r7
 8001114:	0c01      	lsrs	r1, r0, #16
 8001116:	fbb3 f7fe 	udiv	r7, r3, lr
 800111a:	fa1f f885 	uxth.w	r8, r5
 800111e:	fb0e 3317 	mls	r3, lr, r7, r3
 8001122:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001126:	fb07 f308 	mul.w	r3, r7, r8
 800112a:	428b      	cmp	r3, r1
 800112c:	fa04 f402 	lsl.w	r4, r4, r2
 8001130:	d907      	bls.n	8001142 <__udivmoddi4+0x256>
 8001132:	1869      	adds	r1, r5, r1
 8001134:	f107 3cff 	add.w	ip, r7, #4294967295
 8001138:	d22f      	bcs.n	800119a <__udivmoddi4+0x2ae>
 800113a:	428b      	cmp	r3, r1
 800113c:	d92d      	bls.n	800119a <__udivmoddi4+0x2ae>
 800113e:	3f02      	subs	r7, #2
 8001140:	4429      	add	r1, r5
 8001142:	1acb      	subs	r3, r1, r3
 8001144:	b281      	uxth	r1, r0
 8001146:	fbb3 f0fe 	udiv	r0, r3, lr
 800114a:	fb0e 3310 	mls	r3, lr, r0, r3
 800114e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001152:	fb00 f308 	mul.w	r3, r0, r8
 8001156:	428b      	cmp	r3, r1
 8001158:	d907      	bls.n	800116a <__udivmoddi4+0x27e>
 800115a:	1869      	adds	r1, r5, r1
 800115c:	f100 3cff 	add.w	ip, r0, #4294967295
 8001160:	d217      	bcs.n	8001192 <__udivmoddi4+0x2a6>
 8001162:	428b      	cmp	r3, r1
 8001164:	d915      	bls.n	8001192 <__udivmoddi4+0x2a6>
 8001166:	3802      	subs	r0, #2
 8001168:	4429      	add	r1, r5
 800116a:	1ac9      	subs	r1, r1, r3
 800116c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001170:	e73b      	b.n	8000fea <__udivmoddi4+0xfe>
 8001172:	4637      	mov	r7, r6
 8001174:	4630      	mov	r0, r6
 8001176:	e709      	b.n	8000f8c <__udivmoddi4+0xa0>
 8001178:	4607      	mov	r7, r0
 800117a:	e6e7      	b.n	8000f4c <__udivmoddi4+0x60>
 800117c:	4618      	mov	r0, r3
 800117e:	e6fb      	b.n	8000f78 <__udivmoddi4+0x8c>
 8001180:	4541      	cmp	r1, r8
 8001182:	d2ab      	bcs.n	80010dc <__udivmoddi4+0x1f0>
 8001184:	ebb8 0a02 	subs.w	sl, r8, r2
 8001188:	eb69 020e 	sbc.w	r2, r9, lr
 800118c:	3801      	subs	r0, #1
 800118e:	4613      	mov	r3, r2
 8001190:	e7a4      	b.n	80010dc <__udivmoddi4+0x1f0>
 8001192:	4660      	mov	r0, ip
 8001194:	e7e9      	b.n	800116a <__udivmoddi4+0x27e>
 8001196:	4618      	mov	r0, r3
 8001198:	e795      	b.n	80010c6 <__udivmoddi4+0x1da>
 800119a:	4667      	mov	r7, ip
 800119c:	e7d1      	b.n	8001142 <__udivmoddi4+0x256>
 800119e:	4681      	mov	r9, r0
 80011a0:	e77c      	b.n	800109c <__udivmoddi4+0x1b0>
 80011a2:	3802      	subs	r0, #2
 80011a4:	442c      	add	r4, r5
 80011a6:	e747      	b.n	8001038 <__udivmoddi4+0x14c>
 80011a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80011ac:	442b      	add	r3, r5
 80011ae:	e72f      	b.n	8001010 <__udivmoddi4+0x124>
 80011b0:	4638      	mov	r0, r7
 80011b2:	e708      	b.n	8000fc6 <__udivmoddi4+0xda>
 80011b4:	4637      	mov	r7, r6
 80011b6:	e6e9      	b.n	8000f8c <__udivmoddi4+0xa0>

080011b8 <__aeabi_idiv0>:
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	0000      	movs	r0, r0
	...

080011c0 <Fuzzy>:
 * @brief :
 * @param :
 * @return:
 */
double Fuzzy(double e_l_k, double e_l_k_1, double theta_m_d_k_1)
{
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	b0f9      	sub	sp, #484	; 0x1e4
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	ed83 0b00 	vstr	d0, [r3]
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	ed83 1b00 	vstr	d1, [r3]
 80011d6:	463b      	mov	r3, r7
 80011d8:	ed83 2b00 	vstr	d2, [r3]
	/*      T = 0.001; */
	/*      theta_m_d_upper_limit = pi; */
	/*      theta_m_d_lower_limit = -pi; */
	/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
	/* %%%%%%%% Preprocessing %%%%%%%%% */
	e = Kp * e_l_k;
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011e4:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
	de = Kd * (e_l_k - e_l_k_1) / T;
 80011e8:	f107 0110 	add.w	r1, r7, #16
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011f8:	f7ff f980 	bl	80004fc <__aeabi_dsub>
 80011fc:	4603      	mov	r3, r0
 80011fe:	460c      	mov	r4, r1
 8001200:	4618      	mov	r0, r3
 8001202:	4621      	mov	r1, r4
 8001204:	a3e8      	add	r3, pc, #928	; (adr r3, 80015a8 <Fuzzy+0x3e8>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff fc59 	bl	8000ac0 <__aeabi_ddiv>
 800120e:	4603      	mov	r3, r0
 8001210:	460c      	mov	r4, r1
 8001212:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
	/* 	Range: [-1  1] */
	/* 	Membership functions: NB, NS, ZE, PS, PB */
	/* %% */
	/*  */
	/*  1 to 5: NB, NS, ZE, PS, PB */
	for (idx = 0; idx < 5; idx++) {
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800121c:	e020      	b.n	8001260 <Fuzzy+0xa0>
		fuzzy_e[idx] = 0.0;
 800121e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001228:	4413      	add	r3, r2
 800122a:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	f04f 0400 	mov.w	r4, #0
 8001236:	e9c2 3400 	strd	r3, r4, [r2]
		fuzzy_de[idx] = 0.0;
 800123a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001244:	4413      	add	r3, r2
 8001246:	f1a3 0298 	sub.w	r2, r3, #152	; 0x98
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	f04f 0400 	mov.w	r4, #0
 8001252:	e9c2 3400 	strd	r3, r4, [r2]
	for (idx = 0; idx < 5; idx++) {
 8001256:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800125a:	3301      	adds	r3, #1
 800125c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001260:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001264:	2b04      	cmp	r3, #4
 8001266:	ddda      	ble.n	800121e <Fuzzy+0x5e>
	}

	/*  1 to 5: NB, NS, ZE, PS, PB */
	/*  Out of range */
	if (e < -1.0) {
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4bc6      	ldr	r3, [pc, #792]	; (8001588 <Fuzzy+0x3c8>)
 800126e:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8001272:	f7ff fd6d 	bl	8000d50 <__aeabi_dcmplt>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <Fuzzy+0xc8>
		fuzzy_e[0] = 1.0;
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	4cc2      	ldr	r4, [pc, #776]	; (800158c <Fuzzy+0x3cc>)
 8001282:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
 8001286:	e07c      	b.n	8001382 <Fuzzy+0x1c2>

		/*  NB */
	} else if (e > 1.0) {
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4bbf      	ldr	r3, [pc, #764]	; (800158c <Fuzzy+0x3cc>)
 800128e:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8001292:	f7ff fd7b 	bl	8000d8c <__aeabi_dcmpgt>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <Fuzzy+0xe8>
		fuzzy_e[4] = 1.0;
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	4cba      	ldr	r4, [pc, #744]	; (800158c <Fuzzy+0x3cc>)
 80012a2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
 80012a6:	e06c      	b.n	8001382 <Fuzzy+0x1c2>

		/*  PB */
	} else {
		fuzzy_e[0] = trapmf(e, dv0);
 80012a8:	48b9      	ldr	r0, [pc, #740]	; (8001590 <Fuzzy+0x3d0>)
 80012aa:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80012ae:	f000 fd1f 	bl	8001cf0 <trapmf>
 80012b2:	eeb0 7a40 	vmov.f32	s14, s0
 80012b6:	eef0 7a60 	vmov.f32	s15, s1
 80012ba:	ed87 7b5c 	vstr	d7, [r7, #368]	; 0x170

		/*  NB */
		dv1[0] = -0.4;
 80012be:	a4a6      	add	r4, pc, #664	; (adr r4, 8001558 <Fuzzy+0x398>)
 80012c0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012c4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		dv1[1] = -0.2;
 80012c8:	a4a5      	add	r4, pc, #660	; (adr r4, 8001560 <Fuzzy+0x3a0>)
 80012ca:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012ce:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		dv1[2] = 0.0;
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	f04f 0400 	mov.w	r4, #0
 80012da:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		fuzzy_e[1] = trimf(e, dv1);
 80012de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012e2:	4618      	mov	r0, r3
 80012e4:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80012e8:	f000 fe2e 	bl	8001f48 <trimf>
 80012ec:	eeb0 7a40 	vmov.f32	s14, s0
 80012f0:	eef0 7a60 	vmov.f32	s15, s1
 80012f4:	ed87 7b5e 	vstr	d7, [r7, #376]	; 0x178

		/*  NS */
		dv1[0] = -0.2;
 80012f8:	a499      	add	r4, pc, #612	; (adr r4, 8001560 <Fuzzy+0x3a0>)
 80012fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012fe:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		dv1[1] = 0.0;
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	f04f 0400 	mov.w	r4, #0
 800130a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		dv1[2] = 0.2;
 800130e:	a496      	add	r4, pc, #600	; (adr r4, 8001568 <Fuzzy+0x3a8>)
 8001310:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001314:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		fuzzy_e[2] = trimf(e, dv1);
 8001318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800131c:	4618      	mov	r0, r3
 800131e:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8001322:	f000 fe11 	bl	8001f48 <trimf>
 8001326:	eeb0 7a40 	vmov.f32	s14, s0
 800132a:	eef0 7a60 	vmov.f32	s15, s1
 800132e:	ed87 7b60 	vstr	d7, [r7, #384]	; 0x180

		/*  ZE */
		dv1[0] = 0.0;
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	f04f 0400 	mov.w	r4, #0
 800133a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		dv1[1] = 0.2;
 800133e:	a48a      	add	r4, pc, #552	; (adr r4, 8001568 <Fuzzy+0x3a8>)
 8001340:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001344:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		dv1[2] = 0.4;
 8001348:	a489      	add	r4, pc, #548	; (adr r4, 8001570 <Fuzzy+0x3b0>)
 800134a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800134e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		fuzzy_e[3] = trimf(e, dv1);
 8001352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001356:	4618      	mov	r0, r3
 8001358:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 800135c:	f000 fdf4 	bl	8001f48 <trimf>
 8001360:	eeb0 7a40 	vmov.f32	s14, s0
 8001364:	eef0 7a60 	vmov.f32	s15, s1
 8001368:	ed87 7b62 	vstr	d7, [r7, #392]	; 0x188

		/*  PS */
		fuzzy_e[4] = trapmf(e, dv6);
 800136c:	4889      	ldr	r0, [pc, #548]	; (8001594 <Fuzzy+0x3d4>)
 800136e:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8001372:	f000 fcbd 	bl	8001cf0 <trapmf>
 8001376:	eeb0 7a40 	vmov.f32	s14, s0
 800137a:	eef0 7a60 	vmov.f32	s15, s1
 800137e:	ed87 7b64 	vstr	d7, [r7, #400]	; 0x190

		/*  PB */
	}

	if (de < -1.0) {
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b80      	ldr	r3, [pc, #512]	; (8001588 <Fuzzy+0x3c8>)
 8001388:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800138c:	f7ff fce0 	bl	8000d50 <__aeabi_dcmplt>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <Fuzzy+0x1e2>
		fuzzy_de[0] = 1.0;
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	4c7c      	ldr	r4, [pc, #496]	; (800158c <Fuzzy+0x3cc>)
 800139c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80013a0:	e058      	b.n	8001454 <Fuzzy+0x294>

		/*  NB */
	} else if (de > 1.0) {
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b79      	ldr	r3, [pc, #484]	; (800158c <Fuzzy+0x3cc>)
 80013a8:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80013ac:	f7ff fcee 	bl	8000d8c <__aeabi_dcmpgt>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <Fuzzy+0x202>
		fuzzy_de[4] = 1.0;
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	4c74      	ldr	r4, [pc, #464]	; (800158c <Fuzzy+0x3cc>)
 80013bc:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
 80013c0:	e048      	b.n	8001454 <Fuzzy+0x294>

		/*  PB */
	} else {
		fuzzy_de[0] = trapmf(de, dv2);
 80013c2:	4875      	ldr	r0, [pc, #468]	; (8001598 <Fuzzy+0x3d8>)
 80013c4:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 80013c8:	f000 fc92 	bl	8001cf0 <trapmf>
 80013cc:	eeb0 7a40 	vmov.f32	s14, s0
 80013d0:	eef0 7a60 	vmov.f32	s15, s1
 80013d4:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148

		/*  NB */
		fuzzy_de[1] = trimf(de, dv3);
 80013d8:	4870      	ldr	r0, [pc, #448]	; (800159c <Fuzzy+0x3dc>)
 80013da:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 80013de:	f000 fdb3 	bl	8001f48 <trimf>
 80013e2:	eeb0 7a40 	vmov.f32	s14, s0
 80013e6:	eef0 7a60 	vmov.f32	s15, s1
 80013ea:	ed87 7b54 	vstr	d7, [r7, #336]	; 0x150

		/*  NS */
		dv1[0] = -0.1;
 80013ee:	a462      	add	r4, pc, #392	; (adr r4, 8001578 <Fuzzy+0x3b8>)
 80013f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013f4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		dv1[1] = 0.0;
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	f04f 0400 	mov.w	r4, #0
 8001400:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		dv1[2] = 0.1;
 8001404:	a45e      	add	r4, pc, #376	; (adr r4, 8001580 <Fuzzy+0x3c0>)
 8001406:	e9d4 3400 	ldrd	r3, r4, [r4]
 800140a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		fuzzy_de[2] = trimf(de, dv1);
 800140e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001412:	4618      	mov	r0, r3
 8001414:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 8001418:	f000 fd96 	bl	8001f48 <trimf>
 800141c:	eeb0 7a40 	vmov.f32	s14, s0
 8001420:	eef0 7a60 	vmov.f32	s15, s1
 8001424:	ed87 7b56 	vstr	d7, [r7, #344]	; 0x158

		/*  ZE */
		fuzzy_de[3] = trimf(de, dv4);
 8001428:	485d      	ldr	r0, [pc, #372]	; (80015a0 <Fuzzy+0x3e0>)
 800142a:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 800142e:	f000 fd8b 	bl	8001f48 <trimf>
 8001432:	eeb0 7a40 	vmov.f32	s14, s0
 8001436:	eef0 7a60 	vmov.f32	s15, s1
 800143a:	ed87 7b58 	vstr	d7, [r7, #352]	; 0x160

		/*  PS */
		fuzzy_de[4] = trapmf(de, dv5);
 800143e:	4859      	ldr	r0, [pc, #356]	; (80015a4 <Fuzzy+0x3e4>)
 8001440:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 8001444:	f000 fc54 	bl	8001cf0 <trapmf>
 8001448:	eeb0 7a40 	vmov.f32	s14, s0
 800144c:	eef0 7a60 	vmov.f32	s15, s1
 8001450:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
	/*  | PB| ZE | NS | NB | NB | NB | */
	/*  ------------------------------ */
	/*  MAX-PROD aggregation rules */
	/* %% */
	/*  Firing strength */
	for (idx = 0; idx < 5; idx++) {
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800145a:	e037      	b.n	80014cc <Fuzzy+0x30c>
		for (j = 0; j < 5; j++) {
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001462:	e02a      	b.n	80014ba <Fuzzy+0x2fa>
			rules[idx + 5 * j] = fuzzy_de[idx] * fuzzy_e[j];
 8001464:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800146e:	4413      	add	r3, r2
 8001470:	3b98      	subs	r3, #152	; 0x98
 8001472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001476:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001480:	4413      	add	r3, r2
 8001482:	3b70      	subs	r3, #112	; 0x70
 8001484:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001488:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	441a      	add	r2, r3
 8001492:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001496:	18d6      	adds	r6, r2, r3
 8001498:	4622      	mov	r2, r4
 800149a:	462b      	mov	r3, r5
 800149c:	f7ff f9e6 	bl	800086c <__aeabi_dmul>
 80014a0:	4603      	mov	r3, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80014a8:	00f2      	lsls	r2, r6, #3
 80014aa:	440a      	add	r2, r1
 80014ac:	e9c2 3400 	strd	r3, r4, [r2]
		for (j = 0; j < 5; j++) {
 80014b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80014b4:	3301      	adds	r3, #1
 80014b6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80014ba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80014be:	2b04      	cmp	r3, #4
 80014c0:	ddd0      	ble.n	8001464 <Fuzzy+0x2a4>
	for (idx = 0; idx < 5; idx++) {
 80014c2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80014c6:	3301      	adds	r3, #1
 80014c8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80014cc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	ddc3      	ble.n	800145c <Fuzzy+0x29c>
		}
	}

	/*  Accummulation */
	varargin_1[0] = rules[22];
 80014d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014d8:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 80014dc:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
	varargin_1[1] = rules[18];
 80014e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e4:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 80014e8:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	varargin_1[2] = rules[23];
 80014ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014f0:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 80014f4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	varargin_1[3] = rules[14];
 80014f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014fc:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8001500:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	varargin_1[4] = rules[19];
 8001504:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001508:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 800150c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	varargin_1[5] = rules[24];
 8001510:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001514:	e9d3 3430 	ldrd	r3, r4, [r3, #192]	; 0xc0
 8001518:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	if (!rtIsNaN(rules[22])) {
 800151c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001520:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001524:	eeb0 0a47 	vmov.f32	s0, s14
 8001528:	eef0 0a67 	vmov.f32	s1, s15
 800152c:	f000 fde2 	bl	80020f4 <rtIsNaN>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d103      	bne.n	800153e <Fuzzy+0x37e>
		idx = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800153c:	e063      	b.n	8001606 <Fuzzy+0x446>
	} else {
		idx = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		j = 2;
 8001544:	2302      	movs	r3, #2
 8001546:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		exitg1 = false;
 800154a:	2300      	movs	r3, #0
 800154c:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		while ((!exitg1) && (j < 7)) {
 8001550:	e04e      	b.n	80015f0 <Fuzzy+0x430>
 8001552:	bf00      	nop
 8001554:	f3af 8000 	nop.w
 8001558:	9999999a 	.word	0x9999999a
 800155c:	bfd99999 	.word	0xbfd99999
 8001560:	9999999a 	.word	0x9999999a
 8001564:	bfc99999 	.word	0xbfc99999
 8001568:	9999999a 	.word	0x9999999a
 800156c:	3fc99999 	.word	0x3fc99999
 8001570:	9999999a 	.word	0x9999999a
 8001574:	3fd99999 	.word	0x3fd99999
 8001578:	9999999a 	.word	0x9999999a
 800157c:	bfb99999 	.word	0xbfb99999
 8001580:	9999999a 	.word	0x9999999a
 8001584:	3fb99999 	.word	0x3fb99999
 8001588:	bff00000 	.word	0xbff00000
 800158c:	3ff00000 	.word	0x3ff00000
 8001590:	0800cab0 	.word	0x0800cab0
 8001594:	0800cad0 	.word	0x0800cad0
 8001598:	0800caf0 	.word	0x0800caf0
 800159c:	0800cb10 	.word	0x0800cb10
 80015a0:	0800cb28 	.word	0x0800cb28
 80015a4:	0800cb40 	.word	0x0800cb40
 80015a8:	47ae147b 	.word	0x47ae147b
 80015ac:	3f847ae1 	.word	0x3f847ae1
			if (!rtIsNaN(varargin_1[j - 1])) {
 80015b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80015b4:	3b01      	subs	r3, #1
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80015bc:	4413      	add	r3, r2
 80015be:	3be0      	subs	r3, #224	; 0xe0
 80015c0:	ed93 7b00 	vldr	d7, [r3]
 80015c4:	eeb0 0a47 	vmov.f32	s0, s14
 80015c8:	eef0 0a67 	vmov.f32	s1, s15
 80015cc:	f000 fd92 	bl	80020f4 <rtIsNaN>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d107      	bne.n	80015e6 <Fuzzy+0x426>
				idx = j;
 80015d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80015da:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
				exitg1 = true;
 80015de:	2301      	movs	r3, #1
 80015e0:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 80015e4:	e004      	b.n	80015f0 <Fuzzy+0x430>
			} else {
				j++;
 80015e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80015ea:	3301      	adds	r3, #1
 80015ec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		while ((!exitg1) && (j < 7)) {
 80015f0:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80015f4:	f083 0301 	eor.w	r3, r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <Fuzzy+0x446>
 80015fe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001602:	2b06      	cmp	r3, #6
 8001604:	ddd4      	ble.n	80015b0 <Fuzzy+0x3f0>
			}
		}
	}

	if (idx == 0) {
 8001606:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <Fuzzy+0x45c>
		de = rules[22];
 800160e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001612:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8001616:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
 800161a:	e037      	b.n	800168c <Fuzzy+0x4cc>
	} else {
		de = varargin_1[idx - 1];
 800161c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001620:	3b01      	subs	r3, #1
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001628:	4413      	add	r3, r2
 800162a:	3be0      	subs	r3, #224	; 0xe0
 800162c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001630:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
		idx++;
 8001634:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001638:	3301      	adds	r3, #1
 800163a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		for (j = idx; j < 7; j++) {
 800163e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001642:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001646:	e01d      	b.n	8001684 <Fuzzy+0x4c4>
			e = varargin_1[j - 1];
 8001648:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800164c:	3b01      	subs	r3, #1
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001654:	4413      	add	r3, r2
 8001656:	3be0      	subs	r3, #224	; 0xe0
 8001658:	e9d3 3400 	ldrd	r3, r4, [r3]
 800165c:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
			if (de < e) {
 8001660:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8001664:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8001668:	f7ff fb72 	bl	8000d50 <__aeabi_dcmplt>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <Fuzzy+0x4ba>
				de = e;
 8001672:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8001676:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
		for (j = idx; j < 7; j++) {
 800167a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800167e:	3301      	adds	r3, #1
 8001680:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001684:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001688:	2b06      	cmp	r3, #6
 800168a:	dddd      	ble.n	8001648 <Fuzzy+0x488>
			}
		}
	}

	b_varargin_1[0] = rules[21];
 800168c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001690:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8001694:	f107 0218 	add.w	r2, r7, #24
 8001698:	e9c2 3400 	strd	r3, r4, [r2]
	b_varargin_1[1] = rules[17];
 800169c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016a0:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 80016a4:	f107 0218 	add.w	r2, r7, #24
 80016a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	b_varargin_1[2] = rules[13];
 80016ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016b0:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80016b4:	f107 0218 	add.w	r2, r7, #24
 80016b8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	b_varargin_1[3] = rules[9];
 80016bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016c0:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80016c4:	f107 0218 	add.w	r2, r7, #24
 80016c8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	if (!rtIsNaN(rules[21])) {
 80016cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016d0:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80016d4:	eeb0 0a47 	vmov.f32	s0, s14
 80016d8:	eef0 0a67 	vmov.f32	s1, s15
 80016dc:	f000 fd0a 	bl	80020f4 <rtIsNaN>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d103      	bne.n	80016ee <Fuzzy+0x52e>
		idx = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80016ec:	e033      	b.n	8001756 <Fuzzy+0x596>
	} else {
		idx = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		j = 2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		exitg1 = false;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		while ((!exitg1) && (j < 5)) {
 8001700:	e01e      	b.n	8001740 <Fuzzy+0x580>
			if (!rtIsNaN(b_varargin_1[j - 1])) {
 8001702:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001706:	3b01      	subs	r3, #1
 8001708:	f107 0218 	add.w	r2, r7, #24
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	ed93 7b00 	vldr	d7, [r3]
 8001714:	eeb0 0a47 	vmov.f32	s0, s14
 8001718:	eef0 0a67 	vmov.f32	s1, s15
 800171c:	f000 fcea 	bl	80020f4 <rtIsNaN>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d107      	bne.n	8001736 <Fuzzy+0x576>
				idx = j;
 8001726:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800172a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
				exitg1 = true;
 800172e:	2301      	movs	r3, #1
 8001730:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 8001734:	e004      	b.n	8001740 <Fuzzy+0x580>
			} else {
				j++;
 8001736:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800173a:	3301      	adds	r3, #1
 800173c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		while ((!exitg1) && (j < 5)) {
 8001740:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8001744:	f083 0301 	eor.w	r3, r3, #1
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <Fuzzy+0x596>
 800174e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001752:	2b04      	cmp	r3, #4
 8001754:	ddd5      	ble.n	8001702 <Fuzzy+0x542>
			}
		}
	}

	if (idx == 0) {
 8001756:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <Fuzzy+0x5ac>
		u_PS = rules[21];
 800175e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001762:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8001766:	e9c7 3470 	strd	r3, r4, [r7, #448]	; 0x1c0
 800176a:	e035      	b.n	80017d8 <Fuzzy+0x618>
	} else {
		u_PS = b_varargin_1[idx - 1];
 800176c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001770:	3b01      	subs	r3, #1
 8001772:	f107 0218 	add.w	r2, r7, #24
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4413      	add	r3, r2
 800177a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800177e:	e9c7 3470 	strd	r3, r4, [r7, #448]	; 0x1c0
		idx++;
 8001782:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001786:	3301      	adds	r3, #1
 8001788:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		for (j = idx; j < 5; j++) {
 800178c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001790:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001794:	e01c      	b.n	80017d0 <Fuzzy+0x610>
			e = b_varargin_1[j - 1];
 8001796:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800179a:	3b01      	subs	r3, #1
 800179c:	f107 0218 	add.w	r2, r7, #24
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4413      	add	r3, r2
 80017a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017a8:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
			if (u_PS < e) {
 80017ac:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80017b0:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80017b4:	f7ff facc 	bl	8000d50 <__aeabi_dcmplt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <Fuzzy+0x606>
				u_PS = e;
 80017be:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 80017c2:	e9c7 3470 	strd	r3, r4, [r7, #448]	; 0x1c0
		for (j = idx; j < 5; j++) {
 80017c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017ca:	3301      	adds	r3, #1
 80017cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80017d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	ddde      	ble.n	8001796 <Fuzzy+0x5d6>
			}
		}
	}

	fuzzy_e[0] = rules[20];
 80017d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017dc:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 80017e0:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
	fuzzy_e[1] = rules[16];
 80017e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017e8:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80017ec:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
	fuzzy_e[2] = rules[12];
 80017f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017f4:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80017f8:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
	fuzzy_e[3] = rules[8];
 80017fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001800:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8001804:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	fuzzy_e[4] = rules[4];
 8001808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800180c:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001810:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	if (!rtIsNaN(rules[20])) {
 8001814:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001818:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800181c:	eeb0 0a47 	vmov.f32	s0, s14
 8001820:	eef0 0a67 	vmov.f32	s1, s15
 8001824:	f000 fc66 	bl	80020f4 <rtIsNaN>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d103      	bne.n	8001836 <Fuzzy+0x676>
		idx = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001834:	e034      	b.n	80018a0 <Fuzzy+0x6e0>
	} else {
		idx = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		j = 2;
 800183c:	2302      	movs	r3, #2
 800183e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		exitg1 = false;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		while ((!exitg1) && (j < 6)) {
 8001848:	e01f      	b.n	800188a <Fuzzy+0x6ca>
			if (!rtIsNaN(fuzzy_e[j - 1])) {
 800184a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800184e:	3b01      	subs	r3, #1
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001856:	4413      	add	r3, r2
 8001858:	3b70      	subs	r3, #112	; 0x70
 800185a:	ed93 7b00 	vldr	d7, [r3]
 800185e:	eeb0 0a47 	vmov.f32	s0, s14
 8001862:	eef0 0a67 	vmov.f32	s1, s15
 8001866:	f000 fc45 	bl	80020f4 <rtIsNaN>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d107      	bne.n	8001880 <Fuzzy+0x6c0>
				idx = j;
 8001870:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001874:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
				exitg1 = true;
 8001878:	2301      	movs	r3, #1
 800187a:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 800187e:	e004      	b.n	800188a <Fuzzy+0x6ca>
			} else {
				j++;
 8001880:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001884:	3301      	adds	r3, #1
 8001886:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		while ((!exitg1) && (j < 6)) {
 800188a:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800188e:	f083 0301 	eor.w	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <Fuzzy+0x6e0>
 8001898:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800189c:	2b05      	cmp	r3, #5
 800189e:	ddd4      	ble.n	800184a <Fuzzy+0x68a>
			}
		}
	}

	if (idx == 0) {
 80018a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d106      	bne.n	80018b6 <Fuzzy+0x6f6>
		u_ZE = rules[20];
 80018a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ac:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 80018b0:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
 80018b4:	e037      	b.n	8001926 <Fuzzy+0x766>
	} else {
		u_ZE = fuzzy_e[idx - 1];
 80018b6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80018ba:	3b01      	subs	r3, #1
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80018c2:	4413      	add	r3, r2
 80018c4:	3b70      	subs	r3, #112	; 0x70
 80018c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018ca:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		idx++;
 80018ce:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80018d2:	3301      	adds	r3, #1
 80018d4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		for (j = idx; j < 6; j++) {
 80018d8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80018dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80018e0:	e01d      	b.n	800191e <Fuzzy+0x75e>
			e = fuzzy_e[j - 1];
 80018e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80018e6:	3b01      	subs	r3, #1
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80018ee:	4413      	add	r3, r2
 80018f0:	3b70      	subs	r3, #112	; 0x70
 80018f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018f6:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
			if (u_ZE < e) {
 80018fa:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80018fe:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8001902:	f7ff fa25 	bl	8000d50 <__aeabi_dcmplt>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <Fuzzy+0x754>
				u_ZE = e;
 800190c:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8001910:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		for (j = idx; j < 6; j++) {
 8001914:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001918:	3301      	adds	r3, #1
 800191a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800191e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001922:	2b05      	cmp	r3, #5
 8001924:	dddd      	ble.n	80018e2 <Fuzzy+0x722>
			}
		}
	}

	b_varargin_1[0] = rules[15];
 8001926:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800192a:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800192e:	f107 0218 	add.w	r2, r7, #24
 8001932:	e9c2 3400 	strd	r3, r4, [r2]
	b_varargin_1[1] = rules[11];
 8001936:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800193a:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 800193e:	f107 0218 	add.w	r2, r7, #24
 8001942:	e9c2 3402 	strd	r3, r4, [r2, #8]
	b_varargin_1[2] = rules[7];
 8001946:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800194a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800194e:	f107 0218 	add.w	r2, r7, #24
 8001952:	e9c2 3404 	strd	r3, r4, [r2, #16]
	b_varargin_1[3] = rules[3];
 8001956:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800195a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800195e:	f107 0218 	add.w	r2, r7, #24
 8001962:	e9c2 3406 	strd	r3, r4, [r2, #24]
	if (!rtIsNaN(rules[15])) {
 8001966:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800196a:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 800196e:	eeb0 0a47 	vmov.f32	s0, s14
 8001972:	eef0 0a67 	vmov.f32	s1, s15
 8001976:	f000 fbbd 	bl	80020f4 <rtIsNaN>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d103      	bne.n	8001988 <Fuzzy+0x7c8>
		idx = 1;
 8001980:	2301      	movs	r3, #1
 8001982:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001986:	e033      	b.n	80019f0 <Fuzzy+0x830>
	} else {
		idx = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		j = 2;
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		exitg1 = false;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		while ((!exitg1) && (j < 5)) {
 800199a:	e01e      	b.n	80019da <Fuzzy+0x81a>
			if (!rtIsNaN(b_varargin_1[j - 1])) {
 800199c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019a0:	3b01      	subs	r3, #1
 80019a2:	f107 0218 	add.w	r2, r7, #24
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	ed93 7b00 	vldr	d7, [r3]
 80019ae:	eeb0 0a47 	vmov.f32	s0, s14
 80019b2:	eef0 0a67 	vmov.f32	s1, s15
 80019b6:	f000 fb9d 	bl	80020f4 <rtIsNaN>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d107      	bne.n	80019d0 <Fuzzy+0x810>
				idx = j;
 80019c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019c4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
				exitg1 = true;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 80019ce:	e004      	b.n	80019da <Fuzzy+0x81a>
			} else {
				j++;
 80019d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019d4:	3301      	adds	r3, #1
 80019d6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		while ((!exitg1) && (j < 5)) {
 80019da:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80019de:	f083 0301 	eor.w	r3, r3, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <Fuzzy+0x830>
 80019e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	ddd5      	ble.n	800199c <Fuzzy+0x7dc>
			}
		}
	}

	if (idx == 0) {
 80019f0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d106      	bne.n	8001a06 <Fuzzy+0x846>
		u_NS = rules[15];
 80019f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019fc:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8001a00:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 8001a04:	e035      	b.n	8001a72 <Fuzzy+0x8b2>
	} else {
		u_NS = b_varargin_1[idx - 1];
 8001a06:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f107 0218 	add.w	r2, r7, #24
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a18:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
		idx++;
 8001a1c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001a20:	3301      	adds	r3, #1
 8001a22:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		for (j = idx; j < 5; j++) {
 8001a26:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001a2a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001a2e:	e01c      	b.n	8001a6a <Fuzzy+0x8aa>
			e = b_varargin_1[j - 1];
 8001a30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a34:	3b01      	subs	r3, #1
 8001a36:	f107 0218 	add.w	r2, r7, #24
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a42:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
			if (u_NS < e) {
 8001a46:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8001a4a:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8001a4e:	f7ff f97f 	bl	8000d50 <__aeabi_dcmplt>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <Fuzzy+0x8a0>
				u_NS = e;
 8001a58:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8001a5c:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
		for (j = idx; j < 5; j++) {
 8001a60:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a64:	3301      	adds	r3, #1
 8001a66:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001a6a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	ddde      	ble.n	8001a30 <Fuzzy+0x870>
			}
		}
	}

	varargin_1[0] = rules[0];
 8001a72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a7a:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
	varargin_1[1] = rules[5];
 8001a7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a82:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001a86:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	varargin_1[2] = rules[10];
 8001a8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a8e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8001a92:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	varargin_1[3] = rules[1];
 8001a96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a9a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001a9e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	varargin_1[4] = rules[6];
 8001aa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aa6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001aaa:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	varargin_1[5] = rules[2];
 8001aae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ab2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001ab6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	if (!rtIsNaN(rules[0])) {
 8001aba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001abe:	ed93 7b00 	vldr	d7, [r3]
 8001ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac6:	eef0 0a67 	vmov.f32	s1, s15
 8001aca:	f000 fb13 	bl	80020f4 <rtIsNaN>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d103      	bne.n	8001adc <Fuzzy+0x91c>
		idx = 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001ada:	e034      	b.n	8001b46 <Fuzzy+0x986>
	} else {
		idx = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		j = 2;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		exitg1 = false;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		while ((!exitg1) && (j < 7)) {
 8001aee:	e01f      	b.n	8001b30 <Fuzzy+0x970>
			if (!rtIsNaN(varargin_1[j - 1])) {
 8001af0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001af4:	3b01      	subs	r3, #1
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001afc:	4413      	add	r3, r2
 8001afe:	3be0      	subs	r3, #224	; 0xe0
 8001b00:	ed93 7b00 	vldr	d7, [r3]
 8001b04:	eeb0 0a47 	vmov.f32	s0, s14
 8001b08:	eef0 0a67 	vmov.f32	s1, s15
 8001b0c:	f000 faf2 	bl	80020f4 <rtIsNaN>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <Fuzzy+0x966>
				idx = j;
 8001b16:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b1a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
				exitg1 = true;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 8001b24:	e004      	b.n	8001b30 <Fuzzy+0x970>
			} else {
				j++;
 8001b26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		while ((!exitg1) && (j < 7)) {
 8001b30:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8001b34:	f083 0301 	eor.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <Fuzzy+0x986>
 8001b3e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	ddd4      	ble.n	8001af0 <Fuzzy+0x930>
			}
		}
	}

	if (idx == 0) {
 8001b46:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <Fuzzy+0x99c>
		u_NB = rules[0];
 8001b4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b56:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
 8001b5a:	e037      	b.n	8001bcc <Fuzzy+0xa0c>
	} else {
		u_NB = varargin_1[idx - 1];
 8001b5c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001b60:	3b01      	subs	r3, #1
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001b68:	4413      	add	r3, r2
 8001b6a:	3be0      	subs	r3, #224	; 0xe0
 8001b6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b70:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
		idx++;
 8001b74:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		for (j = idx; j < 7; j++) {
 8001b7e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001b82:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001b86:	e01d      	b.n	8001bc4 <Fuzzy+0xa04>
			e = varargin_1[j - 1];
 8001b88:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001b94:	4413      	add	r3, r2
 8001b96:	3be0      	subs	r3, #224	; 0xe0
 8001b98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b9c:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
			if (u_NB < e) {
 8001ba0:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8001ba4:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8001ba8:	f7ff f8d2 	bl	8000d50 <__aeabi_dcmplt>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <Fuzzy+0x9fa>
				u_NB = e;
 8001bb2:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8001bb6:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
		for (j = idx; j < 7; j++) {
 8001bba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001bc4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001bc8:	2b06      	cmp	r3, #6
 8001bca:	dddd      	ble.n	8001b88 <Fuzzy+0x9c8>
	/* %% */
	/*  Defuzzification method: Center of gravity */
	/* %% */
	/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
	/* %%%%%%%% Postprocessing %%%%%%%%% */
	theta_m_d = (((((de + u_PS * 0.3) + u_ZE * 0.0) + u_NS * -0.3) + -u_NB) /
 8001bcc:	a342      	add	r3, pc, #264	; (adr r3, 8001cd8 <Fuzzy+0xb18>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8001bd6:	f7fe fe49 	bl	800086c <__aeabi_dmul>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	4618      	mov	r0, r3
 8001be0:	4621      	mov	r1, r4
 8001be2:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8001be6:	f7fe fc8b 	bl	8000500 <__adddf3>
 8001bea:	4603      	mov	r3, r0
 8001bec:	460c      	mov	r4, r1
 8001bee:	4625      	mov	r5, r4
 8001bf0:	461c      	mov	r4, r3
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8001bfe:	f7fe fe35 	bl	800086c <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe fc79 	bl	8000500 <__adddf3>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460c      	mov	r4, r1
 8001c12:	4625      	mov	r5, r4
 8001c14:	461c      	mov	r4, r3
 8001c16:	a332      	add	r3, pc, #200	; (adr r3, 8001ce0 <Fuzzy+0xb20>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8001c20:	f7fe fe24 	bl	800086c <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fc68 	bl	8000500 <__adddf3>
 8001c30:	4603      	mov	r3, r0
 8001c32:	460c      	mov	r4, r1
 8001c34:	4618      	mov	r0, r3
 8001c36:	4621      	mov	r1, r4
 8001c38:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8001c3c:	f7fe fc5e 	bl	80004fc <__aeabi_dsub>
 8001c40:	4603      	mov	r3, r0
 8001c42:	460c      	mov	r4, r1
 8001c44:	4625      	mov	r5, r4
 8001c46:	461c      	mov	r4, r3
			((((de + u_PS) + u_ZE) + u_NS) + u_NB) * T + theta_m_d_k_1) * Ku;
 8001c48:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8001c4c:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8001c50:	f7fe fc56 	bl	8000500 <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8001c60:	f7fe fc4e 	bl	8000500 <__adddf3>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8001c70:	f7fe fc46 	bl	8000500 <__adddf3>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8001c80:	f7fe fc3e 	bl	8000500 <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
	theta_m_d = (((((de + u_PS * 0.3) + u_ZE * 0.0) + u_NS * -0.3) + -u_NB) /
 8001c88:	4620      	mov	r0, r4
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	f7fe ff18 	bl	8000ac0 <__aeabi_ddiv>
 8001c90:	4603      	mov	r3, r0
 8001c92:	460c      	mov	r4, r1
 8001c94:	4618      	mov	r0, r3
 8001c96:	4621      	mov	r1, r4
			((((de + u_PS) + u_ZE) + u_NS) + u_NB) * T + theta_m_d_k_1) * Ku;
 8001c98:	a313      	add	r3, pc, #76	; (adr r3, 8001ce8 <Fuzzy+0xb28>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe fde5 	bl	800086c <__aeabi_dmul>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460c      	mov	r4, r1
	theta_m_d = (((((de + u_PS * 0.3) + u_ZE * 0.0) + u_NS * -0.3) + -u_NB) /
 8001ca6:	4639      	mov	r1, r7
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4623      	mov	r3, r4
 8001cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cb0:	f7fe fc26 	bl	8000500 <__adddf3>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	460c      	mov	r4, r1
 8001cb8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
//			theta_m_d = theta_m_d_lower_limit;
//		}
//	}

	/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
	return theta_m_d;
 8001cbc:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 8001cc0:	ec44 3b17 	vmov	d7, r3, r4
}
 8001cc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc8:	eef0 0a67 	vmov.f32	s1, s15
 8001ccc:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	33333333 	.word	0x33333333
 8001cdc:	3fd33333 	.word	0x3fd33333
 8001ce0:	33333333 	.word	0x33333333
 8001ce4:	bfd33333 	.word	0xbfd33333
 8001ce8:	47ae147b 	.word	0x47ae147b
 8001cec:	3f847ae1 	.word	0x3f847ae1

08001cf0 <trapmf>:
 * @brief :
 * @param :
 * @return:
 */
double trapmf(double x, const double params[4])
{
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	ed87 0b02 	vstr	d0, [r7, #8]
 8001cfa:	6078      	str	r0, [r7, #4]
	double y;
	double u0;
	double u1;
	u0 = 0.0;
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	f04f 0400 	mov.w	r4, #0
 8001d04:	e9c7 3406 	strd	r3, r4, [r7, #24]
	u1 = 0.0;
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	f04f 0400 	mov.w	r4, #0
 8001d10:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if (x >= params[1]) {
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3308      	adds	r3, #8
 8001d18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d24:	f7ff f828 	bl	8000d78 <__aeabi_dcmpge>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <trapmf+0x48>
		u0 = 1.0;
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	4c84      	ldr	r4, [pc, #528]	; (8001f44 <trapmf+0x254>)
 8001d34:	e9c7 3406 	strd	r3, r4, [r7, #24]
	}

	if (x < params[0]) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4623      	mov	r3, r4
 8001d42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d46:	f7ff f803 	bl	8000d50 <__aeabi_dcmplt>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <trapmf+0x6c>
		u0 = 0.0;
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	f04f 0400 	mov.w	r4, #0
 8001d58:	e9c7 3406 	strd	r3, r4, [r7, #24]
	}

	if ((params[0] <= x) && (x < params[1]) && (params[0] != params[1])) {
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4623      	mov	r3, r4
 8001d66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d6a:	f7ff f805 	bl	8000d78 <__aeabi_dcmpge>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d047      	beq.n	8001e04 <trapmf+0x114>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3308      	adds	r3, #8
 8001d78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d84:	f7fe ffe4 	bl	8000d50 <__aeabi_dcmplt>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d03a      	beq.n	8001e04 <trapmf+0x114>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3308      	adds	r3, #8
 8001d98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4623      	mov	r3, r4
 8001da0:	f7fe ffcc 	bl	8000d3c <__aeabi_dcmpeq>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d12c      	bne.n	8001e04 <trapmf+0x114>
		u0 = (x - params[0]) * (1.0 / (params[1] - params[0]));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4623      	mov	r3, r4
 8001db4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001db8:	f7fe fba0 	bl	80004fc <__aeabi_dsub>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	461d      	mov	r5, r3
 8001dc2:	4626      	mov	r6, r4
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4623      	mov	r3, r4
 8001dd6:	f7fe fb91 	bl	80004fc <__aeabi_dsub>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460c      	mov	r4, r1
 8001dde:	461a      	mov	r2, r3
 8001de0:	4623      	mov	r3, r4
 8001de2:	f04f 0000 	mov.w	r0, #0
 8001de6:	4957      	ldr	r1, [pc, #348]	; (8001f44 <trapmf+0x254>)
 8001de8:	f7fe fe6a 	bl	8000ac0 <__aeabi_ddiv>
 8001dec:	4603      	mov	r3, r0
 8001dee:	460c      	mov	r4, r1
 8001df0:	461a      	mov	r2, r3
 8001df2:	4623      	mov	r3, r4
 8001df4:	4628      	mov	r0, r5
 8001df6:	4631      	mov	r1, r6
 8001df8:	f7fe fd38 	bl	800086c <__aeabi_dmul>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	460c      	mov	r4, r1
 8001e00:	e9c7 3406 	strd	r3, r4, [r7, #24]
	}

	if (x <= params[2]) {
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3310      	adds	r3, #16
 8001e08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4623      	mov	r3, r4
 8001e10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e14:	f7fe ffa6 	bl	8000d64 <__aeabi_dcmple>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d004      	beq.n	8001e28 <trapmf+0x138>
		u1 = 1.0;
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	4c48      	ldr	r4, [pc, #288]	; (8001f44 <trapmf+0x254>)
 8001e24:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}

	if (x > params[3]) {
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4623      	mov	r3, r4
 8001e34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e38:	f7fe ffa8 	bl	8000d8c <__aeabi_dcmpgt>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <trapmf+0x15e>
		u1 = 0.0;
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	f04f 0400 	mov.w	r4, #0
 8001e4a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}

	if ((params[2] < x) && (x <= params[3]) && (params[2] != params[3])) {
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3310      	adds	r3, #16
 8001e52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4623      	mov	r3, r4
 8001e5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e5e:	f7fe ff95 	bl	8000d8c <__aeabi_dcmpgt>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d048      	beq.n	8001efa <trapmf+0x20a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3318      	adds	r3, #24
 8001e6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e78:	f7fe ff74 	bl	8000d64 <__aeabi_dcmple>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03b      	beq.n	8001efa <trapmf+0x20a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3310      	adds	r3, #16
 8001e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3318      	adds	r3, #24
 8001e8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e92:	461a      	mov	r2, r3
 8001e94:	4623      	mov	r3, r4
 8001e96:	f7fe ff51 	bl	8000d3c <__aeabi_dcmpeq>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d12c      	bne.n	8001efa <trapmf+0x20a>
		u1 = (params[3] - x) * (1.0 / (params[3] - params[2]));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3318      	adds	r3, #24
 8001ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eac:	f7fe fb26 	bl	80004fc <__aeabi_dsub>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	460c      	mov	r4, r1
 8001eb4:	461d      	mov	r5, r3
 8001eb6:	4626      	mov	r6, r4
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3318      	adds	r3, #24
 8001ebc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3310      	adds	r3, #16
 8001ec4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4623      	mov	r3, r4
 8001ecc:	f7fe fb16 	bl	80004fc <__aeabi_dsub>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	460c      	mov	r4, r1
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	f04f 0000 	mov.w	r0, #0
 8001edc:	4919      	ldr	r1, [pc, #100]	; (8001f44 <trapmf+0x254>)
 8001ede:	f7fe fdef 	bl	8000ac0 <__aeabi_ddiv>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460c      	mov	r4, r1
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4623      	mov	r3, r4
 8001eea:	4628      	mov	r0, r5
 8001eec:	4631      	mov	r1, r6
 8001eee:	f7fe fcbd 	bl	800086c <__aeabi_dmul>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460c      	mov	r4, r1
 8001ef6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}

	if ((u0 < u1) || rtIsNaN(u1)) {
 8001efa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001efe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f02:	f7fe ff25 	bl	8000d50 <__aeabi_dcmplt>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <trapmf+0x22a>
 8001f0c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001f10:	f000 f8f0 	bl	80020f4 <rtIsNaN>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <trapmf+0x234>
		y = u0;
 8001f1a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f1e:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001f22:	e003      	b.n	8001f2c <trapmf+0x23c>
	} else {
		y = u1;
 8001f24:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f28:	e9c7 3408 	strd	r3, r4, [r7, #32]
	}

	return y;
 8001f2c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001f30:	ec44 3b17 	vmov	d7, r3, r4
}
 8001f34:	eeb0 0a47 	vmov.f32	s0, s14
 8001f38:	eef0 0a67 	vmov.f32	s1, s15
 8001f3c:	372c      	adds	r7, #44	; 0x2c
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	3ff00000 	.word	0x3ff00000

08001f48 <trimf>:
 * @brief :
 * @param :
 * @return:
 */
double trimf(double x, const double params[3])
{
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f52:	6078      	str	r0, [r7, #4]
	double y;
	y = 0.0;
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	f04f 0400 	mov.w	r4, #0
 8001f5c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if ((params[0] != params[1]) && (params[0] < x) && (x < params[1])) {
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3308      	adds	r3, #8
 8001f6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4623      	mov	r3, r4
 8001f72:	f7fe fee3 	bl	8000d3c <__aeabi_dcmpeq>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d145      	bne.n	8002008 <trimf+0xc0>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4623      	mov	r3, r4
 8001f86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f8a:	f7fe feff 	bl	8000d8c <__aeabi_dcmpgt>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d039      	beq.n	8002008 <trimf+0xc0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3308      	adds	r3, #8
 8001f98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4623      	mov	r3, r4
 8001fa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa4:	f7fe fed4 	bl	8000d50 <__aeabi_dcmplt>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d02c      	beq.n	8002008 <trimf+0xc0>
		y = (x - params[0]) * (1.0 / (params[1] - params[0]));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4623      	mov	r3, r4
 8001fb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fbc:	f7fe fa9e 	bl	80004fc <__aeabi_dsub>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	461d      	mov	r5, r3
 8001fc6:	4626      	mov	r6, r4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3308      	adds	r3, #8
 8001fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4623      	mov	r3, r4
 8001fda:	f7fe fa8f 	bl	80004fc <__aeabi_dsub>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	f04f 0000 	mov.w	r0, #0
 8001fea:	4941      	ldr	r1, [pc, #260]	; (80020f0 <trimf+0x1a8>)
 8001fec:	f7fe fd68 	bl	8000ac0 <__aeabi_ddiv>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	460c      	mov	r4, r1
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4623      	mov	r3, r4
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	4631      	mov	r1, r6
 8001ffc:	f7fe fc36 	bl	800086c <__aeabi_dmul>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}

	if ((params[1] != params[2]) && (params[1] < x) && (x < params[2])) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3308      	adds	r3, #8
 800200c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3310      	adds	r3, #16
 8002014:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002018:	461a      	mov	r2, r3
 800201a:	4623      	mov	r3, r4
 800201c:	f7fe fe8e 	bl	8000d3c <__aeabi_dcmpeq>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d146      	bne.n	80020b4 <trimf+0x16c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3308      	adds	r3, #8
 800202a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800202e:	461a      	mov	r2, r3
 8002030:	4623      	mov	r3, r4
 8002032:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002036:	f7fe fea9 	bl	8000d8c <__aeabi_dcmpgt>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d039      	beq.n	80020b4 <trimf+0x16c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3310      	adds	r3, #16
 8002044:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002048:	461a      	mov	r2, r3
 800204a:	4623      	mov	r3, r4
 800204c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002050:	f7fe fe7e 	bl	8000d50 <__aeabi_dcmplt>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d02c      	beq.n	80020b4 <trimf+0x16c>
		y = (params[2] - x) * (1.0 / (params[2] - params[1]));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3310      	adds	r3, #16
 800205e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002066:	f7fe fa49 	bl	80004fc <__aeabi_dsub>
 800206a:	4603      	mov	r3, r0
 800206c:	460c      	mov	r4, r1
 800206e:	461d      	mov	r5, r3
 8002070:	4626      	mov	r6, r4
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3310      	adds	r3, #16
 8002076:	e9d3 0100 	ldrd	r0, r1, [r3]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3308      	adds	r3, #8
 800207e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002082:	461a      	mov	r2, r3
 8002084:	4623      	mov	r3, r4
 8002086:	f7fe fa39 	bl	80004fc <__aeabi_dsub>
 800208a:	4603      	mov	r3, r0
 800208c:	460c      	mov	r4, r1
 800208e:	461a      	mov	r2, r3
 8002090:	4623      	mov	r3, r4
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	4916      	ldr	r1, [pc, #88]	; (80020f0 <trimf+0x1a8>)
 8002098:	f7fe fd12 	bl	8000ac0 <__aeabi_ddiv>
 800209c:	4603      	mov	r3, r0
 800209e:	460c      	mov	r4, r1
 80020a0:	461a      	mov	r2, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	4628      	mov	r0, r5
 80020a6:	4631      	mov	r1, r6
 80020a8:	f7fe fbe0 	bl	800086c <__aeabi_dmul>
 80020ac:	4603      	mov	r3, r0
 80020ae:	460c      	mov	r4, r1
 80020b0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}

	if (x == params[1]) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3308      	adds	r3, #8
 80020b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80020bc:	461a      	mov	r2, r3
 80020be:	4623      	mov	r3, r4
 80020c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020c4:	f7fe fe3a 	bl	8000d3c <__aeabi_dcmpeq>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <trimf+0x190>
		y = 1.0;
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	4c07      	ldr	r4, [pc, #28]	; (80020f0 <trimf+0x1a8>)
 80020d4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}

	return y;
 80020d8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80020dc:	ec44 3b17 	vmov	d7, r3, r4
}
 80020e0:	eeb0 0a47 	vmov.f32	s0, s14
 80020e4:	eef0 0a67 	vmov.f32	s1, s15
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	3ff00000 	.word	0x3ff00000

080020f4 <rtIsNaN>:
/* Function: rtIsNaN ==================================================
 * Abstract:
 * Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	ed87 0b00 	vstr	d0, [r7]
  return (value!=value)? 1U:0U;
 80020fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002102:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002106:	f7fe fe19 	bl	8000d3c <__aeabi_dcmpeq>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <rtIsNaN+0x20>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <rtIsNaN+0x22>
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <MRAC>:
 * @return:
 */
void MRAC(double theta_l, double theta_l_dot, double theta_m, double theta_m_dot,
		double theta_m_d, double phi_k_1[5], double theta_r_k_1[2],
		double *V_control, double phi_k[5], double theta_r[2])
{
 8002120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002124:	b0d1      	sub	sp, #324	; 0x144
 8002126:	af00      	add	r7, sp, #0
 8002128:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
 800212c:	ed87 1b12 	vstr	d1, [r7, #72]	; 0x48
 8002130:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002134:	ed84 2b00 	vstr	d2, [r4]
 8002138:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800213c:	ed84 3b00 	vstr	d3, [r4]
 8002140:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002144:	ed84 4b00 	vstr	d4, [r4]
 8002148:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800214c:	6020      	str	r0, [r4, #0]
 800214e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002152:	6001      	str	r1, [r0, #0]
 8002154:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002158:	600a      	str	r2, [r1, #0]
 800215a:	f107 0220 	add.w	r2, r7, #32
 800215e:	6013      	str	r3, [r2, #0]
	/*  State variable */
	/*  Error between System respond and reference model respond */
	/*  Regressor */
	/*  Derivative of parameters calculated from parameter */
	/*  adaption law */
	theta_idx_1 = 1.9599999999999997 / phi_k_1[2];
 8002160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3310      	adds	r3, #16
 8002168:	e9d3 3400 	ldrd	r3, r4, [r3]
 800216c:	461a      	mov	r2, r3
 800216e:	4623      	mov	r3, r4
 8002170:	a1ec      	add	r1, pc, #944	; (adr r1, 8002524 <MRAC+0x404>)
 8002172:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002176:	f7fe fca3 	bl	8000ac0 <__aeabi_ddiv>
 800217a:	4603      	mov	r3, r0
 800217c:	460c      	mov	r4, r1
 800217e:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	theta_r[0] = (theta_r_k_1[0] + T * theta_r_k_1[1]) + 0.0 * theta_m_d;
 8002182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	e9d3 5600 	ldrd	r5, r6, [r3]
 800218c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3308      	adds	r3, #8
 8002194:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002198:	a3df      	add	r3, pc, #892	; (adr r3, 8002518 <MRAC+0x3f8>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f7fe fb65 	bl	800086c <__aeabi_dmul>
 80021a2:	4603      	mov	r3, r0
 80021a4:	460c      	mov	r4, r1
 80021a6:	461a      	mov	r2, r3
 80021a8:	4623      	mov	r3, r4
 80021aa:	4628      	mov	r0, r5
 80021ac:	4631      	mov	r1, r6
 80021ae:	f7fe f9a7 	bl	8000500 <__adddf3>
 80021b2:	4603      	mov	r3, r0
 80021b4:	460c      	mov	r4, r1
 80021b6:	461d      	mov	r5, r3
 80021b8:	4626      	mov	r6, r4
 80021ba:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021ca:	f7fe fb4f 	bl	800086c <__aeabi_dmul>
 80021ce:	4603      	mov	r3, r0
 80021d0:	460c      	mov	r4, r1
 80021d2:	461a      	mov	r2, r3
 80021d4:	4623      	mov	r3, r4
 80021d6:	4628      	mov	r0, r5
 80021d8:	4631      	mov	r1, r6
 80021da:	f7fe f991 	bl	8000500 <__adddf3>
 80021de:	4603      	mov	r3, r0
 80021e0:	460c      	mov	r4, r1
 80021e2:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80021e6:	e9c2 3400 	strd	r3, r4, [r2]
	theta[0] = -theta_m;
 80021ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	61ba      	str	r2, [r7, #24]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	ed97 7b06 	vldr	d7, [r7, #24]
 80021fe:	ed87 7b3e 	vstr	d7, [r7, #248]	; 0xf8
	theta_r[1] = (-0.00196 * theta_r_k_1[0] + 0.9972 * theta_r_k_1[1]) + 0.00196 *
 8002202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	e9d3 0100 	ldrd	r0, r1, [r3]
 800220c:	a3c7      	add	r3, pc, #796	; (adr r3, 800252c <MRAC+0x40c>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fe fb2b 	bl	800086c <__aeabi_dmul>
 8002216:	4603      	mov	r3, r0
 8002218:	460c      	mov	r4, r1
 800221a:	461d      	mov	r5, r3
 800221c:	4626      	mov	r6, r4
 800221e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3308      	adds	r3, #8
 8002226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222a:	a3c2      	add	r3, pc, #776	; (adr r3, 8002534 <MRAC+0x414>)
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	f7fe fb1c 	bl	800086c <__aeabi_dmul>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	461a      	mov	r2, r3
 800223a:	4623      	mov	r3, r4
 800223c:	4628      	mov	r0, r5
 800223e:	4631      	mov	r1, r6
 8002240:	f7fe f95e 	bl	8000500 <__adddf3>
 8002244:	4603      	mov	r3, r0
 8002246:	460c      	mov	r4, r1
 8002248:	4698      	mov	r8, r3
 800224a:	46a1      	mov	r9, r4
 800224c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002250:	a3ba      	add	r3, pc, #744	; (adr r3, 800253c <MRAC+0x41c>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800225a:	f7fe fb07 	bl	800086c <__aeabi_dmul>
 800225e:	4603      	mov	r3, r0
 8002260:	460c      	mov	r4, r1
 8002262:	4619      	mov	r1, r3
 8002264:	4622      	mov	r2, r4
 8002266:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800226a:	f103 0508 	add.w	r5, r3, #8
 800226e:	4613      	mov	r3, r2
 8002270:	460a      	mov	r2, r1
 8002272:	4640      	mov	r0, r8
 8002274:	4649      	mov	r1, r9
 8002276:	f7fe f943 	bl	8000500 <__adddf3>
 800227a:	4603      	mov	r3, r0
 800227c:	460c      	mov	r4, r1
 800227e:	e9c5 3400 	strd	r3, r4, [r5]
			theta_m_d;
	theta[1] = -theta_m_dot;
 8002282:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	613a      	str	r2, [r7, #16]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	ed97 7b04 	vldr	d7, [r7, #16]
 8002296:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
	theta[2] = theta_m_d;
 800229a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800229e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022a2:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	theta[3] = -1.0 / N * theta_l;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	4b9d      	ldr	r3, [pc, #628]	; (8002520 <MRAC+0x400>)
 80022ac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022b0:	f7fe fadc 	bl	800086c <__aeabi_dmul>
 80022b4:	4603      	mov	r3, r0
 80022b6:	460c      	mov	r4, r1
 80022b8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	theta[4] = -1.0 / N * theta_l_dot;
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	4b97      	ldr	r3, [pc, #604]	; (8002520 <MRAC+0x400>)
 80022c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80022c6:	f7fe fad1 	bl	800086c <__aeabi_dmul>
 80022ca:	4603      	mov	r3, r0
 80022cc:	460c      	mov	r4, r1
 80022ce:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	for (i0 = 0; i0 < 5; i0++) {
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80022d8:	e037      	b.n	800234a <MRAC+0x22a>
		c_gamma[i0] = 0.0 * theta[i0];
 80022da:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80022e4:	4413      	add	r3, r2
 80022e6:	3b48      	subs	r3, #72	; 0x48
 80022e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	f7fe faba 	bl	800086c <__aeabi_dmul>
 80022f8:	4603      	mov	r3, r0
 80022fa:	460c      	mov	r4, r1
 80022fc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002300:	00d2      	lsls	r2, r2, #3
 8002302:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8002306:	440a      	add	r2, r1
 8002308:	3a98      	subs	r2, #152	; 0x98
 800230a:	e9c2 3400 	strd	r3, r4, [r2]
		c_gamma[i0 + 5] = theta_idx_1 * theta[i0];
 800230e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8002318:	4413      	add	r3, r2
 800231a:	3b48      	subs	r3, #72	; 0x48
 800231c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002320:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002324:	1d5d      	adds	r5, r3, #5
 8002326:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800232a:	f7fe fa9f 	bl	800086c <__aeabi_dmul>
 800232e:	4603      	mov	r3, r0
 8002330:	460c      	mov	r4, r1
 8002332:	00ea      	lsls	r2, r5, #3
 8002334:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8002338:	440a      	add	r2, r1
 800233a:	3a98      	subs	r2, #152	; 0x98
 800233c:	e9c2 3400 	strd	r3, r4, [r2]
	for (i0 = 0; i0 < 5; i0++) {
 8002340:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002344:	3301      	adds	r3, #1
 8002346:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800234a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800234e:	2b04      	cmp	r3, #4
 8002350:	ddc3      	ble.n	80022da <MRAC+0x1ba>
	}

	for (i0 = 0; i0 < 10; i0++) {
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002358:	e019      	b.n	800238e <MRAC+0x26e>
		c_gamma[i0] *= -gamma;
 800235a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8002364:	4413      	add	r3, r2
 8002366:	3b98      	subs	r3, #152	; 0x98
 8002368:	e9d3 3400 	ldrd	r3, r4, [r3]
 800236c:	469a      	mov	sl, r3
 800236e:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8002372:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800237c:	4413      	add	r3, r2
 800237e:	3b98      	subs	r3, #152	; 0x98
 8002380:	e9c3 ab00 	strd	sl, fp, [r3]
	for (i0 = 0; i0 < 10; i0++) {
 8002384:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002388:	3301      	adds	r3, #1
 800238a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800238e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002392:	2b09      	cmp	r3, #9
 8002394:	dde1      	ble.n	800235a <MRAC+0x23a>
	}

	for (i0 = 0; i0 < 5; i0++) {
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800239c:	e086      	b.n	80024ac <MRAC+0x38c>
		d_gamma[i0] = 0.0;
 800239e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80023a8:	4413      	add	r3, r2
 80023aa:	f1a3 02e8 	sub.w	r2, r3, #232	; 0xe8
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	f04f 0400 	mov.w	r4, #0
 80023b6:	e9c2 3400 	strd	r3, r4, [r2]
		d0 = c_gamma[i0 + 5];
 80023ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80023be:	3305      	adds	r3, #5
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80023c6:	4413      	add	r3, r2
 80023c8:	3b98      	subs	r3, #152	; 0x98
 80023ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023ce:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		d_gamma[i0] = c_gamma[i0] * 1.26 + d0 * 0.26;
 80023d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80023dc:	4413      	add	r3, r2
 80023de:	3b98      	subs	r3, #152	; 0x98
 80023e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e4:	a346      	add	r3, pc, #280	; (adr r3, 8002500 <MRAC+0x3e0>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f7fe fa3f 	bl	800086c <__aeabi_dmul>
 80023ee:	4603      	mov	r3, r0
 80023f0:	460c      	mov	r4, r1
 80023f2:	4625      	mov	r5, r4
 80023f4:	461c      	mov	r4, r3
 80023f6:	a344      	add	r3, pc, #272	; (adr r3, 8002508 <MRAC+0x3e8>)
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002400:	f7fe fa34 	bl	800086c <__aeabi_dmul>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4620      	mov	r0, r4
 800240a:	4629      	mov	r1, r5
 800240c:	f7fe f878 	bl	8000500 <__adddf3>
 8002410:	4603      	mov	r3, r0
 8002412:	460c      	mov	r4, r1
 8002414:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002418:	00d2      	lsls	r2, r2, #3
 800241a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800241e:	440a      	add	r2, r1
 8002420:	3ae8      	subs	r2, #232	; 0xe8
 8002422:	e9c2 3400 	strd	r3, r4, [r2]
		d_gamma[i0 + 5] = 0.0;
 8002426:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800242a:	3305      	adds	r3, #5
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8002432:	4413      	add	r3, r2
 8002434:	f1a3 02e8 	sub.w	r2, r3, #232	; 0xe8
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	f04f 0400 	mov.w	r4, #0
 8002440:	e9c2 3400 	strd	r3, r4, [r2]
		d_gamma[i0 + 5] = c_gamma[i0] * 0.26 + d0 * 0.27;
 8002444:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800244e:	4413      	add	r3, r2
 8002450:	3b98      	subs	r3, #152	; 0x98
 8002452:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002456:	a32c      	add	r3, pc, #176	; (adr r3, 8002508 <MRAC+0x3e8>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe fa06 	bl	800086c <__aeabi_dmul>
 8002460:	4603      	mov	r3, r0
 8002462:	460c      	mov	r4, r1
 8002464:	4698      	mov	r8, r3
 8002466:	46a1      	mov	r9, r4
 8002468:	a329      	add	r3, pc, #164	; (adr r3, 8002510 <MRAC+0x3f0>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002472:	f7fe f9fb 	bl	800086c <__aeabi_dmul>
 8002476:	4603      	mov	r3, r0
 8002478:	460c      	mov	r4, r1
 800247a:	4619      	mov	r1, r3
 800247c:	4622      	mov	r2, r4
 800247e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002482:	1d5d      	adds	r5, r3, #5
 8002484:	4613      	mov	r3, r2
 8002486:	460a      	mov	r2, r1
 8002488:	4640      	mov	r0, r8
 800248a:	4649      	mov	r1, r9
 800248c:	f7fe f838 	bl	8000500 <__adddf3>
 8002490:	4603      	mov	r3, r0
 8002492:	460c      	mov	r4, r1
 8002494:	00ea      	lsls	r2, r5, #3
 8002496:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800249a:	440a      	add	r2, r1
 800249c:	3ae8      	subs	r2, #232	; 0xe8
 800249e:	e9c2 3400 	strd	r3, r4, [r2]
	for (i0 = 0; i0 < 5; i0++) {
 80024a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80024a6:	3301      	adds	r3, #1
 80024a8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80024ac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	f77f af74 	ble.w	800239e <MRAC+0x27e>
	}

	theta_idx_0 = theta_m - theta_r[0];
 80024b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80024ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024be:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80024c2:	461a      	mov	r2, r3
 80024c4:	4623      	mov	r3, r4
 80024c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024ca:	f7fe f817 	bl	80004fc <__aeabi_dsub>
 80024ce:	4603      	mov	r3, r0
 80024d0:	460c      	mov	r4, r1
 80024d2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	theta_idx_1 = theta_m_dot - theta_r[1];
 80024d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80024da:	3308      	adds	r3, #8
 80024dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024e0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024e4:	461a      	mov	r2, r3
 80024e6:	4623      	mov	r3, r4
 80024e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024ec:	f7fe f806 	bl	80004fc <__aeabi_dsub>
 80024f0:	4603      	mov	r3, r0
 80024f2:	460c      	mov	r4, r1
 80024f4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	for (i0 = 0; i0 < 5; i0++) {
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80024fe:	e08c      	b.n	800261a <MRAC+0x4fa>
 8002500:	c28f5c29 	.word	0xc28f5c29
 8002504:	3ff428f5 	.word	0x3ff428f5
 8002508:	0a3d70a4 	.word	0x0a3d70a4
 800250c:	3fd0a3d7 	.word	0x3fd0a3d7
 8002510:	147ae148 	.word	0x147ae148
 8002514:	3fd147ae 	.word	0x3fd147ae
 8002518:	47ae147b 	.word	0x47ae147b
 800251c:	3f847ae1 	.word	0x3f847ae1
 8002520:	bfd00000 	.word	0xbfd00000
 8002524:	f5c28f5b 	.word	0xf5c28f5b
 8002528:	3fff5c28 	.word	0x3fff5c28
 800252c:	fcce1c58 	.word	0xfcce1c58
 8002530:	bf600e6a 	.word	0xbf600e6a
 8002534:	f9724745 	.word	0xf9724745
 8002538:	3fefe90f 	.word	0x3fefe90f
 800253c:	fcce1c58 	.word	0xfcce1c58
 8002540:	3f600e6a 	.word	0x3f600e6a
		phi_k[i0] = 0.0;
 8002544:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	f107 0220 	add.w	r2, r7, #32
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	441a      	add	r2, r3
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	f04f 0400 	mov.w	r4, #0
 800255a:	e9c2 3400 	strd	r3, r4, [r2]
		d0 = d_gamma[i0] * theta_idx_0 + d_gamma[i0 + 5] * theta_idx_1;
 800255e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8002568:	4413      	add	r3, r2
 800256a:	3be8      	subs	r3, #232	; 0xe8
 800256c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002570:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002574:	f7fe f97a 	bl	800086c <__aeabi_dmul>
 8002578:	4603      	mov	r3, r0
 800257a:	460c      	mov	r4, r1
 800257c:	4625      	mov	r5, r4
 800257e:	461c      	mov	r4, r3
 8002580:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002584:	3305      	adds	r3, #5
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800258c:	4413      	add	r3, r2
 800258e:	3be8      	subs	r3, #232	; 0xe8
 8002590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002594:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002598:	f7fe f968 	bl	800086c <__aeabi_dmul>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4620      	mov	r0, r4
 80025a2:	4629      	mov	r1, r5
 80025a4:	f7fd ffac 	bl	8000500 <__adddf3>
 80025a8:	4603      	mov	r3, r0
 80025aa:	460c      	mov	r4, r1
 80025ac:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		phi_k[i0] = d0;
 80025b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	f107 0220 	add.w	r2, r7, #32
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	441a      	add	r2, r3
 80025be:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80025c2:	e9c2 3400 	strd	r3, r4, [r2]
		phi_k[i0] = phi_k_1[i0] + T * d0;
 80025c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80025d8:	a35f      	add	r3, pc, #380	; (adr r3, 8002758 <MRAC+0x638>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80025e2:	f7fe f943 	bl	800086c <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	f107 0220 	add.w	r2, r7, #32
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	18d6      	adds	r6, r2, r3
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4620      	mov	r0, r4
 8002602:	4629      	mov	r1, r5
 8002604:	f7fd ff7c 	bl	8000500 <__adddf3>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	e9c6 3400 	strd	r3, r4, [r6]
	for (i0 = 0; i0 < 5; i0++) {
 8002610:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002614:	3301      	adds	r3, #1
 8002616:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800261a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800261e:	2b04      	cmp	r3, #4
 8002620:	dd90      	ble.n	8002544 <MRAC+0x424>

	/*  Appoximated parameters calculated from its derivative */
	/*  [L^T M Ks_hat Ds_hat] */
	/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
	/* %%%%%%%% Control Signal %%%%%%%%% */
	*V_control = Kv * ((((-phi_k[0] * theta_m + -phi_k[1] * theta_m_dot) + phi_k[2]
 8002622:	f107 0320 	add.w	r3, r7, #32
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	e9d3 3400 	ldrd	r3, r4, [r3]
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002640:	f7fe f914 	bl	800086c <__aeabi_dmul>
 8002644:	4603      	mov	r3, r0
 8002646:	460c      	mov	r4, r1
 8002648:	461d      	mov	r5, r3
 800264a:	4626      	mov	r6, r4
 800264c:	f107 0320 	add.w	r3, r7, #32
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3308      	adds	r3, #8
 8002654:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800266c:	f7fe f8fe 	bl	800086c <__aeabi_dmul>
 8002670:	4603      	mov	r3, r0
 8002672:	460c      	mov	r4, r1
 8002674:	461a      	mov	r2, r3
 8002676:	4623      	mov	r3, r4
 8002678:	4628      	mov	r0, r5
 800267a:	4631      	mov	r1, r6
 800267c:	f7fd ff40 	bl	8000500 <__adddf3>
 8002680:	4603      	mov	r3, r0
 8002682:	460c      	mov	r4, r1
 8002684:	4625      	mov	r5, r4
 8002686:	461c      	mov	r4, r3
 8002688:	f107 0320 	add.w	r3, r7, #32
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3310      	adds	r3, #16
 8002690:	e9d3 0100 	ldrd	r0, r1, [r3]
																				 * theta_m_d) - phi_k[3] * (1.0 / N) * theta_l) - phi_k[4]
 8002694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fe f8e6 	bl	800086c <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
	*V_control = Kv * ((((-phi_k[0] * theta_m + -phi_k[1] * theta_m_dot) + phi_k[2]
 80026a4:	4620      	mov	r0, r4
 80026a6:	4629      	mov	r1, r5
 80026a8:	f7fd ff2a 	bl	8000500 <__adddf3>
 80026ac:	4603      	mov	r3, r0
 80026ae:	460c      	mov	r4, r1
 80026b0:	4625      	mov	r5, r4
 80026b2:	461c      	mov	r4, r3
																				 * theta_m_d) - phi_k[3] * (1.0 / N) * theta_l) - phi_k[4]
 80026b4:	f107 0320 	add.w	r3, r7, #32
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3318      	adds	r3, #24
 80026bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <MRAC+0x630>)
 80026c6:	f7fe f8d1 	bl	800086c <__aeabi_dmul>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026d6:	f7fe f8c9 	bl	800086c <__aeabi_dmul>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4620      	mov	r0, r4
 80026e0:	4629      	mov	r1, r5
 80026e2:	f7fd ff0b 	bl	80004fc <__aeabi_dsub>
 80026e6:	4603      	mov	r3, r0
 80026e8:	460c      	mov	r4, r1
 80026ea:	4625      	mov	r5, r4
 80026ec:	461c      	mov	r4, r3
 80026ee:	f107 0320 	add.w	r3, r7, #32
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3320      	adds	r3, #32
 80026f6:	e9d3 0100 	ldrd	r0, r1, [r3]
																																		* (1.0 / N) * theta_l_dot);
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <MRAC+0x630>)
 8002700:	f7fe f8b4 	bl	800086c <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002710:	f7fe f8ac 	bl	800086c <__aeabi_dmul>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
																				 * theta_m_d) - phi_k[3] * (1.0 / N) * theta_l) - phi_k[4]
 8002718:	4620      	mov	r0, r4
 800271a:	4629      	mov	r1, r5
 800271c:	f7fd feee 	bl	80004fc <__aeabi_dsub>
 8002720:	4603      	mov	r3, r0
 8002722:	460c      	mov	r4, r1
 8002724:	4618      	mov	r0, r3
 8002726:	4621      	mov	r1, r4
	*V_control = Kv * ((((-phi_k[0] * theta_m + -phi_k[1] * theta_m_dot) + phi_k[2]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MRAC+0x634>)
 800272e:	f7fe f89d 	bl	800086c <__aeabi_dmul>
 8002732:	4603      	mov	r3, r0
 8002734:	460c      	mov	r4, r1
 8002736:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	e9c2 3400 	strd	r3, r4, [r2]

	/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
}
 8002740:	bf00      	nop
 8002742:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8002746:	46bd      	mov	sp, r7
 8002748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800274c:	f3af 8000 	nop.w
 8002750:	3fd00000 	.word	0x3fd00000
 8002754:	40280000 	.word	0x40280000
 8002758:	47ae147b 	.word	0x47ae147b
 800275c:	3f847ae1 	.word	0x3f847ae1

08002760 <InitController>:
 * @brief :
 * @param :
 * @return:
 */
void InitController()
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <ControllerRun>:
 * @brief :
 * @param :
 * @return:
 */
void ControllerRun()
{
 8002770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002774:	b0ad      	sub	sp, #180	; 0xb4
 8002776:	af0c      	add	r7, sp, #48	; 0x30
	/* Read motor current angle */
	double motorAngle;
	double motorVelocity;
	MotorReadEncoder(&motorAngle, &motorVelocity, CONTROLLER_SAMPLING_TIME_SEC);
 8002778:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800277c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002780:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8002978 <ControllerRun+0x208>
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fe76 	bl	8003478 <MotorReadEncoder>

	/* Read load current angle */
	double loadAngle;
	double loadVelocity;
	IncrementalEncoderReadEncoder(&loadAngle, &loadVelocity, CONTROLLER_SAMPLING_TIME_SEC);
 800278c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002790:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002794:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8002978 <ControllerRun+0x208>
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fcc0 	bl	8003120 <IncrementalEncoderReadEncoder>
//	AbsoluteEncoderReadDataBuffer(&loadAngle);

	/* Fuzzy PI controller */
	double currMotorDesiredAngle;
	static double prevMotorDesiredAngle = 0;
	double currLoadError = 1.5 - loadAngle;
 80027a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	4975      	ldr	r1, [pc, #468]	; (8002980 <ControllerRun+0x210>)
 80027aa:	f7fd fea7 	bl	80004fc <__aeabi_dsub>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	static double prevLoadError = 0;
	currMotorDesiredAngle = Fuzzy(currLoadError, prevLoadError, prevMotorDesiredAngle);
 80027b6:	4b73      	ldr	r3, [pc, #460]	; (8002984 <ControllerRun+0x214>)
 80027b8:	ed93 7b00 	vldr	d7, [r3]
 80027bc:	4b72      	ldr	r3, [pc, #456]	; (8002988 <ControllerRun+0x218>)
 80027be:	ed93 6b00 	vldr	d6, [r3]
 80027c2:	eeb0 2a46 	vmov.f32	s4, s12
 80027c6:	eef0 2a66 	vmov.f32	s5, s13
 80027ca:	eeb0 1a47 	vmov.f32	s2, s14
 80027ce:	eef0 1a67 	vmov.f32	s3, s15
 80027d2:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 80027d6:	f7fe fcf3 	bl	80011c0 <Fuzzy>
 80027da:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
	prevLoadError = currLoadError;
 80027de:	4969      	ldr	r1, [pc, #420]	; (8002984 <ControllerRun+0x214>)
 80027e0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80027e4:	e9c1 2300 	strd	r2, r3, [r1]
	prevMotorDesiredAngle = currMotorDesiredAngle;
 80027e8:	4967      	ldr	r1, [pc, #412]	; (8002988 <ControllerRun+0x218>)
 80027ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80027ee:	e9c1 2300 	strd	r2, r3, [r1]
	double controlVoltage;
	static double prevParameter[5] = {2.760782, 1.057416, 2.764187, 1.221422, 0.998208};
	static double prevReferenceModel[2] = {0,0};
	double currParameter[5];
	double currReferenceModel[2];
	MRAC(loadAngle, loadVelocity, motorAngle, motorVelocity, currMotorDesiredAngle, prevParameter, prevReferenceModel,
 80027f2:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80027f6:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80027fa:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
 80027fe:	ed97 3b16 	vldr	d3, [r7, #88]	; 0x58
 8002802:	f107 0118 	add.w	r1, r7, #24
 8002806:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800280a:	f107 0308 	add.w	r3, r7, #8
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	460b      	mov	r3, r1
 8002812:	495e      	ldr	r1, [pc, #376]	; (800298c <ControllerRun+0x21c>)
 8002814:	485e      	ldr	r0, [pc, #376]	; (8002990 <ControllerRun+0x220>)
 8002816:	ed97 4b1c 	vldr	d4, [r7, #112]	; 0x70
 800281a:	eeb0 2a45 	vmov.f32	s4, s10
 800281e:	eef0 2a65 	vmov.f32	s5, s11
 8002822:	eeb0 1a46 	vmov.f32	s2, s12
 8002826:	eef0 1a66 	vmov.f32	s3, s13
 800282a:	eeb0 0a47 	vmov.f32	s0, s14
 800282e:	eef0 0a67 	vmov.f32	s1, s15
 8002832:	f7ff fc75 	bl	8002120 <MRAC>
			&controlVoltage, currParameter, currReferenceModel);
	prevParameter[0] = currParameter[0];
 8002836:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800283a:	4955      	ldr	r1, [pc, #340]	; (8002990 <ControllerRun+0x220>)
 800283c:	e9c1 2300 	strd	r2, r3, [r1]
	prevParameter[1] = currParameter[1];
 8002840:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002844:	4952      	ldr	r1, [pc, #328]	; (8002990 <ControllerRun+0x220>)
 8002846:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prevParameter[2] = currParameter[2];
 800284a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800284e:	4950      	ldr	r1, [pc, #320]	; (8002990 <ControllerRun+0x220>)
 8002850:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prevParameter[3] = currParameter[3];
 8002854:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002858:	494d      	ldr	r1, [pc, #308]	; (8002990 <ControllerRun+0x220>)
 800285a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prevParameter[4] = currParameter[4];
 800285e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002862:	494b      	ldr	r1, [pc, #300]	; (8002990 <ControllerRun+0x220>)
 8002864:	e9c1 2308 	strd	r2, r3, [r1, #32]
	prevReferenceModel[0] = currReferenceModel[0];
 8002868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800286c:	4947      	ldr	r1, [pc, #284]	; (800298c <ControllerRun+0x21c>)
 800286e:	e9c1 2300 	strd	r2, r3, [r1]
	prevReferenceModel[1] = currReferenceModel[1];
 8002872:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002876:	4945      	ldr	r1, [pc, #276]	; (800298c <ControllerRun+0x21c>)
 8002878:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/* Saturate output */
	if(controlVoltage > MAX_MOTOR_CONTROL_VOLTAGE)
 800287c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	4b43      	ldr	r3, [pc, #268]	; (8002994 <ControllerRun+0x224>)
 8002886:	f7fe fa81 	bl	8000d8c <__aeabi_dcmpgt>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <ControllerRun+0x12c>
		controlVoltage = MAX_MOTOR_CONTROL_VOLTAGE;
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <ControllerRun+0x224>)
 8002896:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800289a:	e00e      	b.n	80028ba <ControllerRun+0x14a>
	else if(controlVoltage < -MAX_MOTOR_CONTROL_VOLTAGE)
 800289c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	4b3c      	ldr	r3, [pc, #240]	; (8002998 <ControllerRun+0x228>)
 80028a6:	f7fe fa53 	bl	8000d50 <__aeabi_dcmplt>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <ControllerRun+0x14a>
		controlVoltage = -MAX_MOTOR_CONTROL_VOLTAGE;
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	4b38      	ldr	r3, [pc, #224]	; (8002998 <ControllerRun+0x228>)
 80028b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	/* Set control voltage */
	if(controlVoltage < 0)
 80028ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	f7fe fa43 	bl	8000d50 <__aeabi_dcmplt>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00d      	beq.n	80028ec <ControllerRun+0x17c>
	{
		MotorSetDirection(MOTOR_DIR_NEGATIVE);
 80028d0:	2201      	movs	r2, #1
 80028d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028d6:	4831      	ldr	r0, [pc, #196]	; (800299c <ControllerRun+0x22c>)
 80028d8:	f001 ffea 	bl	80048b0 <HAL_GPIO_WritePin>
		controlVoltage = -controlVoltage;
 80028dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028e0:	4614      	mov	r4, r2
 80028e2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80028e6:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 80028ea:	e005      	b.n	80028f8 <ControllerRun+0x188>
	}
	else
	{
		MotorSetDirection(MOTOR_DIR_POSITIVE);
 80028ec:	2200      	movs	r2, #0
 80028ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028f2:	482a      	ldr	r0, [pc, #168]	; (800299c <ControllerRun+0x22c>)
 80028f4:	f001 ffdc 	bl	80048b0 <HAL_GPIO_WritePin>
	}
	float dutyCycle = (float)(controlVoltage/MAX_MOTOR_CONTROL_VOLTAGE);
 80028f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <ControllerRun+0x224>)
 8002902:	f7fe f8dd 	bl	8000ac0 <__aeabi_ddiv>
 8002906:	4603      	mov	r3, r0
 8002908:	460c      	mov	r4, r1
 800290a:	4618      	mov	r0, r3
 800290c:	4621      	mov	r1, r4
 800290e:	f7fe fa85 	bl	8000e1c <__aeabi_d2f>
 8002912:	4603      	mov	r3, r0
 8002914:	66fb      	str	r3, [r7, #108]	; 0x6c
	MotorSetDutyCycle(dutyCycle);
 8002916:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 800291a:	f000 fd71 	bl	8003400 <MotorSetDutyCycle>

//	if((loadAngle > 6.28) || (loadAngle < -6.28))
//		MotorSetDutyCycle(0);
	LogPrint(LOG_DEBUG, "%f\t%f\t%f\t%f\t%f\t%f\t%f\n",
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <ControllerRun+0x220>)
 8002920:	ed93 7b00 	vldr	d7, [r3]
 8002924:	ed87 7b00 	vstr	d7, [r7]
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <ControllerRun+0x220>)
 800292a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800292e:	4a18      	ldr	r2, [pc, #96]	; (8002990 <ControllerRun+0x220>)
 8002930:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8002934:	4816      	ldr	r0, [pc, #88]	; (8002990 <ControllerRun+0x220>)
 8002936:	e9d0 5606 	ldrd	r5, r6, [r0, #24]
 800293a:	4815      	ldr	r0, [pc, #84]	; (8002990 <ControllerRun+0x220>)
 800293c:	e9d0 8908 	ldrd	r8, r9, [r0, #32]
 8002940:	e9d7 ab14 	ldrd	sl, fp, [r7, #80]	; 0x50
 8002944:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002948:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800294c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002950:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002954:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8002958:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800295c:	e9cd 3400 	strd	r3, r4, [sp]
 8002960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002964:	490e      	ldr	r1, [pc, #56]	; (80029a0 <ControllerRun+0x230>)
 8002966:	2001      	movs	r0, #1
 8002968:	f000 fc80 	bl	800326c <LogPrint>
			prevParameter[0], prevParameter[1], prevParameter[2], prevParameter[3], prevParameter[4],
			loadAngle, motorAngle);
}
 800296c:	bf00      	nop
 800296e:	3784      	adds	r7, #132	; 0x84
 8002970:	46bd      	mov	sp, r7
 8002972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002976:	bf00      	nop
 8002978:	47ae147b 	.word	0x47ae147b
 800297c:	3f847ae1 	.word	0x3f847ae1
 8002980:	3ff80000 	.word	0x3ff80000
 8002984:	20000a00 	.word	0x20000a00
 8002988:	20000a08 	.word	0x20000a08
 800298c:	20000a10 	.word	0x20000a10
 8002990:	20000000 	.word	0x20000000
 8002994:	40280000 	.word	0x40280000
 8002998:	c0280000 	.word	0xc0280000
 800299c:	40020000 	.word	0x40020000
 80029a0:	0800ca48 	.word	0x0800ca48

080029a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_MspInit+0x4c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <HAL_MspInit+0x4c>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_MspInit+0x4c>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_MspInit+0x4c>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a08      	ldr	r2, [pc, #32]	; (80029f0 <HAL_MspInit+0x4c>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_MspInit+0x4c>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029e2:	2007      	movs	r0, #7
 80029e4:	f001 f9f2 	bl	8003dcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a5f      	ldr	r2, [pc, #380]	; (8002b90 <HAL_SPI_MspInit+0x19c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	f040 80b7 	bne.w	8002b86 <HAL_SPI_MspInit+0x192>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	4b5d      	ldr	r3, [pc, #372]	; (8002b94 <HAL_SPI_MspInit+0x1a0>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	4a5c      	ldr	r2, [pc, #368]	; (8002b94 <HAL_SPI_MspInit+0x1a0>)
 8002a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a26:	6413      	str	r3, [r2, #64]	; 0x40
 8002a28:	4b5a      	ldr	r3, [pc, #360]	; (8002b94 <HAL_SPI_MspInit+0x1a0>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	4b56      	ldr	r3, [pc, #344]	; (8002b94 <HAL_SPI_MspInit+0x1a0>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	4a55      	ldr	r2, [pc, #340]	; (8002b94 <HAL_SPI_MspInit+0x1a0>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6313      	str	r3, [r2, #48]	; 0x30
 8002a44:	4b53      	ldr	r3, [pc, #332]	; (8002b94 <HAL_SPI_MspInit+0x1a0>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <HAL_SPI_MspInit+0x1a0>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	4a4e      	ldr	r2, [pc, #312]	; (8002b94 <HAL_SPI_MspInit+0x1a0>)
 8002a5a:	f043 0302 	orr.w	r3, r3, #2
 8002a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_SPI_MspInit+0x1a0>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a70:	2302      	movs	r3, #2
 8002a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002a7c:	2307      	movs	r3, #7
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	4619      	mov	r1, r3
 8002a86:	4844      	ldr	r0, [pc, #272]	; (8002b98 <HAL_SPI_MspInit+0x1a4>)
 8002a88:	f001 fd80 	bl	800458c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a9c:	2305      	movs	r3, #5
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	483c      	ldr	r0, [pc, #240]	; (8002b98 <HAL_SPI_MspInit+0x1a4>)
 8002aa8:	f001 fd70 	bl	800458c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002aac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aba:	2303      	movs	r3, #3
 8002abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002abe:	2305      	movs	r3, #5
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4834      	ldr	r0, [pc, #208]	; (8002b9c <HAL_SPI_MspInit+0x1a8>)
 8002aca:	f001 fd5f 	bl	800458c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002ace:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002ad0:	4a34      	ldr	r2, [pc, #208]	; (8002ba4 <HAL_SPI_MspInit+0x1b0>)
 8002ad2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002ad4:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ada:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae0:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae6:	4b2e      	ldr	r3, [pc, #184]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aec:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aee:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002af4:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002afa:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b00:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b02:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002b0e:	4824      	ldr	r0, [pc, #144]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002b10:	f001 f99e 	bl	8003e50 <HAL_DMA_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8002b1a:	f000 fab1 	bl	8003080 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002b22:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b24:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <HAL_SPI_MspInit+0x1ac>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b2c:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <HAL_SPI_MspInit+0x1b8>)
 8002b2e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b38:	2240      	movs	r2, #64	; 0x40
 8002b3a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b48:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b5c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002b6a:	480f      	ldr	r0, [pc, #60]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b6c:	f001 f970 	bl	8003e50 <HAL_DMA_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8002b76:	f000 fa83 	bl	8003080 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b7e:	649a      	str	r2, [r3, #72]	; 0x48
 8002b80:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <HAL_SPI_MspInit+0x1b4>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b86:	bf00      	nop
 8002b88:	3728      	adds	r7, #40	; 0x28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40003800 	.word	0x40003800
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020400 	.word	0x40020400
 8002ba0:	20000bf4 	.word	0x20000bf4
 8002ba4:	40026058 	.word	0x40026058
 8002ba8:	20000c54 	.word	0x20000c54
 8002bac:	40026070 	.word	0x40026070

08002bb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <HAL_TIM_PWM_MspInit+0x3c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10d      	bne.n	8002bde <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_TIM_PWM_MspInit+0x40>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_TIM_PWM_MspInit+0x40>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_TIM_PWM_MspInit+0x40>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40010000 	.word	0x40010000
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c04:	d115      	bne.n	8002c32 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <HAL_TIM_Base_MspInit+0x48>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <HAL_TIM_Base_MspInit+0x48>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_TIM_Base_MspInit+0x48>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	201c      	movs	r0, #28
 8002c28:	f001 f8db 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c2c:	201c      	movs	r0, #28
 8002c2e:	f001 f8f4 	bl	8003e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800

08002c40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08c      	sub	sp, #48	; 0x30
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 031c 	add.w	r3, r7, #28
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a32      	ldr	r2, [pc, #200]	; (8002d28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d12c      	bne.n	8002cbc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a30      	ldr	r2, [pc, #192]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b2e      	ldr	r3, [pc, #184]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a29      	ldr	r2, [pc, #164]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c9a:	23c0      	movs	r3, #192	; 0xc0
 8002c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002caa:	2302      	movs	r3, #2
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cae:	f107 031c 	add.w	r3, r7, #28
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	481e      	ldr	r0, [pc, #120]	; (8002d30 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002cb6:	f001 fc69 	bl	800458c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002cba:	e030      	b.n	8002d1e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d12b      	bne.n	8002d1e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <HAL_TIM_Encoder_MspInit+0xec>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cfe:	23c0      	movs	r3, #192	; 0xc0
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d06:	2301      	movs	r3, #1
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 031c 	add.w	r3, r7, #28
 8002d16:	4619      	mov	r1, r3
 8002d18:	4807      	ldr	r0, [pc, #28]	; (8002d38 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002d1a:	f001 fc37 	bl	800458c <HAL_GPIO_Init>
}
 8002d1e:	bf00      	nop
 8002d20:	3730      	adds	r7, #48	; 0x30
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40020000 	.word	0x40020000
 8002d34:	40000800 	.word	0x40000800
 8002d38:	40020400 	.word	0x40020400

08002d3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 030c 	add.w	r3, r7, #12
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <HAL_TIM_MspPostInit+0x68>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d11e      	bne.n	8002d9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_TIM_MspPostInit+0x6c>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <HAL_TIM_MspPostInit+0x6c>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_TIM_MspPostInit+0x6c>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	4619      	mov	r1, r3
 8002d96:	4805      	ldr	r0, [pc, #20]	; (8002dac <HAL_TIM_MspPostInit+0x70>)
 8002d98:	f001 fbf8 	bl	800458c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d9c:	bf00      	nop
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40010000 	.word	0x40010000
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40020000 	.word	0x40020000

08002db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <HAL_UART_MspInit+0xf0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d161      	bne.n	8002e96 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	4b33      	ldr	r3, [pc, #204]	; (8002ea4 <HAL_UART_MspInit+0xf4>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <HAL_UART_MspInit+0xf4>)
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_UART_MspInit+0xf4>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <HAL_UART_MspInit+0xf4>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a2b      	ldr	r2, [pc, #172]	; (8002ea4 <HAL_UART_MspInit+0xf4>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <HAL_UART_MspInit+0xf4>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e0a:	230c      	movs	r3, #12
 8002e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e16:	2303      	movs	r3, #3
 8002e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e1a:	2307      	movs	r3, #7
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4619      	mov	r1, r3
 8002e24:	4820      	ldr	r0, [pc, #128]	; (8002ea8 <HAL_UART_MspInit+0xf8>)
 8002e26:	f001 fbb1 	bl	800458c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e2c:	4a20      	ldr	r2, [pc, #128]	; (8002eb0 <HAL_UART_MspInit+0x100>)
 8002e2e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e36:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e38:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e6a:	4810      	ldr	r0, [pc, #64]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e6c:	f000 fff0 	bl	8003e50 <HAL_DMA_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002e76:	f000 f903 	bl	8003080 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_UART_MspInit+0xfc>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	2026      	movs	r0, #38	; 0x26
 8002e8c:	f000 ffa9 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e90:	2026      	movs	r0, #38	; 0x26
 8002e92:	f000 ffc2 	bl	8003e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e96:	bf00      	nop
 8002e98:	3728      	adds	r7, #40	; 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40004400 	.word	0x40004400
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	20000d68 	.word	0x20000d68
 8002eb0:	400260a0 	.word	0x400260a0

08002eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <HardFault_Handler+0x4>

08002ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <MemManage_Handler+0x4>

08002ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <BusFault_Handler+0x4>

08002ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <UsageFault_Handler+0x4>

08002eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f08:	f000 fe70 	bl	8003bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <DMA1_Stream3_IRQHandler+0x10>)
 8002f16:	f001 f8c3 	bl	80040a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000bf4 	.word	0x20000bf4

08002f24 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <DMA1_Stream4_IRQHandler+0x10>)
 8002f2a:	f001 f8b9 	bl	80040a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000c54 	.word	0x20000c54

08002f38 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <DMA1_Stream6_IRQHandler+0x10>)
 8002f3e:	f001 f8af 	bl	80040a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000d68 	.word	0x20000d68

08002f4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f50:	4802      	ldr	r0, [pc, #8]	; (8002f5c <TIM2_IRQHandler+0x10>)
 8002f52:	f003 ffae 	bl	8006eb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000e08 	.word	0x20000e08

08002f60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <I2C1_EV_IRQHandler+0x10>)
 8002f66:	f001 fcbc 	bl	80048e2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000d14 	.word	0x20000d14

08002f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f78:	4802      	ldr	r0, [pc, #8]	; (8002f84 <USART2_IRQHandler+0x10>)
 8002f7a:	f004 fef5 	bl	8007d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000dc8 	.word	0x20000dc8

08002f88 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002f8c:	4802      	ldr	r0, [pc, #8]	; (8002f98 <DMA1_Stream7_IRQHandler+0x10>)
 8002f8e:	f001 f887 	bl	80040a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000cb4 	.word	0x20000cb4

08002f9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <_sbrk+0x50>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <_sbrk+0x16>
		heap_end = &end;
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <_sbrk+0x50>)
 8002fae:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <_sbrk+0x54>)
 8002fb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <_sbrk+0x50>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <_sbrk+0x50>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	466a      	mov	r2, sp
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d907      	bls.n	8002fd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002fc6:	f005 fd21 	bl	8008a0c <__errno>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	230c      	movs	r3, #12
 8002fce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd4:	e006      	b.n	8002fe4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <_sbrk+0x50>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	4a03      	ldr	r2, [pc, #12]	; (8002fec <_sbrk+0x50>)
 8002fe0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000a20 	.word	0x20000a20
 8002ff0:	20000e78 	.word	0x20000e78

08002ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <SystemInit+0x28>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	4a07      	ldr	r2, [pc, #28]	; (800301c <SystemInit+0x28>)
 8003000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <SystemInit+0x28>)
 800300a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800300e:	609a      	str	r2, [r3, #8]
#endif
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003058 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003024:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003026:	e003      	b.n	8003030 <LoopCopyDataInit>

08003028 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800302a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800302c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800302e:	3104      	adds	r1, #4

08003030 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003030:	480b      	ldr	r0, [pc, #44]	; (8003060 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003034:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003036:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003038:	d3f6      	bcc.n	8003028 <CopyDataInit>
  ldr  r2, =_sbss
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800303c:	e002      	b.n	8003044 <LoopFillZerobss>

0800303e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800303e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003040:	f842 3b04 	str.w	r3, [r2], #4

08003044 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003046:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003048:	d3f9      	bcc.n	800303e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800304a:	f7ff ffd3 	bl	8002ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800304e:	f005 fce3 	bl	8008a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003052:	f000 f80e 	bl	8003072 <main>
  bx  lr    
 8003056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003058:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800305c:	0800ce1c 	.word	0x0800ce1c
  ldr  r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003064:	200009e0 	.word	0x200009e0
  ldr  r2, =_sbss
 8003068:	200009e0 	.word	0x200009e0
  ldr  r3, = _ebss
 800306c:	20000e74 	.word	0x20000e74

08003070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC_IRQHandler>

08003072 <main>:
 * @brief :
 * @param :
 * @return:
 */
int main(void)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/
	InitSystem();
 8003076:	f000 fb33 	bl	80036e0 <InitSystem>

	/* Infinite loop */
	while (1)
	{
		SystemStateMachineProcessing();
 800307a:	f000 fb75 	bl	8003768 <SystemStateMachineProcessing>
 800307e:	e7fc      	b.n	800307a <main+0x8>

08003080 <Error_Handler>:
 * @brief :
 * @param : None
 * @return: None
 */
void Error_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
	/* User can add his own implementation to report the HAL error return state */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <InitAbsoluteEncoder>:
 * @brief :
 * @param :
 * @return:
 */
void InitAbsoluteEncoder()
{
 800308e:	b580      	push	{r7, lr}
 8003090:	af00      	add	r7, sp, #0
	MX_SPI2_Init();
 8003092:	f000 f803 	bl	800309c <MX_SPI2_Init>
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <MX_SPI2_Init>:
			break;
	}
}

static inline void MX_SPI2_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80030a0:	4b17      	ldr	r3, [pc, #92]	; (8003100 <MX_SPI2_Init+0x64>)
 80030a2:	4a18      	ldr	r2, [pc, #96]	; (8003104 <MX_SPI2_Init+0x68>)
 80030a4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <MX_SPI2_Init+0x64>)
 80030a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030ac:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <MX_SPI2_Init+0x64>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <MX_SPI2_Init+0x64>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <MX_SPI2_Init+0x64>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <MX_SPI2_Init+0x64>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <MX_SPI2_Init+0x64>)
 80030c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80030cc:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <MX_SPI2_Init+0x64>)
 80030d0:	2220      	movs	r2, #32
 80030d2:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <MX_SPI2_Init+0x64>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <MX_SPI2_Init+0x64>)
 80030dc:	2200      	movs	r2, #0
 80030de:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <MX_SPI2_Init+0x64>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <MX_SPI2_Init+0x64>)
 80030e8:	220a      	movs	r2, #10
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80030ec:	4804      	ldr	r0, [pc, #16]	; (8003100 <MX_SPI2_Init+0x64>)
 80030ee:	f003 fcfb 	bl	8006ae8 <HAL_SPI_Init>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 80030f8:	f7ff ffc2 	bl	8003080 <Error_Handler>
	}
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000a24 	.word	0x20000a24
 8003104:	40003800 	.word	0x40003800

08003108 <InitIncrementalEncoder>:
 * @brief :
 * @param :
 * @return:
 */
void InitIncrementalEncoder()
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 800310c:	f000 f850 	bl	80031b0 <MX_TIM4_Init>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8003110:	213c      	movs	r1, #60	; 0x3c
 8003112:	4802      	ldr	r0, [pc, #8]	; (800311c <InitIncrementalEncoder+0x14>)
 8003114:	f003 fe96 	bl	8006e44 <HAL_TIM_Encoder_Start>
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000a7c 	.word	0x20000a7c

08003120 <IncrementalEncoderReadEncoder>:
 * @param velocity    : Current velocity (unit: radian/second)
 * @param samplingTime: Sampling time (unit: second)
 * @return: None
 */
void IncrementalEncoderReadEncoder(double *position, double *velocity, double samplingTime)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	ed87 0b00 	vstr	d0, [r7]
	uint16_t currPulse;
	double encoderIncrement;

	currPulse = TIM4->CNT;
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <IncrementalEncoderReadEncoder+0x88>)
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	83fb      	strh	r3, [r7, #30]
	encoderIncrement = (double)((currPulse - prevPulse)*ENC_RAD_PER_PULSE);
 8003134:	8bfb      	ldrh	r3, [r7, #30]
 8003136:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800313a:	3b7f      	subs	r3, #127	; 0x7f
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd fb2b 	bl	8000798 <__aeabi_i2d>
 8003142:	a317      	add	r3, pc, #92	; (adr r3, 80031a0 <IncrementalEncoderReadEncoder+0x80>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd fb90 	bl	800086c <__aeabi_dmul>
 800314c:	4603      	mov	r3, r0
 800314e:	460c      	mov	r4, r1
 8003150:	e9c7 3404 	strd	r3, r4, [r7, #16]

	motorPosition += encoderIncrement;
 8003154:	4b15      	ldr	r3, [pc, #84]	; (80031ac <IncrementalEncoderReadEncoder+0x8c>)
 8003156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800315a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800315e:	f7fd f9cf 	bl	8000500 <__adddf3>
 8003162:	4603      	mov	r3, r0
 8003164:	460c      	mov	r4, r1
 8003166:	4a11      	ldr	r2, [pc, #68]	; (80031ac <IncrementalEncoderReadEncoder+0x8c>)
 8003168:	e9c2 3400 	strd	r3, r4, [r2]
	*position = motorPosition;
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <IncrementalEncoderReadEncoder+0x8c>)
 800316e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	e9c2 3400 	strd	r3, r4, [r2]
	*velocity = encoderIncrement/samplingTime;
 8003178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800317c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003180:	f7fd fc9e 	bl	8000ac0 <__aeabi_ddiv>
 8003184:	4603      	mov	r3, r0
 8003186:	460c      	mov	r4, r1
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	e9c2 3400 	strd	r3, r4, [r2]

	/* Reset counter */
	TIM4->CNT = 32767;
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <IncrementalEncoderReadEncoder+0x88>)
 8003190:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003196:	bf00      	nop
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	bf00      	nop
 80031a0:	54442c5a 	.word	0x54442c5a
 80031a4:	3f5921fb 	.word	0x3f5921fb
 80031a8:	40000800 	.word	0x40000800
 80031ac:	20000ac0 	.word	0x20000ac0

080031b0 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static inline void MX_TIM4_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08c      	sub	sp, #48	; 0x30
 80031b4:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig = {0};
 80031b6:	f107 030c 	add.w	r3, r7, #12
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f005 fc4e 	bl	8008a60 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <MX_TIM4_Init+0xa8>)
 80031ce:	4a23      	ldr	r2, [pc, #140]	; (800325c <MX_TIM4_Init+0xac>)
 80031d0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80031d2:	4b21      	ldr	r3, [pc, #132]	; (8003258 <MX_TIM4_Init+0xa8>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d8:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <MX_TIM4_Init+0xa8>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <MX_TIM4_Init+0xa8>)
 80031e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031e4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <MX_TIM4_Init+0xa8>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <MX_TIM4_Init+0xa8>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031f2:	2303      	movs	r3, #3
 80031f4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031fa:	2301      	movs	r3, #1
 80031fc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031fe:	2300      	movs	r3, #0
 8003200:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003206:	2300      	movs	r3, #0
 8003208:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800320a:	2301      	movs	r3, #1
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800320e:	2300      	movs	r3, #0
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	4619      	mov	r1, r3
 800321c:	480e      	ldr	r0, [pc, #56]	; (8003258 <MX_TIM4_Init+0xa8>)
 800321e:	f003 fd7f 	bl	8006d20 <HAL_TIM_Encoder_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM4_Init+0x7c>
	{
		Error_Handler();
 8003228:	f7ff ff2a 	bl	8003080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	4619      	mov	r1, r3
 8003238:	4807      	ldr	r0, [pc, #28]	; (8003258 <MX_TIM4_Init+0xa8>)
 800323a:	f004 fbf9 	bl	8007a30 <HAL_TIMEx_MasterConfigSynchronization>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_TIM4_Init+0x98>
	{
		Error_Handler();
 8003244:	f7ff ff1c 	bl	8003080 <Error_Handler>
	}

	/* Reset Counter */
	TIM4->CNT = 32767;
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <MX_TIM4_Init+0xac>)
 800324a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003250:	bf00      	nop
 8003252:	3730      	adds	r7, #48	; 0x30
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000a7c 	.word	0x20000a7c
 800325c:	40000800 	.word	0x40000800

08003260 <InitLog>:
 * @brief :
 * @param :
 * @return:
 */
void InitLog()
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 8003264:	f000 f87e 	bl	8003364 <MX_USART2_UART_Init>
}
 8003268:	bf00      	nop
 800326a:	bd80      	pop	{r7, pc}

0800326c <LogPrint>:
 * @brief :
 * @param :
 * @return:
 */
void LogPrint(LOG_MESSAGE_TYPE_t messageType, const char *string,...)
{
 800326c:	b40e      	push	{r1, r2, r3}
 800326e:	b580      	push	{r7, lr}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	71fb      	strb	r3, [r7, #7]
	while(transmitInProgress);
 8003278:	bf00      	nop
 800327a:	4b33      	ldr	r3, [pc, #204]	; (8003348 <LogPrint+0xdc>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1fb      	bne.n	800327a <LogPrint+0xe>

	uint8_t userStringStartPosition = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
	memset((void *) LogTxBuffer, 0, sizeof(LogTxBuffer));
 8003286:	2264      	movs	r2, #100	; 0x64
 8003288:	2100      	movs	r1, #0
 800328a:	4830      	ldr	r0, [pc, #192]	; (800334c <LogPrint+0xe0>)
 800328c:	f005 fbe8 	bl	8008a60 <memset>

	switch (messageType)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d836      	bhi.n	8003304 <LogPrint+0x98>
 8003296:	a201      	add	r2, pc, #4	; (adr r2, 800329c <LogPrint+0x30>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	080032c1 	.word	0x080032c1
 80032a4:	080032db 	.word	0x080032db
 80032a8:	080032eb 	.word	0x080032eb
	{
	case LOG_INFO:
		strncpy(LogTxBuffer, "INFO: ", 6);
 80032ac:	4b27      	ldr	r3, [pc, #156]	; (800334c <LogPrint+0xe0>)
 80032ae:	4a28      	ldr	r2, [pc, #160]	; (8003350 <LogPrint+0xe4>)
 80032b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032b4:	6018      	str	r0, [r3, #0]
 80032b6:	3304      	adds	r3, #4
 80032b8:	8019      	strh	r1, [r3, #0]
		userStringStartPosition = 6;
 80032ba:	2306      	movs	r3, #6
 80032bc:	73fb      	strb	r3, [r7, #15]
		break;
 80032be:	e022      	b.n	8003306 <LogPrint+0x9a>
	case LOG_DEBUG:
		strncpy(LogTxBuffer, "DEBUG: ", 7);
 80032c0:	4b22      	ldr	r3, [pc, #136]	; (800334c <LogPrint+0xe0>)
 80032c2:	4a24      	ldr	r2, [pc, #144]	; (8003354 <LogPrint+0xe8>)
 80032c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032c8:	6018      	str	r0, [r3, #0]
 80032ca:	3304      	adds	r3, #4
 80032cc:	8019      	strh	r1, [r3, #0]
 80032ce:	3302      	adds	r3, #2
 80032d0:	0c0a      	lsrs	r2, r1, #16
 80032d2:	701a      	strb	r2, [r3, #0]
		userStringStartPosition = 7;
 80032d4:	2307      	movs	r3, #7
 80032d6:	73fb      	strb	r3, [r7, #15]
		break;
 80032d8:	e015      	b.n	8003306 <LogPrint+0x9a>
	case LOG_WARNING:
		strncpy(LogTxBuffer, "WARNING: ", 9);
 80032da:	4b1c      	ldr	r3, [pc, #112]	; (800334c <LogPrint+0xe0>)
 80032dc:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <LogPrint+0xec>)
 80032de:	ca07      	ldmia	r2, {r0, r1, r2}
 80032e0:	c303      	stmia	r3!, {r0, r1}
 80032e2:	701a      	strb	r2, [r3, #0]
		userStringStartPosition = 9;
 80032e4:	2309      	movs	r3, #9
 80032e6:	73fb      	strb	r3, [r7, #15]
		break;
 80032e8:	e00d      	b.n	8003306 <LogPrint+0x9a>
	case LOG_ERROR:
		strncpy(LogTxBuffer, "ERROR: ", 7);
 80032ea:	4b18      	ldr	r3, [pc, #96]	; (800334c <LogPrint+0xe0>)
 80032ec:	4a1b      	ldr	r2, [pc, #108]	; (800335c <LogPrint+0xf0>)
 80032ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032f2:	6018      	str	r0, [r3, #0]
 80032f4:	3304      	adds	r3, #4
 80032f6:	8019      	strh	r1, [r3, #0]
 80032f8:	3302      	adds	r3, #2
 80032fa:	0c0a      	lsrs	r2, r1, #16
 80032fc:	701a      	strb	r2, [r3, #0]
		userStringStartPosition = 7;
 80032fe:	2307      	movs	r3, #7
 8003300:	73fb      	strb	r3, [r7, #15]
		break;
 8003302:	e000      	b.n	8003306 <LogPrint+0x9a>
	default:
		break;
 8003304:	bf00      	nop
	}

	va_list arg;

	va_start(arg, string);
 8003306:	f107 0320 	add.w	r3, r7, #32
 800330a:	60bb      	str	r3, [r7, #8]
	vsprintf((char *) (LogTxBuffer+userStringStartPosition), string, arg);
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	4a0f      	ldr	r2, [pc, #60]	; (800334c <LogPrint+0xe0>)
 8003310:	4413      	add	r3, r2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	69f9      	ldr	r1, [r7, #28]
 8003316:	4618      	mov	r0, r3
 8003318:	f005 fc00 	bl	8008b1c <vsprintf>
	va_end(arg);

	uint16_t len = strlen(LogTxBuffer);
 800331c:	480b      	ldr	r0, [pc, #44]	; (800334c <LogPrint+0xe0>)
 800331e:	f7fc ff8f 	bl	8000240 <strlen>
 8003322:	4603      	mov	r3, r0
 8003324:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)(LogTxBuffer), len);
 8003326:	89bb      	ldrh	r3, [r7, #12]
 8003328:	461a      	mov	r2, r3
 800332a:	4908      	ldr	r1, [pc, #32]	; (800334c <LogPrint+0xe0>)
 800332c:	480c      	ldr	r0, [pc, #48]	; (8003360 <LogPrint+0xf4>)
 800332e:	f004 fcaf 	bl	8007c90 <HAL_UART_Transmit_DMA>

	transmitInProgress = true;
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <LogPrint+0xdc>)
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003342:	b003      	add	sp, #12
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000ac8 	.word	0x20000ac8
 800334c:	20000acc 	.word	0x20000acc
 8003350:	0800ca60 	.word	0x0800ca60
 8003354:	0800ca68 	.word	0x0800ca68
 8003358:	0800ca70 	.word	0x0800ca70
 800335c:	0800ca7c 	.word	0x0800ca7c
 8003360:	20000dc8 	.word	0x20000dc8

08003364 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static inline void MX_USART2_UART_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <MX_USART2_UART_Init+0x4c>)
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <MX_USART2_UART_Init+0x50>)
 800336c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <MX_USART2_UART_Init+0x4c>)
 8003370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003374:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <MX_USART2_UART_Init+0x4c>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <MX_USART2_UART_Init+0x4c>)
 800337e:	2200      	movs	r2, #0
 8003380:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <MX_USART2_UART_Init+0x4c>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <MX_USART2_UART_Init+0x4c>)
 800338a:	220c      	movs	r2, #12
 800338c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <MX_USART2_UART_Init+0x4c>)
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <MX_USART2_UART_Init+0x4c>)
 8003396:	2200      	movs	r2, #0
 8003398:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800339a:	4805      	ldr	r0, [pc, #20]	; (80033b0 <MX_USART2_UART_Init+0x4c>)
 800339c:	f004 fc2a 	bl	8007bf4 <HAL_UART_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80033a6:	f7ff fe6b 	bl	8003080 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000dc8 	.word	0x20000dc8
 80033b4:	40004400 	.word	0x40004400

080033b8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	transmitInProgress = false;
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <HAL_UART_TxCpltCallback+0x1c>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000ac8 	.word	0x20000ac8

080033d8 <InitMotorController>:
 * 			- ENC for encoder reading
 * @param : None
 * @return: None
 */
void InitMotorController()
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	/* Configure PWM for H-bridge controlling */
	MX_TIM1_Init();
 80033dc:	f000 f8a4 	bl	8003528 <MX_TIM1_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80033e0:	2100      	movs	r1, #0
 80033e2:	4805      	ldr	r0, [pc, #20]	; (80033f8 <InitMotorController+0x20>)
 80033e4:	f003 fc5e 	bl	8006ca4 <HAL_TIM_PWM_Start>
	/* Configure ENC for encoder reading */
	MX_TIM3_Init();
 80033e8:	f000 f922 	bl	8003630 <MX_TIM3_Init>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80033ec:	213c      	movs	r1, #60	; 0x3c
 80033ee:	4803      	ldr	r0, [pc, #12]	; (80033fc <InitMotorController+0x24>)
 80033f0:	f003 fd28 	bl	8006e44 <HAL_TIM_Encoder_Start>
}
 80033f4:	bf00      	nop
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20000b30 	.word	0x20000b30
 80033fc:	20000b70 	.word	0x20000b70

08003400 <MotorSetDutyCycle>:

void MotorSetDutyCycle(float dutyCycle)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	ed87 0a01 	vstr	s0, [r7, #4]
	if(dutyCycle > 1)
 800340a:	edd7 7a01 	vldr	s15, [r7, #4]
 800340e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341a:	dd03      	ble.n	8003424 <MotorSetDutyCycle+0x24>
		dutyCycle = 1;
 800341c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	e009      	b.n	8003438 <MotorSetDutyCycle+0x38>
	else if (dutyCycle < 0)
 8003424:	edd7 7a01 	vldr	s15, [r7, #4]
 8003428:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003430:	d502      	bpl.n	8003438 <MotorSetDutyCycle+0x38>
		dutyCycle = 0;
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	607b      	str	r3, [r7, #4]

	uint16_t counterValue = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	81fb      	strh	r3, [r7, #14]
	counterValue = (uint16_t)(dutyCycle*TIM_PWM_CCR_COUNTER-1);
 800343c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003440:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800346c <MotorSetDutyCycle+0x6c>
 8003444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800344c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003454:	ee17 3a90 	vmov	r3, s15
 8003458:	81fb      	strh	r3, [r7, #14]
	TIM1->CCR1 = counterValue;
 800345a:	4a05      	ldr	r2, [pc, #20]	; (8003470 <MotorSetDutyCycle+0x70>)
 800345c:	89fb      	ldrh	r3, [r7, #14]
 800345e:	6353      	str	r3, [r2, #52]	; 0x34
//	sConfigOC.Pulse = counterValue;
//	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
//	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
//	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	43c80000 	.word	0x43c80000
 8003470:	40010000 	.word	0x40010000
 8003474:	00000000 	.word	0x00000000

08003478 <MotorReadEncoder>:
 * @param velocity    : Current velocity (unit: radian/second)
 * @param samplingTime: Sampling time (unit: second)
 * @return: None
 */
void MotorReadEncoder(double *position, double *velocity, double samplingTime)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	ed87 0b00 	vstr	d0, [r7]
	uint16_t currPulse;
	double encoderIncrement;

	currPulse = TIM3->CNT;
 8003486:	4b26      	ldr	r3, [pc, #152]	; (8003520 <MotorReadEncoder+0xa8>)
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	83fb      	strh	r3, [r7, #30]
	encoderIncrement = (double)((currPulse - prevPulse)*ENC_RAD_PER_PULSE);
 800348c:	8bfb      	ldrh	r3, [r7, #30]
 800348e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8003492:	3b7f      	subs	r3, #127	; 0x7f
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd f97f 	bl	8000798 <__aeabi_i2d>
 800349a:	a31d      	add	r3, pc, #116	; (adr r3, 8003510 <MotorReadEncoder+0x98>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f7fd f9e4 	bl	800086c <__aeabi_dmul>
 80034a4:	4603      	mov	r3, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	encoderIncrement /= MOTOR_GEAR_REDUCTION_RATIO;
 80034ac:	a31a      	add	r3, pc, #104	; (adr r3, 8003518 <MotorReadEncoder+0xa0>)
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034b6:	f7fd fb03 	bl	8000ac0 <__aeabi_ddiv>
 80034ba:	4603      	mov	r3, r0
 80034bc:	460c      	mov	r4, r1
 80034be:	e9c7 3404 	strd	r3, r4, [r7, #16]

	motorPosition += encoderIncrement;
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <MotorReadEncoder+0xac>)
 80034c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80034cc:	f7fd f818 	bl	8000500 <__adddf3>
 80034d0:	4603      	mov	r3, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	4a13      	ldr	r2, [pc, #76]	; (8003524 <MotorReadEncoder+0xac>)
 80034d6:	e9c2 3400 	strd	r3, r4, [r2]
	*position = motorPosition;
 80034da:	4b12      	ldr	r3, [pc, #72]	; (8003524 <MotorReadEncoder+0xac>)
 80034dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	e9c2 3400 	strd	r3, r4, [r2]
	*velocity = encoderIncrement/samplingTime;
 80034e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034ee:	f7fd fae7 	bl	8000ac0 <__aeabi_ddiv>
 80034f2:	4603      	mov	r3, r0
 80034f4:	460c      	mov	r4, r1
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	e9c2 3400 	strd	r3, r4, [r2]

	/* Reset counter */
	TIM3->CNT = prevPulse;
 80034fc:	4b08      	ldr	r3, [pc, #32]	; (8003520 <MotorReadEncoder+0xa8>)
 80034fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003504:	bf00      	nop
 8003506:	3724      	adds	r7, #36	; 0x24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd90      	pop	{r4, r7, pc}
 800350c:	f3af 8000 	nop.w
 8003510:	6bd47de2 	.word	0x6bd47de2
 8003514:	3fc24742 	.word	0x3fc24742
 8003518:	00000000 	.word	0x00000000
 800351c:	406b2000 	.word	0x406b2000
 8003520:	40000400 	.word	0x40000400
 8003524:	20000bb0 	.word	0x20000bb0

08003528 <MX_TIM1_Init>:
 * @brief : TIM1 Initialization Function
 * @param : None
 * @return: None
 */
static inline void MX_TIM1_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b092      	sub	sp, #72	; 0x48
 800352c:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800352e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]
 8003548:	615a      	str	r2, [r3, #20]
 800354a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	2220      	movs	r2, #32
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f005 fa84 	bl	8008a60 <memset>

	htim1.Instance = TIM1;
 8003558:	4b33      	ldr	r3, [pc, #204]	; (8003628 <MX_TIM1_Init+0x100>)
 800355a:	4a34      	ldr	r2, [pc, #208]	; (800362c <MX_TIM1_Init+0x104>)
 800355c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = TIM_PWM_PRESCALER-1;
 800355e:	4b32      	ldr	r3, [pc, #200]	; (8003628 <MX_TIM1_Init+0x100>)
 8003560:	2211      	movs	r2, #17
 8003562:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003564:	4b30      	ldr	r3, [pc, #192]	; (8003628 <MX_TIM1_Init+0x100>)
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = TIM_PWM_CCR_COUNTER-1;
 800356a:	4b2f      	ldr	r3, [pc, #188]	; (8003628 <MX_TIM1_Init+0x100>)
 800356c:	f240 128f 	movw	r2, #399	; 0x18f
 8003570:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003572:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <MX_TIM1_Init+0x100>)
 8003574:	2200      	movs	r2, #0
 8003576:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <MX_TIM1_Init+0x100>)
 800357a:	2200      	movs	r2, #0
 800357c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800357e:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <MX_TIM1_Init+0x100>)
 8003580:	2200      	movs	r2, #0
 8003582:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003584:	4828      	ldr	r0, [pc, #160]	; (8003628 <MX_TIM1_Init+0x100>)
 8003586:	f003 fb62 	bl	8006c4e <HAL_TIM_PWM_Init>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MX_TIM1_Init+0x6c>
	{
		Error_Handler();
 8003590:	f7ff fd76 	bl	8003080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003594:	2300      	movs	r3, #0
 8003596:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003598:	2300      	movs	r3, #0
 800359a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800359c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035a0:	4619      	mov	r1, r3
 80035a2:	4821      	ldr	r0, [pc, #132]	; (8003628 <MX_TIM1_Init+0x100>)
 80035a4:	f004 fa44 	bl	8007a30 <HAL_TIMEx_MasterConfigSynchronization>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_TIM1_Init+0x8a>
	{
		Error_Handler();
 80035ae:	f7ff fd67 	bl	8003080 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035b2:	2360      	movs	r3, #96	; 0x60
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = TIM_PWM_CCR_COUNTER*0.5-1;
 80035b6:	23c7      	movs	r3, #199	; 0xc7
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035ba:	2300      	movs	r3, #0
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035be:	2300      	movs	r3, #0
 80035c0:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d2:	2200      	movs	r2, #0
 80035d4:	4619      	mov	r1, r3
 80035d6:	4814      	ldr	r0, [pc, #80]	; (8003628 <MX_TIM1_Init+0x100>)
 80035d8:	f003 fd74 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <MX_TIM1_Init+0xbe>
	{
		Error_Handler();
 80035e2:	f7ff fd4d 	bl	8003080 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035fe:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	4619      	mov	r1, r3
 8003608:	4807      	ldr	r0, [pc, #28]	; (8003628 <MX_TIM1_Init+0x100>)
 800360a:	f004 fa8d 	bl	8007b28 <HAL_TIMEx_ConfigBreakDeadTime>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <MX_TIM1_Init+0xf0>
	{
		Error_Handler();
 8003614:	f7ff fd34 	bl	8003080 <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim1);
 8003618:	4803      	ldr	r0, [pc, #12]	; (8003628 <MX_TIM1_Init+0x100>)
 800361a:	f7ff fb8f 	bl	8002d3c <HAL_TIM_MspPostInit>

}
 800361e:	bf00      	nop
 8003620:	3748      	adds	r7, #72	; 0x48
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000b30 	.word	0x20000b30
 800362c:	40010000 	.word	0x40010000

08003630 <MX_TIM3_Init>:
 * @brief : TIM3 Initialization Function
 * @param : None
 * @return: None
 */
static inline void MX_TIM3_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08c      	sub	sp, #48	; 0x30
 8003634:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig = {0};
 8003636:	f107 030c 	add.w	r3, r7, #12
 800363a:	2224      	movs	r2, #36	; 0x24
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f005 fa0e 	bl	8008a60 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003644:	1d3b      	adds	r3, r7, #4
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]

	htim3.Instance = TIM3;
 800364c:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <MX_TIM3_Init+0xa8>)
 800364e:	4a23      	ldr	r2, [pc, #140]	; (80036dc <MX_TIM3_Init+0xac>)
 8003650:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <MX_TIM3_Init+0xa8>)
 8003654:	2200      	movs	r2, #0
 8003656:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <MX_TIM3_Init+0xa8>)
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <MX_TIM3_Init+0xa8>)
 8003660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003664:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003666:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <MX_TIM3_Init+0xa8>)
 8003668:	2200      	movs	r2, #0
 800366a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <MX_TIM3_Init+0xa8>)
 800366e:	2200      	movs	r2, #0
 8003670:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003672:	2303      	movs	r3, #3
 8003674:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800367a:	2301      	movs	r3, #1
 800367c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003686:	2300      	movs	r3, #0
 8003688:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800368a:	2301      	movs	r3, #1
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800368e:	2300      	movs	r3, #0
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003696:	f107 030c 	add.w	r3, r7, #12
 800369a:	4619      	mov	r1, r3
 800369c:	480e      	ldr	r0, [pc, #56]	; (80036d8 <MX_TIM3_Init+0xa8>)
 800369e:	f003 fb3f 	bl	8006d20 <HAL_TIM_Encoder_Init>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 80036a8:	f7ff fcea 	bl	8003080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ac:	2300      	movs	r3, #0
 80036ae:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036b4:	1d3b      	adds	r3, r7, #4
 80036b6:	4619      	mov	r1, r3
 80036b8:	4807      	ldr	r0, [pc, #28]	; (80036d8 <MX_TIM3_Init+0xa8>)
 80036ba:	f004 f9b9 	bl	8007a30 <HAL_TIMEx_MasterConfigSynchronization>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 80036c4:	f7ff fcdc 	bl	8003080 <Error_Handler>
	}

	/* Reset Counter */
	TIM3->CNT = 32767;
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <MX_TIM3_Init+0xac>)
 80036ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80036d0:	bf00      	nop
 80036d2:	3730      	adds	r7, #48	; 0x30
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000b70 	.word	0x20000b70
 80036dc:	40000400 	.word	0x40000400

080036e0 <InitSystem>:
 * @brief : Configure essential peripherals
 * @param :
 * @return:
 */
void InitSystem()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80036e6:	f000 fa2f 	bl	8003b48 <HAL_Init>

	/* Configure the system clock */
	SystemClockConfig();
 80036ea:	f000 f87d 	bl	80037e8 <SystemClockConfig>

	/* Configure GPIO */
	InitSystemGPIO();
 80036ee:	f000 f875 	bl	80037dc <InitSystemGPIO>

	/* Configure DMA */
	InitSystemDMA();
 80036f2:	f000 f86d 	bl	80037d0 <InitSystemDMA>

	/* Configure logger for outputting data */
	InitLog();
 80036f6:	f7ff fdb3 	bl	8003260 <InitLog>
	LogPrint(LOG_INFO, "Configuring!\n");
 80036fa:	4917      	ldr	r1, [pc, #92]	; (8003758 <InitSystem+0x78>)
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7ff fdb5 	bl	800326c <LogPrint>

	/* Configure system timer */
	InitSystemTimer();
 8003702:	f000 f85f 	bl	80037c4 <InitSystemTimer>

	/* Configure the motor controller's essential peripherals */
	InitMotorController();
 8003706:	f7ff fe67 	bl	80033d8 <InitMotorController>
	MotorSetDirection(MOTOR_DIR_POSITIVE);
 800370a:	2200      	movs	r2, #0
 800370c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003710:	4812      	ldr	r0, [pc, #72]	; (800375c <InitSystem+0x7c>)
 8003712:	f001 f8cd 	bl	80048b0 <HAL_GPIO_WritePin>
	MotorSetDutyCycle(1);
 8003716:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800371a:	f7ff fe71 	bl	8003400 <MotorSetDutyCycle>

	/* Configure controller */
	InitController();
 800371e:	f7ff f81f 	bl	8002760 <InitController>

	/* Configure encoder */
	InitIncrementalEncoder();
 8003722:	f7ff fcf1 	bl	8003108 <InitIncrementalEncoder>
	InitAbsoluteEncoder();
 8003726:	f7ff fcb2 	bl	800308e <InitAbsoluteEncoder>

	/* Configure EEPROM module */
//	InitEEPROM();

	/* Start system timer */
	SystemStartTimer();
 800372a:	f000 f907 	bl	800393c <SystemStartTimer>

	/* Wait for system to be stable*/
	int i = 10000;
 800372e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003732:	607b      	str	r3, [r7, #4]
	while(i-- != 0);
 8003734:	bf00      	nop
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	1e5a      	subs	r2, r3, #1
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1fa      	bne.n	8003736 <InitSystem+0x56>
	LogPrint(LOG_INFO, "Done, ready to run.....\n");
 8003740:	4907      	ldr	r1, [pc, #28]	; (8003760 <InitSystem+0x80>)
 8003742:	2000      	movs	r0, #0
 8003744:	f7ff fd92 	bl	800326c <LogPrint>
	systemState = SYSTEM_STATE_RUN;
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <InitSystem+0x84>)
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	0800ca84 	.word	0x0800ca84
 800375c:	40020000 	.word	0x40020000
 8003760:	0800ca94 	.word	0x0800ca94
 8003764:	20000bb9 	.word	0x20000bb9

08003768 <SystemStateMachineProcessing>:

void SystemStateMachineProcessing()
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
	switch (systemState) {
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <SystemStateMachineProcessing+0x54>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01d      	beq.n	80037b0 <SystemStateMachineProcessing+0x48>
 8003774:	2b01      	cmp	r3, #1
 8003776:	d000      	beq.n	800377a <SystemStateMachineProcessing+0x12>
				/* Clear flag */
				systemFlags.System_Flags_storeParamters = false;
			}
			break;
		default:
			break;
 8003778:	e01d      	b.n	80037b6 <SystemStateMachineProcessing+0x4e>
			if(systemFlags.System_Flags_runAlgorithm)
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <SystemStateMachineProcessing+0x58>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <SystemStateMachineProcessing+0x2e>
				systemFlags.System_Flags_runAlgorithm = false;
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <SystemStateMachineProcessing+0x58>)
 800378a:	7813      	ldrb	r3, [r2, #0]
 800378c:	f36f 0300 	bfc	r3, #0, #1
 8003790:	7013      	strb	r3, [r2, #0]
				ControllerRun();
 8003792:	f7fe ffed 	bl	8002770 <ControllerRun>
			if(systemFlags.System_Flags_storeParamters)
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <SystemStateMachineProcessing+0x58>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <SystemStateMachineProcessing+0x4c>
				systemFlags.System_Flags_storeParamters = false;
 80037a4:	4a06      	ldr	r2, [pc, #24]	; (80037c0 <SystemStateMachineProcessing+0x58>)
 80037a6:	7813      	ldrb	r3, [r2, #0]
 80037a8:	f36f 0341 	bfc	r3, #1, #1
 80037ac:	7013      	strb	r3, [r2, #0]
			break;
 80037ae:	e001      	b.n	80037b4 <SystemStateMachineProcessing+0x4c>
			break;
 80037b0:	bf00      	nop
 80037b2:	e000      	b.n	80037b6 <SystemStateMachineProcessing+0x4e>
			break;
 80037b4:	bf00      	nop
	}
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000bb9 	.word	0x20000bb9
 80037c0:	20000bb8 	.word	0x20000bb8

080037c4 <InitSystemTimer>:
 * @brief : System timer configuration
 * @param : None
 * @return: None
 */
static inline void InitSystemTimer()
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 80037c8:	f000 f8c2 	bl	8003950 <MX_TIM2_Init>
}
 80037cc:	bf00      	nop
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <InitSystemDMA>:
 * @brief : System DMA configuration
 * @param : None
 * @return: None
 */
static inline void InitSystemDMA()
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
	MX_DMA_Init();
 80037d4:	f000 f87a 	bl	80038cc <MX_DMA_Init>
}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}

080037dc <InitSystemGPIO>:
 * @brief : GPIO configuration
 * @param : None
 * @return: None
 */
static inline void InitSystemGPIO()
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80037e0:	f000 f902 	bl	80039e8 <MX_GPIO_Init>
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <SystemClockConfig>:
 * @brief : System Clock Configuration
 * @param : None
 * @return: None
 */
void SystemClockConfig()
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b094      	sub	sp, #80	; 0x50
 80037ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ee:	f107 031c 	add.w	r3, r7, #28
 80037f2:	2234      	movs	r2, #52	; 0x34
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f005 f932 	bl	8008a60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037fc:	f107 0308 	add.w	r3, r7, #8
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800380c:	2300      	movs	r3, #0
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <SystemClockConfig+0xdc>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	4a2b      	ldr	r2, [pc, #172]	; (80038c4 <SystemClockConfig+0xdc>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	6413      	str	r3, [r2, #64]	; 0x40
 800381c:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <SystemClockConfig+0xdc>)
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003828:	2300      	movs	r3, #0
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <SystemClockConfig+0xe0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a25      	ldr	r2, [pc, #148]	; (80038c8 <SystemClockConfig+0xe0>)
 8003832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <SystemClockConfig+0xe0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003844:	2302      	movs	r3, #2
 8003846:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003848:	2301      	movs	r3, #1
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800384c:	2310      	movs	r3, #16
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003850:	2302      	movs	r3, #2
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003854:	2300      	movs	r3, #0
 8003856:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003858:	2308      	movs	r3, #8
 800385a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800385c:	23b4      	movs	r3, #180	; 0xb4
 800385e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003860:	2302      	movs	r3, #2
 8003862:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003864:	2302      	movs	r3, #2
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003868:	2302      	movs	r3, #2
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800386c:	f107 031c 	add.w	r3, r7, #28
 8003870:	4618      	mov	r0, r3
 8003872:	f002 fedf 	bl	8006634 <HAL_RCC_OscConfig>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <SystemClockConfig+0x98>
	{
		Error_Handler();
 800387c:	f7ff fc00 	bl	8003080 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003880:	f002 fbce 	bl	8006020 <HAL_PWREx_EnableOverDrive>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <SystemClockConfig+0xa6>
	{
		Error_Handler();
 800388a:	f7ff fbf9 	bl	8003080 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800388e:	230f      	movs	r3, #15
 8003890:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003892:	2302      	movs	r3, #2
 8003894:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800389a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800389e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038a6:	f107 0308 	add.w	r3, r7, #8
 80038aa:	2105      	movs	r1, #5
 80038ac:	4618      	mov	r0, r3
 80038ae:	f002 fc07 	bl	80060c0 <HAL_RCC_ClockConfig>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <SystemClockConfig+0xd4>
	{
		Error_Handler();
 80038b8:	f7ff fbe2 	bl	8003080 <Error_Handler>
	}
}
 80038bc:	bf00      	nop
 80038be:	3750      	adds	r7, #80	; 0x50
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40007000 	.word	0x40007000

080038cc <MX_DMA_Init>:
 * @brief : Enable DMA controller clock
 * @param : None
 * @return: None
 */
static inline void MX_DMA_Init()
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	4b18      	ldr	r3, [pc, #96]	; (8003938 <MX_DMA_Init+0x6c>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	4a17      	ldr	r2, [pc, #92]	; (8003938 <MX_DMA_Init+0x6c>)
 80038dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038e0:	6313      	str	r3, [r2, #48]	; 0x30
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <MX_DMA_Init+0x6c>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80038ee:	2200      	movs	r2, #0
 80038f0:	2100      	movs	r1, #0
 80038f2:	200e      	movs	r0, #14
 80038f4:	f000 fa75 	bl	8003de2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80038f8:	200e      	movs	r0, #14
 80038fa:	f000 fa8e 	bl	8003e1a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80038fe:	2200      	movs	r2, #0
 8003900:	2100      	movs	r1, #0
 8003902:	200f      	movs	r0, #15
 8003904:	f000 fa6d 	bl	8003de2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003908:	200f      	movs	r0, #15
 800390a:	f000 fa86 	bl	8003e1a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800390e:	2200      	movs	r2, #0
 8003910:	2100      	movs	r1, #0
 8003912:	2011      	movs	r0, #17
 8003914:	f000 fa65 	bl	8003de2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003918:	2011      	movs	r0, #17
 800391a:	f000 fa7e 	bl	8003e1a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800391e:	2200      	movs	r2, #0
 8003920:	2100      	movs	r1, #0
 8003922:	202f      	movs	r0, #47	; 0x2f
 8003924:	f000 fa5d 	bl	8003de2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003928:	202f      	movs	r0, #47	; 0x2f
 800392a:	f000 fa76 	bl	8003e1a <HAL_NVIC_EnableIRQ>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800

0800393c <SystemStartTimer>:
 * @brief : Start system 1ms timer
 * @param : None
 * @return: None
 */
static inline void SystemStartTimer()
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <SystemStartTimer+0x10>)
 8003942:	f003 f960 	bl	8006c06 <HAL_TIM_Base_Start_IT>
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000e08 	.word	0x20000e08

08003950 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static inline void MX_TIM2_Init()
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003956:	f107 0308 	add.w	r3, r7, #8
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	609a      	str	r2, [r3, #8]
 8003962:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003964:	463b      	mov	r3, r7
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	605a      	str	r2, [r3, #4]

	htim2.Instance = TIM2;
 800396c:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <MX_TIM2_Init+0x94>)
 800396e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003972:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9000-1;
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <MX_TIM2_Init+0x94>)
 8003976:	f242 3227 	movw	r2, #8999	; 0x2327
 800397a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <MX_TIM2_Init+0x94>)
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10-1;
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <MX_TIM2_Init+0x94>)
 8003984:	2209      	movs	r2, #9
 8003986:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003988:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <MX_TIM2_Init+0x94>)
 800398a:	2200      	movs	r2, #0
 800398c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <MX_TIM2_Init+0x94>)
 8003990:	2200      	movs	r2, #0
 8003992:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003994:	4813      	ldr	r0, [pc, #76]	; (80039e4 <MX_TIM2_Init+0x94>)
 8003996:	f003 f90b 	bl	8006bb0 <HAL_TIM_Base_Init>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 80039a0:	f7ff fb6e 	bl	8003080 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	4619      	mov	r1, r3
 80039b0:	480c      	ldr	r0, [pc, #48]	; (80039e4 <MX_TIM2_Init+0x94>)
 80039b2:	f003 fc4d 	bl	8007250 <HAL_TIM_ConfigClockSource>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 80039bc:	f7ff fb60 	bl	8003080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c0:	2300      	movs	r3, #0
 80039c2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039c8:	463b      	mov	r3, r7
 80039ca:	4619      	mov	r1, r3
 80039cc:	4805      	ldr	r0, [pc, #20]	; (80039e4 <MX_TIM2_Init+0x94>)
 80039ce:	f004 f82f 	bl	8007a30 <HAL_TIMEx_MasterConfigSynchronization>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 80039d8:	f7ff fb52 	bl	8003080 <Error_Handler>
	}
}
 80039dc:	bf00      	nop
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20000e08 	.word	0x20000e08

080039e8 <MX_GPIO_Init>:
 * @brief : GPIO Initialization Function
 * @param : None
 * @return: None
 */
static void MX_GPIO_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ee:	f107 0314 	add.w	r3, r7, #20
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	60da      	str	r2, [r3, #12]
 80039fc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4a2d      	ldr	r2, [pc, #180]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	4b27      	ldr	r3, [pc, #156]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4a26      	ldr	r2, [pc, #152]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a28:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6313      	str	r3, [r2, #48]	; 0x30
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	4b19      	ldr	r3, [pc, #100]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	4a18      	ldr	r2, [pc, #96]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a5c:	f043 0302 	orr.w	r3, r3, #2
 8003a60:	6313      	str	r3, [r2, #48]	; 0x30
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <MX_GPIO_Init+0xd4>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	607b      	str	r3, [r7, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a74:	4812      	ldr	r0, [pc, #72]	; (8003ac0 <MX_GPIO_Init+0xd8>)
 8003a76:	f000 ff1b 	bl	80048b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8003a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a80:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <MX_GPIO_Init+0xdc>)
 8003a82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	480e      	ldr	r0, [pc, #56]	; (8003ac8 <MX_GPIO_Init+0xe0>)
 8003a90:	f000 fd7c 	bl	800458c <HAL_GPIO_Init>

	/*Configure GPIO pin : DIR_Pin */
	GPIO_InitStruct.Pin = DIR_Pin;
 8003a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8003aa6:	f107 0314 	add.w	r3, r7, #20
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4804      	ldr	r0, [pc, #16]	; (8003ac0 <MX_GPIO_Init+0xd8>)
 8003aae:	f000 fd6d 	bl	800458c <HAL_GPIO_Init>
}
 8003ab2:	bf00      	nop
 8003ab4:	3728      	adds	r7, #40	; 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	10210000 	.word	0x10210000
 8003ac8:	40020800 	.word	0x40020800

08003acc <HAL_TIM_PeriodElapsedCallback>:
  * @brief : Period elapsed callback in non blocking mode
  * @param htim: TIM handle
  * @return: None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	static uint32_t timerCount = 0;
    if (htim->Instance == htim2.Instance)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d124      	bne.n	8003b2a <HAL_TIM_PeriodElapsedCallback+0x5e>
    {
    	timerCount++;
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	4a15      	ldr	r2, [pc, #84]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003ae8:	6013      	str	r3, [r2, #0]
    	/* 10ms */
    	if(timerCount%CONTROLLER_SAMPLING_TIME_MSEC == 0)
 8003aea:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003aec:	6819      	ldr	r1, [r3, #0]
 8003aee:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003af0:	fba3 2301 	umull	r2, r3, r3, r1
 8003af4:	08da      	lsrs	r2, r3, #3
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	1aca      	subs	r2, r1, r3
 8003b00:	2a00      	cmp	r2, #0
 8003b02:	d104      	bne.n	8003b0e <HAL_TIM_PeriodElapsedCallback+0x42>
    	{
    		systemFlags.System_Flags_runAlgorithm = true;
 8003b04:	4a0f      	ldr	r2, [pc, #60]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003b06:	7813      	ldrb	r3, [r2, #0]
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	7013      	strb	r3, [r2, #0]
    	}

    	/* 60s */
    	if(timerCount >= 60000)
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d907      	bls.n	8003b2a <HAL_TIM_PeriodElapsedCallback+0x5e>
    	{
    		timerCount = 0;
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
    		systemFlags.System_Flags_storeParamters = true;
 8003b20:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003b22:	7813      	ldrb	r3, [r2, #0]
 8003b24:	f043 0302 	orr.w	r3, r3, #2
 8003b28:	7013      	strb	r3, [r2, #0]
    	}
    }
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000e08 	.word	0x20000e08
 8003b3c:	20000bbc 	.word	0x20000bbc
 8003b40:	cccccccd 	.word	0xcccccccd
 8003b44:	20000bb8 	.word	0x20000bb8

08003b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b4c:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <HAL_Init+0x40>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0d      	ldr	r2, [pc, #52]	; (8003b88 <HAL_Init+0x40>)
 8003b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_Init+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <HAL_Init+0x40>)
 8003b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b64:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_Init+0x40>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <HAL_Init+0x40>)
 8003b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b70:	2003      	movs	r0, #3
 8003b72:	f000 f92b 	bl	8003dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b76:	2000      	movs	r0, #0
 8003b78:	f000 f808 	bl	8003b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b7c:	f7fe ff12 	bl	80029a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023c00 	.word	0x40023c00

08003b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_InitTick+0x54>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_InitTick+0x58>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f943 	bl	8003e36 <HAL_SYSTICK_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e00e      	b.n	8003bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b0f      	cmp	r3, #15
 8003bbe:	d80a      	bhi.n	8003bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	f000 f90b 	bl	8003de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bcc:	4a06      	ldr	r2, [pc, #24]	; (8003be8 <HAL_InitTick+0x5c>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20000028 	.word	0x20000028
 8003be4:	20000030 	.word	0x20000030
 8003be8:	2000002c 	.word	0x2000002c

08003bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_IncTick+0x20>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_IncTick+0x24>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <HAL_IncTick+0x24>)
 8003bfe:	6013      	str	r3, [r2, #0]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000030 	.word	0x20000030
 8003c10:	20000e48 	.word	0x20000e48

08003c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return uwTick;
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_GetTick+0x14>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000e48 	.word	0x20000e48

08003c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <__NVIC_SetPriorityGrouping+0x44>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5e:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <__NVIC_SetPriorityGrouping+0x44>)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	60d3      	str	r3, [r2, #12]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <__NVIC_GetPriorityGrouping+0x18>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f003 0307 	and.w	r3, r3, #7
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	db0b      	blt.n	8003cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	f003 021f 	and.w	r2, r3, #31
 8003ca8:	4907      	ldr	r1, [pc, #28]	; (8003cc8 <__NVIC_EnableIRQ+0x38>)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	e000e100 	.word	0xe000e100

08003ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	6039      	str	r1, [r7, #0]
 8003cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	db0a      	blt.n	8003cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	490c      	ldr	r1, [pc, #48]	; (8003d18 <__NVIC_SetPriority+0x4c>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	0112      	lsls	r2, r2, #4
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	440b      	add	r3, r1
 8003cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf4:	e00a      	b.n	8003d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4908      	ldr	r1, [pc, #32]	; (8003d1c <__NVIC_SetPriority+0x50>)
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	3b04      	subs	r3, #4
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	440b      	add	r3, r1
 8003d0a:	761a      	strb	r2, [r3, #24]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000e100 	.word	0xe000e100
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	; 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f1c3 0307 	rsb	r3, r3, #7
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	bf28      	it	cs
 8003d3e:	2304      	movcs	r3, #4
 8003d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3304      	adds	r3, #4
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d902      	bls.n	8003d50 <NVIC_EncodePriority+0x30>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3b03      	subs	r3, #3
 8003d4e:	e000      	b.n	8003d52 <NVIC_EncodePriority+0x32>
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	401a      	ands	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d68:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	43d9      	mvns	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d78:	4313      	orrs	r3, r2
         );
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3724      	adds	r7, #36	; 0x24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d98:	d301      	bcc.n	8003d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e00f      	b.n	8003dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <SysTick_Config+0x40>)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003da6:	210f      	movs	r1, #15
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	f7ff ff8e 	bl	8003ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <SysTick_Config+0x40>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <SysTick_Config+0x40>)
 8003db8:	2207      	movs	r2, #7
 8003dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	e000e010 	.word	0xe000e010

08003dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff29 	bl	8003c2c <__NVIC_SetPriorityGrouping>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4603      	mov	r3, r0
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df4:	f7ff ff3e 	bl	8003c74 <__NVIC_GetPriorityGrouping>
 8003df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f7ff ff8e 	bl	8003d20 <NVIC_EncodePriority>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff5d 	bl	8003ccc <__NVIC_SetPriority>
}
 8003e12:	bf00      	nop
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff31 	bl	8003c90 <__NVIC_EnableIRQ>
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ffa2 	bl	8003d88 <SysTick_Config>
 8003e44:	4603      	mov	r3, r0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e5c:	f7ff feda 	bl	8003c14 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e099      	b.n	8003fa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8c:	e00f      	b.n	8003eae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e8e:	f7ff fec1 	bl	8003c14 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d908      	bls.n	8003eae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e078      	b.n	8003fa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e8      	bne.n	8003e8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4b38      	ldr	r3, [pc, #224]	; (8003fa8 <HAL_DMA_Init+0x158>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d107      	bne.n	8003f18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	4313      	orrs	r3, r2
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0307 	bic.w	r3, r3, #7
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d117      	bne.n	8003f72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fa9f 	bl	8004498 <DMA_CheckFifoParam>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2240      	movs	r2, #64	; 0x40
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e016      	b.n	8003fa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa56 	bl	800442c <DMA_CalcBaseAndBitshift>
 8003f80:	4603      	mov	r3, r0
 8003f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	223f      	movs	r2, #63	; 0x3f
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	f010803f 	.word	0xf010803f

08003fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_DMA_Start_IT+0x26>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e040      	b.n	8004054 <HAL_DMA_Start_IT+0xa8>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d12f      	bne.n	8004046 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f9e8 	bl	80043d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004004:	223f      	movs	r2, #63	; 0x3f
 8004006:	409a      	lsls	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0216 	orr.w	r2, r2, #22
 800401a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0208 	orr.w	r2, r2, #8
 8004032:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e005      	b.n	8004052 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800404e:	2302      	movs	r3, #2
 8004050:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004052:	7dfb      	ldrb	r3, [r7, #23]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d004      	beq.n	800407a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2280      	movs	r2, #128	; 0x80
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e00c      	b.n	8004094 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2205      	movs	r2, #5
 800407e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040ac:	4b92      	ldr	r3, [pc, #584]	; (80042f8 <HAL_DMA_IRQHandler+0x258>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a92      	ldr	r2, [pc, #584]	; (80042fc <HAL_DMA_IRQHandler+0x25c>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	0a9b      	lsrs	r3, r3, #10
 80040b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ca:	2208      	movs	r2, #8
 80040cc:	409a      	lsls	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01a      	beq.n	800410c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0204 	bic.w	r2, r2, #4
 80040f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	2208      	movs	r2, #8
 80040fa:	409a      	lsls	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	f043 0201 	orr.w	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	2201      	movs	r2, #1
 8004112:	409a      	lsls	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d012      	beq.n	8004142 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	2201      	movs	r2, #1
 8004130:	409a      	lsls	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0202 	orr.w	r2, r3, #2
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004146:	2204      	movs	r2, #4
 8004148:	409a      	lsls	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4013      	ands	r3, r2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d012      	beq.n	8004178 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	2204      	movs	r2, #4
 8004166:	409a      	lsls	r2, r3
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	f043 0204 	orr.w	r2, r3, #4
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	2210      	movs	r2, #16
 800417e:	409a      	lsls	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4013      	ands	r3, r2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d043      	beq.n	8004210 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d03c      	beq.n	8004210 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	2210      	movs	r2, #16
 800419c:	409a      	lsls	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d018      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d108      	bne.n	80041d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d024      	beq.n	8004210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
 80041ce:	e01f      	b.n	8004210 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01b      	beq.n	8004210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	4798      	blx	r3
 80041e0:	e016      	b.n	8004210 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0208 	bic.w	r2, r2, #8
 80041fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004214:	2220      	movs	r2, #32
 8004216:	409a      	lsls	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 808e 	beq.w	800433e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8086 	beq.w	800433e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	2220      	movs	r2, #32
 8004238:	409a      	lsls	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b05      	cmp	r3, #5
 8004248:	d136      	bne.n	80042b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0216 	bic.w	r2, r2, #22
 8004258:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004268:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d103      	bne.n	800427a <HAL_DMA_IRQHandler+0x1da>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0208 	bic.w	r2, r2, #8
 8004288:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	223f      	movs	r2, #63	; 0x3f
 8004290:	409a      	lsls	r2, r3
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d07d      	beq.n	80043aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4798      	blx	r3
        }
        return;
 80042b6:	e078      	b.n	80043aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01c      	beq.n	8004300 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d108      	bne.n	80042e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d030      	beq.n	800433e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
 80042e4:	e02b      	b.n	800433e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d027      	beq.n	800433e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
 80042f6:	e022      	b.n	800433e <HAL_DMA_IRQHandler+0x29e>
 80042f8:	20000028 	.word	0x20000028
 80042fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10f      	bne.n	800432e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0210 	bic.w	r2, r2, #16
 800431c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	2b00      	cmp	r3, #0
 8004344:	d032      	beq.n	80043ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d022      	beq.n	8004398 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2205      	movs	r2, #5
 8004356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0201 	bic.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	3301      	adds	r3, #1
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	429a      	cmp	r2, r3
 8004374:	d307      	bcc.n	8004386 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f2      	bne.n	800436a <HAL_DMA_IRQHandler+0x2ca>
 8004384:	e000      	b.n	8004388 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004386:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
 80043a8:	e000      	b.n	80043ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80043aa:	bf00      	nop
    }
  }
}
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop

080043b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043c2:	b2db      	uxtb	r3, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d108      	bne.n	8004410 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800440e:	e007      	b.n	8004420 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	3b10      	subs	r3, #16
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <DMA_CalcBaseAndBitshift+0x64>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004446:	4a13      	ldr	r2, [pc, #76]	; (8004494 <DMA_CalcBaseAndBitshift+0x68>)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b03      	cmp	r3, #3
 8004458:	d909      	bls.n	800446e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004462:	f023 0303 	bic.w	r3, r3, #3
 8004466:	1d1a      	adds	r2, r3, #4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	659a      	str	r2, [r3, #88]	; 0x58
 800446c:	e007      	b.n	800447e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	aaaaaaab 	.word	0xaaaaaaab
 8004494:	0800cb78 	.word	0x0800cb78

08004498 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d11f      	bne.n	80044f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d855      	bhi.n	8004564 <DMA_CheckFifoParam+0xcc>
 80044b8:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <DMA_CheckFifoParam+0x28>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044e3 	.word	0x080044e3
 80044c8:	080044d1 	.word	0x080044d1
 80044cc:	08004565 	.word	0x08004565
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d045      	beq.n	8004568 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e0:	e042      	b.n	8004568 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044ea:	d13f      	bne.n	800456c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f0:	e03c      	b.n	800456c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fa:	d121      	bne.n	8004540 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d836      	bhi.n	8004570 <DMA_CheckFifoParam+0xd8>
 8004502:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <DMA_CheckFifoParam+0x70>)
 8004504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004508:	08004519 	.word	0x08004519
 800450c:	0800451f 	.word	0x0800451f
 8004510:	08004519 	.word	0x08004519
 8004514:	08004531 	.word	0x08004531
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
      break;
 800451c:	e02f      	b.n	800457e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d024      	beq.n	8004574 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800452e:	e021      	b.n	8004574 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004538:	d11e      	bne.n	8004578 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800453e:	e01b      	b.n	8004578 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d902      	bls.n	800454c <DMA_CheckFifoParam+0xb4>
 8004546:	2b03      	cmp	r3, #3
 8004548:	d003      	beq.n	8004552 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800454a:	e018      	b.n	800457e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
      break;
 8004550:	e015      	b.n	800457e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00e      	beq.n	800457c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	73fb      	strb	r3, [r7, #15]
      break;
 8004562:	e00b      	b.n	800457c <DMA_CheckFifoParam+0xe4>
      break;
 8004564:	bf00      	nop
 8004566:	e00a      	b.n	800457e <DMA_CheckFifoParam+0xe6>
      break;
 8004568:	bf00      	nop
 800456a:	e008      	b.n	800457e <DMA_CheckFifoParam+0xe6>
      break;
 800456c:	bf00      	nop
 800456e:	e006      	b.n	800457e <DMA_CheckFifoParam+0xe6>
      break;
 8004570:	bf00      	nop
 8004572:	e004      	b.n	800457e <DMA_CheckFifoParam+0xe6>
      break;
 8004574:	bf00      	nop
 8004576:	e002      	b.n	800457e <DMA_CheckFifoParam+0xe6>
      break;   
 8004578:	bf00      	nop
 800457a:	e000      	b.n	800457e <DMA_CheckFifoParam+0xe6>
      break;
 800457c:	bf00      	nop
    }
  } 
  
  return status; 
 800457e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	; 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e165      	b.n	8004874 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045a8:	2201      	movs	r2, #1
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	f040 8154 	bne.w	800486e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d00b      	beq.n	80045e6 <HAL_GPIO_Init+0x5a>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d007      	beq.n	80045e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045da:	2b11      	cmp	r3, #17
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b12      	cmp	r3, #18
 80045e4:	d130      	bne.n	8004648 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	2203      	movs	r2, #3
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800461c:	2201      	movs	r2, #1
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 0201 	and.w	r2, r3, #1
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2203      	movs	r2, #3
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d003      	beq.n	8004688 <HAL_GPIO_Init+0xfc>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b12      	cmp	r3, #18
 8004686:	d123      	bne.n	80046d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	08da      	lsrs	r2, r3, #3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3208      	adds	r2, #8
 8004690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	220f      	movs	r2, #15
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	08da      	lsrs	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3208      	adds	r2, #8
 80046ca:	69b9      	ldr	r1, [r7, #24]
 80046cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	2203      	movs	r2, #3
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4013      	ands	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80ae 	beq.w	800486e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	4b5c      	ldr	r3, [pc, #368]	; (8004888 <HAL_GPIO_Init+0x2fc>)
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	4a5b      	ldr	r2, [pc, #364]	; (8004888 <HAL_GPIO_Init+0x2fc>)
 800471c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004720:	6453      	str	r3, [r2, #68]	; 0x44
 8004722:	4b59      	ldr	r3, [pc, #356]	; (8004888 <HAL_GPIO_Init+0x2fc>)
 8004724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800472e:	4a57      	ldr	r2, [pc, #348]	; (800488c <HAL_GPIO_Init+0x300>)
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	089b      	lsrs	r3, r3, #2
 8004734:	3302      	adds	r3, #2
 8004736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	220f      	movs	r2, #15
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4013      	ands	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a4e      	ldr	r2, [pc, #312]	; (8004890 <HAL_GPIO_Init+0x304>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d025      	beq.n	80047a6 <HAL_GPIO_Init+0x21a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a4d      	ldr	r2, [pc, #308]	; (8004894 <HAL_GPIO_Init+0x308>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d01f      	beq.n	80047a2 <HAL_GPIO_Init+0x216>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a4c      	ldr	r2, [pc, #304]	; (8004898 <HAL_GPIO_Init+0x30c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d019      	beq.n	800479e <HAL_GPIO_Init+0x212>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a4b      	ldr	r2, [pc, #300]	; (800489c <HAL_GPIO_Init+0x310>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_GPIO_Init+0x20e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a4a      	ldr	r2, [pc, #296]	; (80048a0 <HAL_GPIO_Init+0x314>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00d      	beq.n	8004796 <HAL_GPIO_Init+0x20a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a49      	ldr	r2, [pc, #292]	; (80048a4 <HAL_GPIO_Init+0x318>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d007      	beq.n	8004792 <HAL_GPIO_Init+0x206>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a48      	ldr	r2, [pc, #288]	; (80048a8 <HAL_GPIO_Init+0x31c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d101      	bne.n	800478e <HAL_GPIO_Init+0x202>
 800478a:	2306      	movs	r3, #6
 800478c:	e00c      	b.n	80047a8 <HAL_GPIO_Init+0x21c>
 800478e:	2307      	movs	r3, #7
 8004790:	e00a      	b.n	80047a8 <HAL_GPIO_Init+0x21c>
 8004792:	2305      	movs	r3, #5
 8004794:	e008      	b.n	80047a8 <HAL_GPIO_Init+0x21c>
 8004796:	2304      	movs	r3, #4
 8004798:	e006      	b.n	80047a8 <HAL_GPIO_Init+0x21c>
 800479a:	2303      	movs	r3, #3
 800479c:	e004      	b.n	80047a8 <HAL_GPIO_Init+0x21c>
 800479e:	2302      	movs	r3, #2
 80047a0:	e002      	b.n	80047a8 <HAL_GPIO_Init+0x21c>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_GPIO_Init+0x21c>
 80047a6:	2300      	movs	r3, #0
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	f002 0203 	and.w	r2, r2, #3
 80047ae:	0092      	lsls	r2, r2, #2
 80047b0:	4093      	lsls	r3, r2
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047b8:	4934      	ldr	r1, [pc, #208]	; (800488c <HAL_GPIO_Init+0x300>)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	3302      	adds	r3, #2
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047c6:	4b39      	ldr	r3, [pc, #228]	; (80048ac <HAL_GPIO_Init+0x320>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047ea:	4a30      	ldr	r2, [pc, #192]	; (80048ac <HAL_GPIO_Init+0x320>)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047f0:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <HAL_GPIO_Init+0x320>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004814:	4a25      	ldr	r2, [pc, #148]	; (80048ac <HAL_GPIO_Init+0x320>)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <HAL_GPIO_Init+0x320>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800483e:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <HAL_GPIO_Init+0x320>)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004844:	4b19      	ldr	r3, [pc, #100]	; (80048ac <HAL_GPIO_Init+0x320>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004868:	4a10      	ldr	r2, [pc, #64]	; (80048ac <HAL_GPIO_Init+0x320>)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3301      	adds	r3, #1
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b0f      	cmp	r3, #15
 8004878:	f67f ae96 	bls.w	80045a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800487c:	bf00      	nop
 800487e:	3724      	adds	r7, #36	; 0x24
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40023800 	.word	0x40023800
 800488c:	40013800 	.word	0x40013800
 8004890:	40020000 	.word	0x40020000
 8004894:	40020400 	.word	0x40020400
 8004898:	40020800 	.word	0x40020800
 800489c:	40020c00 	.word	0x40020c00
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40021400 	.word	0x40021400
 80048a8:	40021800 	.word	0x40021800
 80048ac:	40013c00 	.word	0x40013c00

080048b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
 80048bc:	4613      	mov	r3, r2
 80048be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048c0:	787b      	ldrb	r3, [r7, #1]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048cc:	e003      	b.n	80048d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048ce:	887b      	ldrh	r3, [r7, #2]
 80048d0:	041a      	lsls	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	619a      	str	r2, [r3, #24]
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b088      	sub	sp, #32
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004902:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b10      	cmp	r3, #16
 8004910:	d003      	beq.n	800491a <HAL_I2C_EV_IRQHandler+0x38>
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	f040 80bd 	bne.w	8004a94 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10d      	bne.n	8004950 <HAL_I2C_EV_IRQHandler+0x6e>
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800493a:	d003      	beq.n	8004944 <HAL_I2C_EV_IRQHandler+0x62>
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004942:	d101      	bne.n	8004948 <HAL_I2C_EV_IRQHandler+0x66>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <HAL_I2C_EV_IRQHandler+0x68>
 8004948:	2300      	movs	r3, #0
 800494a:	2b01      	cmp	r3, #1
 800494c:	f000 812e 	beq.w	8004bac <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00c      	beq.n	8004974 <HAL_I2C_EV_IRQHandler+0x92>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	0a5b      	lsrs	r3, r3, #9
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 fb3e 	bl	8005fe8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fcbb 	bl	80052e8 <I2C_Master_SB>
 8004972:	e08e      	b.n	8004a92 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	08db      	lsrs	r3, r3, #3
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d009      	beq.n	8004994 <HAL_I2C_EV_IRQHandler+0xb2>
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	0a5b      	lsrs	r3, r3, #9
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fd31 	bl	80053f4 <I2C_Master_ADD10>
 8004992:	e07e      	b.n	8004a92 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <HAL_I2C_EV_IRQHandler+0xd2>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	0a5b      	lsrs	r3, r3, #9
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fd4b 	bl	8005448 <I2C_Master_ADDR>
 80049b2:	e06e      	b.n	8004a92 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d037      	beq.n	8004a30 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ce:	f000 80ef 	beq.w	8004bb0 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	09db      	lsrs	r3, r3, #7
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00f      	beq.n	80049fe <HAL_I2C_EV_IRQHandler+0x11c>
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	0a9b      	lsrs	r3, r3, #10
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <HAL_I2C_EV_IRQHandler+0x11c>
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f948 	bl	8004c8c <I2C_MasterTransmit_TXE>
 80049fc:	e049      	b.n	8004a92 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80d2 	beq.w	8004bb0 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	0a5b      	lsrs	r3, r3, #9
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80cb 	beq.w	8004bb0 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d103      	bne.n	8004a28 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f9cf 	bl	8004dc4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a26:	e0c3      	b.n	8004bb0 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fa33 	bl	8004e94 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a2e:	e0bf      	b.n	8004bb0 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3e:	f000 80b7 	beq.w	8004bb0 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	099b      	lsrs	r3, r3, #6
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00f      	beq.n	8004a6e <HAL_I2C_EV_IRQHandler+0x18c>
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	0a9b      	lsrs	r3, r3, #10
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_I2C_EV_IRQHandler+0x18c>
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	089b      	lsrs	r3, r3, #2
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 faa3 	bl	8004fb2 <I2C_MasterReceive_RXNE>
 8004a6c:	e011      	b.n	8004a92 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	089b      	lsrs	r3, r3, #2
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 809a 	beq.w	8004bb0 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	0a5b      	lsrs	r3, r3, #9
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8093 	beq.w	8004bb0 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fb42 	bl	8005114 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a90:	e08e      	b.n	8004bb0 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004a92:	e08d      	b.n	8004bb0 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d004      	beq.n	8004aa6 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	e007      	b.n	8004ab6 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d012      	beq.n	8004ae8 <HAL_I2C_EV_IRQHandler+0x206>
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	0a5b      	lsrs	r3, r3, #9
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00c      	beq.n	8004ae8 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004ade:	69b9      	ldr	r1, [r7, #24]
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 ff00 	bl	80058e6 <I2C_Slave_ADDR>
 8004ae6:	e066      	b.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d009      	beq.n	8004b08 <HAL_I2C_EV_IRQHandler+0x226>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	0a5b      	lsrs	r3, r3, #9
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 ff35 	bl	8005970 <I2C_Slave_STOPF>
 8004b06:	e056      	b.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b08:	7bbb      	ldrb	r3, [r7, #14]
 8004b0a:	2b21      	cmp	r3, #33	; 0x21
 8004b0c:	d002      	beq.n	8004b14 <HAL_I2C_EV_IRQHandler+0x232>
 8004b0e:	7bbb      	ldrb	r3, [r7, #14]
 8004b10:	2b29      	cmp	r3, #41	; 0x29
 8004b12:	d125      	bne.n	8004b60 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	09db      	lsrs	r3, r3, #7
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00f      	beq.n	8004b40 <HAL_I2C_EV_IRQHandler+0x25e>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	0a9b      	lsrs	r3, r3, #10
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d009      	beq.n	8004b40 <HAL_I2C_EV_IRQHandler+0x25e>
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fe16 	bl	800576a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b3e:	e039      	b.n	8004bb4 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d033      	beq.n	8004bb4 <HAL_I2C_EV_IRQHandler+0x2d2>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	0a5b      	lsrs	r3, r3, #9
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d02d      	beq.n	8004bb4 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fe43 	bl	80057e4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b5e:	e029      	b.n	8004bb4 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	099b      	lsrs	r3, r3, #6
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00f      	beq.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2aa>
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	0a9b      	lsrs	r3, r3, #10
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2aa>
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	089b      	lsrs	r3, r3, #2
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d103      	bne.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fe4e 	bl	8005826 <I2C_SlaveReceive_RXNE>
 8004b8a:	e014      	b.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	089b      	lsrs	r3, r3, #2
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00e      	beq.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	0a5b      	lsrs	r3, r3, #9
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fe7c 	bl	80058a2 <I2C_SlaveReceive_BTF>
 8004baa:	e004      	b.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004bac:	bf00      	nop
 8004bae:	e002      	b.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bb0:	bf00      	nop
 8004bb2:	e000      	b.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bb4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d150      	bne.n	8004d54 <I2C_MasterTransmit_TXE+0xc8>
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b21      	cmp	r3, #33	; 0x21
 8004cb6:	d14d      	bne.n	8004d54 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d01d      	beq.n	8004cfa <I2C_MasterTransmit_TXE+0x6e>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d01a      	beq.n	8004cfa <I2C_MasterTransmit_TXE+0x6e>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cca:	d016      	beq.n	8004cfa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cda:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2211      	movs	r2, #17
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff ff62 	bl	8004bbc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cf8:	e060      	b.n	8004dbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d08:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d18:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d107      	bne.n	8004d44 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff ff7d 	bl	8004c3c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d42:	e03b      	b.n	8004dbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ff35 	bl	8004bbc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d52:	e033      	b.n	8004dbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	2b21      	cmp	r3, #33	; 0x21
 8004d58:	d005      	beq.n	8004d66 <I2C_MasterTransmit_TXE+0xda>
 8004d5a:	7bbb      	ldrb	r3, [r7, #14]
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d12d      	bne.n	8004dbc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b22      	cmp	r3, #34	; 0x22
 8004d64:	d12a      	bne.n	8004dbc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d108      	bne.n	8004d82 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d80:	e01c      	b.n	8004dbc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d103      	bne.n	8004d96 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f880 	bl	8004e94 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d94:	e012      	b.n	8004dbc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dba:	e7ff      	b.n	8004dbc <I2C_MasterTransmit_TXE+0x130>
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b21      	cmp	r3, #33	; 0x21
 8004ddc:	d156      	bne.n	8004e8c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d012      	beq.n	8004e0e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004e0c:	e03e      	b.n	8004e8c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d01d      	beq.n	8004e50 <I2C_MasterTransmit_BTF+0x8c>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d01a      	beq.n	8004e50 <I2C_MasterTransmit_BTF+0x8c>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e20:	d016      	beq.n	8004e50 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e30:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2211      	movs	r2, #17
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff feb7 	bl	8004bbc <HAL_I2C_MasterTxCpltCallback>
}
 8004e4e:	e01d      	b.n	8004e8c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e5e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fe98 	bl	8004bbc <HAL_I2C_MasterTxCpltCallback>
}
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d11d      	bne.n	8004ee8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10b      	bne.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	1c9a      	adds	r2, r3, #2
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004eca:	e06e      	b.n	8004faa <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	121b      	asrs	r3, r3, #8
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ee6:	e060      	b.n	8004faa <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d10b      	bne.n	8004f08 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f06:	e050      	b.n	8004faa <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d14c      	bne.n	8004faa <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	2b22      	cmp	r3, #34	; 0x22
 8004f14:	d108      	bne.n	8004f28 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f24:	601a      	str	r2, [r3, #0]
}
 8004f26:	e040      	b.n	8004faa <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d015      	beq.n	8004f5e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	2b21      	cmp	r3, #33	; 0x21
 8004f36:	d112      	bne.n	8004f5e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	781a      	ldrb	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f5c:	e025      	b.n	8004faa <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d120      	bne.n	8004faa <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b21      	cmp	r3, #33	; 0x21
 8004f6c:	d11d      	bne.n	8004faa <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f7c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff fe49 	bl	8004c3c <HAL_I2C_MemTxCpltCallback>
}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b22      	cmp	r3, #34	; 0x22
 8004fc4:	f040 80a2 	bne.w	800510c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d921      	bls.n	800501a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b03      	cmp	r3, #3
 8005004:	f040 8082 	bne.w	800510c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005016:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005018:	e078      	b.n	800510c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	2b02      	cmp	r3, #2
 8005020:	d074      	beq.n	800510c <I2C_MasterReceive_RXNE+0x15a>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d002      	beq.n	800502e <I2C_MasterReceive_RXNE+0x7c>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d16e      	bne.n	800510c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 ffa8 	bl	8005f84 <I2C_WaitOnSTOPRequestThroughIT>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d142      	bne.n	80050c0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005048:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005058:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	d10a      	bne.n	80050aa <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fdd4 	bl	8004c50 <HAL_I2C_MemRxCpltCallback>
}
 80050a8:	e030      	b.n	800510c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2212      	movs	r2, #18
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff fd89 	bl	8004bd0 <HAL_I2C_MasterRxCpltCallback>
}
 80050be:	e025      	b.n	800510c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fdac 	bl	8004c64 <HAL_I2C_ErrorCallback>
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b04      	cmp	r3, #4
 800512a:	d11b      	bne.n	8005164 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005162:	e0bd      	b.n	80052e0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b03      	cmp	r3, #3
 800516c:	d129      	bne.n	80051c2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d00a      	beq.n	800519a <I2C_MasterReceive_BTF+0x86>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d007      	beq.n	800519a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005198:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051c0:	e08e      	b.n	80052e0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d176      	bne.n	80052ba <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d002      	beq.n	80051d8 <I2C_MasterReceive_BTF+0xc4>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d108      	bne.n	80051ea <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e019      	b.n	800521e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d002      	beq.n	80051f6 <I2C_MasterReceive_BTF+0xe2>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d108      	bne.n	8005208 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	e00a      	b.n	800521e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b10      	cmp	r3, #16
 800520c:	d007      	beq.n	800521e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800521c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691a      	ldr	r2, [r3, #16]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005278:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	d10a      	bne.n	80052a4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff fcd7 	bl	8004c50 <HAL_I2C_MemRxCpltCallback>
}
 80052a2:	e01d      	b.n	80052e0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2212      	movs	r2, #18
 80052b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff fc8c 	bl	8004bd0 <HAL_I2C_MasterRxCpltCallback>
}
 80052b8:	e012      	b.n	80052e0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d117      	bne.n	800532c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005308:	b2db      	uxtb	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005314:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005316:	e067      	b.n	80053e8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531c:	b2db      	uxtb	r3, r3
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	611a      	str	r2, [r3, #16]
}
 800532a:	e05d      	b.n	80053e8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005334:	d133      	bne.n	800539e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b21      	cmp	r3, #33	; 0x21
 8005340:	d109      	bne.n	8005356 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	b2db      	uxtb	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005352:	611a      	str	r2, [r3, #16]
 8005354:	e008      	b.n	8005368 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	b2da      	uxtb	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536c:	2b00      	cmp	r3, #0
 800536e:	d004      	beq.n	800537a <I2C_Master_SB+0x92>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d108      	bne.n	800538c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	2b00      	cmp	r3, #0
 8005380:	d032      	beq.n	80053e8 <I2C_Master_SB+0x100>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02d      	beq.n	80053e8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800539a:	605a      	str	r2, [r3, #4]
}
 800539c:	e024      	b.n	80053e8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10e      	bne.n	80053c4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	11db      	asrs	r3, r3, #7
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	f003 0306 	and.w	r3, r3, #6
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f063 030f 	orn	r3, r3, #15
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	611a      	str	r2, [r3, #16]
}
 80053c2:	e011      	b.n	80053e8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d10d      	bne.n	80053e8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	11db      	asrs	r3, r3, #7
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	f003 0306 	and.w	r3, r3, #6
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	f063 030e 	orn	r3, r3, #14
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	611a      	str	r2, [r3, #16]
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	b2da      	uxtb	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540c:	2b00      	cmp	r3, #0
 800540e:	d103      	bne.n	8005418 <I2C_Master_ADD10+0x24>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d011      	beq.n	800543c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <I2C_Master_ADD10+0x38>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800543a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005448:	b480      	push	{r7}
 800544a:	b091      	sub	sp, #68	; 0x44
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005456:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b22      	cmp	r3, #34	; 0x22
 8005470:	f040 8169 	bne.w	8005746 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10f      	bne.n	800549c <I2C_Master_ADDR+0x54>
 800547c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	d10b      	bne.n	800549c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005484:	2300      	movs	r3, #0
 8005486:	633b      	str	r3, [r7, #48]	; 0x30
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	633b      	str	r3, [r7, #48]	; 0x30
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	633b      	str	r3, [r7, #48]	; 0x30
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	e160      	b.n	800575e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d11d      	bne.n	80054e0 <I2C_Master_ADDR+0x98>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054ac:	d118      	bne.n	80054e0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ae:	2300      	movs	r3, #0
 80054b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	651a      	str	r2, [r3, #80]	; 0x50
 80054de:	e13e      	b.n	800575e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d113      	bne.n	8005512 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ea:	2300      	movs	r3, #0
 80054ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	e115      	b.n	800573e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	f040 808a 	bne.w	8005632 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005524:	d137      	bne.n	8005596 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005534:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005544:	d113      	bne.n	800556e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005554:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005556:	2300      	movs	r3, #0
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	e0e7      	b.n	800573e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800556e:	2300      	movs	r3, #0
 8005570:	623b      	str	r3, [r7, #32]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	623b      	str	r3, [r7, #32]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	623b      	str	r3, [r7, #32]
 8005582:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e0d3      	b.n	800573e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	2b08      	cmp	r3, #8
 800559a:	d02e      	beq.n	80055fa <I2C_Master_ADDR+0x1b2>
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d02b      	beq.n	80055fa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	2b12      	cmp	r3, #18
 80055a6:	d102      	bne.n	80055ae <I2C_Master_ADDR+0x166>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d125      	bne.n	80055fa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d00e      	beq.n	80055d2 <I2C_Master_ADDR+0x18a>
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d00b      	beq.n	80055d2 <I2C_Master_ADDR+0x18a>
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d008      	beq.n	80055d2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	e007      	b.n	80055e2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e2:	2300      	movs	r3, #0
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	e0a1      	b.n	800573e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005608:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800560a:	2300      	movs	r3, #0
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e085      	b.n	800573e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d14d      	bne.n	80056d8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	2b04      	cmp	r3, #4
 8005640:	d016      	beq.n	8005670 <I2C_Master_ADDR+0x228>
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2b02      	cmp	r3, #2
 8005646:	d013      	beq.n	8005670 <I2C_Master_ADDR+0x228>
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	2b10      	cmp	r3, #16
 800564c:	d010      	beq.n	8005670 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e007      	b.n	8005680 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800567e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800568a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800568e:	d117      	bne.n	80056c0 <I2C_Master_ADDR+0x278>
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005696:	d00b      	beq.n	80056b0 <I2C_Master_ADDR+0x268>
 8005698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569a:	2b01      	cmp	r3, #1
 800569c:	d008      	beq.n	80056b0 <I2C_Master_ADDR+0x268>
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d005      	beq.n	80056b0 <I2C_Master_ADDR+0x268>
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	2b10      	cmp	r3, #16
 80056a8:	d002      	beq.n	80056b0 <I2C_Master_ADDR+0x268>
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d107      	bne.n	80056c0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056be:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	e032      	b.n	800573e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056e6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f6:	d117      	bne.n	8005728 <I2C_Master_ADDR+0x2e0>
 80056f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056fe:	d00b      	beq.n	8005718 <I2C_Master_ADDR+0x2d0>
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	2b01      	cmp	r3, #1
 8005704:	d008      	beq.n	8005718 <I2C_Master_ADDR+0x2d0>
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	2b08      	cmp	r3, #8
 800570a:	d005      	beq.n	8005718 <I2C_Master_ADDR+0x2d0>
 800570c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570e:	2b10      	cmp	r3, #16
 8005710:	d002      	beq.n	8005718 <I2C_Master_ADDR+0x2d0>
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	2b20      	cmp	r3, #32
 8005716:	d107      	bne.n	8005728 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005726:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005744:	e00b      	b.n	800575e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
}
 800575c:	e7ff      	b.n	800575e <I2C_Master_ADDR+0x316>
 800575e:	bf00      	nop
 8005760:	3744      	adds	r7, #68	; 0x44
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005778:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d02b      	beq.n	80057dc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d114      	bne.n	80057dc <I2C_SlaveTransmit_TXE+0x72>
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2b29      	cmp	r3, #41	; 0x29
 80057b6:	d111      	bne.n	80057dc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2221      	movs	r2, #33	; 0x21
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2228      	movs	r2, #40	; 0x28
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff fa04 	bl	8004be4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d011      	beq.n	800581a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	781a      	ldrb	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005834:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02c      	beq.n	800589a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691a      	ldr	r2, [r3, #16]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d114      	bne.n	800589a <I2C_SlaveReceive_RXNE+0x74>
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	2b2a      	cmp	r3, #42	; 0x2a
 8005874:	d111      	bne.n	800589a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005884:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2222      	movs	r2, #34	; 0x22
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2228      	movs	r2, #40	; 0x28
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff f9af 	bl	8004bf8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800589a:	bf00      	nop
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d012      	beq.n	80058da <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005900:	2b28      	cmp	r3, #40	; 0x28
 8005902:	d127      	bne.n	8005954 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005912:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	089b      	lsrs	r3, r3, #2
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005920:	2301      	movs	r3, #1
 8005922:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	09db      	lsrs	r3, r3, #7
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	81bb      	strh	r3, [r7, #12]
 8005936:	e002      	b.n	800593e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005946:	89ba      	ldrh	r2, [r7, #12]
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff f95d 	bl	8004c0c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005952:	e008      	b.n	8005966 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0202 	mvn.w	r2, #2
 800595c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800598e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005990:	2300      	movs	r3, #0
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	60bb      	str	r3, [r7, #8]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059cc:	d172      	bne.n	8005ab4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b22      	cmp	r3, #34	; 0x22
 80059d2:	d002      	beq.n	80059da <I2C_Slave_STOPF+0x6a>
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	2b2a      	cmp	r3, #42	; 0x2a
 80059d8:	d135      	bne.n	8005a46 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f043 0204 	orr.w	r2, r3, #4
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fcce 	bl	80043b4 <HAL_DMA_GetState>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d049      	beq.n	8005ab2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	4a69      	ldr	r2, [pc, #420]	; (8005bc8 <I2C_Slave_STOPF+0x258>)
 8005a24:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fe fb16 	bl	800405c <HAL_DMA_Abort_IT>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d03d      	beq.n	8005ab2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a40:	4610      	mov	r0, r2
 8005a42:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a44:	e035      	b.n	8005ab2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	f043 0204 	orr.w	r2, r3, #4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fc98 	bl	80043b4 <HAL_DMA_GetState>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d014      	beq.n	8005ab4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	4a4e      	ldr	r2, [pc, #312]	; (8005bc8 <I2C_Slave_STOPF+0x258>)
 8005a90:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe fae0 	bl	800405c <HAL_DMA_Abort_IT>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aac:	4610      	mov	r0, r2
 8005aae:	4798      	blx	r3
 8005ab0:	e000      	b.n	8005ab4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ab2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d03e      	beq.n	8005b3c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d112      	bne.n	8005af2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d112      	bne.n	8005b26 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	f043 0204 	orr.w	r2, r3, #4
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f843 	bl	8005bd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b4a:	e039      	b.n	8005bc0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b50:	d109      	bne.n	8005b66 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2228      	movs	r2, #40	; 0x28
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff f849 	bl	8004bf8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b28      	cmp	r3, #40	; 0x28
 8005b70:	d111      	bne.n	8005b96 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <I2C_Slave_STOPF+0x25c>)
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff f84a 	bl	8004c28 <HAL_I2C_ListenCpltCallback>
}
 8005b94:	e014      	b.n	8005bc0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	2b22      	cmp	r3, #34	; 0x22
 8005b9c:	d002      	beq.n	8005ba4 <I2C_Slave_STOPF+0x234>
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b22      	cmp	r3, #34	; 0x22
 8005ba2:	d10d      	bne.n	8005bc0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff f81c 	bl	8004bf8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	08005e35 	.word	0x08005e35
 8005bcc:	ffff0000 	.word	0xffff0000

08005bd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d002      	beq.n	8005bf4 <I2C_ITError+0x24>
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	2b40      	cmp	r3, #64	; 0x40
 8005bf2:	d10a      	bne.n	8005c0a <I2C_ITError+0x3a>
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b22      	cmp	r3, #34	; 0x22
 8005bf8:	d107      	bne.n	8005c0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c10:	2b28      	cmp	r3, #40	; 0x28
 8005c12:	d107      	bne.n	8005c24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2228      	movs	r2, #40	; 0x28
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c22:	e015      	b.n	8005c50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c32:	d00a      	beq.n	8005c4a <I2C_ITError+0x7a>
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	2b60      	cmp	r3, #96	; 0x60
 8005c38:	d007      	beq.n	8005c4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5e:	d162      	bne.n	8005d26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d020      	beq.n	8005cc0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c82:	4a6a      	ldr	r2, [pc, #424]	; (8005e2c <I2C_ITError+0x25c>)
 8005c84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe f9e6 	bl	800405c <HAL_DMA_Abort_IT>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8089 	beq.w	8005daa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4798      	blx	r3
 8005cbe:	e074      	b.n	8005daa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	4a59      	ldr	r2, [pc, #356]	; (8005e2c <I2C_ITError+0x25c>)
 8005cc6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe f9c5 	bl	800405c <HAL_DMA_Abort_IT>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d068      	beq.n	8005daa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce2:	2b40      	cmp	r3, #64	; 0x40
 8005ce4:	d10b      	bne.n	8005cfe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0201 	bic.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d20:	4610      	mov	r0, r2
 8005d22:	4798      	blx	r3
 8005d24:	e041      	b.n	8005daa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b60      	cmp	r3, #96	; 0x60
 8005d30:	d125      	bne.n	8005d7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4a:	2b40      	cmp	r3, #64	; 0x40
 8005d4c:	d10b      	bne.n	8005d66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0201 	bic.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fe ff7e 	bl	8004c78 <HAL_I2C_AbortCpltCallback>
 8005d7c:	e015      	b.n	8005daa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b40      	cmp	r3, #64	; 0x40
 8005d8a:	d10b      	bne.n	8005da4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fe ff5d 	bl	8004c64 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10e      	bne.n	8005dd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d104      	bne.n	8005dd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005de6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d113      	bne.n	8005e24 <I2C_ITError+0x254>
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	2b28      	cmp	r3, #40	; 0x28
 8005e00:	d110      	bne.n	8005e24 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <I2C_ITError+0x260>)
 8005e06:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fe ff02 	bl	8004c28 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	08005e35 	.word	0x08005e35
 8005e30:	ffff0000 	.word	0xffff0000

08005e34 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e4e:	4b4b      	ldr	r3, [pc, #300]	; (8005f7c <I2C_DMAAbort+0x148>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	08db      	lsrs	r3, r3, #3
 8005e54:	4a4a      	ldr	r2, [pc, #296]	; (8005f80 <I2C_DMAAbort+0x14c>)
 8005e56:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5a:	0a1a      	lsrs	r2, r3, #8
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	00da      	lsls	r2, r3, #3
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	f043 0220 	orr.w	r2, r3, #32
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e7a:	e00a      	b.n	8005e92 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e90:	d0ea      	beq.n	8005e68 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	2200      	movs	r2, #0
 8005eb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0201 	bic.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b60      	cmp	r3, #96	; 0x60
 8005f02:	d10e      	bne.n	8005f22 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2200      	movs	r2, #0
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f1a:	6978      	ldr	r0, [r7, #20]
 8005f1c:	f7fe feac 	bl	8004c78 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f20:	e027      	b.n	8005f72 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f22:	7cfb      	ldrb	r3, [r7, #19]
 8005f24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f28:	2b28      	cmp	r3, #40	; 0x28
 8005f2a:	d117      	bne.n	8005f5c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2228      	movs	r2, #40	; 0x28
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f5a:	e007      	b.n	8005f6c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f6c:	6978      	ldr	r0, [r7, #20]
 8005f6e:	f7fe fe79 	bl	8004c64 <HAL_I2C_ErrorCallback>
}
 8005f72:	bf00      	nop
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000028 	.word	0x20000028
 8005f80:	14f8b589 	.word	0x14f8b589

08005f84 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f90:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	08db      	lsrs	r3, r3, #3
 8005f96:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005f98:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9c:	0a1a      	lsrs	r2, r3, #8
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d107      	bne.n	8005fc2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f043 0220 	orr.w	r2, r3, #32
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e008      	b.n	8005fd4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd0:	d0e9      	beq.n	8005fa6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20000028 	.word	0x20000028
 8005fe4:	14f8b589 	.word	0x14f8b589

08005fe8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ff8:	d103      	bne.n	8006002 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006000:	e007      	b.n	8006012 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800600a:	d102      	bne.n	8006012 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2208      	movs	r2, #8
 8006010:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800602a:	2300      	movs	r3, #0
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	4b20      	ldr	r3, [pc, #128]	; (80060b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006038:	6413      	str	r3, [r2, #64]	; 0x40
 800603a:	4b1d      	ldr	r3, [pc, #116]	; (80060b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006046:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006048:	2201      	movs	r2, #1
 800604a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800604c:	f7fd fde2 	bl	8003c14 <HAL_GetTick>
 8006050:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006052:	e009      	b.n	8006068 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006054:	f7fd fdde 	bl	8003c14 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006062:	d901      	bls.n	8006068 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e01f      	b.n	80060a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006068:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006074:	d1ee      	bne.n	8006054 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006076:	4b11      	ldr	r3, [pc, #68]	; (80060bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006078:	2201      	movs	r2, #1
 800607a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800607c:	f7fd fdca 	bl	8003c14 <HAL_GetTick>
 8006080:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006082:	e009      	b.n	8006098 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006084:	f7fd fdc6 	bl	8003c14 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006092:	d901      	bls.n	8006098 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e007      	b.n	80060a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006098:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060a4:	d1ee      	bne.n	8006084 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40023800 	.word	0x40023800
 80060b4:	420e0040 	.word	0x420e0040
 80060b8:	40007000 	.word	0x40007000
 80060bc:	420e0044 	.word	0x420e0044

080060c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0cc      	b.n	800626e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060d4:	4b68      	ldr	r3, [pc, #416]	; (8006278 <HAL_RCC_ClockConfig+0x1b8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d90c      	bls.n	80060fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e2:	4b65      	ldr	r3, [pc, #404]	; (8006278 <HAL_RCC_ClockConfig+0x1b8>)
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ea:	4b63      	ldr	r3, [pc, #396]	; (8006278 <HAL_RCC_ClockConfig+0x1b8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d001      	beq.n	80060fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0b8      	b.n	800626e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d020      	beq.n	800614a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006114:	4b59      	ldr	r3, [pc, #356]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	4a58      	ldr	r2, [pc, #352]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800611e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800612c:	4b53      	ldr	r3, [pc, #332]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4a52      	ldr	r2, [pc, #328]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006138:	4b50      	ldr	r3, [pc, #320]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	494d      	ldr	r1, [pc, #308]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 8006146:	4313      	orrs	r3, r2
 8006148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d044      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d107      	bne.n	800616e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800615e:	4b47      	ldr	r3, [pc, #284]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d119      	bne.n	800619e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e07f      	b.n	800626e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2b02      	cmp	r3, #2
 8006174:	d003      	beq.n	800617e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800617a:	2b03      	cmp	r3, #3
 800617c:	d107      	bne.n	800618e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800617e:	4b3f      	ldr	r3, [pc, #252]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e06f      	b.n	800626e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800618e:	4b3b      	ldr	r3, [pc, #236]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e067      	b.n	800626e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800619e:	4b37      	ldr	r3, [pc, #220]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f023 0203 	bic.w	r2, r3, #3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4934      	ldr	r1, [pc, #208]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061b0:	f7fd fd30 	bl	8003c14 <HAL_GetTick>
 80061b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b6:	e00a      	b.n	80061ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b8:	f7fd fd2c 	bl	8003c14 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e04f      	b.n	800626e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ce:	4b2b      	ldr	r3, [pc, #172]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 020c 	and.w	r2, r3, #12
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	429a      	cmp	r2, r3
 80061de:	d1eb      	bne.n	80061b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061e0:	4b25      	ldr	r3, [pc, #148]	; (8006278 <HAL_RCC_ClockConfig+0x1b8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d20c      	bcs.n	8006208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ee:	4b22      	ldr	r3, [pc, #136]	; (8006278 <HAL_RCC_ClockConfig+0x1b8>)
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f6:	4b20      	ldr	r3, [pc, #128]	; (8006278 <HAL_RCC_ClockConfig+0x1b8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d001      	beq.n	8006208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e032      	b.n	800626e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006214:	4b19      	ldr	r3, [pc, #100]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	4916      	ldr	r1, [pc, #88]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	4313      	orrs	r3, r2
 8006224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b00      	cmp	r3, #0
 8006230:	d009      	beq.n	8006246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006232:	4b12      	ldr	r3, [pc, #72]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	490e      	ldr	r1, [pc, #56]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 8006242:	4313      	orrs	r3, r2
 8006244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006246:	f000 f855 	bl	80062f4 <HAL_RCC_GetSysClockFreq>
 800624a:	4601      	mov	r1, r0
 800624c:	4b0b      	ldr	r3, [pc, #44]	; (800627c <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	091b      	lsrs	r3, r3, #4
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <HAL_RCC_ClockConfig+0x1c0>)
 8006258:	5cd3      	ldrb	r3, [r2, r3]
 800625a:	fa21 f303 	lsr.w	r3, r1, r3
 800625e:	4a09      	ldr	r2, [pc, #36]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 8006260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006262:	4b09      	ldr	r3, [pc, #36]	; (8006288 <HAL_RCC_ClockConfig+0x1c8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4618      	mov	r0, r3
 8006268:	f7fd fc90 	bl	8003b8c <HAL_InitTick>

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	40023c00 	.word	0x40023c00
 800627c:	40023800 	.word	0x40023800
 8006280:	0800cb60 	.word	0x0800cb60
 8006284:	20000028 	.word	0x20000028
 8006288:	2000002c 	.word	0x2000002c

0800628c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006290:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006292:	681b      	ldr	r3, [r3, #0]
}
 8006294:	4618      	mov	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000028 	.word	0x20000028

080062a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062a8:	f7ff fff0 	bl	800628c <HAL_RCC_GetHCLKFreq>
 80062ac:	4601      	mov	r1, r0
 80062ae:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	0a9b      	lsrs	r3, r3, #10
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	4a03      	ldr	r2, [pc, #12]	; (80062c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ba:	5cd3      	ldrb	r3, [r2, r3]
 80062bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40023800 	.word	0x40023800
 80062c8:	0800cb70 	.word	0x0800cb70

080062cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062d0:	f7ff ffdc 	bl	800628c <HAL_RCC_GetHCLKFreq>
 80062d4:	4601      	mov	r1, r0
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	0b5b      	lsrs	r3, r3, #13
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	4a03      	ldr	r2, [pc, #12]	; (80062f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062e2:	5cd3      	ldrb	r3, [r2, r3]
 80062e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40023800 	.word	0x40023800
 80062f0:	0800cb70 	.word	0x0800cb70

080062f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800630e:	4bc6      	ldr	r3, [pc, #792]	; (8006628 <HAL_RCC_GetSysClockFreq+0x334>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 030c 	and.w	r3, r3, #12
 8006316:	2b0c      	cmp	r3, #12
 8006318:	f200 817e 	bhi.w	8006618 <HAL_RCC_GetSysClockFreq+0x324>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <HAL_RCC_GetSysClockFreq+0x30>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006359 	.word	0x08006359
 8006328:	08006619 	.word	0x08006619
 800632c:	08006619 	.word	0x08006619
 8006330:	08006619 	.word	0x08006619
 8006334:	0800635f 	.word	0x0800635f
 8006338:	08006619 	.word	0x08006619
 800633c:	08006619 	.word	0x08006619
 8006340:	08006619 	.word	0x08006619
 8006344:	08006365 	.word	0x08006365
 8006348:	08006619 	.word	0x08006619
 800634c:	08006619 	.word	0x08006619
 8006350:	08006619 	.word	0x08006619
 8006354:	080064c1 	.word	0x080064c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006358:	4bb4      	ldr	r3, [pc, #720]	; (800662c <HAL_RCC_GetSysClockFreq+0x338>)
 800635a:	613b      	str	r3, [r7, #16]
       break;
 800635c:	e15f      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800635e:	4bb4      	ldr	r3, [pc, #720]	; (8006630 <HAL_RCC_GetSysClockFreq+0x33c>)
 8006360:	613b      	str	r3, [r7, #16]
      break;
 8006362:	e15c      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006364:	4bb0      	ldr	r3, [pc, #704]	; (8006628 <HAL_RCC_GetSysClockFreq+0x334>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800636c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800636e:	4bae      	ldr	r3, [pc, #696]	; (8006628 <HAL_RCC_GetSysClockFreq+0x334>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d04a      	beq.n	8006410 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800637a:	4bab      	ldr	r3, [pc, #684]	; (8006628 <HAL_RCC_GetSysClockFreq+0x334>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	099b      	lsrs	r3, r3, #6
 8006380:	f04f 0400 	mov.w	r4, #0
 8006384:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	ea03 0501 	and.w	r5, r3, r1
 8006390:	ea04 0602 	and.w	r6, r4, r2
 8006394:	4629      	mov	r1, r5
 8006396:	4632      	mov	r2, r6
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	f04f 0400 	mov.w	r4, #0
 80063a0:	0154      	lsls	r4, r2, #5
 80063a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80063a6:	014b      	lsls	r3, r1, #5
 80063a8:	4619      	mov	r1, r3
 80063aa:	4622      	mov	r2, r4
 80063ac:	1b49      	subs	r1, r1, r5
 80063ae:	eb62 0206 	sbc.w	r2, r2, r6
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	f04f 0400 	mov.w	r4, #0
 80063ba:	0194      	lsls	r4, r2, #6
 80063bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80063c0:	018b      	lsls	r3, r1, #6
 80063c2:	1a5b      	subs	r3, r3, r1
 80063c4:	eb64 0402 	sbc.w	r4, r4, r2
 80063c8:	f04f 0100 	mov.w	r1, #0
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	00e2      	lsls	r2, r4, #3
 80063d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80063d6:	00d9      	lsls	r1, r3, #3
 80063d8:	460b      	mov	r3, r1
 80063da:	4614      	mov	r4, r2
 80063dc:	195b      	adds	r3, r3, r5
 80063de:	eb44 0406 	adc.w	r4, r4, r6
 80063e2:	f04f 0100 	mov.w	r1, #0
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	0262      	lsls	r2, r4, #9
 80063ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80063f0:	0259      	lsls	r1, r3, #9
 80063f2:	460b      	mov	r3, r1
 80063f4:	4614      	mov	r4, r2
 80063f6:	4618      	mov	r0, r3
 80063f8:	4621      	mov	r1, r4
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f04f 0400 	mov.w	r4, #0
 8006400:	461a      	mov	r2, r3
 8006402:	4623      	mov	r3, r4
 8006404:	f7fa fd5a 	bl	8000ebc <__aeabi_uldivmod>
 8006408:	4603      	mov	r3, r0
 800640a:	460c      	mov	r4, r1
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e049      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006410:	4b85      	ldr	r3, [pc, #532]	; (8006628 <HAL_RCC_GetSysClockFreq+0x334>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	099b      	lsrs	r3, r3, #6
 8006416:	f04f 0400 	mov.w	r4, #0
 800641a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	ea03 0501 	and.w	r5, r3, r1
 8006426:	ea04 0602 	and.w	r6, r4, r2
 800642a:	4629      	mov	r1, r5
 800642c:	4632      	mov	r2, r6
 800642e:	f04f 0300 	mov.w	r3, #0
 8006432:	f04f 0400 	mov.w	r4, #0
 8006436:	0154      	lsls	r4, r2, #5
 8006438:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800643c:	014b      	lsls	r3, r1, #5
 800643e:	4619      	mov	r1, r3
 8006440:	4622      	mov	r2, r4
 8006442:	1b49      	subs	r1, r1, r5
 8006444:	eb62 0206 	sbc.w	r2, r2, r6
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	f04f 0400 	mov.w	r4, #0
 8006450:	0194      	lsls	r4, r2, #6
 8006452:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006456:	018b      	lsls	r3, r1, #6
 8006458:	1a5b      	subs	r3, r3, r1
 800645a:	eb64 0402 	sbc.w	r4, r4, r2
 800645e:	f04f 0100 	mov.w	r1, #0
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	00e2      	lsls	r2, r4, #3
 8006468:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800646c:	00d9      	lsls	r1, r3, #3
 800646e:	460b      	mov	r3, r1
 8006470:	4614      	mov	r4, r2
 8006472:	195b      	adds	r3, r3, r5
 8006474:	eb44 0406 	adc.w	r4, r4, r6
 8006478:	f04f 0100 	mov.w	r1, #0
 800647c:	f04f 0200 	mov.w	r2, #0
 8006480:	02a2      	lsls	r2, r4, #10
 8006482:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006486:	0299      	lsls	r1, r3, #10
 8006488:	460b      	mov	r3, r1
 800648a:	4614      	mov	r4, r2
 800648c:	4618      	mov	r0, r3
 800648e:	4621      	mov	r1, r4
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f04f 0400 	mov.w	r4, #0
 8006496:	461a      	mov	r2, r3
 8006498:	4623      	mov	r3, r4
 800649a:	f7fa fd0f 	bl	8000ebc <__aeabi_uldivmod>
 800649e:	4603      	mov	r3, r0
 80064a0:	460c      	mov	r4, r1
 80064a2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064a4:	4b60      	ldr	r3, [pc, #384]	; (8006628 <HAL_RCC_GetSysClockFreq+0x334>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	0c1b      	lsrs	r3, r3, #16
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	3301      	adds	r3, #1
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064bc:	613b      	str	r3, [r7, #16]
      break;
 80064be:	e0ae      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064c0:	4b59      	ldr	r3, [pc, #356]	; (8006628 <HAL_RCC_GetSysClockFreq+0x334>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064c8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064ca:	4b57      	ldr	r3, [pc, #348]	; (8006628 <HAL_RCC_GetSysClockFreq+0x334>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d04a      	beq.n	800656c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064d6:	4b54      	ldr	r3, [pc, #336]	; (8006628 <HAL_RCC_GetSysClockFreq+0x334>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	099b      	lsrs	r3, r3, #6
 80064dc:	f04f 0400 	mov.w	r4, #0
 80064e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	ea03 0501 	and.w	r5, r3, r1
 80064ec:	ea04 0602 	and.w	r6, r4, r2
 80064f0:	4629      	mov	r1, r5
 80064f2:	4632      	mov	r2, r6
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	f04f 0400 	mov.w	r4, #0
 80064fc:	0154      	lsls	r4, r2, #5
 80064fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006502:	014b      	lsls	r3, r1, #5
 8006504:	4619      	mov	r1, r3
 8006506:	4622      	mov	r2, r4
 8006508:	1b49      	subs	r1, r1, r5
 800650a:	eb62 0206 	sbc.w	r2, r2, r6
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	f04f 0400 	mov.w	r4, #0
 8006516:	0194      	lsls	r4, r2, #6
 8006518:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800651c:	018b      	lsls	r3, r1, #6
 800651e:	1a5b      	subs	r3, r3, r1
 8006520:	eb64 0402 	sbc.w	r4, r4, r2
 8006524:	f04f 0100 	mov.w	r1, #0
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	00e2      	lsls	r2, r4, #3
 800652e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006532:	00d9      	lsls	r1, r3, #3
 8006534:	460b      	mov	r3, r1
 8006536:	4614      	mov	r4, r2
 8006538:	195b      	adds	r3, r3, r5
 800653a:	eb44 0406 	adc.w	r4, r4, r6
 800653e:	f04f 0100 	mov.w	r1, #0
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	0262      	lsls	r2, r4, #9
 8006548:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800654c:	0259      	lsls	r1, r3, #9
 800654e:	460b      	mov	r3, r1
 8006550:	4614      	mov	r4, r2
 8006552:	4618      	mov	r0, r3
 8006554:	4621      	mov	r1, r4
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f04f 0400 	mov.w	r4, #0
 800655c:	461a      	mov	r2, r3
 800655e:	4623      	mov	r3, r4
 8006560:	f7fa fcac 	bl	8000ebc <__aeabi_uldivmod>
 8006564:	4603      	mov	r3, r0
 8006566:	460c      	mov	r4, r1
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	e049      	b.n	8006600 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800656c:	4b2e      	ldr	r3, [pc, #184]	; (8006628 <HAL_RCC_GetSysClockFreq+0x334>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	099b      	lsrs	r3, r3, #6
 8006572:	f04f 0400 	mov.w	r4, #0
 8006576:	f240 11ff 	movw	r1, #511	; 0x1ff
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	ea03 0501 	and.w	r5, r3, r1
 8006582:	ea04 0602 	and.w	r6, r4, r2
 8006586:	4629      	mov	r1, r5
 8006588:	4632      	mov	r2, r6
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	f04f 0400 	mov.w	r4, #0
 8006592:	0154      	lsls	r4, r2, #5
 8006594:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006598:	014b      	lsls	r3, r1, #5
 800659a:	4619      	mov	r1, r3
 800659c:	4622      	mov	r2, r4
 800659e:	1b49      	subs	r1, r1, r5
 80065a0:	eb62 0206 	sbc.w	r2, r2, r6
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	f04f 0400 	mov.w	r4, #0
 80065ac:	0194      	lsls	r4, r2, #6
 80065ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80065b2:	018b      	lsls	r3, r1, #6
 80065b4:	1a5b      	subs	r3, r3, r1
 80065b6:	eb64 0402 	sbc.w	r4, r4, r2
 80065ba:	f04f 0100 	mov.w	r1, #0
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	00e2      	lsls	r2, r4, #3
 80065c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80065c8:	00d9      	lsls	r1, r3, #3
 80065ca:	460b      	mov	r3, r1
 80065cc:	4614      	mov	r4, r2
 80065ce:	195b      	adds	r3, r3, r5
 80065d0:	eb44 0406 	adc.w	r4, r4, r6
 80065d4:	f04f 0100 	mov.w	r1, #0
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	02a2      	lsls	r2, r4, #10
 80065de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80065e2:	0299      	lsls	r1, r3, #10
 80065e4:	460b      	mov	r3, r1
 80065e6:	4614      	mov	r4, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	4621      	mov	r1, r4
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f04f 0400 	mov.w	r4, #0
 80065f2:	461a      	mov	r2, r3
 80065f4:	4623      	mov	r3, r4
 80065f6:	f7fa fc61 	bl	8000ebc <__aeabi_uldivmod>
 80065fa:	4603      	mov	r3, r0
 80065fc:	460c      	mov	r4, r1
 80065fe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006600:	4b09      	ldr	r3, [pc, #36]	; (8006628 <HAL_RCC_GetSysClockFreq+0x334>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	0f1b      	lsrs	r3, r3, #28
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	613b      	str	r3, [r7, #16]
      break;
 8006616:	e002      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006618:	4b04      	ldr	r3, [pc, #16]	; (800662c <HAL_RCC_GetSysClockFreq+0x338>)
 800661a:	613b      	str	r3, [r7, #16]
      break;
 800661c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800661e:	693b      	ldr	r3, [r7, #16]
}
 8006620:	4618      	mov	r0, r3
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006628:	40023800 	.word	0x40023800
 800662c:	00f42400 	.word	0x00f42400
 8006630:	007a1200 	.word	0x007a1200

08006634 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8083 	beq.w	8006754 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800664e:	4b95      	ldr	r3, [pc, #596]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 030c 	and.w	r3, r3, #12
 8006656:	2b04      	cmp	r3, #4
 8006658:	d019      	beq.n	800668e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800665a:	4b92      	ldr	r3, [pc, #584]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006662:	2b08      	cmp	r3, #8
 8006664:	d106      	bne.n	8006674 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006666:	4b8f      	ldr	r3, [pc, #572]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800666e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006672:	d00c      	beq.n	800668e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006674:	4b8b      	ldr	r3, [pc, #556]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800667c:	2b0c      	cmp	r3, #12
 800667e:	d112      	bne.n	80066a6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006680:	4b88      	ldr	r3, [pc, #544]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800668c:	d10b      	bne.n	80066a6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800668e:	4b85      	ldr	r3, [pc, #532]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d05b      	beq.n	8006752 <HAL_RCC_OscConfig+0x11e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d157      	bne.n	8006752 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e216      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ae:	d106      	bne.n	80066be <HAL_RCC_OscConfig+0x8a>
 80066b0:	4b7c      	ldr	r3, [pc, #496]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a7b      	ldr	r2, [pc, #492]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80066b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	e01d      	b.n	80066fa <HAL_RCC_OscConfig+0xc6>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066c6:	d10c      	bne.n	80066e2 <HAL_RCC_OscConfig+0xae>
 80066c8:	4b76      	ldr	r3, [pc, #472]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a75      	ldr	r2, [pc, #468]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80066ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	4b73      	ldr	r3, [pc, #460]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a72      	ldr	r2, [pc, #456]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80066da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e00b      	b.n	80066fa <HAL_RCC_OscConfig+0xc6>
 80066e2:	4b70      	ldr	r3, [pc, #448]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a6f      	ldr	r2, [pc, #444]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80066e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	4b6d      	ldr	r3, [pc, #436]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a6c      	ldr	r2, [pc, #432]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80066f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d013      	beq.n	800672a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006702:	f7fd fa87 	bl	8003c14 <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800670a:	f7fd fa83 	bl	8003c14 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b64      	cmp	r3, #100	; 0x64
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e1db      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671c:	4b61      	ldr	r3, [pc, #388]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0f0      	beq.n	800670a <HAL_RCC_OscConfig+0xd6>
 8006728:	e014      	b.n	8006754 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fd fa73 	bl	8003c14 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006732:	f7fd fa6f 	bl	8003c14 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b64      	cmp	r3, #100	; 0x64
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e1c7      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006744:	4b57      	ldr	r3, [pc, #348]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f0      	bne.n	8006732 <HAL_RCC_OscConfig+0xfe>
 8006750:	e000      	b.n	8006754 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006752:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d06f      	beq.n	8006840 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006760:	4b50      	ldr	r3, [pc, #320]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 030c 	and.w	r3, r3, #12
 8006768:	2b00      	cmp	r3, #0
 800676a:	d017      	beq.n	800679c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800676c:	4b4d      	ldr	r3, [pc, #308]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006774:	2b08      	cmp	r3, #8
 8006776:	d105      	bne.n	8006784 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006778:	4b4a      	ldr	r3, [pc, #296]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00b      	beq.n	800679c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006784:	4b47      	ldr	r3, [pc, #284]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800678c:	2b0c      	cmp	r3, #12
 800678e:	d11c      	bne.n	80067ca <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006790:	4b44      	ldr	r3, [pc, #272]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d116      	bne.n	80067ca <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800679c:	4b41      	ldr	r3, [pc, #260]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_RCC_OscConfig+0x180>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d001      	beq.n	80067b4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e18f      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b4:	4b3b      	ldr	r3, [pc, #236]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	4938      	ldr	r1, [pc, #224]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067c8:	e03a      	b.n	8006840 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d020      	beq.n	8006814 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067d2:	4b35      	ldr	r3, [pc, #212]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d8:	f7fd fa1c 	bl	8003c14 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067e0:	f7fd fa18 	bl	8003c14 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e170      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f2:	4b2c      	ldr	r3, [pc, #176]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067fe:	4b29      	ldr	r3, [pc, #164]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	4925      	ldr	r1, [pc, #148]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 800680e:	4313      	orrs	r3, r2
 8006810:	600b      	str	r3, [r1, #0]
 8006812:	e015      	b.n	8006840 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006814:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681a:	f7fd f9fb 	bl	8003c14 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006822:	f7fd f9f7 	bl	8003c14 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e14f      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006834:	4b1b      	ldr	r3, [pc, #108]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f0      	bne.n	8006822 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d037      	beq.n	80068bc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d016      	beq.n	8006882 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006854:	4b15      	ldr	r3, [pc, #84]	; (80068ac <HAL_RCC_OscConfig+0x278>)
 8006856:	2201      	movs	r2, #1
 8006858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685a:	f7fd f9db 	bl	8003c14 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006860:	e008      	b.n	8006874 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006862:	f7fd f9d7 	bl	8003c14 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e12f      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <HAL_RCC_OscConfig+0x270>)
 8006876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0f0      	beq.n	8006862 <HAL_RCC_OscConfig+0x22e>
 8006880:	e01c      	b.n	80068bc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006882:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <HAL_RCC_OscConfig+0x278>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006888:	f7fd f9c4 	bl	8003c14 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800688e:	e00f      	b.n	80068b0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006890:	f7fd f9c0 	bl	8003c14 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d908      	bls.n	80068b0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e118      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
 80068a2:	bf00      	nop
 80068a4:	40023800 	.word	0x40023800
 80068a8:	42470000 	.word	0x42470000
 80068ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b0:	4b8a      	ldr	r3, [pc, #552]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 80068b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e9      	bne.n	8006890 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8097 	beq.w	80069f8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ce:	4b83      	ldr	r3, [pc, #524]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10f      	bne.n	80068fa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	4b7f      	ldr	r3, [pc, #508]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	4a7e      	ldr	r2, [pc, #504]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 80068e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e8:	6413      	str	r3, [r2, #64]	; 0x40
 80068ea:	4b7c      	ldr	r3, [pc, #496]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80068f6:	2301      	movs	r3, #1
 80068f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068fa:	4b79      	ldr	r3, [pc, #484]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d118      	bne.n	8006938 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006906:	4b76      	ldr	r3, [pc, #472]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a75      	ldr	r2, [pc, #468]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 800690c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006912:	f7fd f97f 	bl	8003c14 <HAL_GetTick>
 8006916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006918:	e008      	b.n	800692c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691a:	f7fd f97b 	bl	8003c14 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e0d3      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800692c:	4b6c      	ldr	r3, [pc, #432]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f0      	beq.n	800691a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d106      	bne.n	800694e <HAL_RCC_OscConfig+0x31a>
 8006940:	4b66      	ldr	r3, [pc, #408]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006944:	4a65      	ldr	r2, [pc, #404]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	6713      	str	r3, [r2, #112]	; 0x70
 800694c:	e01c      	b.n	8006988 <HAL_RCC_OscConfig+0x354>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	2b05      	cmp	r3, #5
 8006954:	d10c      	bne.n	8006970 <HAL_RCC_OscConfig+0x33c>
 8006956:	4b61      	ldr	r3, [pc, #388]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695a:	4a60      	ldr	r2, [pc, #384]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 800695c:	f043 0304 	orr.w	r3, r3, #4
 8006960:	6713      	str	r3, [r2, #112]	; 0x70
 8006962:	4b5e      	ldr	r3, [pc, #376]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	4a5d      	ldr	r2, [pc, #372]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006968:	f043 0301 	orr.w	r3, r3, #1
 800696c:	6713      	str	r3, [r2, #112]	; 0x70
 800696e:	e00b      	b.n	8006988 <HAL_RCC_OscConfig+0x354>
 8006970:	4b5a      	ldr	r3, [pc, #360]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	4a59      	ldr	r2, [pc, #356]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	6713      	str	r3, [r2, #112]	; 0x70
 800697c:	4b57      	ldr	r3, [pc, #348]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	4a56      	ldr	r2, [pc, #344]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006982:	f023 0304 	bic.w	r3, r3, #4
 8006986:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d015      	beq.n	80069bc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006990:	f7fd f940 	bl	8003c14 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006996:	e00a      	b.n	80069ae <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006998:	f7fd f93c 	bl	8003c14 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e092      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ae:	4b4b      	ldr	r3, [pc, #300]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0ee      	beq.n	8006998 <HAL_RCC_OscConfig+0x364>
 80069ba:	e014      	b.n	80069e6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069bc:	f7fd f92a 	bl	8003c14 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c2:	e00a      	b.n	80069da <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c4:	f7fd f926 	bl	8003c14 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e07c      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069da:	4b40      	ldr	r3, [pc, #256]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 80069dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1ee      	bne.n	80069c4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d105      	bne.n	80069f8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ec:	4b3b      	ldr	r3, [pc, #236]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	4a3a      	ldr	r2, [pc, #232]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 80069f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d068      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a00:	4b36      	ldr	r3, [pc, #216]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 030c 	and.w	r3, r3, #12
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d060      	beq.n	8006ace <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d145      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a14:	4b33      	ldr	r3, [pc, #204]	; (8006ae4 <HAL_RCC_OscConfig+0x4b0>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1a:	f7fd f8fb 	bl	8003c14 <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a22:	f7fd f8f7 	bl	8003c14 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e04f      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a34:	4b29      	ldr	r3, [pc, #164]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1f0      	bne.n	8006a22 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	69da      	ldr	r2, [r3, #28]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	019b      	lsls	r3, r3, #6
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	085b      	lsrs	r3, r3, #1
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	041b      	lsls	r3, r3, #16
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	061b      	lsls	r3, r3, #24
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	071b      	lsls	r3, r3, #28
 8006a6c:	491b      	ldr	r1, [pc, #108]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a72:	4b1c      	ldr	r3, [pc, #112]	; (8006ae4 <HAL_RCC_OscConfig+0x4b0>)
 8006a74:	2201      	movs	r2, #1
 8006a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fd f8cc 	bl	8003c14 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a80:	f7fd f8c8 	bl	8003c14 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e020      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a92:	4b12      	ldr	r3, [pc, #72]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCC_OscConfig+0x44c>
 8006a9e:	e018      	b.n	8006ad2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa0:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <HAL_RCC_OscConfig+0x4b0>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa6:	f7fd f8b5 	bl	8003c14 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aae:	f7fd f8b1 	bl	8003c14 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e009      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <HAL_RCC_OscConfig+0x4a8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f0      	bne.n	8006aae <HAL_RCC_OscConfig+0x47a>
 8006acc:	e001      	b.n	8006ad2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	40007000 	.word	0x40007000
 8006ae4:	42470060 	.word	0x42470060

08006ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e056      	b.n	8006ba8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7fb ff6d 	bl	80029f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	ea42 0103 	orr.w	r1, r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	0c1b      	lsrs	r3, r3, #16
 8006b78:	f003 0104 	and.w	r1, r3, #4
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69da      	ldr	r2, [r3, #28]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e01d      	b.n	8006bfe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fc f80c 	bl	8002bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f000 fc0e 	bl	8007410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0201 	orr.w	r2, r2, #1
 8006c1c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b06      	cmp	r3, #6
 8006c2e:	d007      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e01d      	b.n	8006c9c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d106      	bne.n	8006c7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7fb ff9b 	bl	8002bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f000 fbbf 	bl	8007410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fe94 	bl	80079e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a15      	ldr	r2, [pc, #84]	; (8006d18 <HAL_TIM_PWM_Start+0x74>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d004      	beq.n	8006cd0 <HAL_TIM_PWM_Start+0x2c>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a14      	ldr	r2, [pc, #80]	; (8006d1c <HAL_TIM_PWM_Start+0x78>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d101      	bne.n	8006cd4 <HAL_TIM_PWM_Start+0x30>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e000      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x32>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b06      	cmp	r3, #6
 8006cfa:	d007      	beq.n	8006d0c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	40010400 	.word	0x40010400

08006d20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e083      	b.n	8006e3c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fb ff79 	bl	8002c40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d64:	f023 0307 	bic.w	r3, r3, #7
 8006d68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3304      	adds	r3, #4
 8006d72:	4619      	mov	r1, r3
 8006d74:	4610      	mov	r0, r2
 8006d76:	f000 fb4b 	bl	8007410 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da2:	f023 0303 	bic.w	r3, r3, #3
 8006da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	4313      	orrs	r3, r2
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006dc0:	f023 030c 	bic.w	r3, r3, #12
 8006dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	011a      	lsls	r2, r3, #4
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	031b      	lsls	r3, r3, #12
 8006df0:	4313      	orrs	r3, r2
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006dfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	4313      	orrs	r3, r2
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <HAL_TIM_Encoder_Start+0x16>
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d008      	beq.n	8006e6a <HAL_TIM_Encoder_Start+0x26>
 8006e58:	e00f      	b.n	8006e7a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	2100      	movs	r1, #0
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fdbe 	bl	80079e4 <TIM_CCxChannelCmd>
      break;
 8006e68:	e016      	b.n	8006e98 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	2104      	movs	r1, #4
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fdb6 	bl	80079e4 <TIM_CCxChannelCmd>
      break;
 8006e78:	e00e      	b.n	8006e98 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	2100      	movs	r1, #0
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fdae 	bl	80079e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	2104      	movs	r1, #4
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fda7 	bl	80079e4 <TIM_CCxChannelCmd>
      break;
 8006e96:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0201 	orr.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d122      	bne.n	8006f0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d11b      	bne.n	8006f0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f06f 0202 	mvn.w	r2, #2
 8006ede:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fa6c 	bl	80073d2 <HAL_TIM_IC_CaptureCallback>
 8006efa:	e005      	b.n	8006f08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fa5e 	bl	80073be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa6f 	bl	80073e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d122      	bne.n	8006f62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d11b      	bne.n	8006f62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f06f 0204 	mvn.w	r2, #4
 8006f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa42 	bl	80073d2 <HAL_TIM_IC_CaptureCallback>
 8006f4e:	e005      	b.n	8006f5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fa34 	bl	80073be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fa45 	bl	80073e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d122      	bne.n	8006fb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b08      	cmp	r3, #8
 8006f7c:	d11b      	bne.n	8006fb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f06f 0208 	mvn.w	r2, #8
 8006f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f003 0303 	and.w	r3, r3, #3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa18 	bl	80073d2 <HAL_TIM_IC_CaptureCallback>
 8006fa2:	e005      	b.n	8006fb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa0a 	bl	80073be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa1b 	bl	80073e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d122      	bne.n	800700a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f003 0310 	and.w	r3, r3, #16
 8006fce:	2b10      	cmp	r3, #16
 8006fd0:	d11b      	bne.n	800700a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f06f 0210 	mvn.w	r2, #16
 8006fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2208      	movs	r2, #8
 8006fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f9ee 	bl	80073d2 <HAL_TIM_IC_CaptureCallback>
 8006ff6:	e005      	b.n	8007004 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f9e0 	bl	80073be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f9f1 	bl	80073e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b01      	cmp	r3, #1
 8007016:	d10e      	bne.n	8007036 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b01      	cmp	r3, #1
 8007024:	d107      	bne.n	8007036 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f06f 0201 	mvn.w	r2, #1
 800702e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7fc fd4b 	bl	8003acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007040:	2b80      	cmp	r3, #128	; 0x80
 8007042:	d10e      	bne.n	8007062 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704e:	2b80      	cmp	r3, #128	; 0x80
 8007050:	d107      	bne.n	8007062 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800705a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fdbf 	bl	8007be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b40      	cmp	r3, #64	; 0x40
 800706e:	d10e      	bne.n	800708e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707a:	2b40      	cmp	r3, #64	; 0x40
 800707c:	d107      	bne.n	800708e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f9b6 	bl	80073fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b20      	cmp	r3, #32
 800709a:	d10e      	bne.n	80070ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d107      	bne.n	80070ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f06f 0220 	mvn.w	r2, #32
 80070b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fd89 	bl	8007bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d101      	bne.n	80070de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80070da:	2302      	movs	r3, #2
 80070dc:	e0b4      	b.n	8007248 <HAL_TIM_PWM_ConfigChannel+0x184>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b0c      	cmp	r3, #12
 80070f2:	f200 809f 	bhi.w	8007234 <HAL_TIM_PWM_ConfigChannel+0x170>
 80070f6:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	08007131 	.word	0x08007131
 8007100:	08007235 	.word	0x08007235
 8007104:	08007235 	.word	0x08007235
 8007108:	08007235 	.word	0x08007235
 800710c:	08007171 	.word	0x08007171
 8007110:	08007235 	.word	0x08007235
 8007114:	08007235 	.word	0x08007235
 8007118:	08007235 	.word	0x08007235
 800711c:	080071b3 	.word	0x080071b3
 8007120:	08007235 	.word	0x08007235
 8007124:	08007235 	.word	0x08007235
 8007128:	08007235 	.word	0x08007235
 800712c:	080071f3 	.word	0x080071f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fa0a 	bl	8007550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0208 	orr.w	r2, r2, #8
 800714a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0204 	bic.w	r2, r2, #4
 800715a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6999      	ldr	r1, [r3, #24]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	619a      	str	r2, [r3, #24]
      break;
 800716e:	e062      	b.n	8007236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fa5a 	bl	8007630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800718a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800719a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6999      	ldr	r1, [r3, #24]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	021a      	lsls	r2, r3, #8
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	619a      	str	r2, [r3, #24]
      break;
 80071b0:	e041      	b.n	8007236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 faaf 	bl	800771c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0208 	orr.w	r2, r2, #8
 80071cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0204 	bic.w	r2, r2, #4
 80071dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69d9      	ldr	r1, [r3, #28]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	61da      	str	r2, [r3, #28]
      break;
 80071f0:	e021      	b.n	8007236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fb03 	bl	8007804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800720c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800721c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69d9      	ldr	r1, [r3, #28]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	021a      	lsls	r2, r3, #8
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	61da      	str	r2, [r3, #28]
      break;
 8007232:	e000      	b.n	8007236 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007234:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_TIM_ConfigClockSource+0x18>
 8007264:	2302      	movs	r3, #2
 8007266:	e0a6      	b.n	80073b6 <HAL_TIM_ConfigClockSource+0x166>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007286:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800728e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b40      	cmp	r3, #64	; 0x40
 800729e:	d067      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x120>
 80072a0:	2b40      	cmp	r3, #64	; 0x40
 80072a2:	d80b      	bhi.n	80072bc <HAL_TIM_ConfigClockSource+0x6c>
 80072a4:	2b10      	cmp	r3, #16
 80072a6:	d073      	beq.n	8007390 <HAL_TIM_ConfigClockSource+0x140>
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d802      	bhi.n	80072b2 <HAL_TIM_ConfigClockSource+0x62>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d06f      	beq.n	8007390 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80072b0:	e078      	b.n	80073a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	d06c      	beq.n	8007390 <HAL_TIM_ConfigClockSource+0x140>
 80072b6:	2b30      	cmp	r3, #48	; 0x30
 80072b8:	d06a      	beq.n	8007390 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80072ba:	e073      	b.n	80073a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80072bc:	2b70      	cmp	r3, #112	; 0x70
 80072be:	d00d      	beq.n	80072dc <HAL_TIM_ConfigClockSource+0x8c>
 80072c0:	2b70      	cmp	r3, #112	; 0x70
 80072c2:	d804      	bhi.n	80072ce <HAL_TIM_ConfigClockSource+0x7e>
 80072c4:	2b50      	cmp	r3, #80	; 0x50
 80072c6:	d033      	beq.n	8007330 <HAL_TIM_ConfigClockSource+0xe0>
 80072c8:	2b60      	cmp	r3, #96	; 0x60
 80072ca:	d041      	beq.n	8007350 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80072cc:	e06a      	b.n	80073a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80072ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d2:	d066      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x152>
 80072d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d8:	d017      	beq.n	800730a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80072da:	e063      	b.n	80073a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	6899      	ldr	r1, [r3, #8]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f000 fb5a 	bl	80079a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	609a      	str	r2, [r3, #8]
      break;
 8007308:	e04c      	b.n	80073a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	6899      	ldr	r1, [r3, #8]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f000 fb43 	bl	80079a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800732c:	609a      	str	r2, [r3, #8]
      break;
 800732e:	e039      	b.n	80073a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	6859      	ldr	r1, [r3, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	461a      	mov	r2, r3
 800733e:	f000 fab7 	bl	80078b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2150      	movs	r1, #80	; 0x50
 8007348:	4618      	mov	r0, r3
 800734a:	f000 fb10 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 800734e:	e029      	b.n	80073a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	6859      	ldr	r1, [r3, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	461a      	mov	r2, r3
 800735e:	f000 fad6 	bl	800790e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2160      	movs	r1, #96	; 0x60
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fb00 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 800736e:	e019      	b.n	80073a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	6859      	ldr	r1, [r3, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	461a      	mov	r2, r3
 800737e:	f000 fa97 	bl	80078b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2140      	movs	r1, #64	; 0x40
 8007388:	4618      	mov	r0, r3
 800738a:	f000 faf0 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 800738e:	e009      	b.n	80073a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f000 fae7 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 80073a0:	e000      	b.n	80073a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80073a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007402:	bf00      	nop
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
	...

08007410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a40      	ldr	r2, [pc, #256]	; (8007524 <TIM_Base_SetConfig+0x114>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d013      	beq.n	8007450 <TIM_Base_SetConfig+0x40>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742e:	d00f      	beq.n	8007450 <TIM_Base_SetConfig+0x40>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a3d      	ldr	r2, [pc, #244]	; (8007528 <TIM_Base_SetConfig+0x118>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d00b      	beq.n	8007450 <TIM_Base_SetConfig+0x40>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a3c      	ldr	r2, [pc, #240]	; (800752c <TIM_Base_SetConfig+0x11c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d007      	beq.n	8007450 <TIM_Base_SetConfig+0x40>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a3b      	ldr	r2, [pc, #236]	; (8007530 <TIM_Base_SetConfig+0x120>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d003      	beq.n	8007450 <TIM_Base_SetConfig+0x40>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a3a      	ldr	r2, [pc, #232]	; (8007534 <TIM_Base_SetConfig+0x124>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d108      	bne.n	8007462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a2f      	ldr	r2, [pc, #188]	; (8007524 <TIM_Base_SetConfig+0x114>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d02b      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007470:	d027      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a2c      	ldr	r2, [pc, #176]	; (8007528 <TIM_Base_SetConfig+0x118>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d023      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a2b      	ldr	r2, [pc, #172]	; (800752c <TIM_Base_SetConfig+0x11c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d01f      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <TIM_Base_SetConfig+0x120>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d01b      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a29      	ldr	r2, [pc, #164]	; (8007534 <TIM_Base_SetConfig+0x124>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d017      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a28      	ldr	r2, [pc, #160]	; (8007538 <TIM_Base_SetConfig+0x128>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a27      	ldr	r2, [pc, #156]	; (800753c <TIM_Base_SetConfig+0x12c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00f      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a26      	ldr	r2, [pc, #152]	; (8007540 <TIM_Base_SetConfig+0x130>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00b      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a25      	ldr	r2, [pc, #148]	; (8007544 <TIM_Base_SetConfig+0x134>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d007      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a24      	ldr	r2, [pc, #144]	; (8007548 <TIM_Base_SetConfig+0x138>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d003      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a23      	ldr	r2, [pc, #140]	; (800754c <TIM_Base_SetConfig+0x13c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d108      	bne.n	80074d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a0a      	ldr	r2, [pc, #40]	; (8007524 <TIM_Base_SetConfig+0x114>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_Base_SetConfig+0xf8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a0c      	ldr	r2, [pc, #48]	; (8007534 <TIM_Base_SetConfig+0x124>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d103      	bne.n	8007510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	615a      	str	r2, [r3, #20]
}
 8007516:	bf00      	nop
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	40010000 	.word	0x40010000
 8007528:	40000400 	.word	0x40000400
 800752c:	40000800 	.word	0x40000800
 8007530:	40000c00 	.word	0x40000c00
 8007534:	40010400 	.word	0x40010400
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400
 8007540:	40014800 	.word	0x40014800
 8007544:	40001800 	.word	0x40001800
 8007548:	40001c00 	.word	0x40001c00
 800754c:	40002000 	.word	0x40002000

08007550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	f023 0201 	bic.w	r2, r3, #1
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0303 	bic.w	r3, r3, #3
 8007586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f023 0302 	bic.w	r3, r3, #2
 8007598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a20      	ldr	r2, [pc, #128]	; (8007628 <TIM_OC1_SetConfig+0xd8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_OC1_SetConfig+0x64>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a1f      	ldr	r2, [pc, #124]	; (800762c <TIM_OC1_SetConfig+0xdc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d10c      	bne.n	80075ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f023 0308 	bic.w	r3, r3, #8
 80075ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f023 0304 	bic.w	r3, r3, #4
 80075cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a15      	ldr	r2, [pc, #84]	; (8007628 <TIM_OC1_SetConfig+0xd8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d003      	beq.n	80075de <TIM_OC1_SetConfig+0x8e>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a14      	ldr	r2, [pc, #80]	; (800762c <TIM_OC1_SetConfig+0xdc>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d111      	bne.n	8007602 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	621a      	str	r2, [r3, #32]
}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	40010000 	.word	0x40010000
 800762c:	40010400 	.word	0x40010400

08007630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	f023 0210 	bic.w	r2, r3, #16
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f023 0320 	bic.w	r3, r3, #32
 800767a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a22      	ldr	r2, [pc, #136]	; (8007714 <TIM_OC2_SetConfig+0xe4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d003      	beq.n	8007698 <TIM_OC2_SetConfig+0x68>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a21      	ldr	r2, [pc, #132]	; (8007718 <TIM_OC2_SetConfig+0xe8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d10d      	bne.n	80076b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800769e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a17      	ldr	r2, [pc, #92]	; (8007714 <TIM_OC2_SetConfig+0xe4>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d003      	beq.n	80076c4 <TIM_OC2_SetConfig+0x94>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a16      	ldr	r2, [pc, #88]	; (8007718 <TIM_OC2_SetConfig+0xe8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d113      	bne.n	80076ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	621a      	str	r2, [r3, #32]
}
 8007706:	bf00      	nop
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	40010000 	.word	0x40010000
 8007718:	40010400 	.word	0x40010400

0800771c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0303 	bic.w	r3, r3, #3
 8007752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	021b      	lsls	r3, r3, #8
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a21      	ldr	r2, [pc, #132]	; (80077fc <TIM_OC3_SetConfig+0xe0>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d003      	beq.n	8007782 <TIM_OC3_SetConfig+0x66>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a20      	ldr	r2, [pc, #128]	; (8007800 <TIM_OC3_SetConfig+0xe4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d10d      	bne.n	800779e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800779c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a16      	ldr	r2, [pc, #88]	; (80077fc <TIM_OC3_SetConfig+0xe0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d003      	beq.n	80077ae <TIM_OC3_SetConfig+0x92>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a15      	ldr	r2, [pc, #84]	; (8007800 <TIM_OC3_SetConfig+0xe4>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d113      	bne.n	80077d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	621a      	str	r2, [r3, #32]
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	40010000 	.word	0x40010000
 8007800:	40010400 	.word	0x40010400

08007804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800783a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	021b      	lsls	r3, r3, #8
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4313      	orrs	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800784e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	031b      	lsls	r3, r3, #12
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a12      	ldr	r2, [pc, #72]	; (80078a8 <TIM_OC4_SetConfig+0xa4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d003      	beq.n	800786c <TIM_OC4_SetConfig+0x68>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a11      	ldr	r2, [pc, #68]	; (80078ac <TIM_OC4_SetConfig+0xa8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d109      	bne.n	8007880 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	019b      	lsls	r3, r3, #6
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	4313      	orrs	r3, r2
 800787e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	621a      	str	r2, [r3, #32]
}
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	40010000 	.word	0x40010000
 80078ac:	40010400 	.word	0x40010400

080078b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f023 0201 	bic.w	r2, r3, #1
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f023 030a 	bic.w	r3, r3, #10
 80078ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	621a      	str	r2, [r3, #32]
}
 8007902:	bf00      	nop
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800790e:	b480      	push	{r7}
 8007910:	b087      	sub	sp, #28
 8007912:	af00      	add	r7, sp, #0
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	f023 0210 	bic.w	r2, r3, #16
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	031b      	lsls	r3, r3, #12
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800794a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	621a      	str	r2, [r3, #32]
}
 8007962:	bf00      	nop
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	f043 0307 	orr.w	r3, r3, #7
 8007990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	609a      	str	r2, [r3, #8]
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	021a      	lsls	r2, r3, #8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	609a      	str	r2, [r3, #8]
}
 80079d8:	bf00      	nop
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f003 031f 	and.w	r3, r3, #31
 80079f6:	2201      	movs	r2, #1
 80079f8:	fa02 f303 	lsl.w	r3, r2, r3
 80079fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a1a      	ldr	r2, [r3, #32]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	43db      	mvns	r3, r3
 8007a06:	401a      	ands	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a1a      	ldr	r2, [r3, #32]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f003 031f 	and.w	r3, r3, #31
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	fa01 f303 	lsl.w	r3, r1, r3
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	621a      	str	r2, [r3, #32]
}
 8007a22:	bf00      	nop
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
	...

08007a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e05a      	b.n	8007afe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a21      	ldr	r2, [pc, #132]	; (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d022      	beq.n	8007ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a94:	d01d      	beq.n	8007ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1d      	ldr	r2, [pc, #116]	; (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d018      	beq.n	8007ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1b      	ldr	r2, [pc, #108]	; (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d013      	beq.n	8007ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1a      	ldr	r2, [pc, #104]	; (8007b18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d00e      	beq.n	8007ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a18      	ldr	r2, [pc, #96]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d009      	beq.n	8007ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a17      	ldr	r2, [pc, #92]	; (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d004      	beq.n	8007ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a15      	ldr	r2, [pc, #84]	; (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d10c      	bne.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	40010000 	.word	0x40010000
 8007b10:	40000400 	.word	0x40000400
 8007b14:	40000800 	.word	0x40000800
 8007b18:	40000c00 	.word	0x40000c00
 8007b1c:	40010400 	.word	0x40010400
 8007b20:	40014000 	.word	0x40014000
 8007b24:	40001800 	.word	0x40001800

08007b28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e03d      	b.n	8007bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e03f      	b.n	8007c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fb f8c8 	bl	8002db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2224      	movs	r2, #36	; 0x24
 8007c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fb6b 	bl	8008314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	691a      	ldr	r2, [r3, #16]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	695a      	ldr	r2, [r3, #20]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2220      	movs	r2, #32
 8007c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	d153      	bne.n	8007d52 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_UART_Transmit_DMA+0x26>
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e04c      	b.n	8007d54 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_UART_Transmit_DMA+0x38>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e045      	b.n	8007d54 <HAL_UART_Transmit_DMA+0xc4>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	88fa      	ldrh	r2, [r7, #6]
 8007cda:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	88fa      	ldrh	r2, [r7, #6]
 8007ce0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2221      	movs	r2, #33	; 0x21
 8007cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf4:	4a19      	ldr	r2, [pc, #100]	; (8007d5c <HAL_UART_Transmit_DMA+0xcc>)
 8007cf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfc:	4a18      	ldr	r2, [pc, #96]	; (8007d60 <HAL_UART_Transmit_DMA+0xd0>)
 8007cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <HAL_UART_Transmit_DMA+0xd4>)
 8007d06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007d10:	f107 0308 	add.w	r3, r7, #8
 8007d14:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	6819      	ldr	r1, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3304      	adds	r3, #4
 8007d24:	461a      	mov	r2, r3
 8007d26:	88fb      	ldrh	r3, [r7, #6]
 8007d28:	f7fc f940 	bl	8003fac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d34:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	695a      	ldr	r2, [r3, #20]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d4c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e000      	b.n	8007d54 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007d52:	2302      	movs	r3, #2
  }
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	08007fa5 	.word	0x08007fa5
 8007d60:	08007ff7 	.word	0x08007ff7
 8007d64:	08008013 	.word	0x08008013

08007d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	f003 030f 	and.w	r3, r3, #15
 8007d96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10d      	bne.n	8007dba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <HAL_UART_IRQHandler+0x52>
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	f003 0320 	and.w	r3, r3, #32
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa2d 	bl	8008212 <UART_Receive_IT>
      return;
 8007db8:	e0d1      	b.n	8007f5e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 80b0 	beq.w	8007f22 <HAL_UART_IRQHandler+0x1ba>
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d105      	bne.n	8007dd8 <HAL_UART_IRQHandler+0x70>
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 80a5 	beq.w	8007f22 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00a      	beq.n	8007df8 <HAL_UART_IRQHandler+0x90>
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df0:	f043 0201 	orr.w	r2, r3, #1
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	f003 0304 	and.w	r3, r3, #4
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <HAL_UART_IRQHandler+0xb0>
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e10:	f043 0202 	orr.w	r2, r3, #2
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <HAL_UART_IRQHandler+0xd0>
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e30:	f043 0204 	orr.w	r2, r3, #4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	f003 0308 	and.w	r3, r3, #8
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00f      	beq.n	8007e62 <HAL_UART_IRQHandler+0xfa>
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_UART_IRQHandler+0xee>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e5a:	f043 0208 	orr.w	r2, r3, #8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d078      	beq.n	8007f5c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	f003 0320 	and.w	r3, r3, #32
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d007      	beq.n	8007e84 <HAL_UART_IRQHandler+0x11c>
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f9c7 	bl	8008212 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8e:	2b40      	cmp	r3, #64	; 0x40
 8007e90:	bf0c      	ite	eq
 8007e92:	2301      	moveq	r3, #1
 8007e94:	2300      	movne	r3, #0
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d102      	bne.n	8007eac <HAL_UART_IRQHandler+0x144>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d031      	beq.n	8007f10 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f910 	bl	80080d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ebc:	2b40      	cmp	r3, #64	; 0x40
 8007ebe:	d123      	bne.n	8007f08 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	695a      	ldr	r2, [r3, #20]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ece:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d013      	beq.n	8007f00 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007edc:	4a21      	ldr	r2, [pc, #132]	; (8007f64 <HAL_UART_IRQHandler+0x1fc>)
 8007ede:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fc f8b9 	bl	800405c <HAL_DMA_Abort_IT>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d016      	beq.n	8007f1e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007efa:	4610      	mov	r0, r2
 8007efc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007efe:	e00e      	b.n	8007f1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f845 	bl	8007f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f06:	e00a      	b.n	8007f1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f841 	bl	8007f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f0e:	e006      	b.n	8007f1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f83d 	bl	8007f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007f1c:	e01e      	b.n	8007f5c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f1e:	bf00      	nop
    return;
 8007f20:	e01c      	b.n	8007f5c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d008      	beq.n	8007f3e <HAL_UART_IRQHandler+0x1d6>
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f8fd 	bl	8008136 <UART_Transmit_IT>
    return;
 8007f3c:	e00f      	b.n	8007f5e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00a      	beq.n	8007f5e <HAL_UART_IRQHandler+0x1f6>
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f945 	bl	80081e2 <UART_EndTransmit_IT>
    return;
 8007f58:	bf00      	nop
 8007f5a:	e000      	b.n	8007f5e <HAL_UART_IRQHandler+0x1f6>
    return;
 8007f5c:	bf00      	nop
  }
}
 8007f5e:	3720      	adds	r7, #32
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	0800810f 	.word	0x0800810f

08007f68 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d113      	bne.n	8007fe8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	695a      	ldr	r2, [r3, #20]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fd4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fe4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fe6:	e002      	b.n	8007fee <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f7fb f9e5 	bl	80033b8 <HAL_UART_TxCpltCallback>
}
 8007fee:	bf00      	nop
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff ffaf 	bl	8007f68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800801a:	2300      	movs	r3, #0
 800801c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008022:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802e:	2b80      	cmp	r3, #128	; 0x80
 8008030:	bf0c      	ite	eq
 8008032:	2301      	moveq	r3, #1
 8008034:	2300      	movne	r3, #0
 8008036:	b2db      	uxtb	r3, r3
 8008038:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b21      	cmp	r3, #33	; 0x21
 8008044:	d108      	bne.n	8008058 <UART_DMAError+0x46>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2200      	movs	r2, #0
 8008050:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008052:	68b8      	ldr	r0, [r7, #8]
 8008054:	f000 f827 	bl	80080a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	bf0c      	ite	eq
 8008066:	2301      	moveq	r3, #1
 8008068:	2300      	movne	r3, #0
 800806a:	b2db      	uxtb	r3, r3
 800806c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b22      	cmp	r3, #34	; 0x22
 8008078:	d108      	bne.n	800808c <UART_DMAError+0x7a>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2200      	movs	r2, #0
 8008084:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008086:	68b8      	ldr	r0, [r7, #8]
 8008088:	f000 f823 	bl	80080d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008090:	f043 0210 	orr.w	r2, r3, #16
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008098:	68b8      	ldr	r0, [r7, #8]
 800809a:	f7ff ff79 	bl	8007f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800809e:	bf00      	nop
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68da      	ldr	r2, [r3, #12]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80080bc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	695a      	ldr	r2, [r3, #20]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 0201 	bic.w	r2, r2, #1
 80080f8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f7ff ff31 	bl	8007f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800812e:	bf00      	nop
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008136:	b480      	push	{r7}
 8008138:	b085      	sub	sp, #20
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b21      	cmp	r3, #33	; 0x21
 8008148:	d144      	bne.n	80081d4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008152:	d11a      	bne.n	800818a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008168:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d105      	bne.n	800817e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	1c9a      	adds	r2, r3, #2
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	621a      	str	r2, [r3, #32]
 800817c:	e00e      	b.n	800819c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	621a      	str	r2, [r3, #32]
 8008188:	e008      	b.n	800819c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	1c59      	adds	r1, r3, #1
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6211      	str	r1, [r2, #32]
 8008194:	781a      	ldrb	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4619      	mov	r1, r3
 80081aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10f      	bne.n	80081d0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	e000      	b.n	80081d6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80081d4:	2302      	movs	r3, #2
  }
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7fb f8d8 	bl	80033b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b22      	cmp	r3, #34	; 0x22
 8008224:	d171      	bne.n	800830a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800822e:	d123      	bne.n	8008278 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10e      	bne.n	800825c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	b29b      	uxth	r3, r3
 8008246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824a:	b29a      	uxth	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008254:	1c9a      	adds	r2, r3, #2
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	629a      	str	r2, [r3, #40]	; 0x28
 800825a:	e029      	b.n	80082b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	b29b      	uxth	r3, r3
 8008264:	b2db      	uxtb	r3, r3
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	629a      	str	r2, [r3, #40]	; 0x28
 8008276:	e01b      	b.n	80082b0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10a      	bne.n	8008296 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6858      	ldr	r0, [r3, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	1c59      	adds	r1, r3, #1
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	6291      	str	r1, [r2, #40]	; 0x28
 8008290:	b2c2      	uxtb	r2, r0
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	e00c      	b.n	80082b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	b2da      	uxtb	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a2:	1c58      	adds	r0, r3, #1
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	6288      	str	r0, [r1, #40]	; 0x28
 80082a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80082ac:	b2d2      	uxtb	r2, r2
 80082ae:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	4619      	mov	r1, r3
 80082be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d120      	bne.n	8008306 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0220 	bic.w	r2, r2, #32
 80082d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	695a      	ldr	r2, [r3, #20]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0201 	bic.w	r2, r2, #1
 80082f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff fe3d 	bl	8007f7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	e002      	b.n	800830c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	e000      	b.n	800830c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800830a:	2302      	movs	r3, #2
  }
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008318:	b085      	sub	sp, #20
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	4313      	orrs	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008356:	f023 030c 	bic.w	r3, r3, #12
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	6812      	ldr	r2, [r2, #0]
 800835e:	68f9      	ldr	r1, [r7, #12]
 8008360:	430b      	orrs	r3, r1
 8008362:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008382:	f040 818b 	bne.w	800869c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4ac1      	ldr	r2, [pc, #772]	; (8008690 <UART_SetConfig+0x37c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d005      	beq.n	800839c <UART_SetConfig+0x88>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4abf      	ldr	r2, [pc, #764]	; (8008694 <UART_SetConfig+0x380>)
 8008396:	4293      	cmp	r3, r2
 8008398:	f040 80bd 	bne.w	8008516 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800839c:	f7fd ff96 	bl	80062cc <HAL_RCC_GetPCLK2Freq>
 80083a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	461d      	mov	r5, r3
 80083a6:	f04f 0600 	mov.w	r6, #0
 80083aa:	46a8      	mov	r8, r5
 80083ac:	46b1      	mov	r9, r6
 80083ae:	eb18 0308 	adds.w	r3, r8, r8
 80083b2:	eb49 0409 	adc.w	r4, r9, r9
 80083b6:	4698      	mov	r8, r3
 80083b8:	46a1      	mov	r9, r4
 80083ba:	eb18 0805 	adds.w	r8, r8, r5
 80083be:	eb49 0906 	adc.w	r9, r9, r6
 80083c2:	f04f 0100 	mov.w	r1, #0
 80083c6:	f04f 0200 	mov.w	r2, #0
 80083ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80083ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80083d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80083d6:	4688      	mov	r8, r1
 80083d8:	4691      	mov	r9, r2
 80083da:	eb18 0005 	adds.w	r0, r8, r5
 80083de:	eb49 0106 	adc.w	r1, r9, r6
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	461d      	mov	r5, r3
 80083e8:	f04f 0600 	mov.w	r6, #0
 80083ec:	196b      	adds	r3, r5, r5
 80083ee:	eb46 0406 	adc.w	r4, r6, r6
 80083f2:	461a      	mov	r2, r3
 80083f4:	4623      	mov	r3, r4
 80083f6:	f7f8 fd61 	bl	8000ebc <__aeabi_uldivmod>
 80083fa:	4603      	mov	r3, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	461a      	mov	r2, r3
 8008400:	4ba5      	ldr	r3, [pc, #660]	; (8008698 <UART_SetConfig+0x384>)
 8008402:	fba3 2302 	umull	r2, r3, r3, r2
 8008406:	095b      	lsrs	r3, r3, #5
 8008408:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	461d      	mov	r5, r3
 8008410:	f04f 0600 	mov.w	r6, #0
 8008414:	46a9      	mov	r9, r5
 8008416:	46b2      	mov	sl, r6
 8008418:	eb19 0309 	adds.w	r3, r9, r9
 800841c:	eb4a 040a 	adc.w	r4, sl, sl
 8008420:	4699      	mov	r9, r3
 8008422:	46a2      	mov	sl, r4
 8008424:	eb19 0905 	adds.w	r9, r9, r5
 8008428:	eb4a 0a06 	adc.w	sl, sl, r6
 800842c:	f04f 0100 	mov.w	r1, #0
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008438:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800843c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008440:	4689      	mov	r9, r1
 8008442:	4692      	mov	sl, r2
 8008444:	eb19 0005 	adds.w	r0, r9, r5
 8008448:	eb4a 0106 	adc.w	r1, sl, r6
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	461d      	mov	r5, r3
 8008452:	f04f 0600 	mov.w	r6, #0
 8008456:	196b      	adds	r3, r5, r5
 8008458:	eb46 0406 	adc.w	r4, r6, r6
 800845c:	461a      	mov	r2, r3
 800845e:	4623      	mov	r3, r4
 8008460:	f7f8 fd2c 	bl	8000ebc <__aeabi_uldivmod>
 8008464:	4603      	mov	r3, r0
 8008466:	460c      	mov	r4, r1
 8008468:	461a      	mov	r2, r3
 800846a:	4b8b      	ldr	r3, [pc, #556]	; (8008698 <UART_SetConfig+0x384>)
 800846c:	fba3 1302 	umull	r1, r3, r3, r2
 8008470:	095b      	lsrs	r3, r3, #5
 8008472:	2164      	movs	r1, #100	; 0x64
 8008474:	fb01 f303 	mul.w	r3, r1, r3
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	3332      	adds	r3, #50	; 0x32
 800847e:	4a86      	ldr	r2, [pc, #536]	; (8008698 <UART_SetConfig+0x384>)
 8008480:	fba2 2303 	umull	r2, r3, r2, r3
 8008484:	095b      	lsrs	r3, r3, #5
 8008486:	005b      	lsls	r3, r3, #1
 8008488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800848c:	4498      	add	r8, r3
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	461d      	mov	r5, r3
 8008492:	f04f 0600 	mov.w	r6, #0
 8008496:	46a9      	mov	r9, r5
 8008498:	46b2      	mov	sl, r6
 800849a:	eb19 0309 	adds.w	r3, r9, r9
 800849e:	eb4a 040a 	adc.w	r4, sl, sl
 80084a2:	4699      	mov	r9, r3
 80084a4:	46a2      	mov	sl, r4
 80084a6:	eb19 0905 	adds.w	r9, r9, r5
 80084aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80084ae:	f04f 0100 	mov.w	r1, #0
 80084b2:	f04f 0200 	mov.w	r2, #0
 80084b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084c2:	4689      	mov	r9, r1
 80084c4:	4692      	mov	sl, r2
 80084c6:	eb19 0005 	adds.w	r0, r9, r5
 80084ca:	eb4a 0106 	adc.w	r1, sl, r6
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	461d      	mov	r5, r3
 80084d4:	f04f 0600 	mov.w	r6, #0
 80084d8:	196b      	adds	r3, r5, r5
 80084da:	eb46 0406 	adc.w	r4, r6, r6
 80084de:	461a      	mov	r2, r3
 80084e0:	4623      	mov	r3, r4
 80084e2:	f7f8 fceb 	bl	8000ebc <__aeabi_uldivmod>
 80084e6:	4603      	mov	r3, r0
 80084e8:	460c      	mov	r4, r1
 80084ea:	461a      	mov	r2, r3
 80084ec:	4b6a      	ldr	r3, [pc, #424]	; (8008698 <UART_SetConfig+0x384>)
 80084ee:	fba3 1302 	umull	r1, r3, r3, r2
 80084f2:	095b      	lsrs	r3, r3, #5
 80084f4:	2164      	movs	r1, #100	; 0x64
 80084f6:	fb01 f303 	mul.w	r3, r1, r3
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	3332      	adds	r3, #50	; 0x32
 8008500:	4a65      	ldr	r2, [pc, #404]	; (8008698 <UART_SetConfig+0x384>)
 8008502:	fba2 2303 	umull	r2, r3, r2, r3
 8008506:	095b      	lsrs	r3, r3, #5
 8008508:	f003 0207 	and.w	r2, r3, #7
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4442      	add	r2, r8
 8008512:	609a      	str	r2, [r3, #8]
 8008514:	e26f      	b.n	80089f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008516:	f7fd fec5 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 800851a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	461d      	mov	r5, r3
 8008520:	f04f 0600 	mov.w	r6, #0
 8008524:	46a8      	mov	r8, r5
 8008526:	46b1      	mov	r9, r6
 8008528:	eb18 0308 	adds.w	r3, r8, r8
 800852c:	eb49 0409 	adc.w	r4, r9, r9
 8008530:	4698      	mov	r8, r3
 8008532:	46a1      	mov	r9, r4
 8008534:	eb18 0805 	adds.w	r8, r8, r5
 8008538:	eb49 0906 	adc.w	r9, r9, r6
 800853c:	f04f 0100 	mov.w	r1, #0
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008548:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800854c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008550:	4688      	mov	r8, r1
 8008552:	4691      	mov	r9, r2
 8008554:	eb18 0005 	adds.w	r0, r8, r5
 8008558:	eb49 0106 	adc.w	r1, r9, r6
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	461d      	mov	r5, r3
 8008562:	f04f 0600 	mov.w	r6, #0
 8008566:	196b      	adds	r3, r5, r5
 8008568:	eb46 0406 	adc.w	r4, r6, r6
 800856c:	461a      	mov	r2, r3
 800856e:	4623      	mov	r3, r4
 8008570:	f7f8 fca4 	bl	8000ebc <__aeabi_uldivmod>
 8008574:	4603      	mov	r3, r0
 8008576:	460c      	mov	r4, r1
 8008578:	461a      	mov	r2, r3
 800857a:	4b47      	ldr	r3, [pc, #284]	; (8008698 <UART_SetConfig+0x384>)
 800857c:	fba3 2302 	umull	r2, r3, r3, r2
 8008580:	095b      	lsrs	r3, r3, #5
 8008582:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	461d      	mov	r5, r3
 800858a:	f04f 0600 	mov.w	r6, #0
 800858e:	46a9      	mov	r9, r5
 8008590:	46b2      	mov	sl, r6
 8008592:	eb19 0309 	adds.w	r3, r9, r9
 8008596:	eb4a 040a 	adc.w	r4, sl, sl
 800859a:	4699      	mov	r9, r3
 800859c:	46a2      	mov	sl, r4
 800859e:	eb19 0905 	adds.w	r9, r9, r5
 80085a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80085a6:	f04f 0100 	mov.w	r1, #0
 80085aa:	f04f 0200 	mov.w	r2, #0
 80085ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085ba:	4689      	mov	r9, r1
 80085bc:	4692      	mov	sl, r2
 80085be:	eb19 0005 	adds.w	r0, r9, r5
 80085c2:	eb4a 0106 	adc.w	r1, sl, r6
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	461d      	mov	r5, r3
 80085cc:	f04f 0600 	mov.w	r6, #0
 80085d0:	196b      	adds	r3, r5, r5
 80085d2:	eb46 0406 	adc.w	r4, r6, r6
 80085d6:	461a      	mov	r2, r3
 80085d8:	4623      	mov	r3, r4
 80085da:	f7f8 fc6f 	bl	8000ebc <__aeabi_uldivmod>
 80085de:	4603      	mov	r3, r0
 80085e0:	460c      	mov	r4, r1
 80085e2:	461a      	mov	r2, r3
 80085e4:	4b2c      	ldr	r3, [pc, #176]	; (8008698 <UART_SetConfig+0x384>)
 80085e6:	fba3 1302 	umull	r1, r3, r3, r2
 80085ea:	095b      	lsrs	r3, r3, #5
 80085ec:	2164      	movs	r1, #100	; 0x64
 80085ee:	fb01 f303 	mul.w	r3, r1, r3
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	3332      	adds	r3, #50	; 0x32
 80085f8:	4a27      	ldr	r2, [pc, #156]	; (8008698 <UART_SetConfig+0x384>)
 80085fa:	fba2 2303 	umull	r2, r3, r2, r3
 80085fe:	095b      	lsrs	r3, r3, #5
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008606:	4498      	add	r8, r3
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	461d      	mov	r5, r3
 800860c:	f04f 0600 	mov.w	r6, #0
 8008610:	46a9      	mov	r9, r5
 8008612:	46b2      	mov	sl, r6
 8008614:	eb19 0309 	adds.w	r3, r9, r9
 8008618:	eb4a 040a 	adc.w	r4, sl, sl
 800861c:	4699      	mov	r9, r3
 800861e:	46a2      	mov	sl, r4
 8008620:	eb19 0905 	adds.w	r9, r9, r5
 8008624:	eb4a 0a06 	adc.w	sl, sl, r6
 8008628:	f04f 0100 	mov.w	r1, #0
 800862c:	f04f 0200 	mov.w	r2, #0
 8008630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008634:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008638:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800863c:	4689      	mov	r9, r1
 800863e:	4692      	mov	sl, r2
 8008640:	eb19 0005 	adds.w	r0, r9, r5
 8008644:	eb4a 0106 	adc.w	r1, sl, r6
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	461d      	mov	r5, r3
 800864e:	f04f 0600 	mov.w	r6, #0
 8008652:	196b      	adds	r3, r5, r5
 8008654:	eb46 0406 	adc.w	r4, r6, r6
 8008658:	461a      	mov	r2, r3
 800865a:	4623      	mov	r3, r4
 800865c:	f7f8 fc2e 	bl	8000ebc <__aeabi_uldivmod>
 8008660:	4603      	mov	r3, r0
 8008662:	460c      	mov	r4, r1
 8008664:	461a      	mov	r2, r3
 8008666:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <UART_SetConfig+0x384>)
 8008668:	fba3 1302 	umull	r1, r3, r3, r2
 800866c:	095b      	lsrs	r3, r3, #5
 800866e:	2164      	movs	r1, #100	; 0x64
 8008670:	fb01 f303 	mul.w	r3, r1, r3
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	3332      	adds	r3, #50	; 0x32
 800867a:	4a07      	ldr	r2, [pc, #28]	; (8008698 <UART_SetConfig+0x384>)
 800867c:	fba2 2303 	umull	r2, r3, r2, r3
 8008680:	095b      	lsrs	r3, r3, #5
 8008682:	f003 0207 	and.w	r2, r3, #7
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4442      	add	r2, r8
 800868c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800868e:	e1b2      	b.n	80089f6 <UART_SetConfig+0x6e2>
 8008690:	40011000 	.word	0x40011000
 8008694:	40011400 	.word	0x40011400
 8008698:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4ad7      	ldr	r2, [pc, #860]	; (8008a00 <UART_SetConfig+0x6ec>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d005      	beq.n	80086b2 <UART_SetConfig+0x39e>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4ad6      	ldr	r2, [pc, #856]	; (8008a04 <UART_SetConfig+0x6f0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	f040 80d1 	bne.w	8008854 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80086b2:	f7fd fe0b 	bl	80062cc <HAL_RCC_GetPCLK2Freq>
 80086b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	469a      	mov	sl, r3
 80086bc:	f04f 0b00 	mov.w	fp, #0
 80086c0:	46d0      	mov	r8, sl
 80086c2:	46d9      	mov	r9, fp
 80086c4:	eb18 0308 	adds.w	r3, r8, r8
 80086c8:	eb49 0409 	adc.w	r4, r9, r9
 80086cc:	4698      	mov	r8, r3
 80086ce:	46a1      	mov	r9, r4
 80086d0:	eb18 080a 	adds.w	r8, r8, sl
 80086d4:	eb49 090b 	adc.w	r9, r9, fp
 80086d8:	f04f 0100 	mov.w	r1, #0
 80086dc:	f04f 0200 	mov.w	r2, #0
 80086e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80086e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80086e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80086ec:	4688      	mov	r8, r1
 80086ee:	4691      	mov	r9, r2
 80086f0:	eb1a 0508 	adds.w	r5, sl, r8
 80086f4:	eb4b 0609 	adc.w	r6, fp, r9
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	4619      	mov	r1, r3
 80086fe:	f04f 0200 	mov.w	r2, #0
 8008702:	f04f 0300 	mov.w	r3, #0
 8008706:	f04f 0400 	mov.w	r4, #0
 800870a:	0094      	lsls	r4, r2, #2
 800870c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008710:	008b      	lsls	r3, r1, #2
 8008712:	461a      	mov	r2, r3
 8008714:	4623      	mov	r3, r4
 8008716:	4628      	mov	r0, r5
 8008718:	4631      	mov	r1, r6
 800871a:	f7f8 fbcf 	bl	8000ebc <__aeabi_uldivmod>
 800871e:	4603      	mov	r3, r0
 8008720:	460c      	mov	r4, r1
 8008722:	461a      	mov	r2, r3
 8008724:	4bb8      	ldr	r3, [pc, #736]	; (8008a08 <UART_SetConfig+0x6f4>)
 8008726:	fba3 2302 	umull	r2, r3, r3, r2
 800872a:	095b      	lsrs	r3, r3, #5
 800872c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	469b      	mov	fp, r3
 8008734:	f04f 0c00 	mov.w	ip, #0
 8008738:	46d9      	mov	r9, fp
 800873a:	46e2      	mov	sl, ip
 800873c:	eb19 0309 	adds.w	r3, r9, r9
 8008740:	eb4a 040a 	adc.w	r4, sl, sl
 8008744:	4699      	mov	r9, r3
 8008746:	46a2      	mov	sl, r4
 8008748:	eb19 090b 	adds.w	r9, r9, fp
 800874c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008750:	f04f 0100 	mov.w	r1, #0
 8008754:	f04f 0200 	mov.w	r2, #0
 8008758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800875c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008760:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008764:	4689      	mov	r9, r1
 8008766:	4692      	mov	sl, r2
 8008768:	eb1b 0509 	adds.w	r5, fp, r9
 800876c:	eb4c 060a 	adc.w	r6, ip, sl
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	4619      	mov	r1, r3
 8008776:	f04f 0200 	mov.w	r2, #0
 800877a:	f04f 0300 	mov.w	r3, #0
 800877e:	f04f 0400 	mov.w	r4, #0
 8008782:	0094      	lsls	r4, r2, #2
 8008784:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008788:	008b      	lsls	r3, r1, #2
 800878a:	461a      	mov	r2, r3
 800878c:	4623      	mov	r3, r4
 800878e:	4628      	mov	r0, r5
 8008790:	4631      	mov	r1, r6
 8008792:	f7f8 fb93 	bl	8000ebc <__aeabi_uldivmod>
 8008796:	4603      	mov	r3, r0
 8008798:	460c      	mov	r4, r1
 800879a:	461a      	mov	r2, r3
 800879c:	4b9a      	ldr	r3, [pc, #616]	; (8008a08 <UART_SetConfig+0x6f4>)
 800879e:	fba3 1302 	umull	r1, r3, r3, r2
 80087a2:	095b      	lsrs	r3, r3, #5
 80087a4:	2164      	movs	r1, #100	; 0x64
 80087a6:	fb01 f303 	mul.w	r3, r1, r3
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	011b      	lsls	r3, r3, #4
 80087ae:	3332      	adds	r3, #50	; 0x32
 80087b0:	4a95      	ldr	r2, [pc, #596]	; (8008a08 <UART_SetConfig+0x6f4>)
 80087b2:	fba2 2303 	umull	r2, r3, r2, r3
 80087b6:	095b      	lsrs	r3, r3, #5
 80087b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087bc:	4498      	add	r8, r3
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	469b      	mov	fp, r3
 80087c2:	f04f 0c00 	mov.w	ip, #0
 80087c6:	46d9      	mov	r9, fp
 80087c8:	46e2      	mov	sl, ip
 80087ca:	eb19 0309 	adds.w	r3, r9, r9
 80087ce:	eb4a 040a 	adc.w	r4, sl, sl
 80087d2:	4699      	mov	r9, r3
 80087d4:	46a2      	mov	sl, r4
 80087d6:	eb19 090b 	adds.w	r9, r9, fp
 80087da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087de:	f04f 0100 	mov.w	r1, #0
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087f2:	4689      	mov	r9, r1
 80087f4:	4692      	mov	sl, r2
 80087f6:	eb1b 0509 	adds.w	r5, fp, r9
 80087fa:	eb4c 060a 	adc.w	r6, ip, sl
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	4619      	mov	r1, r3
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	f04f 0400 	mov.w	r4, #0
 8008810:	0094      	lsls	r4, r2, #2
 8008812:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008816:	008b      	lsls	r3, r1, #2
 8008818:	461a      	mov	r2, r3
 800881a:	4623      	mov	r3, r4
 800881c:	4628      	mov	r0, r5
 800881e:	4631      	mov	r1, r6
 8008820:	f7f8 fb4c 	bl	8000ebc <__aeabi_uldivmod>
 8008824:	4603      	mov	r3, r0
 8008826:	460c      	mov	r4, r1
 8008828:	461a      	mov	r2, r3
 800882a:	4b77      	ldr	r3, [pc, #476]	; (8008a08 <UART_SetConfig+0x6f4>)
 800882c:	fba3 1302 	umull	r1, r3, r3, r2
 8008830:	095b      	lsrs	r3, r3, #5
 8008832:	2164      	movs	r1, #100	; 0x64
 8008834:	fb01 f303 	mul.w	r3, r1, r3
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	3332      	adds	r3, #50	; 0x32
 800883e:	4a72      	ldr	r2, [pc, #456]	; (8008a08 <UART_SetConfig+0x6f4>)
 8008840:	fba2 2303 	umull	r2, r3, r2, r3
 8008844:	095b      	lsrs	r3, r3, #5
 8008846:	f003 020f 	and.w	r2, r3, #15
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4442      	add	r2, r8
 8008850:	609a      	str	r2, [r3, #8]
 8008852:	e0d0      	b.n	80089f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008854:	f7fd fd26 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 8008858:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	469a      	mov	sl, r3
 800885e:	f04f 0b00 	mov.w	fp, #0
 8008862:	46d0      	mov	r8, sl
 8008864:	46d9      	mov	r9, fp
 8008866:	eb18 0308 	adds.w	r3, r8, r8
 800886a:	eb49 0409 	adc.w	r4, r9, r9
 800886e:	4698      	mov	r8, r3
 8008870:	46a1      	mov	r9, r4
 8008872:	eb18 080a 	adds.w	r8, r8, sl
 8008876:	eb49 090b 	adc.w	r9, r9, fp
 800887a:	f04f 0100 	mov.w	r1, #0
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008886:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800888a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800888e:	4688      	mov	r8, r1
 8008890:	4691      	mov	r9, r2
 8008892:	eb1a 0508 	adds.w	r5, sl, r8
 8008896:	eb4b 0609 	adc.w	r6, fp, r9
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	4619      	mov	r1, r3
 80088a0:	f04f 0200 	mov.w	r2, #0
 80088a4:	f04f 0300 	mov.w	r3, #0
 80088a8:	f04f 0400 	mov.w	r4, #0
 80088ac:	0094      	lsls	r4, r2, #2
 80088ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088b2:	008b      	lsls	r3, r1, #2
 80088b4:	461a      	mov	r2, r3
 80088b6:	4623      	mov	r3, r4
 80088b8:	4628      	mov	r0, r5
 80088ba:	4631      	mov	r1, r6
 80088bc:	f7f8 fafe 	bl	8000ebc <__aeabi_uldivmod>
 80088c0:	4603      	mov	r3, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	461a      	mov	r2, r3
 80088c6:	4b50      	ldr	r3, [pc, #320]	; (8008a08 <UART_SetConfig+0x6f4>)
 80088c8:	fba3 2302 	umull	r2, r3, r3, r2
 80088cc:	095b      	lsrs	r3, r3, #5
 80088ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	469b      	mov	fp, r3
 80088d6:	f04f 0c00 	mov.w	ip, #0
 80088da:	46d9      	mov	r9, fp
 80088dc:	46e2      	mov	sl, ip
 80088de:	eb19 0309 	adds.w	r3, r9, r9
 80088e2:	eb4a 040a 	adc.w	r4, sl, sl
 80088e6:	4699      	mov	r9, r3
 80088e8:	46a2      	mov	sl, r4
 80088ea:	eb19 090b 	adds.w	r9, r9, fp
 80088ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80088f2:	f04f 0100 	mov.w	r1, #0
 80088f6:	f04f 0200 	mov.w	r2, #0
 80088fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008902:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008906:	4689      	mov	r9, r1
 8008908:	4692      	mov	sl, r2
 800890a:	eb1b 0509 	adds.w	r5, fp, r9
 800890e:	eb4c 060a 	adc.w	r6, ip, sl
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	4619      	mov	r1, r3
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	f04f 0400 	mov.w	r4, #0
 8008924:	0094      	lsls	r4, r2, #2
 8008926:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800892a:	008b      	lsls	r3, r1, #2
 800892c:	461a      	mov	r2, r3
 800892e:	4623      	mov	r3, r4
 8008930:	4628      	mov	r0, r5
 8008932:	4631      	mov	r1, r6
 8008934:	f7f8 fac2 	bl	8000ebc <__aeabi_uldivmod>
 8008938:	4603      	mov	r3, r0
 800893a:	460c      	mov	r4, r1
 800893c:	461a      	mov	r2, r3
 800893e:	4b32      	ldr	r3, [pc, #200]	; (8008a08 <UART_SetConfig+0x6f4>)
 8008940:	fba3 1302 	umull	r1, r3, r3, r2
 8008944:	095b      	lsrs	r3, r3, #5
 8008946:	2164      	movs	r1, #100	; 0x64
 8008948:	fb01 f303 	mul.w	r3, r1, r3
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	3332      	adds	r3, #50	; 0x32
 8008952:	4a2d      	ldr	r2, [pc, #180]	; (8008a08 <UART_SetConfig+0x6f4>)
 8008954:	fba2 2303 	umull	r2, r3, r2, r3
 8008958:	095b      	lsrs	r3, r3, #5
 800895a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800895e:	4498      	add	r8, r3
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	469b      	mov	fp, r3
 8008964:	f04f 0c00 	mov.w	ip, #0
 8008968:	46d9      	mov	r9, fp
 800896a:	46e2      	mov	sl, ip
 800896c:	eb19 0309 	adds.w	r3, r9, r9
 8008970:	eb4a 040a 	adc.w	r4, sl, sl
 8008974:	4699      	mov	r9, r3
 8008976:	46a2      	mov	sl, r4
 8008978:	eb19 090b 	adds.w	r9, r9, fp
 800897c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008980:	f04f 0100 	mov.w	r1, #0
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800898c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008990:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008994:	4689      	mov	r9, r1
 8008996:	4692      	mov	sl, r2
 8008998:	eb1b 0509 	adds.w	r5, fp, r9
 800899c:	eb4c 060a 	adc.w	r6, ip, sl
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	4619      	mov	r1, r3
 80089a6:	f04f 0200 	mov.w	r2, #0
 80089aa:	f04f 0300 	mov.w	r3, #0
 80089ae:	f04f 0400 	mov.w	r4, #0
 80089b2:	0094      	lsls	r4, r2, #2
 80089b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089b8:	008b      	lsls	r3, r1, #2
 80089ba:	461a      	mov	r2, r3
 80089bc:	4623      	mov	r3, r4
 80089be:	4628      	mov	r0, r5
 80089c0:	4631      	mov	r1, r6
 80089c2:	f7f8 fa7b 	bl	8000ebc <__aeabi_uldivmod>
 80089c6:	4603      	mov	r3, r0
 80089c8:	460c      	mov	r4, r1
 80089ca:	461a      	mov	r2, r3
 80089cc:	4b0e      	ldr	r3, [pc, #56]	; (8008a08 <UART_SetConfig+0x6f4>)
 80089ce:	fba3 1302 	umull	r1, r3, r3, r2
 80089d2:	095b      	lsrs	r3, r3, #5
 80089d4:	2164      	movs	r1, #100	; 0x64
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	011b      	lsls	r3, r3, #4
 80089de:	3332      	adds	r3, #50	; 0x32
 80089e0:	4a09      	ldr	r2, [pc, #36]	; (8008a08 <UART_SetConfig+0x6f4>)
 80089e2:	fba2 2303 	umull	r2, r3, r2, r3
 80089e6:	095b      	lsrs	r3, r3, #5
 80089e8:	f003 020f 	and.w	r2, r3, #15
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4442      	add	r2, r8
 80089f2:	609a      	str	r2, [r3, #8]
}
 80089f4:	e7ff      	b.n	80089f6 <UART_SetConfig+0x6e2>
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a00:	40011000 	.word	0x40011000
 8008a04:	40011400 	.word	0x40011400
 8008a08:	51eb851f 	.word	0x51eb851f

08008a0c <__errno>:
 8008a0c:	4b01      	ldr	r3, [pc, #4]	; (8008a14 <__errno+0x8>)
 8008a0e:	6818      	ldr	r0, [r3, #0]
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	20000034 	.word	0x20000034

08008a18 <__libc_init_array>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	4e0d      	ldr	r6, [pc, #52]	; (8008a50 <__libc_init_array+0x38>)
 8008a1c:	4d0d      	ldr	r5, [pc, #52]	; (8008a54 <__libc_init_array+0x3c>)
 8008a1e:	1b76      	subs	r6, r6, r5
 8008a20:	10b6      	asrs	r6, r6, #2
 8008a22:	d006      	beq.n	8008a32 <__libc_init_array+0x1a>
 8008a24:	2400      	movs	r4, #0
 8008a26:	3401      	adds	r4, #1
 8008a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2c:	4798      	blx	r3
 8008a2e:	42a6      	cmp	r6, r4
 8008a30:	d1f9      	bne.n	8008a26 <__libc_init_array+0xe>
 8008a32:	4e09      	ldr	r6, [pc, #36]	; (8008a58 <__libc_init_array+0x40>)
 8008a34:	4d09      	ldr	r5, [pc, #36]	; (8008a5c <__libc_init_array+0x44>)
 8008a36:	1b76      	subs	r6, r6, r5
 8008a38:	f003 fffa 	bl	800ca30 <_init>
 8008a3c:	10b6      	asrs	r6, r6, #2
 8008a3e:	d006      	beq.n	8008a4e <__libc_init_array+0x36>
 8008a40:	2400      	movs	r4, #0
 8008a42:	3401      	adds	r4, #1
 8008a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a48:	4798      	blx	r3
 8008a4a:	42a6      	cmp	r6, r4
 8008a4c:	d1f9      	bne.n	8008a42 <__libc_init_array+0x2a>
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	0800ce10 	.word	0x0800ce10
 8008a54:	0800ce10 	.word	0x0800ce10
 8008a58:	0800ce18 	.word	0x0800ce18
 8008a5c:	0800ce10 	.word	0x0800ce10

08008a60 <memset>:
 8008a60:	b4f0      	push	{r4, r5, r6, r7}
 8008a62:	0786      	lsls	r6, r0, #30
 8008a64:	d043      	beq.n	8008aee <memset+0x8e>
 8008a66:	1e54      	subs	r4, r2, #1
 8008a68:	2a00      	cmp	r2, #0
 8008a6a:	d03e      	beq.n	8008aea <memset+0x8a>
 8008a6c:	b2ca      	uxtb	r2, r1
 8008a6e:	4603      	mov	r3, r0
 8008a70:	e002      	b.n	8008a78 <memset+0x18>
 8008a72:	f114 34ff 	adds.w	r4, r4, #4294967295
 8008a76:	d338      	bcc.n	8008aea <memset+0x8a>
 8008a78:	f803 2b01 	strb.w	r2, [r3], #1
 8008a7c:	079d      	lsls	r5, r3, #30
 8008a7e:	d1f8      	bne.n	8008a72 <memset+0x12>
 8008a80:	2c03      	cmp	r4, #3
 8008a82:	d92b      	bls.n	8008adc <memset+0x7c>
 8008a84:	b2cd      	uxtb	r5, r1
 8008a86:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8008a8a:	2c0f      	cmp	r4, #15
 8008a8c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008a90:	d916      	bls.n	8008ac0 <memset+0x60>
 8008a92:	f1a4 0710 	sub.w	r7, r4, #16
 8008a96:	093f      	lsrs	r7, r7, #4
 8008a98:	f103 0620 	add.w	r6, r3, #32
 8008a9c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8008aa0:	f103 0210 	add.w	r2, r3, #16
 8008aa4:	e942 5504 	strd	r5, r5, [r2, #-16]
 8008aa8:	e942 5502 	strd	r5, r5, [r2, #-8]
 8008aac:	3210      	adds	r2, #16
 8008aae:	42b2      	cmp	r2, r6
 8008ab0:	d1f8      	bne.n	8008aa4 <memset+0x44>
 8008ab2:	f004 040f 	and.w	r4, r4, #15
 8008ab6:	3701      	adds	r7, #1
 8008ab8:	2c03      	cmp	r4, #3
 8008aba:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8008abe:	d90d      	bls.n	8008adc <memset+0x7c>
 8008ac0:	461e      	mov	r6, r3
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	3a04      	subs	r2, #4
 8008ac6:	2a03      	cmp	r2, #3
 8008ac8:	f846 5b04 	str.w	r5, [r6], #4
 8008acc:	d8fa      	bhi.n	8008ac4 <memset+0x64>
 8008ace:	1f22      	subs	r2, r4, #4
 8008ad0:	f022 0203 	bic.w	r2, r2, #3
 8008ad4:	3204      	adds	r2, #4
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f004 0403 	and.w	r4, r4, #3
 8008adc:	b12c      	cbz	r4, 8008aea <memset+0x8a>
 8008ade:	b2c9      	uxtb	r1, r1
 8008ae0:	441c      	add	r4, r3
 8008ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ae6:	429c      	cmp	r4, r3
 8008ae8:	d1fb      	bne.n	8008ae2 <memset+0x82>
 8008aea:	bcf0      	pop	{r4, r5, r6, r7}
 8008aec:	4770      	bx	lr
 8008aee:	4614      	mov	r4, r2
 8008af0:	4603      	mov	r3, r0
 8008af2:	e7c5      	b.n	8008a80 <memset+0x20>

08008af4 <_vsprintf_r>:
 8008af4:	b530      	push	{r4, r5, lr}
 8008af6:	b09b      	sub	sp, #108	; 0x6c
 8008af8:	4d07      	ldr	r5, [pc, #28]	; (8008b18 <_vsprintf_r+0x24>)
 8008afa:	9100      	str	r1, [sp, #0]
 8008afc:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008b00:	9104      	str	r1, [sp, #16]
 8008b02:	4669      	mov	r1, sp
 8008b04:	9405      	str	r4, [sp, #20]
 8008b06:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008b0a:	f000 f841 	bl	8008b90 <_svfprintf_r>
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	b01b      	add	sp, #108	; 0x6c
 8008b16:	bd30      	pop	{r4, r5, pc}
 8008b18:	ffff0208 	.word	0xffff0208

08008b1c <vsprintf>:
 8008b1c:	b410      	push	{r4}
 8008b1e:	4c04      	ldr	r4, [pc, #16]	; (8008b30 <vsprintf+0x14>)
 8008b20:	4613      	mov	r3, r2
 8008b22:	460a      	mov	r2, r1
 8008b24:	4601      	mov	r1, r0
 8008b26:	6820      	ldr	r0, [r4, #0]
 8008b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b2c:	f7ff bfe2 	b.w	8008af4 <_vsprintf_r>
 8008b30:	20000034 	.word	0x20000034

08008b34 <register_fini>:
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <register_fini+0xc>)
 8008b36:	b113      	cbz	r3, 8008b3e <register_fini+0xa>
 8008b38:	4802      	ldr	r0, [pc, #8]	; (8008b44 <register_fini+0x10>)
 8008b3a:	f000 b805 	b.w	8008b48 <atexit>
 8008b3e:	4770      	bx	lr
 8008b40:	00000000 	.word	0x00000000
 8008b44:	08008b55 	.word	0x08008b55

08008b48 <atexit>:
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 bd04 	b.w	800a55c <__register_exitproc>

08008b54 <__libc_fini_array>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	4c0a      	ldr	r4, [pc, #40]	; (8008b80 <__libc_fini_array+0x2c>)
 8008b58:	4d0a      	ldr	r5, [pc, #40]	; (8008b84 <__libc_fini_array+0x30>)
 8008b5a:	1b64      	subs	r4, r4, r5
 8008b5c:	10a4      	asrs	r4, r4, #2
 8008b5e:	d00a      	beq.n	8008b76 <__libc_fini_array+0x22>
 8008b60:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8008b64:	3b01      	subs	r3, #1
 8008b66:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8008b6a:	3c01      	subs	r4, #1
 8008b6c:	f855 3904 	ldr.w	r3, [r5], #-4
 8008b70:	4798      	blx	r3
 8008b72:	2c00      	cmp	r4, #0
 8008b74:	d1f9      	bne.n	8008b6a <__libc_fini_array+0x16>
 8008b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b7a:	f003 bf5f 	b.w	800ca3c <_fini>
 8008b7e:	bf00      	nop
 8008b80:	0800ce1c 	.word	0x0800ce1c
 8008b84:	0800ce18 	.word	0x0800ce18

08008b88 <__retarget_lock_acquire_recursive>:
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop

08008b8c <__retarget_lock_release_recursive>:
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop

08008b90 <_svfprintf_r>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	b0d7      	sub	sp, #348	; 0x15c
 8008b96:	460c      	mov	r4, r1
 8008b98:	9106      	str	r1, [sp, #24]
 8008b9a:	4693      	mov	fp, r2
 8008b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b9e:	9003      	str	r0, [sp, #12]
 8008ba0:	f002 fe22 	bl	800b7e8 <_localeconv_r>
 8008ba4:	6803      	ldr	r3, [r0, #0]
 8008ba6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7f7 fb49 	bl	8000240 <strlen>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	9016      	str	r0, [sp, #88]	; 0x58
 8008bb2:	061f      	lsls	r7, r3, #24
 8008bb4:	d503      	bpl.n	8008bbe <_svfprintf_r+0x2e>
 8008bb6:	6923      	ldr	r3, [r4, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 8755 	beq.w	8009a68 <_svfprintf_r+0xed8>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	465e      	mov	r6, fp
 8008bc2:	ed9f 7b8f 	vldr	d7, [pc, #572]	; 8008e00 <_svfprintf_r+0x270>
 8008bc6:	9310      	str	r3, [sp, #64]	; 0x40
 8008bc8:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
 8008bcc:	9315      	str	r3, [sp, #84]	; 0x54
 8008bce:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 8008bd2:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bd4:	9318      	str	r3, [sp, #96]	; 0x60
 8008bd6:	9305      	str	r3, [sp, #20]
 8008bd8:	ab2d      	add	r3, sp, #180	; 0xb4
 8008bda:	932a      	str	r3, [sp, #168]	; 0xa8
 8008bdc:	4699      	mov	r9, r3
 8008bde:	7833      	ldrb	r3, [r6, #0]
 8008be0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 82ce 	beq.w	8009186 <_svfprintf_r+0x5f6>
 8008bea:	2b25      	cmp	r3, #37	; 0x25
 8008bec:	4634      	mov	r4, r6
 8008bee:	d102      	bne.n	8008bf6 <_svfprintf_r+0x66>
 8008bf0:	e01c      	b.n	8008c2c <_svfprintf_r+0x9c>
 8008bf2:	2b25      	cmp	r3, #37	; 0x25
 8008bf4:	d003      	beq.n	8008bfe <_svfprintf_r+0x6e>
 8008bf6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1f9      	bne.n	8008bf2 <_svfprintf_r+0x62>
 8008bfe:	1ba5      	subs	r5, r4, r6
 8008c00:	b185      	cbz	r5, 8008c24 <_svfprintf_r+0x94>
 8008c02:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
 8008c06:	3301      	adds	r3, #1
 8008c08:	442a      	add	r2, r5
 8008c0a:	2b07      	cmp	r3, #7
 8008c0c:	f8c9 6000 	str.w	r6, [r9]
 8008c10:	f8c9 5004 	str.w	r5, [r9, #4]
 8008c14:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
 8008c18:	dc7c      	bgt.n	8008d14 <_svfprintf_r+0x184>
 8008c1a:	f109 0908 	add.w	r9, r9, #8
 8008c1e:	9b05      	ldr	r3, [sp, #20]
 8008c20:	442b      	add	r3, r5
 8008c22:	9305      	str	r3, [sp, #20]
 8008c24:	7823      	ldrb	r3, [r4, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 82ad 	beq.w	8009186 <_svfprintf_r+0x5f6>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	7867      	ldrb	r7, [r4, #1]
 8008c30:	9307      	str	r3, [sp, #28]
 8008c32:	4698      	mov	r8, r3
 8008c34:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 8008c38:	f104 0b01 	add.w	fp, r4, #1
 8008c3c:	f04f 3aff 	mov.w	sl, #4294967295
 8008c40:	252b      	movs	r5, #43	; 0x2b
 8008c42:	f10b 0b01 	add.w	fp, fp, #1
 8008c46:	f1a7 0320 	sub.w	r3, r7, #32
 8008c4a:	2b5a      	cmp	r3, #90	; 0x5a
 8008c4c:	f200 83e4 	bhi.w	8009418 <_svfprintf_r+0x888>
 8008c50:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008c54:	03e203a5 	.word	0x03e203a5
 8008c58:	03a003e2 	.word	0x03a003e2
 8008c5c:	03e203e2 	.word	0x03e203e2
 8008c60:	038103e2 	.word	0x038103e2
 8008c64:	03e203e2 	.word	0x03e203e2
 8008c68:	03b003b5 	.word	0x03b003b5
 8008c6c:	017203e2 	.word	0x017203e2
 8008c70:	03e20158 	.word	0x03e20158
 8008c74:	00c6033b 	.word	0x00c6033b
 8008c78:	00c600c6 	.word	0x00c600c6
 8008c7c:	00c600c6 	.word	0x00c600c6
 8008c80:	00c600c6 	.word	0x00c600c6
 8008c84:	00c600c6 	.word	0x00c600c6
 8008c88:	03e203e2 	.word	0x03e203e2
 8008c8c:	03e203e2 	.word	0x03e203e2
 8008c90:	03e203e2 	.word	0x03e203e2
 8008c94:	034003e2 	.word	0x034003e2
 8008c98:	017703e2 	.word	0x017703e2
 8008c9c:	034002f0 	.word	0x034002f0
 8008ca0:	03400340 	.word	0x03400340
 8008ca4:	03e203e2 	.word	0x03e203e2
 8008ca8:	03e203e2 	.word	0x03e203e2
 8008cac:	03e202eb 	.word	0x03e202eb
 8008cb0:	008403e2 	.word	0x008403e2
 8008cb4:	03e203e2 	.word	0x03e203e2
 8008cb8:	02c203e2 	.word	0x02c203e2
 8008cbc:	03ce03e2 	.word	0x03ce03e2
 8008cc0:	03e203e2 	.word	0x03e203e2
 8008cc4:	03e202ac 	.word	0x03e202ac
 8008cc8:	03e203e2 	.word	0x03e203e2
 8008ccc:	03e203e2 	.word	0x03e203e2
 8008cd0:	03e203e2 	.word	0x03e203e2
 8008cd4:	034003e2 	.word	0x034003e2
 8008cd8:	017703e2 	.word	0x017703e2
 8008cdc:	034000da 	.word	0x034000da
 8008ce0:	03400340 	.word	0x03400340
 8008ce4:	00da03c1 	.word	0x00da03c1
 8008ce8:	03e2005b 	.word	0x03e2005b
 8008cec:	03e2031e 	.word	0x03e2031e
 8008cf0:	00860306 	.word	0x00860306
 8008cf4:	005b032b 	.word	0x005b032b
 8008cf8:	02c203e2 	.word	0x02c203e2
 8008cfc:	0129005d 	.word	0x0129005d
 8008d00:	03e203e2 	.word	0x03e203e2
 8008d04:	03e20138 	.word	0x03e20138
 8008d08:	005d      	.short	0x005d
 8008d0a:	f048 0820 	orr.w	r8, r8, #32
 8008d0e:	f89b 7000 	ldrb.w	r7, [fp]
 8008d12:	e796      	b.n	8008c42 <_svfprintf_r+0xb2>
 8008d14:	aa2a      	add	r2, sp, #168	; 0xa8
 8008d16:	9906      	ldr	r1, [sp, #24]
 8008d18:	9803      	ldr	r0, [sp, #12]
 8008d1a:	f003 fba5 	bl	800c468 <__ssprint_r>
 8008d1e:	b980      	cbnz	r0, 8008d42 <_svfprintf_r+0x1b2>
 8008d20:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8008d24:	e77b      	b.n	8008c1e <_svfprintf_r+0x8e>
 8008d26:	aa2a      	add	r2, sp, #168	; 0xa8
 8008d28:	4659      	mov	r1, fp
 8008d2a:	4650      	mov	r0, sl
 8008d2c:	f003 fb9c 	bl	800c468 <__ssprint_r>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	f001 80c5 	beq.w	8009ec0 <_svfprintf_r+0x1330>
 8008d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d38:	b11b      	cbz	r3, 8008d42 <_svfprintf_r+0x1b2>
 8008d3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d3c:	9803      	ldr	r0, [sp, #12]
 8008d3e:	f002 fc5f 	bl	800b600 <_free_r>
 8008d42:	9b06      	ldr	r3, [sp, #24]
 8008d44:	899b      	ldrh	r3, [r3, #12]
 8008d46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d4a:	9b05      	ldr	r3, [sp, #20]
 8008d4c:	bf18      	it	ne
 8008d4e:	f04f 33ff 	movne.w	r3, #4294967295
 8008d52:	9305      	str	r3, [sp, #20]
 8008d54:	9805      	ldr	r0, [sp, #20]
 8008d56:	b057      	add	sp, #348	; 0x15c
 8008d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5c:	f048 0810 	orr.w	r8, r8, #16
 8008d60:	f018 0f20 	tst.w	r8, #32
 8008d64:	f000 8573 	beq.w	800984e <_svfprintf_r+0xcbe>
 8008d68:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008d6a:	3407      	adds	r4, #7
 8008d6c:	f024 0307 	bic.w	r3, r4, #7
 8008d70:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008d74:	f103 0208 	add.w	r2, r3, #8
 8008d78:	9209      	str	r2, [sp, #36]	; 0x24
 8008d7a:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2100      	movs	r1, #0
 8008d82:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
 8008d86:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008d8a:	a956      	add	r1, sp, #344	; 0x158
 8008d8c:	9104      	str	r1, [sp, #16]
 8008d8e:	f000 84a7 	beq.w	80096e0 <_svfprintf_r+0xb50>
 8008d92:	ea54 0105 	orrs.w	r1, r4, r5
 8008d96:	f023 0880 	bic.w	r8, r3, #128	; 0x80
 8008d9a:	d15b      	bne.n	8008e54 <_svfprintf_r+0x2c4>
 8008d9c:	f1ba 0f00 	cmp.w	sl, #0
 8008da0:	f040 8796 	bne.w	8009cd0 <_svfprintf_r+0x1140>
 8008da4:	2a00      	cmp	r2, #0
 8008da6:	f040 851f 	bne.w	80097e8 <_svfprintf_r+0xc58>
 8008daa:	f013 0301 	ands.w	r3, r3, #1
 8008dae:	ae56      	add	r6, sp, #344	; 0x158
 8008db0:	9308      	str	r3, [sp, #32]
 8008db2:	d002      	beq.n	8008dba <_svfprintf_r+0x22a>
 8008db4:	2330      	movs	r3, #48	; 0x30
 8008db6:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8008dba:	2300      	movs	r3, #0
 8008dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8008dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dc0:	9314      	str	r3, [sp, #80]	; 0x50
 8008dc2:	9311      	str	r3, [sp, #68]	; 0x44
 8008dc4:	9b08      	ldr	r3, [sp, #32]
 8008dc6:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8008dca:	4553      	cmp	r3, sl
 8008dcc:	bfb8      	it	lt
 8008dce:	4653      	movlt	r3, sl
 8008dd0:	9304      	str	r3, [sp, #16]
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	f000 80c8 	beq.w	8008f68 <_svfprintf_r+0x3d8>
 8008dd8:	9b04      	ldr	r3, [sp, #16]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	e0c3      	b.n	8008f68 <_svfprintf_r+0x3d8>
 8008de0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008de4:	2200      	movs	r2, #0
 8008de6:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8008dea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008dee:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008df2:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008df6:	2b09      	cmp	r3, #9
 8008df8:	d9f5      	bls.n	8008de6 <_svfprintf_r+0x256>
 8008dfa:	9207      	str	r2, [sp, #28]
 8008dfc:	e723      	b.n	8008c46 <_svfprintf_r+0xb6>
 8008dfe:	bf00      	nop
	...
 8008e08:	4643      	mov	r3, r8
 8008e0a:	069e      	lsls	r6, r3, #26
 8008e0c:	f140 8217 	bpl.w	800923e <_svfprintf_r+0x6ae>
 8008e10:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008e12:	3407      	adds	r4, #7
 8008e14:	f024 0407 	bic.w	r4, r4, #7
 8008e18:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008e1c:	f104 0208 	add.w	r2, r4, #8
 8008e20:	9209      	str	r2, [sp, #36]	; 0x24
 8008e22:	4604      	mov	r4, r0
 8008e24:	460d      	mov	r5, r1
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f171 0200 	sbcs.w	r2, r1, #0
 8008e2c:	da05      	bge.n	8008e3a <_svfprintf_r+0x2aa>
 8008e2e:	222d      	movs	r2, #45	; 0x2d
 8008e30:	4264      	negs	r4, r4
 8008e32:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8008e36:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 8008e3a:	aa56      	add	r2, sp, #344	; 0x158
 8008e3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008e40:	9204      	str	r2, [sp, #16]
 8008e42:	f000 86e3 	beq.w	8009c0c <_svfprintf_r+0x107c>
 8008e46:	ea54 0105 	orrs.w	r1, r4, r5
 8008e4a:	f04f 0201 	mov.w	r2, #1
 8008e4e:	f023 0880 	bic.w	r8, r3, #128	; 0x80
 8008e52:	d0a3      	beq.n	8008d9c <_svfprintf_r+0x20c>
 8008e54:	2a01      	cmp	r2, #1
 8008e56:	f000 8447 	beq.w	80096e8 <_svfprintf_r+0xb58>
 8008e5a:	2a02      	cmp	r2, #2
 8008e5c:	f000 82ef 	beq.w	800943e <_svfprintf_r+0x8ae>
 8008e60:	a956      	add	r1, sp, #344	; 0x158
 8008e62:	e000      	b.n	8008e66 <_svfprintf_r+0x2d6>
 8008e64:	4631      	mov	r1, r6
 8008e66:	08e2      	lsrs	r2, r4, #3
 8008e68:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8008e6c:	08e8      	lsrs	r0, r5, #3
 8008e6e:	f004 0307 	and.w	r3, r4, #7
 8008e72:	4605      	mov	r5, r0
 8008e74:	4614      	mov	r4, r2
 8008e76:	3330      	adds	r3, #48	; 0x30
 8008e78:	ea54 0205 	orrs.w	r2, r4, r5
 8008e7c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8008e84:	d1ee      	bne.n	8008e64 <_svfprintf_r+0x2d4>
 8008e86:	f018 0f01 	tst.w	r8, #1
 8008e8a:	f000 82e8 	beq.w	800945e <_svfprintf_r+0x8ce>
 8008e8e:	2b30      	cmp	r3, #48	; 0x30
 8008e90:	f000 82e5 	beq.w	800945e <_svfprintf_r+0x8ce>
 8008e94:	9a04      	ldr	r2, [sp, #16]
 8008e96:	3902      	subs	r1, #2
 8008e98:	2330      	movs	r3, #48	; 0x30
 8008e9a:	1a52      	subs	r2, r2, r1
 8008e9c:	f806 3c01 	strb.w	r3, [r6, #-1]
 8008ea0:	9208      	str	r2, [sp, #32]
 8008ea2:	460e      	mov	r6, r1
 8008ea4:	e789      	b.n	8008dba <_svfprintf_r+0x22a>
 8008ea6:	4643      	mov	r3, r8
 8008ea8:	069e      	lsls	r6, r3, #26
 8008eaa:	f140 82a6 	bpl.w	80093fa <_svfprintf_r+0x86a>
 8008eae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008eb0:	3407      	adds	r4, #7
 8008eb2:	f024 0207 	bic.w	r2, r4, #7
 8008eb6:	f102 0108 	add.w	r1, r2, #8
 8008eba:	e9d2 4500 	ldrd	r4, r5, [r2]
 8008ebe:	9109      	str	r1, [sp, #36]	; 0x24
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	e75d      	b.n	8008d80 <_svfprintf_r+0x1f0>
 8008ec4:	4bb6      	ldr	r3, [pc, #728]	; (80091a0 <_svfprintf_r+0x610>)
 8008ec6:	9315      	str	r3, [sp, #84]	; 0x54
 8008ec8:	f018 0f20 	tst.w	r8, #32
 8008ecc:	f000 8174 	beq.w	80091b8 <_svfprintf_r+0x628>
 8008ed0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008ed2:	3407      	adds	r4, #7
 8008ed4:	f024 0307 	bic.w	r3, r4, #7
 8008ed8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008edc:	f103 0208 	add.w	r2, r3, #8
 8008ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ee2:	f018 0f01 	tst.w	r8, #1
 8008ee6:	d009      	beq.n	8008efc <_svfprintf_r+0x36c>
 8008ee8:	ea54 0305 	orrs.w	r3, r4, r5
 8008eec:	d006      	beq.n	8008efc <_svfprintf_r+0x36c>
 8008eee:	2330      	movs	r3, #48	; 0x30
 8008ef0:	f88d 708d 	strb.w	r7, [sp, #141]	; 0x8d
 8008ef4:	f048 0802 	orr.w	r8, r8, #2
 8008ef8:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8008efc:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8008f00:	2202      	movs	r2, #2
 8008f02:	e73d      	b.n	8008d80 <_svfprintf_r+0x1f0>
 8008f04:	f89b 7000 	ldrb.w	r7, [fp]
 8008f08:	2f2a      	cmp	r7, #42	; 0x2a
 8008f0a:	f10b 0201 	add.w	r2, fp, #1
 8008f0e:	f001 82eb 	beq.w	800a4e8 <_svfprintf_r+0x1958>
 8008f12:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008f16:	2b09      	cmp	r3, #9
 8008f18:	4693      	mov	fp, r2
 8008f1a:	f04f 0a00 	mov.w	sl, #0
 8008f1e:	f63f ae92 	bhi.w	8008c46 <_svfprintf_r+0xb6>
 8008f22:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8008f26:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8008f2a:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
 8008f2e:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008f32:	2b09      	cmp	r3, #9
 8008f34:	d9f5      	bls.n	8008f22 <_svfprintf_r+0x392>
 8008f36:	e686      	b.n	8008c46 <_svfprintf_r+0xb6>
 8008f38:	f89b 7000 	ldrb.w	r7, [fp]
 8008f3c:	f048 0804 	orr.w	r8, r8, #4
 8008f40:	e67f      	b.n	8008c42 <_svfprintf_r+0xb2>
 8008f42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f44:	2300      	movs	r3, #0
 8008f46:	6801      	ldr	r1, [r0, #0]
 8008f48:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	f88d 10f4 	strb.w	r1, [sp, #244]	; 0xf4
 8008f52:	2301      	movs	r3, #1
 8008f54:	1d01      	adds	r1, r0, #4
 8008f56:	e9cd 3108 	strd	r3, r1, [sp, #32]
 8008f5a:	9304      	str	r3, [sp, #16]
 8008f5c:	920a      	str	r2, [sp, #40]	; 0x28
 8008f5e:	4692      	mov	sl, r2
 8008f60:	920f      	str	r2, [sp, #60]	; 0x3c
 8008f62:	9214      	str	r2, [sp, #80]	; 0x50
 8008f64:	9211      	str	r2, [sp, #68]	; 0x44
 8008f66:	ae3d      	add	r6, sp, #244	; 0xf4
 8008f68:	f018 0302 	ands.w	r3, r8, #2
 8008f6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f6e:	d002      	beq.n	8008f76 <_svfprintf_r+0x3e6>
 8008f70:	9b04      	ldr	r3, [sp, #16]
 8008f72:	3302      	adds	r3, #2
 8008f74:	9304      	str	r3, [sp, #16]
 8008f76:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8008f7a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008f7c:	930e      	str	r3, [sp, #56]	; 0x38
 8008f7e:	d13f      	bne.n	8009000 <_svfprintf_r+0x470>
 8008f80:	9b07      	ldr	r3, [sp, #28]
 8008f82:	9904      	ldr	r1, [sp, #16]
 8008f84:	1a5d      	subs	r5, r3, r1
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	dd3a      	ble.n	8009000 <_svfprintf_r+0x470>
 8008f8a:	2d10      	cmp	r5, #16
 8008f8c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008f8e:	dd29      	ble.n	8008fe4 <_svfprintf_r+0x454>
 8008f90:	4649      	mov	r1, r9
 8008f92:	4620      	mov	r0, r4
 8008f94:	46b1      	mov	r9, r6
 8008f96:	2310      	movs	r3, #16
 8008f98:	9720      	str	r7, [sp, #128]	; 0x80
 8008f9a:	9c03      	ldr	r4, [sp, #12]
 8008f9c:	9e06      	ldr	r6, [sp, #24]
 8008f9e:	e004      	b.n	8008faa <_svfprintf_r+0x41a>
 8008fa0:	3d10      	subs	r5, #16
 8008fa2:	2d10      	cmp	r5, #16
 8008fa4:	f101 0108 	add.w	r1, r1, #8
 8008fa8:	dd18      	ble.n	8008fdc <_svfprintf_r+0x44c>
 8008faa:	3201      	adds	r2, #1
 8008fac:	4f7d      	ldr	r7, [pc, #500]	; (80091a4 <_svfprintf_r+0x614>)
 8008fae:	3010      	adds	r0, #16
 8008fb0:	2a07      	cmp	r2, #7
 8008fb2:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
 8008fb6:	e9c1 7300 	strd	r7, r3, [r1]
 8008fba:	ddf1      	ble.n	8008fa0 <_svfprintf_r+0x410>
 8008fbc:	aa2a      	add	r2, sp, #168	; 0xa8
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	930c      	str	r3, [sp, #48]	; 0x30
 8008fc4:	f003 fa50 	bl	800c468 <__ssprint_r>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	f47f aeb4 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8008fce:	3d10      	subs	r5, #16
 8008fd0:	2d10      	cmp	r5, #16
 8008fd2:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
 8008fd6:	a92d      	add	r1, sp, #180	; 0xb4
 8008fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fda:	dce6      	bgt.n	8008faa <_svfprintf_r+0x41a>
 8008fdc:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8008fde:	464e      	mov	r6, r9
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	4689      	mov	r9, r1
 8008fe4:	3201      	adds	r2, #1
 8008fe6:	4b6f      	ldr	r3, [pc, #444]	; (80091a4 <_svfprintf_r+0x614>)
 8008fe8:	442c      	add	r4, r5
 8008fea:	2a07      	cmp	r2, #7
 8008fec:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8008ff0:	e9c9 3500 	strd	r3, r5, [r9]
 8008ff4:	f300 857c 	bgt.w	8009af0 <_svfprintf_r+0xf60>
 8008ff8:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8008ffc:	f109 0908 	add.w	r9, r9, #8
 8009000:	b172      	cbz	r2, 8009020 <_svfprintf_r+0x490>
 8009002:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009004:	3201      	adds	r2, #1
 8009006:	3401      	adds	r4, #1
 8009008:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 800900c:	2101      	movs	r1, #1
 800900e:	2a07      	cmp	r2, #7
 8009010:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8009014:	e9c9 0100 	strd	r0, r1, [r9]
 8009018:	f300 8373 	bgt.w	8009702 <_svfprintf_r+0xb72>
 800901c:	f109 0908 	add.w	r9, r9, #8
 8009020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009022:	b16b      	cbz	r3, 8009040 <_svfprintf_r+0x4b0>
 8009024:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009026:	3301      	adds	r3, #1
 8009028:	3402      	adds	r4, #2
 800902a:	a923      	add	r1, sp, #140	; 0x8c
 800902c:	2202      	movs	r2, #2
 800902e:	2b07      	cmp	r3, #7
 8009030:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8009034:	e9c9 1200 	strd	r1, r2, [r9]
 8009038:	f300 836f 	bgt.w	800971a <_svfprintf_r+0xb8a>
 800903c:	f109 0908 	add.w	r9, r9, #8
 8009040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009042:	2b80      	cmp	r3, #128	; 0x80
 8009044:	f000 8279 	beq.w	800953a <_svfprintf_r+0x9aa>
 8009048:	9b08      	ldr	r3, [sp, #32]
 800904a:	ebaa 0503 	sub.w	r5, sl, r3
 800904e:	2d00      	cmp	r5, #0
 8009050:	dd35      	ble.n	80090be <_svfprintf_r+0x52e>
 8009052:	2d10      	cmp	r5, #16
 8009054:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009056:	4b54      	ldr	r3, [pc, #336]	; (80091a8 <_svfprintf_r+0x618>)
 8009058:	dd26      	ble.n	80090a8 <_svfprintf_r+0x518>
 800905a:	4649      	mov	r1, r9
 800905c:	4620      	mov	r0, r4
 800905e:	46b1      	mov	r9, r6
 8009060:	f04f 0a10 	mov.w	sl, #16
 8009064:	9e06      	ldr	r6, [sp, #24]
 8009066:	461c      	mov	r4, r3
 8009068:	e004      	b.n	8009074 <_svfprintf_r+0x4e4>
 800906a:	3d10      	subs	r5, #16
 800906c:	2d10      	cmp	r5, #16
 800906e:	f101 0108 	add.w	r1, r1, #8
 8009072:	dd15      	ble.n	80090a0 <_svfprintf_r+0x510>
 8009074:	3201      	adds	r2, #1
 8009076:	3010      	adds	r0, #16
 8009078:	2a07      	cmp	r2, #7
 800907a:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
 800907e:	e9c1 4a00 	strd	r4, sl, [r1]
 8009082:	ddf2      	ble.n	800906a <_svfprintf_r+0x4da>
 8009084:	aa2a      	add	r2, sp, #168	; 0xa8
 8009086:	4631      	mov	r1, r6
 8009088:	9803      	ldr	r0, [sp, #12]
 800908a:	f003 f9ed 	bl	800c468 <__ssprint_r>
 800908e:	2800      	cmp	r0, #0
 8009090:	f47f ae51 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009094:	3d10      	subs	r5, #16
 8009096:	2d10      	cmp	r5, #16
 8009098:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
 800909c:	a92d      	add	r1, sp, #180	; 0xb4
 800909e:	dce9      	bgt.n	8009074 <_svfprintf_r+0x4e4>
 80090a0:	464e      	mov	r6, r9
 80090a2:	4623      	mov	r3, r4
 80090a4:	4689      	mov	r9, r1
 80090a6:	4604      	mov	r4, r0
 80090a8:	3201      	adds	r2, #1
 80090aa:	442c      	add	r4, r5
 80090ac:	2a07      	cmp	r2, #7
 80090ae:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 80090b2:	e9c9 3500 	strd	r3, r5, [r9]
 80090b6:	f300 833c 	bgt.w	8009732 <_svfprintf_r+0xba2>
 80090ba:	f109 0908 	add.w	r9, r9, #8
 80090be:	f418 7f80 	tst.w	r8, #256	; 0x100
 80090c2:	f040 81db 	bne.w	800947c <_svfprintf_r+0x8ec>
 80090c6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80090c8:	9a08      	ldr	r2, [sp, #32]
 80090ca:	f8c9 6000 	str.w	r6, [r9]
 80090ce:	3301      	adds	r3, #1
 80090d0:	4414      	add	r4, r2
 80090d2:	2b07      	cmp	r3, #7
 80090d4:	942c      	str	r4, [sp, #176]	; 0xb0
 80090d6:	f8c9 2004 	str.w	r2, [r9, #4]
 80090da:	932b      	str	r3, [sp, #172]	; 0xac
 80090dc:	f300 82a1 	bgt.w	8009622 <_svfprintf_r+0xa92>
 80090e0:	f109 0908 	add.w	r9, r9, #8
 80090e4:	f018 0f04 	tst.w	r8, #4
 80090e8:	d033      	beq.n	8009152 <_svfprintf_r+0x5c2>
 80090ea:	9b07      	ldr	r3, [sp, #28]
 80090ec:	9a04      	ldr	r2, [sp, #16]
 80090ee:	1a9d      	subs	r5, r3, r2
 80090f0:	2d00      	cmp	r5, #0
 80090f2:	dd2e      	ble.n	8009152 <_svfprintf_r+0x5c2>
 80090f4:	2d10      	cmp	r5, #16
 80090f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80090f8:	dd21      	ble.n	800913e <_svfprintf_r+0x5ae>
 80090fa:	2610      	movs	r6, #16
 80090fc:	9f03      	ldr	r7, [sp, #12]
 80090fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009102:	e004      	b.n	800910e <_svfprintf_r+0x57e>
 8009104:	3d10      	subs	r5, #16
 8009106:	2d10      	cmp	r5, #16
 8009108:	f109 0908 	add.w	r9, r9, #8
 800910c:	dd17      	ble.n	800913e <_svfprintf_r+0x5ae>
 800910e:	3301      	adds	r3, #1
 8009110:	4a24      	ldr	r2, [pc, #144]	; (80091a4 <_svfprintf_r+0x614>)
 8009112:	3410      	adds	r4, #16
 8009114:	2b07      	cmp	r3, #7
 8009116:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 800911a:	e9c9 2600 	strd	r2, r6, [r9]
 800911e:	ddf1      	ble.n	8009104 <_svfprintf_r+0x574>
 8009120:	aa2a      	add	r2, sp, #168	; 0xa8
 8009122:	4641      	mov	r1, r8
 8009124:	4638      	mov	r0, r7
 8009126:	f003 f99f 	bl	800c468 <__ssprint_r>
 800912a:	2800      	cmp	r0, #0
 800912c:	f47f ae03 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009130:	3d10      	subs	r5, #16
 8009132:	2d10      	cmp	r5, #16
 8009134:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8009138:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800913c:	dce7      	bgt.n	800910e <_svfprintf_r+0x57e>
 800913e:	3301      	adds	r3, #1
 8009140:	4a18      	ldr	r2, [pc, #96]	; (80091a4 <_svfprintf_r+0x614>)
 8009142:	442c      	add	r4, r5
 8009144:	2b07      	cmp	r3, #7
 8009146:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 800914a:	e9c9 2500 	strd	r2, r5, [r9]
 800914e:	f300 83a5 	bgt.w	800989c <_svfprintf_r+0xd0c>
 8009152:	9b05      	ldr	r3, [sp, #20]
 8009154:	9a07      	ldr	r2, [sp, #28]
 8009156:	9904      	ldr	r1, [sp, #16]
 8009158:	428a      	cmp	r2, r1
 800915a:	bfac      	ite	ge
 800915c:	189b      	addge	r3, r3, r2
 800915e:	185b      	addlt	r3, r3, r1
 8009160:	9305      	str	r3, [sp, #20]
 8009162:	2c00      	cmp	r4, #0
 8009164:	f040 8225 	bne.w	80095b2 <_svfprintf_r+0xa22>
 8009168:	2300      	movs	r3, #0
 800916a:	932b      	str	r3, [sp, #172]	; 0xac
 800916c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800916e:	b11b      	cbz	r3, 8009178 <_svfprintf_r+0x5e8>
 8009170:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009172:	9803      	ldr	r0, [sp, #12]
 8009174:	f002 fa44 	bl	800b600 <_free_r>
 8009178:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800917c:	465e      	mov	r6, fp
 800917e:	7833      	ldrb	r3, [r6, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	f47f ad32 	bne.w	8008bea <_svfprintf_r+0x5a>
 8009186:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009188:	2b00      	cmp	r3, #0
 800918a:	f43f adda 	beq.w	8008d42 <_svfprintf_r+0x1b2>
 800918e:	9c06      	ldr	r4, [sp, #24]
 8009190:	9803      	ldr	r0, [sp, #12]
 8009192:	aa2a      	add	r2, sp, #168	; 0xa8
 8009194:	4621      	mov	r1, r4
 8009196:	f003 f967 	bl	800c468 <__ssprint_r>
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	e5d3      	b.n	8008d46 <_svfprintf_r+0x1b6>
 800919e:	bf00      	nop
 80091a0:	0800cb94 	.word	0x0800cb94
 80091a4:	0800cbc8 	.word	0x0800cbc8
 80091a8:	0800cbd8 	.word	0x0800cbd8
 80091ac:	4bae      	ldr	r3, [pc, #696]	; (8009468 <_svfprintf_r+0x8d8>)
 80091ae:	9315      	str	r3, [sp, #84]	; 0x54
 80091b0:	f018 0f20 	tst.w	r8, #32
 80091b4:	f47f ae8c 	bne.w	8008ed0 <_svfprintf_r+0x340>
 80091b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ba:	f018 0f10 	tst.w	r8, #16
 80091be:	f102 0304 	add.w	r3, r2, #4
 80091c2:	f040 8379 	bne.w	80098b8 <_svfprintf_r+0xd28>
 80091c6:	f018 0f40 	tst.w	r8, #64	; 0x40
 80091ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091cc:	f000 8370 	beq.w	80098b0 <_svfprintf_r+0xd20>
 80091d0:	8814      	ldrh	r4, [r2, #0]
 80091d2:	9309      	str	r3, [sp, #36]	; 0x24
 80091d4:	2500      	movs	r5, #0
 80091d6:	e684      	b.n	8008ee2 <_svfprintf_r+0x352>
 80091d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091da:	681e      	ldr	r6, [r3, #0]
 80091dc:	2500      	movs	r5, #0
 80091de:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
 80091e2:	1d1c      	adds	r4, r3, #4
 80091e4:	2e00      	cmp	r6, #0
 80091e6:	f000 8473 	beq.w	8009ad0 <_svfprintf_r+0xf40>
 80091ea:	f1ba 3fff 	cmp.w	sl, #4294967295
 80091ee:	f000 865f 	beq.w	8009eb0 <_svfprintf_r+0x1320>
 80091f2:	4652      	mov	r2, sl
 80091f4:	4629      	mov	r1, r5
 80091f6:	4630      	mov	r0, r6
 80091f8:	f7f7 f892 	bl	8000320 <memchr>
 80091fc:	900a      	str	r0, [sp, #40]	; 0x28
 80091fe:	2800      	cmp	r0, #0
 8009200:	f000 879a 	beq.w	800a138 <_svfprintf_r+0x15a8>
 8009204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009206:	1b9b      	subs	r3, r3, r6
 8009208:	9308      	str	r3, [sp, #32]
 800920a:	46aa      	mov	sl, r5
 800920c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009210:	9409      	str	r4, [sp, #36]	; 0x24
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009218:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 800921c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8009220:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8009224:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8009228:	e5d3      	b.n	8008dd2 <_svfprintf_r+0x242>
 800922a:	f048 0808 	orr.w	r8, r8, #8
 800922e:	f89b 7000 	ldrb.w	r7, [fp]
 8009232:	e506      	b.n	8008c42 <_svfprintf_r+0xb2>
 8009234:	f048 0310 	orr.w	r3, r8, #16
 8009238:	069e      	lsls	r6, r3, #26
 800923a:	f53f ade9 	bmi.w	8008e10 <_svfprintf_r+0x280>
 800923e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009240:	06dd      	lsls	r5, r3, #27
 8009242:	f101 0204 	add.w	r2, r1, #4
 8009246:	f100 8351 	bmi.w	80098ec <_svfprintf_r+0xd5c>
 800924a:	065c      	lsls	r4, r3, #25
 800924c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800924e:	f140 834a 	bpl.w	80098e6 <_svfprintf_r+0xd56>
 8009252:	f9b1 4000 	ldrsh.w	r4, [r1]
 8009256:	9209      	str	r2, [sp, #36]	; 0x24
 8009258:	17e5      	asrs	r5, r4, #31
 800925a:	4620      	mov	r0, r4
 800925c:	4629      	mov	r1, r5
 800925e:	e5e2      	b.n	8008e26 <_svfprintf_r+0x296>
 8009260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009262:	f018 0f20 	tst.w	r8, #32
 8009266:	f852 3b04 	ldr.w	r3, [r2], #4
 800926a:	9209      	str	r2, [sp, #36]	; 0x24
 800926c:	f040 8345 	bne.w	80098fa <_svfprintf_r+0xd6a>
 8009270:	f018 0f10 	tst.w	r8, #16
 8009274:	f040 857c 	bne.w	8009d70 <_svfprintf_r+0x11e0>
 8009278:	f018 0f40 	tst.w	r8, #64	; 0x40
 800927c:	f040 862e 	bne.w	8009edc <_svfprintf_r+0x134c>
 8009280:	f418 7f00 	tst.w	r8, #512	; 0x200
 8009284:	f000 8574 	beq.w	8009d70 <_svfprintf_r+0x11e0>
 8009288:	9a05      	ldr	r2, [sp, #20]
 800928a:	701a      	strb	r2, [r3, #0]
 800928c:	465e      	mov	r6, fp
 800928e:	e776      	b.n	800917e <_svfprintf_r+0x5ee>
 8009290:	f89b 7000 	ldrb.w	r7, [fp]
 8009294:	2f6c      	cmp	r7, #108	; 0x6c
 8009296:	bf03      	ittte	eq
 8009298:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 800929c:	f048 0820 	orreq.w	r8, r8, #32
 80092a0:	f10b 0b01 	addeq.w	fp, fp, #1
 80092a4:	f048 0810 	orrne.w	r8, r8, #16
 80092a8:	e4cb      	b.n	8008c42 <_svfprintf_r+0xb2>
 80092aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092ac:	4b6f      	ldr	r3, [pc, #444]	; (800946c <_svfprintf_r+0x8dc>)
 80092ae:	680c      	ldr	r4, [r1, #0]
 80092b0:	9315      	str	r3, [sp, #84]	; 0x54
 80092b2:	f647 0230 	movw	r2, #30768	; 0x7830
 80092b6:	3104      	adds	r1, #4
 80092b8:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 80092bc:	f048 0302 	orr.w	r3, r8, #2
 80092c0:	9109      	str	r1, [sp, #36]	; 0x24
 80092c2:	2500      	movs	r5, #0
 80092c4:	2202      	movs	r2, #2
 80092c6:	2778      	movs	r7, #120	; 0x78
 80092c8:	e55a      	b.n	8008d80 <_svfprintf_r+0x1f0>
 80092ca:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80092ce:	f89b 7000 	ldrb.w	r7, [fp]
 80092d2:	e4b6      	b.n	8008c42 <_svfprintf_r+0xb2>
 80092d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80092d6:	3407      	adds	r4, #7
 80092d8:	f024 0407 	bic.w	r4, r4, #7
 80092dc:	ed94 7b00 	vldr	d7, [r4]
 80092e0:	ec52 1b17 	vmov	r1, r2, d7
 80092e4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80092e8:	931d      	str	r3, [sp, #116]	; 0x74
 80092ea:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
 80092ee:	3408      	adds	r4, #8
 80092f0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80092f4:	f04f 32ff 	mov.w	r2, #4294967295
 80092f8:	4b5d      	ldr	r3, [pc, #372]	; (8009470 <_svfprintf_r+0x8e0>)
 80092fa:	9409      	str	r4, [sp, #36]	; 0x24
 80092fc:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8009300:	f7f7 fd4e 	bl	8000da0 <__aeabi_dcmpun>
 8009304:	2800      	cmp	r0, #0
 8009306:	f040 82ff 	bne.w	8009908 <_svfprintf_r+0xd78>
 800930a:	f04f 32ff 	mov.w	r2, #4294967295
 800930e:	4b58      	ldr	r3, [pc, #352]	; (8009470 <_svfprintf_r+0x8e0>)
 8009310:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8009314:	f7f7 fd26 	bl	8000d64 <__aeabi_dcmple>
 8009318:	2800      	cmp	r0, #0
 800931a:	f040 82f5 	bne.w	8009908 <_svfprintf_r+0xd78>
 800931e:	2200      	movs	r2, #0
 8009320:	2300      	movs	r3, #0
 8009322:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009326:	f7f7 fd13 	bl	8000d50 <__aeabi_dcmplt>
 800932a:	2800      	cmp	r0, #0
 800932c:	f040 86e3 	bne.w	800a0f6 <_svfprintf_r+0x1566>
 8009330:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8009334:	4e4f      	ldr	r6, [pc, #316]	; (8009474 <_svfprintf_r+0x8e4>)
 8009336:	4b50      	ldr	r3, [pc, #320]	; (8009478 <_svfprintf_r+0x8e8>)
 8009338:	2000      	movs	r0, #0
 800933a:	2103      	movs	r1, #3
 800933c:	9104      	str	r1, [sp, #16]
 800933e:	900a      	str	r0, [sp, #40]	; 0x28
 8009340:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8009344:	2f47      	cmp	r7, #71	; 0x47
 8009346:	bfd8      	it	le
 8009348:	461e      	movle	r6, r3
 800934a:	9108      	str	r1, [sp, #32]
 800934c:	4682      	mov	sl, r0
 800934e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009350:	9014      	str	r0, [sp, #80]	; 0x50
 8009352:	9011      	str	r0, [sp, #68]	; 0x44
 8009354:	e53d      	b.n	8008dd2 <_svfprintf_r+0x242>
 8009356:	9f03      	ldr	r7, [sp, #12]
 8009358:	4638      	mov	r0, r7
 800935a:	f002 fa45 	bl	800b7e8 <_localeconv_r>
 800935e:	6843      	ldr	r3, [r0, #4]
 8009360:	9318      	str	r3, [sp, #96]	; 0x60
 8009362:	4618      	mov	r0, r3
 8009364:	f7f6 ff6c 	bl	8000240 <strlen>
 8009368:	901b      	str	r0, [sp, #108]	; 0x6c
 800936a:	4604      	mov	r4, r0
 800936c:	4638      	mov	r0, r7
 800936e:	f002 fa3b 	bl	800b7e8 <_localeconv_r>
 8009372:	6883      	ldr	r3, [r0, #8]
 8009374:	931a      	str	r3, [sp, #104]	; 0x68
 8009376:	2c00      	cmp	r4, #0
 8009378:	f43f acc9 	beq.w	8008d0e <_svfprintf_r+0x17e>
 800937c:	f89b 7000 	ldrb.w	r7, [fp]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f43f ac5e 	beq.w	8008c42 <_svfprintf_r+0xb2>
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	f43f ac5a 	beq.w	8008c42 <_svfprintf_r+0xb2>
 800938e:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8009392:	e456      	b.n	8008c42 <_svfprintf_r+0xb2>
 8009394:	f048 0801 	orr.w	r8, r8, #1
 8009398:	f89b 7000 	ldrb.w	r7, [fp]
 800939c:	e451      	b.n	8008c42 <_svfprintf_r+0xb2>
 800939e:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 80093a2:	f89b 7000 	ldrb.w	r7, [fp]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f47f ac4b 	bne.w	8008c42 <_svfprintf_r+0xb2>
 80093ac:	2320      	movs	r3, #32
 80093ae:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 80093b2:	e446      	b.n	8008c42 <_svfprintf_r+0xb2>
 80093b4:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
 80093b8:	f89b 7000 	ldrb.w	r7, [fp]
 80093bc:	e441      	b.n	8008c42 <_svfprintf_r+0xb2>
 80093be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c0:	f89b 7000 	ldrb.w	r7, [fp]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	9207      	str	r2, [sp, #28]
 80093c8:	2a00      	cmp	r2, #0
 80093ca:	f103 0304 	add.w	r3, r3, #4
 80093ce:	f2c0 835a 	blt.w	8009a86 <_svfprintf_r+0xef6>
 80093d2:	9309      	str	r3, [sp, #36]	; 0x24
 80093d4:	e435      	b.n	8008c42 <_svfprintf_r+0xb2>
 80093d6:	f89b 7000 	ldrb.w	r7, [fp]
 80093da:	2f68      	cmp	r7, #104	; 0x68
 80093dc:	bf03      	ittte	eq
 80093de:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 80093e2:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 80093e6:	f10b 0b01 	addeq.w	fp, fp, #1
 80093ea:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 80093ee:	e428      	b.n	8008c42 <_svfprintf_r+0xb2>
 80093f0:	f048 0310 	orr.w	r3, r8, #16
 80093f4:	069e      	lsls	r6, r3, #26
 80093f6:	f53f ad5a 	bmi.w	8008eae <_svfprintf_r+0x31e>
 80093fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093fc:	06dd      	lsls	r5, r3, #27
 80093fe:	f102 0104 	add.w	r1, r2, #4
 8009402:	f100 8261 	bmi.w	80098c8 <_svfprintf_r+0xd38>
 8009406:	065c      	lsls	r4, r3, #25
 8009408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800940a:	f140 825a 	bpl.w	80098c2 <_svfprintf_r+0xd32>
 800940e:	8814      	ldrh	r4, [r2, #0]
 8009410:	9109      	str	r1, [sp, #36]	; 0x24
 8009412:	2500      	movs	r5, #0
 8009414:	2201      	movs	r2, #1
 8009416:	e4b3      	b.n	8008d80 <_svfprintf_r+0x1f0>
 8009418:	2f00      	cmp	r7, #0
 800941a:	f43f aeb4 	beq.w	8009186 <_svfprintf_r+0x5f6>
 800941e:	2300      	movs	r3, #0
 8009420:	2101      	movs	r1, #1
 8009422:	461a      	mov	r2, r3
 8009424:	9104      	str	r1, [sp, #16]
 8009426:	f88d 70f4 	strb.w	r7, [sp, #244]	; 0xf4
 800942a:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 800942e:	930a      	str	r3, [sp, #40]	; 0x28
 8009430:	469a      	mov	sl, r3
 8009432:	930f      	str	r3, [sp, #60]	; 0x3c
 8009434:	9314      	str	r3, [sp, #80]	; 0x50
 8009436:	9311      	str	r3, [sp, #68]	; 0x44
 8009438:	9108      	str	r1, [sp, #32]
 800943a:	ae3d      	add	r6, sp, #244	; 0xf4
 800943c:	e594      	b.n	8008f68 <_svfprintf_r+0x3d8>
 800943e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009440:	ae56      	add	r6, sp, #344	; 0x158
 8009442:	0923      	lsrs	r3, r4, #4
 8009444:	f004 010f 	and.w	r1, r4, #15
 8009448:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800944c:	092a      	lsrs	r2, r5, #4
 800944e:	461c      	mov	r4, r3
 8009450:	4615      	mov	r5, r2
 8009452:	5c43      	ldrb	r3, [r0, r1]
 8009454:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8009458:	ea54 0305 	orrs.w	r3, r4, r5
 800945c:	d1f1      	bne.n	8009442 <_svfprintf_r+0x8b2>
 800945e:	9b04      	ldr	r3, [sp, #16]
 8009460:	1b9b      	subs	r3, r3, r6
 8009462:	9308      	str	r3, [sp, #32]
 8009464:	e4a9      	b.n	8008dba <_svfprintf_r+0x22a>
 8009466:	bf00      	nop
 8009468:	0800cba8 	.word	0x0800cba8
 800946c:	0800cb94 	.word	0x0800cb94
 8009470:	7fefffff 	.word	0x7fefffff
 8009474:	0800cb88 	.word	0x0800cb88
 8009478:	0800cb84 	.word	0x0800cb84
 800947c:	2f65      	cmp	r7, #101	; 0x65
 800947e:	f340 80dc 	ble.w	800963a <_svfprintf_r+0xaaa>
 8009482:	2200      	movs	r2, #0
 8009484:	2300      	movs	r3, #0
 8009486:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800948a:	f7f7 fc57 	bl	8000d3c <__aeabi_dcmpeq>
 800948e:	2800      	cmp	r0, #0
 8009490:	f000 8160 	beq.w	8009754 <_svfprintf_r+0xbc4>
 8009494:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009496:	4aad      	ldr	r2, [pc, #692]	; (800974c <_svfprintf_r+0xbbc>)
 8009498:	f8c9 2000 	str.w	r2, [r9]
 800949c:	3301      	adds	r3, #1
 800949e:	3401      	adds	r4, #1
 80094a0:	2201      	movs	r2, #1
 80094a2:	2b07      	cmp	r3, #7
 80094a4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 80094a8:	f8c9 2004 	str.w	r2, [r9, #4]
 80094ac:	f300 843c 	bgt.w	8009d28 <_svfprintf_r+0x1198>
 80094b0:	f109 0908 	add.w	r9, r9, #8
 80094b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80094b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80094b8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80094ba:	4293      	cmp	r3, r2
 80094bc:	f280 81e9 	bge.w	8009892 <_svfprintf_r+0xd02>
 80094c0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80094c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094c4:	f8c9 2000 	str.w	r2, [r9]
 80094c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094ca:	f8c9 2004 	str.w	r2, [r9, #4]
 80094ce:	3301      	adds	r3, #1
 80094d0:	4414      	add	r4, r2
 80094d2:	2b07      	cmp	r3, #7
 80094d4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 80094d8:	f300 82ee 	bgt.w	8009ab8 <_svfprintf_r+0xf28>
 80094dc:	f109 0908 	add.w	r9, r9, #8
 80094e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094e2:	1e5d      	subs	r5, r3, #1
 80094e4:	2d00      	cmp	r5, #0
 80094e6:	f77f adfd 	ble.w	80090e4 <_svfprintf_r+0x554>
 80094ea:	2d10      	cmp	r5, #16
 80094ec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80094ee:	4b98      	ldr	r3, [pc, #608]	; (8009750 <_svfprintf_r+0xbc0>)
 80094f0:	f340 8403 	ble.w	8009cfa <_svfprintf_r+0x116a>
 80094f4:	4619      	mov	r1, r3
 80094f6:	2610      	movs	r6, #16
 80094f8:	4623      	mov	r3, r4
 80094fa:	9f03      	ldr	r7, [sp, #12]
 80094fc:	f8dd a018 	ldr.w	sl, [sp, #24]
 8009500:	460c      	mov	r4, r1
 8009502:	e005      	b.n	8009510 <_svfprintf_r+0x980>
 8009504:	f109 0908 	add.w	r9, r9, #8
 8009508:	3d10      	subs	r5, #16
 800950a:	2d10      	cmp	r5, #16
 800950c:	f340 83f2 	ble.w	8009cf4 <_svfprintf_r+0x1164>
 8009510:	3201      	adds	r2, #1
 8009512:	3310      	adds	r3, #16
 8009514:	2a07      	cmp	r2, #7
 8009516:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
 800951a:	e9c9 4600 	strd	r4, r6, [r9]
 800951e:	ddf1      	ble.n	8009504 <_svfprintf_r+0x974>
 8009520:	aa2a      	add	r2, sp, #168	; 0xa8
 8009522:	4651      	mov	r1, sl
 8009524:	4638      	mov	r0, r7
 8009526:	f002 ff9f 	bl	800c468 <__ssprint_r>
 800952a:	2800      	cmp	r0, #0
 800952c:	f47f ac03 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009530:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
 8009534:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009538:	e7e6      	b.n	8009508 <_svfprintf_r+0x978>
 800953a:	9b07      	ldr	r3, [sp, #28]
 800953c:	9a04      	ldr	r2, [sp, #16]
 800953e:	1a9d      	subs	r5, r3, r2
 8009540:	2d00      	cmp	r5, #0
 8009542:	f77f ad81 	ble.w	8009048 <_svfprintf_r+0x4b8>
 8009546:	2d10      	cmp	r5, #16
 8009548:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800954a:	4b81      	ldr	r3, [pc, #516]	; (8009750 <_svfprintf_r+0xbc0>)
 800954c:	dd25      	ble.n	800959a <_svfprintf_r+0xa0a>
 800954e:	4649      	mov	r1, r9
 8009550:	4620      	mov	r0, r4
 8009552:	46b1      	mov	r9, r6
 8009554:	461c      	mov	r4, r3
 8009556:	9e06      	ldr	r6, [sp, #24]
 8009558:	e004      	b.n	8009564 <_svfprintf_r+0x9d4>
 800955a:	3d10      	subs	r5, #16
 800955c:	2d10      	cmp	r5, #16
 800955e:	f101 0108 	add.w	r1, r1, #8
 8009562:	dd16      	ble.n	8009592 <_svfprintf_r+0xa02>
 8009564:	3201      	adds	r2, #1
 8009566:	3010      	adds	r0, #16
 8009568:	2310      	movs	r3, #16
 800956a:	2a07      	cmp	r2, #7
 800956c:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
 8009570:	600c      	str	r4, [r1, #0]
 8009572:	604b      	str	r3, [r1, #4]
 8009574:	ddf1      	ble.n	800955a <_svfprintf_r+0x9ca>
 8009576:	aa2a      	add	r2, sp, #168	; 0xa8
 8009578:	4631      	mov	r1, r6
 800957a:	9803      	ldr	r0, [sp, #12]
 800957c:	f002 ff74 	bl	800c468 <__ssprint_r>
 8009580:	2800      	cmp	r0, #0
 8009582:	f47f abd8 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009586:	3d10      	subs	r5, #16
 8009588:	2d10      	cmp	r5, #16
 800958a:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
 800958e:	a92d      	add	r1, sp, #180	; 0xb4
 8009590:	dce8      	bgt.n	8009564 <_svfprintf_r+0x9d4>
 8009592:	464e      	mov	r6, r9
 8009594:	4623      	mov	r3, r4
 8009596:	4689      	mov	r9, r1
 8009598:	4604      	mov	r4, r0
 800959a:	3201      	adds	r2, #1
 800959c:	442c      	add	r4, r5
 800959e:	2a07      	cmp	r2, #7
 80095a0:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 80095a4:	e9c9 3500 	strd	r3, r5, [r9]
 80095a8:	f300 83b1 	bgt.w	8009d0e <_svfprintf_r+0x117e>
 80095ac:	f109 0908 	add.w	r9, r9, #8
 80095b0:	e54a      	b.n	8009048 <_svfprintf_r+0x4b8>
 80095b2:	aa2a      	add	r2, sp, #168	; 0xa8
 80095b4:	9906      	ldr	r1, [sp, #24]
 80095b6:	9803      	ldr	r0, [sp, #12]
 80095b8:	f002 ff56 	bl	800c468 <__ssprint_r>
 80095bc:	2800      	cmp	r0, #0
 80095be:	f43f add3 	beq.w	8009168 <_svfprintf_r+0x5d8>
 80095c2:	f7ff bbb8 	b.w	8008d36 <_svfprintf_r+0x1a6>
 80095c6:	aa2a      	add	r2, sp, #168	; 0xa8
 80095c8:	9906      	ldr	r1, [sp, #24]
 80095ca:	9803      	ldr	r0, [sp, #12]
 80095cc:	f002 ff4c 	bl	800c468 <__ssprint_r>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	f47f abb0 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 80095d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80095d8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80095da:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 80095de:	b91b      	cbnz	r3, 80095e8 <_svfprintf_r+0xa58>
 80095e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095e2:	2a00      	cmp	r2, #0
 80095e4:	f000 8492 	beq.w	8009f0c <_svfprintf_r+0x137c>
 80095e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80095ea:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80095ec:	f8c9 1000 	str.w	r1, [r9]
 80095f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80095f2:	f8c9 1004 	str.w	r1, [r9, #4]
 80095f6:	3201      	adds	r2, #1
 80095f8:	440c      	add	r4, r1
 80095fa:	2a07      	cmp	r2, #7
 80095fc:	942c      	str	r4, [sp, #176]	; 0xb0
 80095fe:	922b      	str	r2, [sp, #172]	; 0xac
 8009600:	f300 85a7 	bgt.w	800a152 <_svfprintf_r+0x15c2>
 8009604:	f109 0908 	add.w	r9, r9, #8
 8009608:	2b00      	cmp	r3, #0
 800960a:	f2c0 8620 	blt.w	800a24e <_svfprintf_r+0x16be>
 800960e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009610:	3201      	adds	r2, #1
 8009612:	441c      	add	r4, r3
 8009614:	2a07      	cmp	r2, #7
 8009616:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 800961a:	e9c9 6300 	strd	r6, r3, [r9]
 800961e:	f77f ad5f 	ble.w	80090e0 <_svfprintf_r+0x550>
 8009622:	aa2a      	add	r2, sp, #168	; 0xa8
 8009624:	9906      	ldr	r1, [sp, #24]
 8009626:	9803      	ldr	r0, [sp, #12]
 8009628:	f002 ff1e 	bl	800c468 <__ssprint_r>
 800962c:	2800      	cmp	r0, #0
 800962e:	f47f ab82 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009632:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009634:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009638:	e554      	b.n	80090e4 <_svfprintf_r+0x554>
 800963a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800963c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800963e:	2a01      	cmp	r2, #1
 8009640:	f104 0401 	add.w	r4, r4, #1
 8009644:	f103 0501 	add.w	r5, r3, #1
 8009648:	f109 0708 	add.w	r7, r9, #8
 800964c:	f340 810e 	ble.w	800986c <_svfprintf_r+0xcdc>
 8009650:	2301      	movs	r3, #1
 8009652:	2d07      	cmp	r5, #7
 8009654:	f8c9 6000 	str.w	r6, [r9]
 8009658:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
 800965c:	f8c9 3004 	str.w	r3, [r9, #4]
 8009660:	f300 831d 	bgt.w	8009c9e <_svfprintf_r+0x110e>
 8009664:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009666:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009668:	1c69      	adds	r1, r5, #1
 800966a:	441c      	add	r4, r3
 800966c:	2907      	cmp	r1, #7
 800966e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009670:	e9cd 142b 	strd	r1, r4, [sp, #172]	; 0xac
 8009674:	e9c7 2300 	strd	r2, r3, [r7]
 8009678:	f300 831d 	bgt.w	8009cb6 <_svfprintf_r+0x1126>
 800967c:	3708      	adds	r7, #8
 800967e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009680:	1c53      	adds	r3, r2, #1
 8009682:	461d      	mov	r5, r3
 8009684:	9508      	str	r5, [sp, #32]
 8009686:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009688:	930e      	str	r3, [sp, #56]	; 0x38
 800968a:	2200      	movs	r2, #0
 800968c:	2300      	movs	r3, #0
 800968e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009692:	f105 3aff 	add.w	sl, r5, #4294967295
 8009696:	f107 0908 	add.w	r9, r7, #8
 800969a:	f7f7 fb4f 	bl	8000d3c <__aeabi_dcmpeq>
 800969e:	2800      	cmp	r0, #0
 80096a0:	f040 80a7 	bne.w	80097f2 <_svfprintf_r+0xc62>
 80096a4:	9d08      	ldr	r5, [sp, #32]
 80096a6:	f8c7 a004 	str.w	sl, [r7, #4]
 80096aa:	3601      	adds	r6, #1
 80096ac:	4454      	add	r4, sl
 80096ae:	2d07      	cmp	r5, #7
 80096b0:	603e      	str	r6, [r7, #0]
 80096b2:	942c      	str	r4, [sp, #176]	; 0xb0
 80096b4:	952b      	str	r5, [sp, #172]	; 0xac
 80096b6:	f300 81ef 	bgt.w	8009a98 <_svfprintf_r+0xf08>
 80096ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096bc:	f107 0310 	add.w	r3, r7, #16
 80096c0:	3202      	adds	r2, #2
 80096c2:	464f      	mov	r7, r9
 80096c4:	9208      	str	r2, [sp, #32]
 80096c6:	4699      	mov	r9, r3
 80096c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	4414      	add	r4, r2
 80096ce:	9a08      	ldr	r2, [sp, #32]
 80096d0:	942c      	str	r4, [sp, #176]	; 0xb0
 80096d2:	ab26      	add	r3, sp, #152	; 0x98
 80096d4:	2a07      	cmp	r2, #7
 80096d6:	922b      	str	r2, [sp, #172]	; 0xac
 80096d8:	603b      	str	r3, [r7, #0]
 80096da:	f77f ad03 	ble.w	80090e4 <_svfprintf_r+0x554>
 80096de:	e7a0      	b.n	8009622 <_svfprintf_r+0xa92>
 80096e0:	2a01      	cmp	r2, #1
 80096e2:	4698      	mov	r8, r3
 80096e4:	f47f abb9 	bne.w	8008e5a <_svfprintf_r+0x2ca>
 80096e8:	2d00      	cmp	r5, #0
 80096ea:	bf08      	it	eq
 80096ec:	2c0a      	cmpeq	r4, #10
 80096ee:	f080 8293 	bcs.w	8009c18 <_svfprintf_r+0x1088>
 80096f2:	ae56      	add	r6, sp, #344	; 0x158
 80096f4:	3430      	adds	r4, #48	; 0x30
 80096f6:	2301      	movs	r3, #1
 80096f8:	f806 4d01 	strb.w	r4, [r6, #-1]!
 80096fc:	9308      	str	r3, [sp, #32]
 80096fe:	f7ff bb5c 	b.w	8008dba <_svfprintf_r+0x22a>
 8009702:	aa2a      	add	r2, sp, #168	; 0xa8
 8009704:	9906      	ldr	r1, [sp, #24]
 8009706:	9803      	ldr	r0, [sp, #12]
 8009708:	f002 feae 	bl	800c468 <__ssprint_r>
 800970c:	2800      	cmp	r0, #0
 800970e:	f47f ab12 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009712:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009714:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009718:	e482      	b.n	8009020 <_svfprintf_r+0x490>
 800971a:	aa2a      	add	r2, sp, #168	; 0xa8
 800971c:	9906      	ldr	r1, [sp, #24]
 800971e:	9803      	ldr	r0, [sp, #12]
 8009720:	f002 fea2 	bl	800c468 <__ssprint_r>
 8009724:	2800      	cmp	r0, #0
 8009726:	f47f ab06 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 800972a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800972c:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009730:	e486      	b.n	8009040 <_svfprintf_r+0x4b0>
 8009732:	aa2a      	add	r2, sp, #168	; 0xa8
 8009734:	9906      	ldr	r1, [sp, #24]
 8009736:	9803      	ldr	r0, [sp, #12]
 8009738:	f002 fe96 	bl	800c468 <__ssprint_r>
 800973c:	2800      	cmp	r0, #0
 800973e:	f47f aafa 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009742:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009744:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009748:	e4b9      	b.n	80090be <_svfprintf_r+0x52e>
 800974a:	bf00      	nop
 800974c:	0800cbc4 	.word	0x0800cbc4
 8009750:	0800cbd8 	.word	0x0800cbd8
 8009754:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009756:	2b00      	cmp	r3, #0
 8009758:	f340 8175 	ble.w	8009a46 <_svfprintf_r+0xeb6>
 800975c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009760:	4293      	cmp	r3, r2
 8009762:	bfa8      	it	ge
 8009764:	4613      	movge	r3, r2
 8009766:	2b00      	cmp	r3, #0
 8009768:	461d      	mov	r5, r3
 800976a:	dd0d      	ble.n	8009788 <_svfprintf_r+0xbf8>
 800976c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800976e:	f8c9 6000 	str.w	r6, [r9]
 8009772:	3301      	adds	r3, #1
 8009774:	442c      	add	r4, r5
 8009776:	2b07      	cmp	r3, #7
 8009778:	942c      	str	r4, [sp, #176]	; 0xb0
 800977a:	f8c9 5004 	str.w	r5, [r9, #4]
 800977e:	932b      	str	r3, [sp, #172]	; 0xac
 8009780:	f300 84be 	bgt.w	800a100 <_svfprintf_r+0x1570>
 8009784:	f109 0908 	add.w	r9, r9, #8
 8009788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800978a:	2d00      	cmp	r5, #0
 800978c:	bfa8      	it	ge
 800978e:	1b5b      	subge	r3, r3, r5
 8009790:	2b00      	cmp	r3, #0
 8009792:	461d      	mov	r5, r3
 8009794:	f340 81d4 	ble.w	8009b40 <_svfprintf_r+0xfb0>
 8009798:	2d10      	cmp	r5, #16
 800979a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800979c:	4bbc      	ldr	r3, [pc, #752]	; (8009a90 <_svfprintf_r+0xf00>)
 800979e:	f340 81bb 	ble.w	8009b18 <_svfprintf_r+0xf88>
 80097a2:	4618      	mov	r0, r3
 80097a4:	4621      	mov	r1, r4
 80097a6:	464b      	mov	r3, r9
 80097a8:	2710      	movs	r7, #16
 80097aa:	46b1      	mov	r9, r6
 80097ac:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80097b0:	9c06      	ldr	r4, [sp, #24]
 80097b2:	4606      	mov	r6, r0
 80097b4:	e004      	b.n	80097c0 <_svfprintf_r+0xc30>
 80097b6:	3308      	adds	r3, #8
 80097b8:	3d10      	subs	r5, #16
 80097ba:	2d10      	cmp	r5, #16
 80097bc:	f340 81a7 	ble.w	8009b0e <_svfprintf_r+0xf7e>
 80097c0:	3201      	adds	r2, #1
 80097c2:	3110      	adds	r1, #16
 80097c4:	2a07      	cmp	r2, #7
 80097c6:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
 80097ca:	e9c3 6700 	strd	r6, r7, [r3]
 80097ce:	ddf2      	ble.n	80097b6 <_svfprintf_r+0xc26>
 80097d0:	aa2a      	add	r2, sp, #168	; 0xa8
 80097d2:	4621      	mov	r1, r4
 80097d4:	4650      	mov	r0, sl
 80097d6:	f002 fe47 	bl	800c468 <__ssprint_r>
 80097da:	2800      	cmp	r0, #0
 80097dc:	f47f aaab 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 80097e0:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
 80097e4:	ab2d      	add	r3, sp, #180	; 0xb4
 80097e6:	e7e7      	b.n	80097b8 <_svfprintf_r+0xc28>
 80097e8:	f8cd a020 	str.w	sl, [sp, #32]
 80097ec:	ae56      	add	r6, sp, #344	; 0x158
 80097ee:	f7ff bae4 	b.w	8008dba <_svfprintf_r+0x22a>
 80097f2:	f1ba 0f00 	cmp.w	sl, #0
 80097f6:	f77f af67 	ble.w	80096c8 <_svfprintf_r+0xb38>
 80097fa:	f1ba 0f10 	cmp.w	sl, #16
 80097fe:	4ba4      	ldr	r3, [pc, #656]	; (8009a90 <_svfprintf_r+0xf00>)
 8009800:	f340 864e 	ble.w	800a4a0 <_svfprintf_r+0x1910>
 8009804:	4619      	mov	r1, r3
 8009806:	4622      	mov	r2, r4
 8009808:	463b      	mov	r3, r7
 800980a:	2610      	movs	r6, #16
 800980c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009810:	9c06      	ldr	r4, [sp, #24]
 8009812:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009814:	460f      	mov	r7, r1
 8009816:	e007      	b.n	8009828 <_svfprintf_r+0xc98>
 8009818:	3308      	adds	r3, #8
 800981a:	f1aa 0a10 	sub.w	sl, sl, #16
 800981e:	f1ba 0f10 	cmp.w	sl, #16
 8009822:	f340 828d 	ble.w	8009d40 <_svfprintf_r+0x11b0>
 8009826:	3501      	adds	r5, #1
 8009828:	3210      	adds	r2, #16
 800982a:	2d07      	cmp	r5, #7
 800982c:	e9cd 522b 	strd	r5, r2, [sp, #172]	; 0xac
 8009830:	e9c3 7600 	strd	r7, r6, [r3]
 8009834:	ddf0      	ble.n	8009818 <_svfprintf_r+0xc88>
 8009836:	aa2a      	add	r2, sp, #168	; 0xa8
 8009838:	4621      	mov	r1, r4
 800983a:	4648      	mov	r0, r9
 800983c:	f002 fe14 	bl	800c468 <__ssprint_r>
 8009840:	2800      	cmp	r0, #0
 8009842:	f47f aa78 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009846:	e9dd 522b 	ldrd	r5, r2, [sp, #172]	; 0xac
 800984a:	ab2d      	add	r3, sp, #180	; 0xb4
 800984c:	e7e5      	b.n	800981a <_svfprintf_r+0xc8a>
 800984e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009850:	f018 0f10 	tst.w	r8, #16
 8009854:	f102 0304 	add.w	r3, r2, #4
 8009858:	d140      	bne.n	80098dc <_svfprintf_r+0xd4c>
 800985a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800985e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009860:	d038      	beq.n	80098d4 <_svfprintf_r+0xd44>
 8009862:	8814      	ldrh	r4, [r2, #0]
 8009864:	9309      	str	r3, [sp, #36]	; 0x24
 8009866:	2500      	movs	r5, #0
 8009868:	f7ff ba87 	b.w	8008d7a <_svfprintf_r+0x1ea>
 800986c:	f018 0f01 	tst.w	r8, #1
 8009870:	f47f aeee 	bne.w	8009650 <_svfprintf_r+0xac0>
 8009874:	2201      	movs	r2, #1
 8009876:	2d07      	cmp	r5, #7
 8009878:	f8c9 6000 	str.w	r6, [r9]
 800987c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
 8009880:	f8c9 2004 	str.w	r2, [r9, #4]
 8009884:	f300 8108 	bgt.w	8009a98 <_svfprintf_r+0xf08>
 8009888:	3302      	adds	r3, #2
 800988a:	9308      	str	r3, [sp, #32]
 800988c:	f109 0910 	add.w	r9, r9, #16
 8009890:	e71a      	b.n	80096c8 <_svfprintf_r+0xb38>
 8009892:	f018 0f01 	tst.w	r8, #1
 8009896:	f47f ae13 	bne.w	80094c0 <_svfprintf_r+0x930>
 800989a:	e423      	b.n	80090e4 <_svfprintf_r+0x554>
 800989c:	aa2a      	add	r2, sp, #168	; 0xa8
 800989e:	9906      	ldr	r1, [sp, #24]
 80098a0:	9803      	ldr	r0, [sp, #12]
 80098a2:	f002 fde1 	bl	800c468 <__ssprint_r>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f47f aa45 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 80098ac:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80098ae:	e450      	b.n	8009152 <_svfprintf_r+0x5c2>
 80098b0:	f418 7f00 	tst.w	r8, #512	; 0x200
 80098b4:	f040 830d 	bne.w	8009ed2 <_svfprintf_r+0x1342>
 80098b8:	6814      	ldr	r4, [r2, #0]
 80098ba:	9309      	str	r3, [sp, #36]	; 0x24
 80098bc:	2500      	movs	r5, #0
 80098be:	f7ff bb10 	b.w	8008ee2 <_svfprintf_r+0x352>
 80098c2:	0598      	lsls	r0, r3, #22
 80098c4:	f100 830f 	bmi.w	8009ee6 <_svfprintf_r+0x1356>
 80098c8:	6814      	ldr	r4, [r2, #0]
 80098ca:	9109      	str	r1, [sp, #36]	; 0x24
 80098cc:	2201      	movs	r2, #1
 80098ce:	2500      	movs	r5, #0
 80098d0:	f7ff ba56 	b.w	8008d80 <_svfprintf_r+0x1f0>
 80098d4:	f418 7f00 	tst.w	r8, #512	; 0x200
 80098d8:	f040 8313 	bne.w	8009f02 <_svfprintf_r+0x1372>
 80098dc:	6814      	ldr	r4, [r2, #0]
 80098de:	9309      	str	r3, [sp, #36]	; 0x24
 80098e0:	2500      	movs	r5, #0
 80098e2:	f7ff ba4a 	b.w	8008d7a <_svfprintf_r+0x1ea>
 80098e6:	0598      	lsls	r0, r3, #22
 80098e8:	f100 8303 	bmi.w	8009ef2 <_svfprintf_r+0x1362>
 80098ec:	680c      	ldr	r4, [r1, #0]
 80098ee:	9209      	str	r2, [sp, #36]	; 0x24
 80098f0:	17e5      	asrs	r5, r4, #31
 80098f2:	4620      	mov	r0, r4
 80098f4:	4629      	mov	r1, r5
 80098f6:	f7ff ba96 	b.w	8008e26 <_svfprintf_r+0x296>
 80098fa:	9a05      	ldr	r2, [sp, #20]
 80098fc:	4610      	mov	r0, r2
 80098fe:	17d1      	asrs	r1, r2, #31
 8009900:	e9c3 0100 	strd	r0, r1, [r3]
 8009904:	465e      	mov	r6, fp
 8009906:	e43a      	b.n	800917e <_svfprintf_r+0x5ee>
 8009908:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	f7f7 fa46 	bl	8000da0 <__aeabi_dcmpun>
 8009914:	2800      	cmp	r0, #0
 8009916:	f040 8599 	bne.w	800a44c <_svfprintf_r+0x18bc>
 800991a:	2f61      	cmp	r7, #97	; 0x61
 800991c:	f000 8407 	beq.w	800a12e <_svfprintf_r+0x159e>
 8009920:	2f41      	cmp	r7, #65	; 0x41
 8009922:	f000 82f9 	beq.w	8009f18 <_svfprintf_r+0x1388>
 8009926:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 800992a:	f027 0220 	bic.w	r2, r7, #32
 800992e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009932:	930e      	str	r3, [sp, #56]	; 0x38
 8009934:	9204      	str	r2, [sp, #16]
 8009936:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009938:	f000 851f 	beq.w	800a37a <_svfprintf_r+0x17ea>
 800993c:	2a47      	cmp	r2, #71	; 0x47
 800993e:	f000 8516 	beq.w	800a36e <_svfprintf_r+0x17de>
 8009942:	2b00      	cmp	r3, #0
 8009944:	f2c0 83e9 	blt.w	800a11a <_svfprintf_r+0x158a>
 8009948:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 800994c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8009950:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8009954:	2f66      	cmp	r7, #102	; 0x66
 8009956:	f000 84dd 	beq.w	800a314 <_svfprintf_r+0x1784>
 800995a:	2f46      	cmp	r7, #70	; 0x46
 800995c:	f000 8562 	beq.w	800a424 <_svfprintf_r+0x1894>
 8009960:	9b04      	ldr	r3, [sp, #16]
 8009962:	9803      	ldr	r0, [sp, #12]
 8009964:	2b45      	cmp	r3, #69	; 0x45
 8009966:	bf0c      	ite	eq
 8009968:	f10a 0501 	addeq.w	r5, sl, #1
 800996c:	4655      	movne	r5, sl
 800996e:	aa28      	add	r2, sp, #160	; 0xa0
 8009970:	ab25      	add	r3, sp, #148	; 0x94
 8009972:	e9cd 3200 	strd	r3, r2, [sp]
 8009976:	2102      	movs	r1, #2
 8009978:	ab24      	add	r3, sp, #144	; 0x90
 800997a:	462a      	mov	r2, r5
 800997c:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 8009980:	f000 fede 	bl	800a740 <_dtoa_r>
 8009984:	2f67      	cmp	r7, #103	; 0x67
 8009986:	4606      	mov	r6, r0
 8009988:	f040 8595 	bne.w	800a4b6 <_svfprintf_r+0x1926>
 800998c:	f018 0f01 	tst.w	r8, #1
 8009990:	f040 84f7 	bne.w	800a382 <_svfprintf_r+0x17f2>
 8009994:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009996:	4640      	mov	r0, r8
 8009998:	1b9b      	subs	r3, r3, r6
 800999a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800999e:	9310      	str	r3, [sp, #64]	; 0x40
 80099a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80099a2:	9311      	str	r3, [sp, #68]	; 0x44
 80099a4:	9b04      	ldr	r3, [sp, #16]
 80099a6:	2b47      	cmp	r3, #71	; 0x47
 80099a8:	f000 8371 	beq.w	800a08e <_svfprintf_r+0x14fe>
 80099ac:	9b04      	ldr	r3, [sp, #16]
 80099ae:	2b46      	cmp	r3, #70	; 0x46
 80099b0:	f000 8407 	beq.w	800a1c2 <_svfprintf_r+0x1632>
 80099b4:	9904      	ldr	r1, [sp, #16]
 80099b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099b8:	b2fa      	uxtb	r2, r7
 80099ba:	2941      	cmp	r1, #65	; 0x41
 80099bc:	bf08      	it	eq
 80099be:	320f      	addeq	r2, #15
 80099c0:	f103 33ff 	add.w	r3, r3, #4294967295
 80099c4:	bf06      	itte	eq
 80099c6:	b2d2      	uxtbeq	r2, r2
 80099c8:	2101      	moveq	r1, #1
 80099ca:	2100      	movne	r1, #0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	9324      	str	r3, [sp, #144]	; 0x90
 80099d0:	bfb8      	it	lt
 80099d2:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
 80099d4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 80099d8:	bfba      	itte	lt
 80099da:	f1c3 0301 	rsblt	r3, r3, #1
 80099de:	222d      	movlt	r2, #45	; 0x2d
 80099e0:	222b      	movge	r2, #43	; 0x2b
 80099e2:	2b09      	cmp	r3, #9
 80099e4:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
 80099e8:	f300 84e5 	bgt.w	800a3b6 <_svfprintf_r+0x1826>
 80099ec:	2900      	cmp	r1, #0
 80099ee:	f040 856a 	bne.w	800a4c6 <_svfprintf_r+0x1936>
 80099f2:	2230      	movs	r2, #48	; 0x30
 80099f4:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
 80099f8:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
 80099fc:	3330      	adds	r3, #48	; 0x30
 80099fe:	7013      	strb	r3, [r2, #0]
 8009a00:	1c53      	adds	r3, r2, #1
 8009a02:	aa26      	add	r2, sp, #152	; 0x98
 8009a04:	1a9b      	subs	r3, r3, r2
 8009a06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a08:	9319      	str	r3, [sp, #100]	; 0x64
 8009a0a:	2a01      	cmp	r2, #1
 8009a0c:	4413      	add	r3, r2
 8009a0e:	9308      	str	r3, [sp, #32]
 8009a10:	f340 8528 	ble.w	800a464 <_svfprintf_r+0x18d4>
 8009a14:	9b08      	ldr	r3, [sp, #32]
 8009a16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009a18:	4413      	add	r3, r2
 8009a1a:	9308      	str	r3, [sp, #32]
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a20:	9314      	str	r3, [sp, #80]	; 0x50
 8009a22:	9311      	str	r3, [sp, #68]	; 0x44
 8009a24:	9b08      	ldr	r3, [sp, #32]
 8009a26:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8009a2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a2e:	f440 7880 	orr.w	r8, r0, #256	; 0x100
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f040 833c 	bne.w	800a0b4 <_svfprintf_r+0x1524>
 8009a3c:	469a      	mov	sl, r3
 8009a3e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8009a42:	f7ff b9c6 	b.w	8008dd2 <_svfprintf_r+0x242>
 8009a46:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009a48:	4912      	ldr	r1, [pc, #72]	; (8009a94 <_svfprintf_r+0xf04>)
 8009a4a:	f8c9 1000 	str.w	r1, [r9]
 8009a4e:	3201      	adds	r2, #1
 8009a50:	3401      	adds	r4, #1
 8009a52:	2101      	movs	r1, #1
 8009a54:	2a07      	cmp	r2, #7
 8009a56:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8009a5a:	f8c9 1004 	str.w	r1, [r9, #4]
 8009a5e:	f73f adb2 	bgt.w	80095c6 <_svfprintf_r+0xa36>
 8009a62:	f109 0908 	add.w	r9, r9, #8
 8009a66:	e5ba      	b.n	80095de <_svfprintf_r+0xa4e>
 8009a68:	2140      	movs	r1, #64	; 0x40
 8009a6a:	9803      	ldr	r0, [sp, #12]
 8009a6c:	f001 feca 	bl	800b804 <_malloc_r>
 8009a70:	9b06      	ldr	r3, [sp, #24]
 8009a72:	6018      	str	r0, [r3, #0]
 8009a74:	6118      	str	r0, [r3, #16]
 8009a76:	2800      	cmp	r0, #0
 8009a78:	f000 8553 	beq.w	800a522 <_svfprintf_r+0x1992>
 8009a7c:	9a06      	ldr	r2, [sp, #24]
 8009a7e:	2340      	movs	r3, #64	; 0x40
 8009a80:	6153      	str	r3, [r2, #20]
 8009a82:	f7ff b89c 	b.w	8008bbe <_svfprintf_r+0x2e>
 8009a86:	4252      	negs	r2, r2
 8009a88:	9207      	str	r2, [sp, #28]
 8009a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a8c:	f7ff ba56 	b.w	8008f3c <_svfprintf_r+0x3ac>
 8009a90:	0800cbd8 	.word	0x0800cbd8
 8009a94:	0800cbc4 	.word	0x0800cbc4
 8009a98:	aa2a      	add	r2, sp, #168	; 0xa8
 8009a9a:	9906      	ldr	r1, [sp, #24]
 8009a9c:	9803      	ldr	r0, [sp, #12]
 8009a9e:	f002 fce3 	bl	800c468 <__ssprint_r>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f47f a947 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009aa8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8009aac:	3301      	adds	r3, #1
 8009aae:	9308      	str	r3, [sp, #32]
 8009ab0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 8009ab4:	af2d      	add	r7, sp, #180	; 0xb4
 8009ab6:	e607      	b.n	80096c8 <_svfprintf_r+0xb38>
 8009ab8:	aa2a      	add	r2, sp, #168	; 0xa8
 8009aba:	9906      	ldr	r1, [sp, #24]
 8009abc:	9803      	ldr	r0, [sp, #12]
 8009abe:	f002 fcd3 	bl	800c468 <__ssprint_r>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	f47f a937 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009ac8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009aca:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009ace:	e507      	b.n	80094e0 <_svfprintf_r+0x950>
 8009ad0:	4653      	mov	r3, sl
 8009ad2:	2b06      	cmp	r3, #6
 8009ad4:	bf28      	it	cs
 8009ad6:	2306      	movcs	r3, #6
 8009ad8:	46b2      	mov	sl, r6
 8009ada:	960f      	str	r6, [sp, #60]	; 0x3c
 8009adc:	9614      	str	r6, [sp, #80]	; 0x50
 8009ade:	9611      	str	r6, [sp, #68]	; 0x44
 8009ae0:	960a      	str	r6, [sp, #40]	; 0x28
 8009ae2:	4632      	mov	r2, r6
 8009ae4:	9304      	str	r3, [sp, #16]
 8009ae6:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009aea:	4ea4      	ldr	r6, [pc, #656]	; (8009d7c <_svfprintf_r+0x11ec>)
 8009aec:	f7ff b971 	b.w	8008dd2 <_svfprintf_r+0x242>
 8009af0:	aa2a      	add	r2, sp, #168	; 0xa8
 8009af2:	9906      	ldr	r1, [sp, #24]
 8009af4:	9803      	ldr	r0, [sp, #12]
 8009af6:	f002 fcb7 	bl	800c468 <__ssprint_r>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	f47f a91b 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009b00:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8009b04:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009b06:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009b0a:	f7ff ba79 	b.w	8009000 <_svfprintf_r+0x470>
 8009b0e:	460c      	mov	r4, r1
 8009b10:	4631      	mov	r1, r6
 8009b12:	464e      	mov	r6, r9
 8009b14:	4699      	mov	r9, r3
 8009b16:	460b      	mov	r3, r1
 8009b18:	3201      	adds	r2, #1
 8009b1a:	442c      	add	r4, r5
 8009b1c:	2a07      	cmp	r2, #7
 8009b1e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8009b22:	e9c9 3500 	strd	r3, r5, [r9]
 8009b26:	f340 81d1 	ble.w	8009ecc <_svfprintf_r+0x133c>
 8009b2a:	aa2a      	add	r2, sp, #168	; 0xa8
 8009b2c:	9906      	ldr	r1, [sp, #24]
 8009b2e:	9803      	ldr	r0, [sp, #12]
 8009b30:	f002 fc9a 	bl	800c468 <__ssprint_r>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f47f a8fe 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009b3a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009b3c:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009b40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b42:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8009b46:	4433      	add	r3, r6
 8009b48:	469a      	mov	sl, r3
 8009b4a:	f040 811b 	bne.w	8009d84 <_svfprintf_r+0x11f4>
 8009b4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009b50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b52:	4293      	cmp	r3, r2
 8009b54:	db49      	blt.n	8009bea <_svfprintf_r+0x105a>
 8009b56:	f018 0f01 	tst.w	r8, #1
 8009b5a:	d146      	bne.n	8009bea <_svfprintf_r+0x105a>
 8009b5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b5e:	18b5      	adds	r5, r6, r2
 8009b60:	eba5 050a 	sub.w	r5, r5, sl
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	429d      	cmp	r5, r3
 8009b68:	bfa8      	it	ge
 8009b6a:	461d      	movge	r5, r3
 8009b6c:	2d00      	cmp	r5, #0
 8009b6e:	dd0d      	ble.n	8009b8c <_svfprintf_r+0xffc>
 8009b70:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009b72:	f8c9 a000 	str.w	sl, [r9]
 8009b76:	3201      	adds	r2, #1
 8009b78:	442c      	add	r4, r5
 8009b7a:	2a07      	cmp	r2, #7
 8009b7c:	942c      	str	r4, [sp, #176]	; 0xb0
 8009b7e:	f8c9 5004 	str.w	r5, [r9, #4]
 8009b82:	922b      	str	r2, [sp, #172]	; 0xac
 8009b84:	f300 833c 	bgt.w	800a200 <_svfprintf_r+0x1670>
 8009b88:	f109 0908 	add.w	r9, r9, #8
 8009b8c:	2d00      	cmp	r5, #0
 8009b8e:	bfac      	ite	ge
 8009b90:	1b5d      	subge	r5, r3, r5
 8009b92:	461d      	movlt	r5, r3
 8009b94:	2d00      	cmp	r5, #0
 8009b96:	f77f aaa5 	ble.w	80090e4 <_svfprintf_r+0x554>
 8009b9a:	2d10      	cmp	r5, #16
 8009b9c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009b9e:	4b78      	ldr	r3, [pc, #480]	; (8009d80 <_svfprintf_r+0x11f0>)
 8009ba0:	f340 80ab 	ble.w	8009cfa <_svfprintf_r+0x116a>
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	2610      	movs	r6, #16
 8009ba8:	4623      	mov	r3, r4
 8009baa:	9f03      	ldr	r7, [sp, #12]
 8009bac:	f8dd a018 	ldr.w	sl, [sp, #24]
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	e005      	b.n	8009bc0 <_svfprintf_r+0x1030>
 8009bb4:	f109 0908 	add.w	r9, r9, #8
 8009bb8:	3d10      	subs	r5, #16
 8009bba:	2d10      	cmp	r5, #16
 8009bbc:	f340 809a 	ble.w	8009cf4 <_svfprintf_r+0x1164>
 8009bc0:	3201      	adds	r2, #1
 8009bc2:	3310      	adds	r3, #16
 8009bc4:	2a07      	cmp	r2, #7
 8009bc6:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
 8009bca:	e9c9 4600 	strd	r4, r6, [r9]
 8009bce:	ddf1      	ble.n	8009bb4 <_svfprintf_r+0x1024>
 8009bd0:	aa2a      	add	r2, sp, #168	; 0xa8
 8009bd2:	4651      	mov	r1, sl
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	f002 fc47 	bl	800c468 <__ssprint_r>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	f47f a8ab 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009be0:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
 8009be4:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009be8:	e7e6      	b.n	8009bb8 <_svfprintf_r+0x1028>
 8009bea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009bec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8009bee:	f8c9 1000 	str.w	r1, [r9]
 8009bf2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009bf4:	f8c9 1004 	str.w	r1, [r9, #4]
 8009bf8:	3201      	adds	r2, #1
 8009bfa:	440c      	add	r4, r1
 8009bfc:	2a07      	cmp	r2, #7
 8009bfe:	942c      	str	r4, [sp, #176]	; 0xb0
 8009c00:	922b      	str	r2, [sp, #172]	; 0xac
 8009c02:	f300 82b5 	bgt.w	800a170 <_svfprintf_r+0x15e0>
 8009c06:	f109 0908 	add.w	r9, r9, #8
 8009c0a:	e7a7      	b.n	8009b5c <_svfprintf_r+0xfcc>
 8009c0c:	2d00      	cmp	r5, #0
 8009c0e:	bf08      	it	eq
 8009c10:	2c0a      	cmpeq	r4, #10
 8009c12:	4698      	mov	r8, r3
 8009c14:	f4ff ad6d 	bcc.w	80096f2 <_svfprintf_r+0xb62>
 8009c18:	f408 6380 	and.w	r3, r8, #1024	; 0x400
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009c22:	970a      	str	r7, [sp, #40]	; 0x28
 8009c24:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8009c28:	ae56      	add	r6, sp, #344	; 0x158
 8009c2a:	4691      	mov	r9, r2
 8009c2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009c30:	461f      	mov	r7, r3
 8009c32:	e00a      	b.n	8009c4a <_svfprintf_r+0x10ba>
 8009c34:	2300      	movs	r3, #0
 8009c36:	4620      	mov	r0, r4
 8009c38:	4629      	mov	r1, r5
 8009c3a:	220a      	movs	r2, #10
 8009c3c:	f7f7 f93e 	bl	8000ebc <__aeabi_uldivmod>
 8009c40:	4604      	mov	r4, r0
 8009c42:	460d      	mov	r5, r1
 8009c44:	ea54 0305 	orrs.w	r3, r4, r5
 8009c48:	d046      	beq.n	8009cd8 <_svfprintf_r+0x1148>
 8009c4a:	220a      	movs	r2, #10
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4620      	mov	r0, r4
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7f7 f933 	bl	8000ebc <__aeabi_uldivmod>
 8009c56:	3230      	adds	r2, #48	; 0x30
 8009c58:	f806 2c01 	strb.w	r2, [r6, #-1]
 8009c5c:	f109 0901 	add.w	r9, r9, #1
 8009c60:	3e01      	subs	r6, #1
 8009c62:	2f00      	cmp	r7, #0
 8009c64:	d0e6      	beq.n	8009c34 <_svfprintf_r+0x10a4>
 8009c66:	f898 3000 	ldrb.w	r3, [r8]
 8009c6a:	4599      	cmp	r9, r3
 8009c6c:	d1e2      	bne.n	8009c34 <_svfprintf_r+0x10a4>
 8009c6e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8009c72:	d0df      	beq.n	8009c34 <_svfprintf_r+0x10a4>
 8009c74:	2d00      	cmp	r5, #0
 8009c76:	bf08      	it	eq
 8009c78:	2c0a      	cmpeq	r4, #10
 8009c7a:	d3db      	bcc.n	8009c34 <_svfprintf_r+0x10a4>
 8009c7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c80:	1af6      	subs	r6, r6, r3
 8009c82:	461a      	mov	r2, r3
 8009c84:	4630      	mov	r0, r6
 8009c86:	f002 fbbd 	bl	800c404 <strncpy>
 8009c8a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 8389 	beq.w	800a3a6 <_svfprintf_r+0x1816>
 8009c94:	f108 0801 	add.w	r8, r8, #1
 8009c98:	f04f 0900 	mov.w	r9, #0
 8009c9c:	e7ca      	b.n	8009c34 <_svfprintf_r+0x10a4>
 8009c9e:	aa2a      	add	r2, sp, #168	; 0xa8
 8009ca0:	9906      	ldr	r1, [sp, #24]
 8009ca2:	9803      	ldr	r0, [sp, #12]
 8009ca4:	f002 fbe0 	bl	800c468 <__ssprint_r>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	f47f a844 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009cae:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
 8009cb2:	af2d      	add	r7, sp, #180	; 0xb4
 8009cb4:	e4d6      	b.n	8009664 <_svfprintf_r+0xad4>
 8009cb6:	aa2a      	add	r2, sp, #168	; 0xa8
 8009cb8:	9906      	ldr	r1, [sp, #24]
 8009cba:	9803      	ldr	r0, [sp, #12]
 8009cbc:	f002 fbd4 	bl	800c468 <__ssprint_r>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	f47f a838 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009cc6:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8009cca:	af2d      	add	r7, sp, #180	; 0xb4
 8009ccc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cce:	e4d6      	b.n	800967e <_svfprintf_r+0xaee>
 8009cd0:	2a01      	cmp	r2, #1
 8009cd2:	f47f a8c2 	bne.w	8008e5a <_svfprintf_r+0x2ca>
 8009cd6:	e50c      	b.n	80096f2 <_svfprintf_r+0xb62>
 8009cd8:	9b04      	ldr	r3, [sp, #16]
 8009cda:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8009cde:	1b9b      	subs	r3, r3, r6
 8009ce0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ce4:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009ce8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009cea:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8009cee:	9308      	str	r3, [sp, #32]
 8009cf0:	f7ff b863 	b.w	8008dba <_svfprintf_r+0x22a>
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	461c      	mov	r4, r3
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	3201      	adds	r2, #1
 8009cfc:	442c      	add	r4, r5
 8009cfe:	2a07      	cmp	r2, #7
 8009d00:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8009d04:	e9c9 3500 	strd	r3, r5, [r9]
 8009d08:	f77f a9ea 	ble.w	80090e0 <_svfprintf_r+0x550>
 8009d0c:	e489      	b.n	8009622 <_svfprintf_r+0xa92>
 8009d0e:	aa2a      	add	r2, sp, #168	; 0xa8
 8009d10:	9906      	ldr	r1, [sp, #24]
 8009d12:	9803      	ldr	r0, [sp, #12]
 8009d14:	f002 fba8 	bl	800c468 <__ssprint_r>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	f47f a80c 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009d1e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009d20:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009d24:	f7ff b990 	b.w	8009048 <_svfprintf_r+0x4b8>
 8009d28:	aa2a      	add	r2, sp, #168	; 0xa8
 8009d2a:	9906      	ldr	r1, [sp, #24]
 8009d2c:	9803      	ldr	r0, [sp, #12]
 8009d2e:	f002 fb9b 	bl	800c468 <__ssprint_r>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	f47e afff 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009d38:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009d3c:	f7ff bbba 	b.w	80094b4 <_svfprintf_r+0x924>
 8009d40:	4614      	mov	r4, r2
 8009d42:	463a      	mov	r2, r7
 8009d44:	461f      	mov	r7, r3
 8009d46:	4613      	mov	r3, r2
 8009d48:	462a      	mov	r2, r5
 8009d4a:	3201      	adds	r2, #1
 8009d4c:	9208      	str	r2, [sp, #32]
 8009d4e:	f107 0208 	add.w	r2, r7, #8
 8009d52:	e9c7 3a00 	strd	r3, sl, [r7]
 8009d56:	9b08      	ldr	r3, [sp, #32]
 8009d58:	932b      	str	r3, [sp, #172]	; 0xac
 8009d5a:	4454      	add	r4, sl
 8009d5c:	2b07      	cmp	r3, #7
 8009d5e:	942c      	str	r4, [sp, #176]	; 0xb0
 8009d60:	f73f ae9a 	bgt.w	8009a98 <_svfprintf_r+0xf08>
 8009d64:	3301      	adds	r3, #1
 8009d66:	9308      	str	r3, [sp, #32]
 8009d68:	f102 0908 	add.w	r9, r2, #8
 8009d6c:	4617      	mov	r7, r2
 8009d6e:	e4ab      	b.n	80096c8 <_svfprintf_r+0xb38>
 8009d70:	9a05      	ldr	r2, [sp, #20]
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	465e      	mov	r6, fp
 8009d76:	f7ff ba02 	b.w	800917e <_svfprintf_r+0x5ee>
 8009d7a:	bf00      	nop
 8009d7c:	0800cbbc 	.word	0x0800cbbc
 8009d80:	0800cbd8 	.word	0x0800cbd8
 8009d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009d8a:	18f3      	adds	r3, r6, r3
 8009d8c:	9308      	str	r3, [sp, #32]
 8009d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d90:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009d94:	464a      	mov	r2, r9
 8009d96:	960c      	str	r6, [sp, #48]	; 0x30
 8009d98:	4fc2      	ldr	r7, [pc, #776]	; (800a0a4 <_svfprintf_r+0x1514>)
 8009d9a:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8009d9e:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009da2:	f8dd b018 	ldr.w	fp, [sp, #24]
 8009da6:	4656      	mov	r6, sl
 8009da8:	4621      	mov	r1, r4
 8009daa:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d05e      	beq.n	8009e70 <_svfprintf_r+0x12e0>
 8009db2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d15f      	bne.n	8009e78 <_svfprintf_r+0x12e8>
 8009db8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dc0:	9314      	str	r3, [sp, #80]	; 0x50
 8009dc2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009dc4:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009dc6:	6010      	str	r0, [r2, #0]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	4449      	add	r1, r9
 8009dcc:	2b07      	cmp	r3, #7
 8009dce:	912c      	str	r1, [sp, #176]	; 0xb0
 8009dd0:	f8c2 9004 	str.w	r9, [r2, #4]
 8009dd4:	932b      	str	r3, [sp, #172]	; 0xac
 8009dd6:	dc53      	bgt.n	8009e80 <_svfprintf_r+0x12f0>
 8009dd8:	3208      	adds	r2, #8
 8009dda:	9808      	ldr	r0, [sp, #32]
 8009ddc:	f898 3000 	ldrb.w	r3, [r8]
 8009de0:	1b85      	subs	r5, r0, r6
 8009de2:	429d      	cmp	r5, r3
 8009de4:	bfa8      	it	ge
 8009de6:	461d      	movge	r5, r3
 8009de8:	2d00      	cmp	r5, #0
 8009dea:	dd0b      	ble.n	8009e04 <_svfprintf_r+0x1274>
 8009dec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009dee:	6016      	str	r6, [r2, #0]
 8009df0:	3301      	adds	r3, #1
 8009df2:	4429      	add	r1, r5
 8009df4:	2b07      	cmp	r3, #7
 8009df6:	912c      	str	r1, [sp, #176]	; 0xb0
 8009df8:	6055      	str	r5, [r2, #4]
 8009dfa:	932b      	str	r3, [sp, #172]	; 0xac
 8009dfc:	dc4b      	bgt.n	8009e96 <_svfprintf_r+0x1306>
 8009dfe:	f898 3000 	ldrb.w	r3, [r8]
 8009e02:	3208      	adds	r2, #8
 8009e04:	2d00      	cmp	r5, #0
 8009e06:	bfac      	ite	ge
 8009e08:	1b5d      	subge	r5, r3, r5
 8009e0a:	461d      	movlt	r5, r3
 8009e0c:	2d00      	cmp	r5, #0
 8009e0e:	dd2b      	ble.n	8009e68 <_svfprintf_r+0x12d8>
 8009e10:	2d10      	cmp	r5, #16
 8009e12:	982b      	ldr	r0, [sp, #172]	; 0xac
 8009e14:	dd1c      	ble.n	8009e50 <_svfprintf_r+0x12c0>
 8009e16:	2410      	movs	r4, #16
 8009e18:	e004      	b.n	8009e24 <_svfprintf_r+0x1294>
 8009e1a:	3d10      	subs	r5, #16
 8009e1c:	2d10      	cmp	r5, #16
 8009e1e:	f102 0208 	add.w	r2, r2, #8
 8009e22:	dd15      	ble.n	8009e50 <_svfprintf_r+0x12c0>
 8009e24:	3001      	adds	r0, #1
 8009e26:	3110      	adds	r1, #16
 8009e28:	2807      	cmp	r0, #7
 8009e2a:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
 8009e2e:	e9c2 7400 	strd	r7, r4, [r2]
 8009e32:	ddf2      	ble.n	8009e1a <_svfprintf_r+0x128a>
 8009e34:	aa2a      	add	r2, sp, #168	; 0xa8
 8009e36:	4659      	mov	r1, fp
 8009e38:	4650      	mov	r0, sl
 8009e3a:	f002 fb15 	bl	800c468 <__ssprint_r>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f47e af79 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009e44:	3d10      	subs	r5, #16
 8009e46:	2d10      	cmp	r5, #16
 8009e48:	e9dd 012b 	ldrd	r0, r1, [sp, #172]	; 0xac
 8009e4c:	aa2d      	add	r2, sp, #180	; 0xb4
 8009e4e:	dce9      	bgt.n	8009e24 <_svfprintf_r+0x1294>
 8009e50:	3001      	adds	r0, #1
 8009e52:	4429      	add	r1, r5
 8009e54:	2807      	cmp	r0, #7
 8009e56:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
 8009e5a:	e9c2 7500 	strd	r7, r5, [r2]
 8009e5e:	f73e af62 	bgt.w	8008d26 <_svfprintf_r+0x196>
 8009e62:	f898 3000 	ldrb.w	r3, [r8]
 8009e66:	3208      	adds	r2, #8
 8009e68:	441e      	add	r6, r3
 8009e6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1a0      	bne.n	8009db2 <_svfprintf_r+0x1222>
 8009e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 80fb 	beq.w	800a06e <_svfprintf_r+0x14de>
 8009e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e7e:	e7a0      	b.n	8009dc2 <_svfprintf_r+0x1232>
 8009e80:	aa2a      	add	r2, sp, #168	; 0xa8
 8009e82:	4659      	mov	r1, fp
 8009e84:	4650      	mov	r0, sl
 8009e86:	f002 faef 	bl	800c468 <__ssprint_r>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	f47e af53 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009e90:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8009e92:	aa2d      	add	r2, sp, #180	; 0xb4
 8009e94:	e7a1      	b.n	8009dda <_svfprintf_r+0x124a>
 8009e96:	aa2a      	add	r2, sp, #168	; 0xa8
 8009e98:	4659      	mov	r1, fp
 8009e9a:	4650      	mov	r0, sl
 8009e9c:	f002 fae4 	bl	800c468 <__ssprint_r>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	f47e af48 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 8009ea6:	f898 3000 	ldrb.w	r3, [r8]
 8009eaa:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8009eac:	aa2d      	add	r2, sp, #180	; 0xb4
 8009eae:	e7a9      	b.n	8009e04 <_svfprintf_r+0x1274>
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f7f6 f9c5 	bl	8000240 <strlen>
 8009eb6:	46aa      	mov	sl, r5
 8009eb8:	4603      	mov	r3, r0
 8009eba:	9008      	str	r0, [sp, #32]
 8009ebc:	f7ff b9a6 	b.w	800920c <_svfprintf_r+0x67c>
 8009ec0:	f898 3000 	ldrb.w	r3, [r8]
 8009ec4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8009ec6:	aa2d      	add	r2, sp, #180	; 0xb4
 8009ec8:	441e      	add	r6, r3
 8009eca:	e7ce      	b.n	8009e6a <_svfprintf_r+0x12da>
 8009ecc:	f109 0908 	add.w	r9, r9, #8
 8009ed0:	e636      	b.n	8009b40 <_svfprintf_r+0xfb0>
 8009ed2:	7814      	ldrb	r4, [r2, #0]
 8009ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed6:	2500      	movs	r5, #0
 8009ed8:	f7ff b803 	b.w	8008ee2 <_svfprintf_r+0x352>
 8009edc:	9a05      	ldr	r2, [sp, #20]
 8009ede:	801a      	strh	r2, [r3, #0]
 8009ee0:	465e      	mov	r6, fp
 8009ee2:	f7ff b94c 	b.w	800917e <_svfprintf_r+0x5ee>
 8009ee6:	7814      	ldrb	r4, [r2, #0]
 8009ee8:	9109      	str	r1, [sp, #36]	; 0x24
 8009eea:	2500      	movs	r5, #0
 8009eec:	2201      	movs	r2, #1
 8009eee:	f7fe bf47 	b.w	8008d80 <_svfprintf_r+0x1f0>
 8009ef2:	f991 4000 	ldrsb.w	r4, [r1]
 8009ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef8:	17e5      	asrs	r5, r4, #31
 8009efa:	4620      	mov	r0, r4
 8009efc:	4629      	mov	r1, r5
 8009efe:	f7fe bf92 	b.w	8008e26 <_svfprintf_r+0x296>
 8009f02:	7814      	ldrb	r4, [r2, #0]
 8009f04:	9309      	str	r3, [sp, #36]	; 0x24
 8009f06:	2500      	movs	r5, #0
 8009f08:	f7fe bf37 	b.w	8008d7a <_svfprintf_r+0x1ea>
 8009f0c:	f018 0f01 	tst.w	r8, #1
 8009f10:	f43f a8e8 	beq.w	80090e4 <_svfprintf_r+0x554>
 8009f14:	f7ff bb68 	b.w	80095e8 <_svfprintf_r+0xa58>
 8009f18:	2330      	movs	r3, #48	; 0x30
 8009f1a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8009f1e:	2358      	movs	r3, #88	; 0x58
 8009f20:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
 8009f24:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
 8009f28:	f048 0402 	orr.w	r4, r8, #2
 8009f2c:	f300 81b6 	bgt.w	800a29c <_svfprintf_r+0x170c>
 8009f30:	f448 7381 	orr.w	r3, r8, #258	; 0x102
 8009f34:	930e      	str	r3, [sp, #56]	; 0x38
 8009f36:	f027 0320 	bic.w	r3, r7, #32
 8009f3a:	9304      	str	r3, [sp, #16]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f40:	920a      	str	r2, [sp, #40]	; 0x28
 8009f42:	46a0      	mov	r8, r4
 8009f44:	ae3d      	add	r6, sp, #244	; 0xf4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f2c0 80e8 	blt.w	800a11c <_svfprintf_r+0x158c>
 8009f4c:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 8009f50:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8009f54:	2300      	movs	r3, #0
 8009f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f58:	2f61      	cmp	r7, #97	; 0x61
 8009f5a:	f000 8160 	beq.w	800a21e <_svfprintf_r+0x168e>
 8009f5e:	2f41      	cmp	r7, #65	; 0x41
 8009f60:	f47f acf8 	bne.w	8009954 <_svfprintf_r+0xdc4>
 8009f64:	a824      	add	r0, sp, #144	; 0x90
 8009f66:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 8009f6a:	f002 fa05 	bl	800c378 <frexp>
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009f74:	ec51 0b10 	vmov	r0, r1, d0
 8009f78:	f7f6 fc78 	bl	800086c <__aeabi_dmul>
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2300      	movs	r3, #0
 8009f80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009f84:	f7f6 feda 	bl	8000d3c <__aeabi_dcmpeq>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	f040 8243 	bne.w	800a414 <_svfprintf_r+0x1884>
 8009f8e:	4b46      	ldr	r3, [pc, #280]	; (800a0a8 <_svfprintf_r+0x1518>)
 8009f90:	9308      	str	r3, [sp, #32]
 8009f92:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009f96:	e9cd 9b0f 	strd	r9, fp, [sp, #60]	; 0x3c
 8009f9a:	9711      	str	r7, [sp, #68]	; 0x44
 8009f9c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8009fa0:	46b1      	mov	r9, r6
 8009fa2:	9621      	str	r6, [sp, #132]	; 0x84
 8009fa4:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 8009fa8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009fac:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8009fb0:	e003      	b.n	8009fba <_svfprintf_r+0x142a>
 8009fb2:	f7f6 fec3 	bl	8000d3c <__aeabi_dcmpeq>
 8009fb6:	bb20      	cbnz	r0, 800a002 <_svfprintf_r+0x1472>
 8009fb8:	46a9      	mov	r9, r5
 8009fba:	2200      	movs	r2, #0
 8009fbc:	4b3b      	ldr	r3, [pc, #236]	; (800a0ac <_svfprintf_r+0x151c>)
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	f7f6 fc53 	bl	800086c <__aeabi_dmul>
 8009fc6:	460f      	mov	r7, r1
 8009fc8:	4606      	mov	r6, r0
 8009fca:	f7f6 feff 	bl	8000dcc <__aeabi_d2iz>
 8009fce:	4680      	mov	r8, r0
 8009fd0:	f7f6 fbe2 	bl	8000798 <__aeabi_i2d>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4630      	mov	r0, r6
 8009fda:	4639      	mov	r1, r7
 8009fdc:	f7f6 fa8e 	bl	80004fc <__aeabi_dsub>
 8009fe0:	464d      	mov	r5, r9
 8009fe2:	f81a c008 	ldrb.w	ip, [sl, r8]
 8009fe6:	f805 cb01 	strb.w	ip, [r5], #1
 8009fea:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009fee:	46a3      	mov	fp, r4
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	460f      	mov	r7, r1
 8009ff4:	f04f 0200 	mov.w	r2, #0
 8009ff8:	f04f 0300 	mov.w	r3, #0
 8009ffc:	f104 34ff 	add.w	r4, r4, #4294967295
 800a000:	d1d7      	bne.n	8009fb2 <_svfprintf_r+0x1422>
 800a002:	4630      	mov	r0, r6
 800a004:	4639      	mov	r1, r7
 800a006:	2200      	movs	r2, #0
 800a008:	4b29      	ldr	r3, [pc, #164]	; (800a0b0 <_svfprintf_r+0x1520>)
 800a00a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a00c:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 800a010:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 800a014:	4644      	mov	r4, r8
 800a016:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800a01a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a01e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800a022:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800a024:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800a028:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a02c:	f7f6 feae 	bl	8000d8c <__aeabi_dcmpgt>
 800a030:	2800      	cmp	r0, #0
 800a032:	f040 80aa 	bne.w	800a18a <_svfprintf_r+0x15fa>
 800a036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a03a:	2200      	movs	r2, #0
 800a03c:	4b1c      	ldr	r3, [pc, #112]	; (800a0b0 <_svfprintf_r+0x1520>)
 800a03e:	f7f6 fe7d 	bl	8000d3c <__aeabi_dcmpeq>
 800a042:	b118      	cbz	r0, 800a04c <_svfprintf_r+0x14bc>
 800a044:	4623      	mov	r3, r4
 800a046:	07db      	lsls	r3, r3, #31
 800a048:	f100 809f 	bmi.w	800a18a <_svfprintf_r+0x15fa>
 800a04c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a04e:	2b00      	cmp	r3, #0
 800a050:	db07      	blt.n	800a062 <_svfprintf_r+0x14d2>
 800a052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a054:	3301      	adds	r3, #1
 800a056:	442b      	add	r3, r5
 800a058:	2230      	movs	r2, #48	; 0x30
 800a05a:	f805 2b01 	strb.w	r2, [r5], #1
 800a05e:	42ab      	cmp	r3, r5
 800a060:	d1fb      	bne.n	800a05a <_svfprintf_r+0x14ca>
 800a062:	1bab      	subs	r3, r5, r6
 800a064:	4640      	mov	r0, r8
 800a066:	9310      	str	r3, [sp, #64]	; 0x40
 800a068:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800a06c:	e498      	b.n	80099a0 <_svfprintf_r+0xe10>
 800a06e:	46b2      	mov	sl, r6
 800a070:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a072:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a074:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a078:	18f3      	adds	r3, r6, r3
 800a07a:	459a      	cmp	sl, r3
 800a07c:	4691      	mov	r9, r2
 800a07e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800a082:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800a086:	460c      	mov	r4, r1
 800a088:	bf28      	it	cs
 800a08a:	469a      	movcs	sl, r3
 800a08c:	e55f      	b.n	8009b4e <_svfprintf_r+0xfbe>
 800a08e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a090:	1cda      	adds	r2, r3, #3
 800a092:	db01      	blt.n	800a098 <_svfprintf_r+0x1508>
 800a094:	4553      	cmp	r3, sl
 800a096:	dd14      	ble.n	800a0c2 <_svfprintf_r+0x1532>
 800a098:	3f02      	subs	r7, #2
 800a09a:	f027 0320 	bic.w	r3, r7, #32
 800a09e:	9304      	str	r3, [sp, #16]
 800a0a0:	e488      	b.n	80099b4 <_svfprintf_r+0xe24>
 800a0a2:	bf00      	nop
 800a0a4:	0800cbd8 	.word	0x0800cbd8
 800a0a8:	0800cba8 	.word	0x0800cba8
 800a0ac:	40300000 	.word	0x40300000
 800a0b0:	3fe00000 	.word	0x3fe00000
 800a0b4:	222d      	movs	r2, #45	; 0x2d
 800a0b6:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 800a0ba:	f04f 0a00 	mov.w	sl, #0
 800a0be:	f7fe be8b 	b.w	8008dd8 <_svfprintf_r+0x248>
 800a0c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0c4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a0c6:	428b      	cmp	r3, r1
 800a0c8:	f2c0 8090 	blt.w	800a1ec <_svfprintf_r+0x165c>
 800a0cc:	07c2      	lsls	r2, r0, #31
 800a0ce:	f140 81a6 	bpl.w	800a41e <_svfprintf_r+0x188e>
 800a0d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a0d4:	4413      	add	r3, r2
 800a0d6:	9308      	str	r3, [sp, #32]
 800a0d8:	0547      	lsls	r7, r0, #21
 800a0da:	d503      	bpl.n	800a0e4 <_svfprintf_r+0x1554>
 800a0dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f300 80ef 	bgt.w	800a2c2 <_svfprintf_r+0x1732>
 800a0e4:	9b08      	ldr	r3, [sp, #32]
 800a0e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	2767      	movs	r7, #103	; 0x67
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0f2:	9314      	str	r3, [sp, #80]	; 0x50
 800a0f4:	e49e      	b.n	8009a34 <_svfprintf_r+0xea4>
 800a0f6:	222d      	movs	r2, #45	; 0x2d
 800a0f8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 800a0fc:	f7ff b91a 	b.w	8009334 <_svfprintf_r+0x7a4>
 800a100:	aa2a      	add	r2, sp, #168	; 0xa8
 800a102:	9906      	ldr	r1, [sp, #24]
 800a104:	9803      	ldr	r0, [sp, #12]
 800a106:	f002 f9af 	bl	800c468 <__ssprint_r>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	f47e ae13 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 800a110:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800a112:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800a116:	f7ff bb37 	b.w	8009788 <_svfprintf_r+0xbf8>
 800a11a:	900a      	str	r0, [sp, #40]	; 0x28
 800a11c:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 800a120:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 800a124:	931f      	str	r3, [sp, #124]	; 0x7c
 800a126:	232d      	movs	r3, #45	; 0x2d
 800a128:	911e      	str	r1, [sp, #120]	; 0x78
 800a12a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a12c:	e714      	b.n	8009f58 <_svfprintf_r+0x13c8>
 800a12e:	2330      	movs	r3, #48	; 0x30
 800a130:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800a134:	2378      	movs	r3, #120	; 0x78
 800a136:	e6f3      	b.n	8009f20 <_svfprintf_r+0x1390>
 800a138:	f8cd a010 	str.w	sl, [sp, #16]
 800a13c:	f8cd a020 	str.w	sl, [sp, #32]
 800a140:	9409      	str	r4, [sp, #36]	; 0x24
 800a142:	4682      	mov	sl, r0
 800a144:	900f      	str	r0, [sp, #60]	; 0x3c
 800a146:	9014      	str	r0, [sp, #80]	; 0x50
 800a148:	9011      	str	r0, [sp, #68]	; 0x44
 800a14a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 800a14e:	f7fe be40 	b.w	8008dd2 <_svfprintf_r+0x242>
 800a152:	aa2a      	add	r2, sp, #168	; 0xa8
 800a154:	9906      	ldr	r1, [sp, #24]
 800a156:	9803      	ldr	r0, [sp, #12]
 800a158:	f002 f986 	bl	800c468 <__ssprint_r>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	f47e adea 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 800a162:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a164:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
 800a168:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800a16c:	f7ff ba4c 	b.w	8009608 <_svfprintf_r+0xa78>
 800a170:	aa2a      	add	r2, sp, #168	; 0xa8
 800a172:	9906      	ldr	r1, [sp, #24]
 800a174:	9803      	ldr	r0, [sp, #12]
 800a176:	f002 f977 	bl	800c468 <__ssprint_r>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	f47e addb 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 800a180:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a182:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800a184:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800a188:	e4e8      	b.n	8009b5c <_svfprintf_r+0xfcc>
 800a18a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a18c:	9328      	str	r3, [sp, #160]	; 0xa0
 800a18e:	9b08      	ldr	r3, [sp, #32]
 800a190:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a194:	7bd9      	ldrb	r1, [r3, #15]
 800a196:	4291      	cmp	r1, r2
 800a198:	462b      	mov	r3, r5
 800a19a:	d109      	bne.n	800a1b0 <_svfprintf_r+0x1620>
 800a19c:	2030      	movs	r0, #48	; 0x30
 800a19e:	f803 0c01 	strb.w	r0, [r3, #-1]
 800a1a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a1a4:	1e5a      	subs	r2, r3, #1
 800a1a6:	9228      	str	r2, [sp, #160]	; 0xa0
 800a1a8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800a1ac:	4291      	cmp	r1, r2
 800a1ae:	d0f6      	beq.n	800a19e <_svfprintf_r+0x160e>
 800a1b0:	2a39      	cmp	r2, #57	; 0x39
 800a1b2:	bf0b      	itete	eq
 800a1b4:	9a08      	ldreq	r2, [sp, #32]
 800a1b6:	3201      	addne	r2, #1
 800a1b8:	7a92      	ldrbeq	r2, [r2, #10]
 800a1ba:	b2d2      	uxtbne	r2, r2
 800a1bc:	f803 2c01 	strb.w	r2, [r3, #-1]
 800a1c0:	e74f      	b.n	800a062 <_svfprintf_r+0x14d2>
 800a1c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f340 8152 	ble.w	800a46e <_svfprintf_r+0x18de>
 800a1ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1cc:	f1ba 0f00 	cmp.w	sl, #0
 800a1d0:	f040 80eb 	bne.w	800a3aa <_svfprintf_r+0x181a>
 800a1d4:	07c4      	lsls	r4, r0, #31
 800a1d6:	f100 80e8 	bmi.w	800a3aa <_svfprintf_r+0x181a>
 800a1da:	9308      	str	r3, [sp, #32]
 800a1dc:	2766      	movs	r7, #102	; 0x66
 800a1de:	0543      	lsls	r3, r0, #21
 800a1e0:	d470      	bmi.n	800a2c4 <_svfprintf_r+0x1734>
 800a1e2:	9b08      	ldr	r3, [sp, #32]
 800a1e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1e8:	9304      	str	r3, [sp, #16]
 800a1ea:	e780      	b.n	800a0ee <_svfprintf_r+0x155e>
 800a1ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a1f0:	4413      	add	r3, r2
 800a1f2:	9308      	str	r3, [sp, #32]
 800a1f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f340 8148 	ble.w	800a48c <_svfprintf_r+0x18fc>
 800a1fc:	2767      	movs	r7, #103	; 0x67
 800a1fe:	e7ee      	b.n	800a1de <_svfprintf_r+0x164e>
 800a200:	aa2a      	add	r2, sp, #168	; 0xa8
 800a202:	9906      	ldr	r1, [sp, #24]
 800a204:	9803      	ldr	r0, [sp, #12]
 800a206:	f002 f92f 	bl	800c468 <__ssprint_r>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	f47e ad93 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 800a210:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a212:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a214:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800a21c:	e4b6      	b.n	8009b8c <_svfprintf_r+0xffc>
 800a21e:	a824      	add	r0, sp, #144	; 0x90
 800a220:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a224:	f002 f8a8 	bl	800c378 <frexp>
 800a228:	2200      	movs	r2, #0
 800a22a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a22e:	ec51 0b10 	vmov	r0, r1, d0
 800a232:	f7f6 fb1b 	bl	800086c <__aeabi_dmul>
 800a236:	2200      	movs	r2, #0
 800a238:	2300      	movs	r3, #0
 800a23a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a23e:	f7f6 fd7d 	bl	8000d3c <__aeabi_dcmpeq>
 800a242:	b108      	cbz	r0, 800a248 <_svfprintf_r+0x16b8>
 800a244:	2301      	movs	r3, #1
 800a246:	9324      	str	r3, [sp, #144]	; 0x90
 800a248:	4bba      	ldr	r3, [pc, #744]	; (800a534 <_svfprintf_r+0x19a4>)
 800a24a:	9308      	str	r3, [sp, #32]
 800a24c:	e6a1      	b.n	8009f92 <_svfprintf_r+0x1402>
 800a24e:	425d      	negs	r5, r3
 800a250:	3310      	adds	r3, #16
 800a252:	4bb9      	ldr	r3, [pc, #740]	; (800a538 <_svfprintf_r+0x19a8>)
 800a254:	f280 809a 	bge.w	800a38c <_svfprintf_r+0x17fc>
 800a258:	4619      	mov	r1, r3
 800a25a:	2710      	movs	r7, #16
 800a25c:	4623      	mov	r3, r4
 800a25e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800a262:	460c      	mov	r4, r1
 800a264:	e005      	b.n	800a272 <_svfprintf_r+0x16e2>
 800a266:	f109 0908 	add.w	r9, r9, #8
 800a26a:	3d10      	subs	r5, #16
 800a26c:	2d10      	cmp	r5, #16
 800a26e:	f340 808a 	ble.w	800a386 <_svfprintf_r+0x17f6>
 800a272:	3201      	adds	r2, #1
 800a274:	3310      	adds	r3, #16
 800a276:	2a07      	cmp	r2, #7
 800a278:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
 800a27c:	e9c9 4700 	strd	r4, r7, [r9]
 800a280:	ddf1      	ble.n	800a266 <_svfprintf_r+0x16d6>
 800a282:	aa2a      	add	r2, sp, #168	; 0xa8
 800a284:	9906      	ldr	r1, [sp, #24]
 800a286:	4650      	mov	r0, sl
 800a288:	f002 f8ee 	bl	800c468 <__ssprint_r>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	f47e ad52 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 800a292:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
 800a296:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800a29a:	e7e6      	b.n	800a26a <_svfprintf_r+0x16da>
 800a29c:	f10a 0101 	add.w	r1, sl, #1
 800a2a0:	9803      	ldr	r0, [sp, #12]
 800a2a2:	f001 faaf 	bl	800b804 <_malloc_r>
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	f000 814f 	beq.w	800a54c <_svfprintf_r+0x19bc>
 800a2ae:	f448 7381 	orr.w	r3, r8, #258	; 0x102
 800a2b2:	930e      	str	r3, [sp, #56]	; 0x38
 800a2b4:	f027 0320 	bic.w	r3, r7, #32
 800a2b8:	9304      	str	r3, [sp, #16]
 800a2ba:	46a0      	mov	r8, r4
 800a2bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2be:	900a      	str	r0, [sp, #40]	; 0x28
 800a2c0:	e641      	b.n	8009f46 <_svfprintf_r+0x13b6>
 800a2c2:	2767      	movs	r7, #103	; 0x67
 800a2c4:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	920f      	str	r2, [sp, #60]	; 0x3c
 800a2ca:	9214      	str	r2, [sp, #80]	; 0x50
 800a2cc:	7803      	ldrb	r3, [r0, #0]
 800a2ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2d0:	2bff      	cmp	r3, #255	; 0xff
 800a2d2:	d00c      	beq.n	800a2ee <_svfprintf_r+0x175e>
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	da0a      	bge.n	800a2ee <_svfprintf_r+0x175e>
 800a2d8:	7841      	ldrb	r1, [r0, #1]
 800a2da:	1ad2      	subs	r2, r2, r3
 800a2dc:	b1b1      	cbz	r1, 800a30c <_svfprintf_r+0x177c>
 800a2de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	9314      	str	r3, [sp, #80]	; 0x50
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	2bff      	cmp	r3, #255	; 0xff
 800a2e8:	f100 0001 	add.w	r0, r0, #1
 800a2ec:	d1f2      	bne.n	800a2d4 <_svfprintf_r+0x1744>
 800a2ee:	9211      	str	r2, [sp, #68]	; 0x44
 800a2f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2f4:	9908      	ldr	r1, [sp, #32]
 800a2f6:	901a      	str	r0, [sp, #104]	; 0x68
 800a2f8:	4413      	add	r3, r2
 800a2fa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a2fc:	fb02 1303 	mla	r3, r2, r3, r1
 800a300:	9308      	str	r3, [sp, #32]
 800a302:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a306:	9304      	str	r3, [sp, #16]
 800a308:	f7ff bb94 	b.w	8009a34 <_svfprintf_r+0xea4>
 800a30c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a30e:	3101      	adds	r1, #1
 800a310:	910f      	str	r1, [sp, #60]	; 0x3c
 800a312:	e7dd      	b.n	800a2d0 <_svfprintf_r+0x1740>
 800a314:	aa28      	add	r2, sp, #160	; 0xa0
 800a316:	ab25      	add	r3, sp, #148	; 0x94
 800a318:	e9cd 3200 	strd	r3, r2, [sp]
 800a31c:	2103      	movs	r1, #3
 800a31e:	ab24      	add	r3, sp, #144	; 0x90
 800a320:	4652      	mov	r2, sl
 800a322:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a326:	9803      	ldr	r0, [sp, #12]
 800a328:	f000 fa0a 	bl	800a740 <_dtoa_r>
 800a32c:	4655      	mov	r5, sl
 800a32e:	4606      	mov	r6, r0
 800a330:	eb00 040a 	add.w	r4, r0, sl
 800a334:	7833      	ldrb	r3, [r6, #0]
 800a336:	2b30      	cmp	r3, #48	; 0x30
 800a338:	f000 80c9 	beq.w	800a4ce <_svfprintf_r+0x193e>
 800a33c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800a33e:	442c      	add	r4, r5
 800a340:	2200      	movs	r2, #0
 800a342:	2300      	movs	r3, #0
 800a344:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a348:	f7f6 fcf8 	bl	8000d3c <__aeabi_dcmpeq>
 800a34c:	b110      	cbz	r0, 800a354 <_svfprintf_r+0x17c4>
 800a34e:	4623      	mov	r3, r4
 800a350:	f7ff bb21 	b.w	8009996 <_svfprintf_r+0xe06>
 800a354:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a356:	42a3      	cmp	r3, r4
 800a358:	f4bf ab1d 	bcs.w	8009996 <_svfprintf_r+0xe06>
 800a35c:	2130      	movs	r1, #48	; 0x30
 800a35e:	1c5a      	adds	r2, r3, #1
 800a360:	9228      	str	r2, [sp, #160]	; 0xa0
 800a362:	7019      	strb	r1, [r3, #0]
 800a364:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a366:	429c      	cmp	r4, r3
 800a368:	d8f9      	bhi.n	800a35e <_svfprintf_r+0x17ce>
 800a36a:	f7ff bb14 	b.w	8009996 <_svfprintf_r+0xe06>
 800a36e:	f1ba 0f00 	cmp.w	sl, #0
 800a372:	f000 8086 	beq.w	800a482 <_svfprintf_r+0x18f2>
 800a376:	900a      	str	r0, [sp, #40]	; 0x28
 800a378:	e5e5      	b.n	8009f46 <_svfprintf_r+0x13b6>
 800a37a:	900a      	str	r0, [sp, #40]	; 0x28
 800a37c:	f04f 0a06 	mov.w	sl, #6
 800a380:	e5e1      	b.n	8009f46 <_svfprintf_r+0x13b6>
 800a382:	1974      	adds	r4, r6, r5
 800a384:	e7dc      	b.n	800a340 <_svfprintf_r+0x17b0>
 800a386:	4621      	mov	r1, r4
 800a388:	461c      	mov	r4, r3
 800a38a:	460b      	mov	r3, r1
 800a38c:	3201      	adds	r2, #1
 800a38e:	442c      	add	r4, r5
 800a390:	2a07      	cmp	r2, #7
 800a392:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 800a396:	e9c9 3500 	strd	r3, r5, [r9]
 800a39a:	f300 80b0 	bgt.w	800a4fe <_svfprintf_r+0x196e>
 800a39e:	f109 0908 	add.w	r9, r9, #8
 800a3a2:	f7ff b934 	b.w	800960e <_svfprintf_r+0xa7e>
 800a3a6:	4699      	mov	r9, r3
 800a3a8:	e444      	b.n	8009c34 <_svfprintf_r+0x10a4>
 800a3aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a3ac:	4413      	add	r3, r2
 800a3ae:	4453      	add	r3, sl
 800a3b0:	9308      	str	r3, [sp, #32]
 800a3b2:	2766      	movs	r7, #102	; 0x66
 800a3b4:	e713      	b.n	800a1de <_svfprintf_r+0x164e>
 800a3b6:	f10d 0ca7 	add.w	ip, sp, #167	; 0xa7
 800a3ba:	4664      	mov	r4, ip
 800a3bc:	4d5f      	ldr	r5, [pc, #380]	; (800a53c <_svfprintf_r+0x19ac>)
 800a3be:	e000      	b.n	800a3c2 <_svfprintf_r+0x1832>
 800a3c0:	4614      	mov	r4, r2
 800a3c2:	fba5 1203 	umull	r1, r2, r5, r3
 800a3c6:	08d2      	lsrs	r2, r2, #3
 800a3c8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800a3cc:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800a3d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	2b09      	cmp	r3, #9
 800a3d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a3dc:	f104 32ff 	add.w	r2, r4, #4294967295
 800a3e0:	dcee      	bgt.n	800a3c0 <_svfprintf_r+0x1830>
 800a3e2:	3330      	adds	r3, #48	; 0x30
 800a3e4:	3c02      	subs	r4, #2
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	45a4      	cmp	ip, r4
 800a3ea:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a3ee:	f240 8094 	bls.w	800a51a <_svfprintf_r+0x198a>
 800a3f2:	f10d 049a 	add.w	r4, sp, #154	; 0x9a
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	e001      	b.n	800a3fe <_svfprintf_r+0x186e>
 800a3fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3fe:	f804 3b01 	strb.w	r3, [r4], #1
 800a402:	458c      	cmp	ip, r1
 800a404:	d1f9      	bne.n	800a3fa <_svfprintf_r+0x186a>
 800a406:	ab2a      	add	r3, sp, #168	; 0xa8
 800a408:	1a9b      	subs	r3, r3, r2
 800a40a:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 800a40e:	4413      	add	r3, r2
 800a410:	f7ff baf7 	b.w	8009a02 <_svfprintf_r+0xe72>
 800a414:	2301      	movs	r3, #1
 800a416:	9324      	str	r3, [sp, #144]	; 0x90
 800a418:	4b49      	ldr	r3, [pc, #292]	; (800a540 <_svfprintf_r+0x19b0>)
 800a41a:	9308      	str	r3, [sp, #32]
 800a41c:	e5b9      	b.n	8009f92 <_svfprintf_r+0x1402>
 800a41e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a420:	9308      	str	r3, [sp, #32]
 800a422:	e659      	b.n	800a0d8 <_svfprintf_r+0x1548>
 800a424:	aa28      	add	r2, sp, #160	; 0xa0
 800a426:	ab25      	add	r3, sp, #148	; 0x94
 800a428:	e9cd 3200 	strd	r3, r2, [sp]
 800a42c:	2103      	movs	r1, #3
 800a42e:	ab24      	add	r3, sp, #144	; 0x90
 800a430:	4652      	mov	r2, sl
 800a432:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a436:	9803      	ldr	r0, [sp, #12]
 800a438:	f000 f982 	bl	800a740 <_dtoa_r>
 800a43c:	4655      	mov	r5, sl
 800a43e:	4606      	mov	r6, r0
 800a440:	2f46      	cmp	r7, #70	; 0x46
 800a442:	eb06 0405 	add.w	r4, r6, r5
 800a446:	f43f af75 	beq.w	800a334 <_svfprintf_r+0x17a4>
 800a44a:	e779      	b.n	800a340 <_svfprintf_r+0x17b0>
 800a44c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a44e:	4e3d      	ldr	r6, [pc, #244]	; (800a544 <_svfprintf_r+0x19b4>)
 800a450:	2b00      	cmp	r3, #0
 800a452:	bfb6      	itet	lt
 800a454:	222d      	movlt	r2, #45	; 0x2d
 800a456:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
 800a45a:	f88d 208b 	strblt.w	r2, [sp, #139]	; 0x8b
 800a45e:	4b3a      	ldr	r3, [pc, #232]	; (800a548 <_svfprintf_r+0x19b8>)
 800a460:	f7fe bf6a 	b.w	8009338 <_svfprintf_r+0x7a8>
 800a464:	07c5      	lsls	r5, r0, #31
 800a466:	f57f aad9 	bpl.w	8009a1c <_svfprintf_r+0xe8c>
 800a46a:	f7ff bad3 	b.w	8009a14 <_svfprintf_r+0xe84>
 800a46e:	f1ba 0f00 	cmp.w	sl, #0
 800a472:	d117      	bne.n	800a4a4 <_svfprintf_r+0x1914>
 800a474:	07c1      	lsls	r1, r0, #31
 800a476:	d415      	bmi.n	800a4a4 <_svfprintf_r+0x1914>
 800a478:	2301      	movs	r3, #1
 800a47a:	9304      	str	r3, [sp, #16]
 800a47c:	9308      	str	r3, [sp, #32]
 800a47e:	2766      	movs	r7, #102	; 0x66
 800a480:	e635      	b.n	800a0ee <_svfprintf_r+0x155e>
 800a482:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800a486:	f04f 0a01 	mov.w	sl, #1
 800a48a:	e55c      	b.n	8009f46 <_svfprintf_r+0x13b6>
 800a48c:	9a08      	ldr	r2, [sp, #32]
 800a48e:	f1c3 0301 	rsb	r3, r3, #1
 800a492:	441a      	add	r2, r3
 800a494:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a498:	9208      	str	r2, [sp, #32]
 800a49a:	9304      	str	r3, [sp, #16]
 800a49c:	2767      	movs	r7, #103	; 0x67
 800a49e:	e626      	b.n	800a0ee <_svfprintf_r+0x155e>
 800a4a0:	464a      	mov	r2, r9
 800a4a2:	e456      	b.n	8009d52 <_svfprintf_r+0x11c2>
 800a4a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	4453      	add	r3, sl
 800a4aa:	9308      	str	r3, [sp, #32]
 800a4ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a4b0:	9304      	str	r3, [sp, #16]
 800a4b2:	2766      	movs	r7, #102	; 0x66
 800a4b4:	e61b      	b.n	800a0ee <_svfprintf_r+0x155e>
 800a4b6:	2f47      	cmp	r7, #71	; 0x47
 800a4b8:	f47f af63 	bne.w	800a382 <_svfprintf_r+0x17f2>
 800a4bc:	f018 0f01 	tst.w	r8, #1
 800a4c0:	f43f aa68 	beq.w	8009994 <_svfprintf_r+0xe04>
 800a4c4:	e7bc      	b.n	800a440 <_svfprintf_r+0x18b0>
 800a4c6:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 800a4ca:	f7ff ba97 	b.w	80099fc <_svfprintf_r+0xe6c>
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a4d6:	f7f6 fc31 	bl	8000d3c <__aeabi_dcmpeq>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	f47f af2e 	bne.w	800a33c <_svfprintf_r+0x17ac>
 800a4e0:	f1c5 0501 	rsb	r5, r5, #1
 800a4e4:	9524      	str	r5, [sp, #144]	; 0x90
 800a4e6:	e72a      	b.n	800a33e <_svfprintf_r+0x17ae>
 800a4e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4ea:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800a4ee:	680b      	ldr	r3, [r1, #0]
 800a4f0:	ea43 7ae3 	orr.w	sl, r3, r3, asr #31
 800a4f4:	1d0b      	adds	r3, r1, #4
 800a4f6:	4693      	mov	fp, r2
 800a4f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4fa:	f7fe bba2 	b.w	8008c42 <_svfprintf_r+0xb2>
 800a4fe:	aa2a      	add	r2, sp, #168	; 0xa8
 800a500:	9906      	ldr	r1, [sp, #24]
 800a502:	9803      	ldr	r0, [sp, #12]
 800a504:	f001 ffb0 	bl	800c468 <__ssprint_r>
 800a508:	2800      	cmp	r0, #0
 800a50a:	f47e ac14 	bne.w	8008d36 <_svfprintf_r+0x1a6>
 800a50e:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
 800a512:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800a516:	f7ff b87a 	b.w	800960e <_svfprintf_r+0xa7e>
 800a51a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
 800a51e:	f7ff ba70 	b.w	8009a02 <_svfprintf_r+0xe72>
 800a522:	9a03      	ldr	r2, [sp, #12]
 800a524:	230c      	movs	r3, #12
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	f04f 33ff 	mov.w	r3, #4294967295
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	f7fe bc11 	b.w	8008d54 <_svfprintf_r+0x1c4>
 800a532:	bf00      	nop
 800a534:	0800cb94 	.word	0x0800cb94
 800a538:	0800cbd8 	.word	0x0800cbd8
 800a53c:	cccccccd 	.word	0xcccccccd
 800a540:	0800cba8 	.word	0x0800cba8
 800a544:	0800cb90 	.word	0x0800cb90
 800a548:	0800cb8c 	.word	0x0800cb8c
 800a54c:	9a06      	ldr	r2, [sp, #24]
 800a54e:	8993      	ldrh	r3, [r2, #12]
 800a550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a554:	8193      	strh	r3, [r2, #12]
 800a556:	f7fe bbf6 	b.w	8008d46 <_svfprintf_r+0x1b6>
 800a55a:	bf00      	nop

0800a55c <__register_exitproc>:
 800a55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a560:	4d2b      	ldr	r5, [pc, #172]	; (800a610 <__register_exitproc+0xb4>)
 800a562:	4606      	mov	r6, r0
 800a564:	6828      	ldr	r0, [r5, #0]
 800a566:	4698      	mov	r8, r3
 800a568:	460f      	mov	r7, r1
 800a56a:	4691      	mov	r9, r2
 800a56c:	f7fe fb0c 	bl	8008b88 <__retarget_lock_acquire_recursive>
 800a570:	4b28      	ldr	r3, [pc, #160]	; (800a614 <__register_exitproc+0xb8>)
 800a572:	681c      	ldr	r4, [r3, #0]
 800a574:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d03d      	beq.n	800a5f8 <__register_exitproc+0x9c>
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	2a1f      	cmp	r2, #31
 800a580:	dc0d      	bgt.n	800a59e <__register_exitproc+0x42>
 800a582:	f102 0c01 	add.w	ip, r2, #1
 800a586:	bb16      	cbnz	r6, 800a5ce <__register_exitproc+0x72>
 800a588:	3202      	adds	r2, #2
 800a58a:	f8c3 c004 	str.w	ip, [r3, #4]
 800a58e:	6828      	ldr	r0, [r5, #0]
 800a590:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 800a594:	f7fe fafa 	bl	8008b8c <__retarget_lock_release_recursive>
 800a598:	2000      	movs	r0, #0
 800a59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59e:	4b1e      	ldr	r3, [pc, #120]	; (800a618 <__register_exitproc+0xbc>)
 800a5a0:	b37b      	cbz	r3, 800a602 <__register_exitproc+0xa6>
 800a5a2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a5a6:	f3af 8000 	nop.w
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	b348      	cbz	r0, 800a602 <__register_exitproc+0xa6>
 800a5ae:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	e9c0 2100 	strd	r2, r1, [r0]
 800a5b8:	f04f 0c01 	mov.w	ip, #1
 800a5bc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 800a5c0:	460a      	mov	r2, r1
 800a5c2:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800a5c6:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 800a5ca:	2e00      	cmp	r6, #0
 800a5cc:	d0dc      	beq.n	800a588 <__register_exitproc+0x2c>
 800a5ce:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800a5d2:	2401      	movs	r4, #1
 800a5d4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800a5d8:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 800a5dc:	4094      	lsls	r4, r2
 800a5de:	4320      	orrs	r0, r4
 800a5e0:	2e02      	cmp	r6, #2
 800a5e2:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 800a5e6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800a5ea:	d1cd      	bne.n	800a588 <__register_exitproc+0x2c>
 800a5ec:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 800a5f0:	430c      	orrs	r4, r1
 800a5f2:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 800a5f6:	e7c7      	b.n	800a588 <__register_exitproc+0x2c>
 800a5f8:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 800a5fc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 800a600:	e7bc      	b.n	800a57c <__register_exitproc+0x20>
 800a602:	6828      	ldr	r0, [r5, #0]
 800a604:	f7fe fac2 	bl	8008b8c <__retarget_lock_release_recursive>
 800a608:	f04f 30ff 	mov.w	r0, #4294967295
 800a60c:	e7c5      	b.n	800a59a <__register_exitproc+0x3e>
 800a60e:	bf00      	nop
 800a610:	20000460 	.word	0x20000460
 800a614:	0800cb80 	.word	0x0800cb80
 800a618:	00000000 	.word	0x00000000

0800a61c <quorem>:
 800a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	6903      	ldr	r3, [r0, #16]
 800a622:	690f      	ldr	r7, [r1, #16]
 800a624:	42bb      	cmp	r3, r7
 800a626:	b083      	sub	sp, #12
 800a628:	f2c0 8086 	blt.w	800a738 <quorem+0x11c>
 800a62c:	3f01      	subs	r7, #1
 800a62e:	f101 0914 	add.w	r9, r1, #20
 800a632:	f100 0a14 	add.w	sl, r0, #20
 800a636:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
 800a63a:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 800a63e:	00bc      	lsls	r4, r7, #2
 800a640:	3201      	adds	r2, #1
 800a642:	fbb3 f8f2 	udiv	r8, r3, r2
 800a646:	eb0a 0304 	add.w	r3, sl, r4
 800a64a:	9400      	str	r4, [sp, #0]
 800a64c:	eb09 0b04 	add.w	fp, r9, r4
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	f1b8 0f00 	cmp.w	r8, #0
 800a656:	d038      	beq.n	800a6ca <quorem+0xae>
 800a658:	2500      	movs	r5, #0
 800a65a:	462e      	mov	r6, r5
 800a65c:	46ce      	mov	lr, r9
 800a65e:	46d4      	mov	ip, sl
 800a660:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a664:	f8dc 3000 	ldr.w	r3, [ip]
 800a668:	b2a2      	uxth	r2, r4
 800a66a:	fb08 5502 	mla	r5, r8, r2, r5
 800a66e:	0c22      	lsrs	r2, r4, #16
 800a670:	0c2c      	lsrs	r4, r5, #16
 800a672:	fb08 4202 	mla	r2, r8, r2, r4
 800a676:	b2ad      	uxth	r5, r5
 800a678:	1b75      	subs	r5, r6, r5
 800a67a:	b296      	uxth	r6, r2
 800a67c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 800a680:	fa15 f383 	uxtah	r3, r5, r3
 800a684:	eb06 4623 	add.w	r6, r6, r3, asr #16
 800a688:	b29b      	uxth	r3, r3
 800a68a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800a68e:	45f3      	cmp	fp, lr
 800a690:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800a694:	f84c 3b04 	str.w	r3, [ip], #4
 800a698:	ea4f 4626 	mov.w	r6, r6, asr #16
 800a69c:	d2e0      	bcs.n	800a660 <quorem+0x44>
 800a69e:	9b00      	ldr	r3, [sp, #0]
 800a6a0:	f85a 3003 	ldr.w	r3, [sl, r3]
 800a6a4:	b98b      	cbnz	r3, 800a6ca <quorem+0xae>
 800a6a6:	9a01      	ldr	r2, [sp, #4]
 800a6a8:	1f13      	subs	r3, r2, #4
 800a6aa:	459a      	cmp	sl, r3
 800a6ac:	d20c      	bcs.n	800a6c8 <quorem+0xac>
 800a6ae:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800a6b2:	b94b      	cbnz	r3, 800a6c8 <quorem+0xac>
 800a6b4:	f1a2 0308 	sub.w	r3, r2, #8
 800a6b8:	e002      	b.n	800a6c0 <quorem+0xa4>
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	3b04      	subs	r3, #4
 800a6be:	b91a      	cbnz	r2, 800a6c8 <quorem+0xac>
 800a6c0:	459a      	cmp	sl, r3
 800a6c2:	f107 37ff 	add.w	r7, r7, #4294967295
 800a6c6:	d3f8      	bcc.n	800a6ba <quorem+0x9e>
 800a6c8:	6107      	str	r7, [r0, #16]
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	f001 fd60 	bl	800c190 <__mcmp>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	db2d      	blt.n	800a730 <quorem+0x114>
 800a6d4:	f108 0801 	add.w	r8, r8, #1
 800a6d8:	4655      	mov	r5, sl
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f859 1b04 	ldr.w	r1, [r9], #4
 800a6e0:	6828      	ldr	r0, [r5, #0]
 800a6e2:	b28a      	uxth	r2, r1
 800a6e4:	1a9a      	subs	r2, r3, r2
 800a6e6:	0c0b      	lsrs	r3, r1, #16
 800a6e8:	fa12 f280 	uxtah	r2, r2, r0
 800a6ec:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 800a6f0:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800a6f4:	b292      	uxth	r2, r2
 800a6f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a6fa:	45cb      	cmp	fp, r9
 800a6fc:	f845 2b04 	str.w	r2, [r5], #4
 800a700:	ea4f 4323 	mov.w	r3, r3, asr #16
 800a704:	d2ea      	bcs.n	800a6dc <quorem+0xc0>
 800a706:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 800a70a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
 800a70e:	b97a      	cbnz	r2, 800a730 <quorem+0x114>
 800a710:	1f1a      	subs	r2, r3, #4
 800a712:	4592      	cmp	sl, r2
 800a714:	d20b      	bcs.n	800a72e <quorem+0x112>
 800a716:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800a71a:	b942      	cbnz	r2, 800a72e <quorem+0x112>
 800a71c:	3b08      	subs	r3, #8
 800a71e:	e002      	b.n	800a726 <quorem+0x10a>
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	3b04      	subs	r3, #4
 800a724:	b91a      	cbnz	r2, 800a72e <quorem+0x112>
 800a726:	459a      	cmp	sl, r3
 800a728:	f107 37ff 	add.w	r7, r7, #4294967295
 800a72c:	d3f8      	bcc.n	800a720 <quorem+0x104>
 800a72e:	6127      	str	r7, [r4, #16]
 800a730:	4640      	mov	r0, r8
 800a732:	b003      	add	sp, #12
 800a734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a738:	2000      	movs	r0, #0
 800a73a:	b003      	add	sp, #12
 800a73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a740 <_dtoa_r>:
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	ec55 4b10 	vmov	r4, r5, d0
 800a748:	b09b      	sub	sp, #108	; 0x6c
 800a74a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800a74c:	9102      	str	r1, [sp, #8]
 800a74e:	4681      	mov	r9, r0
 800a750:	9207      	str	r2, [sp, #28]
 800a752:	9305      	str	r3, [sp, #20]
 800a754:	e9cd 4500 	strd	r4, r5, [sp]
 800a758:	b156      	cbz	r6, 800a770 <_dtoa_r+0x30>
 800a75a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a75c:	6072      	str	r2, [r6, #4]
 800a75e:	2301      	movs	r3, #1
 800a760:	4093      	lsls	r3, r2
 800a762:	60b3      	str	r3, [r6, #8]
 800a764:	4631      	mov	r1, r6
 800a766:	f001 fb23 	bl	800bdb0 <_Bfree>
 800a76a:	2300      	movs	r3, #0
 800a76c:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800a770:	f1b5 0800 	subs.w	r8, r5, #0
 800a774:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a776:	bfb4      	ite	lt
 800a778:	2301      	movlt	r3, #1
 800a77a:	2300      	movge	r3, #0
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	4b76      	ldr	r3, [pc, #472]	; (800a958 <_dtoa_r+0x218>)
 800a780:	bfbc      	itt	lt
 800a782:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
 800a786:	f8cd 8004 	strlt.w	r8, [sp, #4]
 800a78a:	ea33 0308 	bics.w	r3, r3, r8
 800a78e:	f000 80a6 	beq.w	800a8de <_dtoa_r+0x19e>
 800a792:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a796:	2200      	movs	r2, #0
 800a798:	2300      	movs	r3, #0
 800a79a:	4630      	mov	r0, r6
 800a79c:	4639      	mov	r1, r7
 800a79e:	f7f6 facd 	bl	8000d3c <__aeabi_dcmpeq>
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	b178      	cbz	r0, 800a7c6 <_dtoa_r+0x86>
 800a7a6:	9a05      	ldr	r2, [sp, #20]
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	6013      	str	r3, [r2, #0]
 800a7ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f000 80c0 	beq.w	800a934 <_dtoa_r+0x1f4>
 800a7b4:	4b69      	ldr	r3, [pc, #420]	; (800a95c <_dtoa_r+0x21c>)
 800a7b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a7b8:	f103 3bff 	add.w	fp, r3, #4294967295
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	4658      	mov	r0, fp
 800a7c0:	b01b      	add	sp, #108	; 0x6c
 800a7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c6:	aa18      	add	r2, sp, #96	; 0x60
 800a7c8:	a919      	add	r1, sp, #100	; 0x64
 800a7ca:	ec47 6b10 	vmov	d0, r6, r7
 800a7ce:	4648      	mov	r0, r9
 800a7d0:	f001 fd70 	bl	800c2b4 <__d2b>
 800a7d4:	ea5f 5418 	movs.w	r4, r8, lsr #20
 800a7d8:	4682      	mov	sl, r0
 800a7da:	f040 80a0 	bne.w	800a91e <_dtoa_r+0x1de>
 800a7de:	e9dd 5418 	ldrd	r5, r4, [sp, #96]	; 0x60
 800a7e2:	442c      	add	r4, r5
 800a7e4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a7e8:	2b20      	cmp	r3, #32
 800a7ea:	f340 842c 	ble.w	800b046 <_dtoa_r+0x906>
 800a7ee:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800a7f2:	fa08 f803 	lsl.w	r8, r8, r3
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800a7fc:	fa23 f000 	lsr.w	r0, r3, r0
 800a800:	ea48 0000 	orr.w	r0, r8, r0
 800a804:	f7f5 ffb8 	bl	8000778 <__aeabi_ui2d>
 800a808:	2301      	movs	r3, #1
 800a80a:	4606      	mov	r6, r0
 800a80c:	3c01      	subs	r4, #1
 800a80e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a812:	930f      	str	r3, [sp, #60]	; 0x3c
 800a814:	4630      	mov	r0, r6
 800a816:	4639      	mov	r1, r7
 800a818:	2200      	movs	r2, #0
 800a81a:	4b51      	ldr	r3, [pc, #324]	; (800a960 <_dtoa_r+0x220>)
 800a81c:	f7f5 fe6e 	bl	80004fc <__aeabi_dsub>
 800a820:	a347      	add	r3, pc, #284	; (adr r3, 800a940 <_dtoa_r+0x200>)
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	f7f6 f821 	bl	800086c <__aeabi_dmul>
 800a82a:	a347      	add	r3, pc, #284	; (adr r3, 800a948 <_dtoa_r+0x208>)
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	f7f5 fe66 	bl	8000500 <__adddf3>
 800a834:	4606      	mov	r6, r0
 800a836:	4620      	mov	r0, r4
 800a838:	460f      	mov	r7, r1
 800a83a:	f7f5 ffad 	bl	8000798 <__aeabi_i2d>
 800a83e:	a344      	add	r3, pc, #272	; (adr r3, 800a950 <_dtoa_r+0x210>)
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f7f6 f812 	bl	800086c <__aeabi_dmul>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	4630      	mov	r0, r6
 800a84e:	4639      	mov	r1, r7
 800a850:	f7f5 fe56 	bl	8000500 <__adddf3>
 800a854:	4606      	mov	r6, r0
 800a856:	460f      	mov	r7, r1
 800a858:	f7f6 fab8 	bl	8000dcc <__aeabi_d2iz>
 800a85c:	2200      	movs	r2, #0
 800a85e:	9006      	str	r0, [sp, #24]
 800a860:	2300      	movs	r3, #0
 800a862:	4630      	mov	r0, r6
 800a864:	4639      	mov	r1, r7
 800a866:	f7f6 fa73 	bl	8000d50 <__aeabi_dcmplt>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	f040 8273 	bne.w	800ad56 <_dtoa_r+0x616>
 800a870:	9e06      	ldr	r6, [sp, #24]
 800a872:	2e16      	cmp	r6, #22
 800a874:	f200 825d 	bhi.w	800ad32 <_dtoa_r+0x5f2>
 800a878:	4b3a      	ldr	r3, [pc, #232]	; (800a964 <_dtoa_r+0x224>)
 800a87a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a87e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a882:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a886:	f7f6 fa81 	bl	8000d8c <__aeabi_dcmpgt>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	f000 83d7 	beq.w	800b03e <_dtoa_r+0x8fe>
 800a890:	1e73      	subs	r3, r6, #1
 800a892:	9306      	str	r3, [sp, #24]
 800a894:	2300      	movs	r3, #0
 800a896:	930d      	str	r3, [sp, #52]	; 0x34
 800a898:	1b2c      	subs	r4, r5, r4
 800a89a:	f1b4 0801 	subs.w	r8, r4, #1
 800a89e:	f100 8254 	bmi.w	800ad4a <_dtoa_r+0x60a>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	9308      	str	r3, [sp, #32]
 800a8a6:	9b06      	ldr	r3, [sp, #24]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f2c0 8245 	blt.w	800ad38 <_dtoa_r+0x5f8>
 800a8ae:	4498      	add	r8, r3
 800a8b0:	930c      	str	r3, [sp, #48]	; 0x30
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8b6:	9b02      	ldr	r3, [sp, #8]
 800a8b8:	2b09      	cmp	r3, #9
 800a8ba:	d85b      	bhi.n	800a974 <_dtoa_r+0x234>
 800a8bc:	2b05      	cmp	r3, #5
 800a8be:	f340 83c0 	ble.w	800b042 <_dtoa_r+0x902>
 800a8c2:	3b04      	subs	r3, #4
 800a8c4:	9302      	str	r3, [sp, #8]
 800a8c6:	2500      	movs	r5, #0
 800a8c8:	9b02      	ldr	r3, [sp, #8]
 800a8ca:	3b02      	subs	r3, #2
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	f200 8498 	bhi.w	800b202 <_dtoa_r+0xac2>
 800a8d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a8d6:	03df      	.short	0x03df
 800a8d8:	03e803bf 	.word	0x03e803bf
 800a8dc:	04f5      	.short	0x04f5
 800a8de:	9a05      	ldr	r2, [sp, #20]
 800a8e0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8e4:	6013      	str	r3, [r2, #0]
 800a8e6:	9b00      	ldr	r3, [sp, #0]
 800a8e8:	b983      	cbnz	r3, 800a90c <_dtoa_r+0x1cc>
 800a8ea:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a8ee:	b96b      	cbnz	r3, 800a90c <_dtoa_r+0x1cc>
 800a8f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a8f2:	f8df b074 	ldr.w	fp, [pc, #116]	; 800a968 <_dtoa_r+0x228>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f43f af61 	beq.w	800a7be <_dtoa_r+0x7e>
 800a8fc:	f10b 0308 	add.w	r3, fp, #8
 800a900:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a902:	4658      	mov	r0, fp
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	b01b      	add	sp, #108	; 0x6c
 800a908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a90e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800a96c <_dtoa_r+0x22c>
 800a912:	2b00      	cmp	r3, #0
 800a914:	f43f af53 	beq.w	800a7be <_dtoa_r+0x7e>
 800a918:	f10b 0303 	add.w	r3, fp, #3
 800a91c:	e7f0      	b.n	800a900 <_dtoa_r+0x1c0>
 800a91e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a922:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a926:	950f      	str	r5, [sp, #60]	; 0x3c
 800a928:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a92c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a930:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800a932:	e76f      	b.n	800a814 <_dtoa_r+0xd4>
 800a934:	f8df b038 	ldr.w	fp, [pc, #56]	; 800a970 <_dtoa_r+0x230>
 800a938:	4658      	mov	r0, fp
 800a93a:	b01b      	add	sp, #108	; 0x6c
 800a93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a940:	636f4361 	.word	0x636f4361
 800a944:	3fd287a7 	.word	0x3fd287a7
 800a948:	8b60c8b3 	.word	0x8b60c8b3
 800a94c:	3fc68a28 	.word	0x3fc68a28
 800a950:	509f79fb 	.word	0x509f79fb
 800a954:	3fd34413 	.word	0x3fd34413
 800a958:	7ff00000 	.word	0x7ff00000
 800a95c:	0800cbc5 	.word	0x0800cbc5
 800a960:	3ff80000 	.word	0x3ff80000
 800a964:	0800cc20 	.word	0x0800cc20
 800a968:	0800cbe8 	.word	0x0800cbe8
 800a96c:	0800cbf4 	.word	0x0800cbf4
 800a970:	0800cbc4 	.word	0x0800cbc4
 800a974:	f04f 34ff 	mov.w	r4, #4294967295
 800a978:	2501      	movs	r5, #1
 800a97a:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800a97e:	2300      	movs	r3, #0
 800a980:	9302      	str	r3, [sp, #8]
 800a982:	9307      	str	r3, [sp, #28]
 800a984:	2100      	movs	r1, #0
 800a986:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800a98a:	940e      	str	r4, [sp, #56]	; 0x38
 800a98c:	4648      	mov	r0, r9
 800a98e:	f001 f9e9 	bl	800bd64 <_Balloc>
 800a992:	2c0e      	cmp	r4, #14
 800a994:	4683      	mov	fp, r0
 800a996:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800a99a:	f200 80fb 	bhi.w	800ab94 <_dtoa_r+0x454>
 800a99e:	2d00      	cmp	r5, #0
 800a9a0:	f000 80f8 	beq.w	800ab94 <_dtoa_r+0x454>
 800a9a4:	ed9d 7b00 	vldr	d7, [sp]
 800a9a8:	9906      	ldr	r1, [sp, #24]
 800a9aa:	2900      	cmp	r1, #0
 800a9ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a9b0:	f340 83e5 	ble.w	800b17e <_dtoa_r+0xa3e>
 800a9b4:	4b9d      	ldr	r3, [pc, #628]	; (800ac2c <_dtoa_r+0x4ec>)
 800a9b6:	f001 020f 	and.w	r2, r1, #15
 800a9ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9be:	ed93 7b00 	vldr	d7, [r3]
 800a9c2:	110c      	asrs	r4, r1, #4
 800a9c4:	06e2      	lsls	r2, r4, #27
 800a9c6:	ed8d 7b00 	vstr	d7, [sp]
 800a9ca:	f140 849e 	bpl.w	800b30a <_dtoa_r+0xbca>
 800a9ce:	4b98      	ldr	r3, [pc, #608]	; (800ac30 <_dtoa_r+0x4f0>)
 800a9d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9d8:	f7f6 f872 	bl	8000ac0 <__aeabi_ddiv>
 800a9dc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800a9e0:	f004 040f 	and.w	r4, r4, #15
 800a9e4:	2603      	movs	r6, #3
 800a9e6:	b17c      	cbz	r4, 800aa08 <_dtoa_r+0x2c8>
 800a9e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ec:	4d90      	ldr	r5, [pc, #576]	; (800ac30 <_dtoa_r+0x4f0>)
 800a9ee:	07e3      	lsls	r3, r4, #31
 800a9f0:	d504      	bpl.n	800a9fc <_dtoa_r+0x2bc>
 800a9f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9f6:	f7f5 ff39 	bl	800086c <__aeabi_dmul>
 800a9fa:	3601      	adds	r6, #1
 800a9fc:	1064      	asrs	r4, r4, #1
 800a9fe:	f105 0508 	add.w	r5, r5, #8
 800aa02:	d1f4      	bne.n	800a9ee <_dtoa_r+0x2ae>
 800aa04:	e9cd 0100 	strd	r0, r1, [sp]
 800aa08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa0c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800aa10:	f7f6 f856 	bl	8000ac0 <__aeabi_ddiv>
 800aa14:	e9cd 0100 	strd	r0, r1, [sp]
 800aa18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa1a:	b143      	cbz	r3, 800aa2e <_dtoa_r+0x2ee>
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4b85      	ldr	r3, [pc, #532]	; (800ac34 <_dtoa_r+0x4f4>)
 800aa20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa24:	f7f6 f994 	bl	8000d50 <__aeabi_dcmplt>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	f040 84ff 	bne.w	800b42c <_dtoa_r+0xcec>
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f7f5 feb2 	bl	8000798 <__aeabi_i2d>
 800aa34:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa38:	f7f5 ff18 	bl	800086c <__aeabi_dmul>
 800aa3c:	4b7e      	ldr	r3, [pc, #504]	; (800ac38 <_dtoa_r+0x4f8>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f7f5 fd5e 	bl	8000500 <__adddf3>
 800aa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa46:	4606      	mov	r6, r0
 800aa48:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 841c 	beq.w	800b28a <_dtoa_r+0xb4a>
 800aa52:	9b06      	ldr	r3, [sp, #24]
 800aa54:	9316      	str	r3, [sp, #88]	; 0x58
 800aa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa58:	9312      	str	r3, [sp, #72]	; 0x48
 800aa5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa5e:	f7f6 f9b5 	bl	8000dcc <__aeabi_d2iz>
 800aa62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa64:	4b71      	ldr	r3, [pc, #452]	; (800ac2c <_dtoa_r+0x4ec>)
 800aa66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa6a:	ed13 7b02 	vldr	d7, [r3, #-8]
 800aa6e:	f100 0530 	add.w	r5, r0, #48	; 0x30
 800aa72:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800aa76:	f7f5 fe8f 	bl	8000798 <__aeabi_i2d>
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa82:	e9cd 6700 	strd	r6, r7, [sp]
 800aa86:	f7f5 fd39 	bl	80004fc <__aeabi_dsub>
 800aa8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa8c:	b2ed      	uxtb	r5, r5
 800aa8e:	4606      	mov	r6, r0
 800aa90:	460f      	mov	r7, r1
 800aa92:	f10b 0401 	add.w	r4, fp, #1
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f000 8458 	beq.w	800b34c <_dtoa_r+0xc0c>
 800aa9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	4966      	ldr	r1, [pc, #408]	; (800ac3c <_dtoa_r+0x4fc>)
 800aaa4:	f7f6 f80c 	bl	8000ac0 <__aeabi_ddiv>
 800aaa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aaac:	f7f5 fd26 	bl	80004fc <__aeabi_dsub>
 800aab0:	f88b 5000 	strb.w	r5, [fp]
 800aab4:	4632      	mov	r2, r6
 800aab6:	463b      	mov	r3, r7
 800aab8:	e9cd 0100 	strd	r0, r1, [sp]
 800aabc:	f7f6 f966 	bl	8000d8c <__aeabi_dcmpgt>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	f040 8502 	bne.w	800b4ca <_dtoa_r+0xd8a>
 800aac6:	4632      	mov	r2, r6
 800aac8:	463b      	mov	r3, r7
 800aaca:	2000      	movs	r0, #0
 800aacc:	4959      	ldr	r1, [pc, #356]	; (800ac34 <_dtoa_r+0x4f4>)
 800aace:	f7f5 fd15 	bl	80004fc <__aeabi_dsub>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aada:	f7f6 f957 	bl	8000d8c <__aeabi_dcmpgt>
 800aade:	2800      	cmp	r0, #0
 800aae0:	f040 84fb 	bne.w	800b4da <_dtoa_r+0xd9a>
 800aae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aae6:	2a01      	cmp	r2, #1
 800aae8:	d050      	beq.n	800ab8c <_dtoa_r+0x44c>
 800aaea:	445a      	add	r2, fp
 800aaec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aaf0:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800aaf4:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 800aaf8:	4692      	mov	sl, r2
 800aafa:	46cb      	mov	fp, r9
 800aafc:	e9dd 8900 	ldrd	r8, r9, [sp]
 800ab00:	e00c      	b.n	800ab1c <_dtoa_r+0x3dc>
 800ab02:	2000      	movs	r0, #0
 800ab04:	494b      	ldr	r1, [pc, #300]	; (800ac34 <_dtoa_r+0x4f4>)
 800ab06:	f7f5 fcf9 	bl	80004fc <__aeabi_dsub>
 800ab0a:	4642      	mov	r2, r8
 800ab0c:	464b      	mov	r3, r9
 800ab0e:	f7f6 f91f 	bl	8000d50 <__aeabi_dcmplt>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	f040 84dc 	bne.w	800b4d0 <_dtoa_r+0xd90>
 800ab18:	4554      	cmp	r4, sl
 800ab1a:	d030      	beq.n	800ab7e <_dtoa_r+0x43e>
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	4649      	mov	r1, r9
 800ab20:	2200      	movs	r2, #0
 800ab22:	4b47      	ldr	r3, [pc, #284]	; (800ac40 <_dtoa_r+0x500>)
 800ab24:	f7f5 fea2 	bl	800086c <__aeabi_dmul>
 800ab28:	2200      	movs	r2, #0
 800ab2a:	4b45      	ldr	r3, [pc, #276]	; (800ac40 <_dtoa_r+0x500>)
 800ab2c:	4680      	mov	r8, r0
 800ab2e:	4689      	mov	r9, r1
 800ab30:	4630      	mov	r0, r6
 800ab32:	4639      	mov	r1, r7
 800ab34:	f7f5 fe9a 	bl	800086c <__aeabi_dmul>
 800ab38:	460f      	mov	r7, r1
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	f7f6 f946 	bl	8000dcc <__aeabi_d2iz>
 800ab40:	4605      	mov	r5, r0
 800ab42:	f7f5 fe29 	bl	8000798 <__aeabi_i2d>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	4639      	mov	r1, r7
 800ab4e:	f7f5 fcd5 	bl	80004fc <__aeabi_dsub>
 800ab52:	3530      	adds	r5, #48	; 0x30
 800ab54:	b2ed      	uxtb	r5, r5
 800ab56:	4642      	mov	r2, r8
 800ab58:	464b      	mov	r3, r9
 800ab5a:	f804 5b01 	strb.w	r5, [r4], #1
 800ab5e:	4606      	mov	r6, r0
 800ab60:	460f      	mov	r7, r1
 800ab62:	f7f6 f8f5 	bl	8000d50 <__aeabi_dcmplt>
 800ab66:	4632      	mov	r2, r6
 800ab68:	463b      	mov	r3, r7
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d0c9      	beq.n	800ab02 <_dtoa_r+0x3c2>
 800ab6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab70:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 800ab74:	9306      	str	r3, [sp, #24]
 800ab76:	46d9      	mov	r9, fp
 800ab78:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800ab7c:	e236      	b.n	800afec <_dtoa_r+0x8ac>
 800ab7e:	46d9      	mov	r9, fp
 800ab80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ab84:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 800ab88:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800ab8c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 800ab90:	e9cd 3400 	strd	r3, r4, [sp]
 800ab94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f2c0 80ae 	blt.w	800acf8 <_dtoa_r+0x5b8>
 800ab9c:	9a06      	ldr	r2, [sp, #24]
 800ab9e:	2a0e      	cmp	r2, #14
 800aba0:	f300 80aa 	bgt.w	800acf8 <_dtoa_r+0x5b8>
 800aba4:	4b21      	ldr	r3, [pc, #132]	; (800ac2c <_dtoa_r+0x4ec>)
 800aba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abaa:	ed93 7b00 	vldr	d7, [r3]
 800abae:	9b07      	ldr	r3, [sp, #28]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abb6:	f2c0 82be 	blt.w	800b136 <_dtoa_r+0x9f6>
 800abba:	e9dd 6700 	ldrd	r6, r7, [sp]
 800abbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abc2:	4630      	mov	r0, r6
 800abc4:	4639      	mov	r1, r7
 800abc6:	f7f5 ff7b 	bl	8000ac0 <__aeabi_ddiv>
 800abca:	f7f6 f8ff 	bl	8000dcc <__aeabi_d2iz>
 800abce:	4605      	mov	r5, r0
 800abd0:	f7f5 fde2 	bl	8000798 <__aeabi_i2d>
 800abd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abd8:	f7f5 fe48 	bl	800086c <__aeabi_dmul>
 800abdc:	460b      	mov	r3, r1
 800abde:	4602      	mov	r2, r0
 800abe0:	4639      	mov	r1, r7
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7f5 fc8a 	bl	80004fc <__aeabi_dsub>
 800abe8:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800abec:	f88b 3000 	strb.w	r3, [fp]
 800abf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	4606      	mov	r6, r0
 800abf6:	460f      	mov	r7, r1
 800abf8:	f10b 0401 	add.w	r4, fp, #1
 800abfc:	d053      	beq.n	800aca6 <_dtoa_r+0x566>
 800abfe:	2200      	movs	r2, #0
 800ac00:	4b0f      	ldr	r3, [pc, #60]	; (800ac40 <_dtoa_r+0x500>)
 800ac02:	f7f5 fe33 	bl	800086c <__aeabi_dmul>
 800ac06:	2200      	movs	r2, #0
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	460f      	mov	r7, r1
 800ac0e:	f7f6 f895 	bl	8000d3c <__aeabi_dcmpeq>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	f040 81ea 	bne.w	800afec <_dtoa_r+0x8ac>
 800ac18:	f8cd a000 	str.w	sl, [sp]
 800ac1c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ac20:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800ac24:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
 800ac28:	e017      	b.n	800ac5a <_dtoa_r+0x51a>
 800ac2a:	bf00      	nop
 800ac2c:	0800cc20 	.word	0x0800cc20
 800ac30:	0800cbf8 	.word	0x0800cbf8
 800ac34:	3ff00000 	.word	0x3ff00000
 800ac38:	401c0000 	.word	0x401c0000
 800ac3c:	3fe00000 	.word	0x3fe00000
 800ac40:	40240000 	.word	0x40240000
 800ac44:	f7f5 fe12 	bl	800086c <__aeabi_dmul>
 800ac48:	2200      	movs	r2, #0
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	460f      	mov	r7, r1
 800ac50:	f7f6 f874 	bl	8000d3c <__aeabi_dcmpeq>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	f040 833d 	bne.w	800b2d4 <_dtoa_r+0xb94>
 800ac5a:	464a      	mov	r2, r9
 800ac5c:	4653      	mov	r3, sl
 800ac5e:	4630      	mov	r0, r6
 800ac60:	4639      	mov	r1, r7
 800ac62:	f7f5 ff2d 	bl	8000ac0 <__aeabi_ddiv>
 800ac66:	f7f6 f8b1 	bl	8000dcc <__aeabi_d2iz>
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	f7f5 fd94 	bl	8000798 <__aeabi_i2d>
 800ac70:	464a      	mov	r2, r9
 800ac72:	4653      	mov	r3, sl
 800ac74:	f7f5 fdfa 	bl	800086c <__aeabi_dmul>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	4639      	mov	r1, r7
 800ac80:	f7f5 fc3c 	bl	80004fc <__aeabi_dsub>
 800ac84:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 800ac88:	f804 cb01 	strb.w	ip, [r4], #1
 800ac8c:	eba4 0c0b 	sub.w	ip, r4, fp
 800ac90:	45e0      	cmp	r8, ip
 800ac92:	4606      	mov	r6, r0
 800ac94:	460f      	mov	r7, r1
 800ac96:	f04f 0200 	mov.w	r2, #0
 800ac9a:	4bc1      	ldr	r3, [pc, #772]	; (800afa0 <_dtoa_r+0x860>)
 800ac9c:	d1d2      	bne.n	800ac44 <_dtoa_r+0x504>
 800ac9e:	f8dd a000 	ldr.w	sl, [sp]
 800aca2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800aca6:	4632      	mov	r2, r6
 800aca8:	463b      	mov	r3, r7
 800acaa:	4630      	mov	r0, r6
 800acac:	4639      	mov	r1, r7
 800acae:	f7f5 fc27 	bl	8000500 <__adddf3>
 800acb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acb6:	4606      	mov	r6, r0
 800acb8:	460f      	mov	r7, r1
 800acba:	f7f6 f867 	bl	8000d8c <__aeabi_dcmpgt>
 800acbe:	b958      	cbnz	r0, 800acd8 <_dtoa_r+0x598>
 800acc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acc4:	4630      	mov	r0, r6
 800acc6:	4639      	mov	r1, r7
 800acc8:	f7f6 f838 	bl	8000d3c <__aeabi_dcmpeq>
 800accc:	2800      	cmp	r0, #0
 800acce:	f000 818d 	beq.w	800afec <_dtoa_r+0x8ac>
 800acd2:	07e9      	lsls	r1, r5, #31
 800acd4:	f140 818a 	bpl.w	800afec <_dtoa_r+0x8ac>
 800acd8:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800acdc:	e005      	b.n	800acea <_dtoa_r+0x5aa>
 800acde:	459b      	cmp	fp, r3
 800ace0:	f000 8373 	beq.w	800b3ca <_dtoa_r+0xc8a>
 800ace4:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 800ace8:	461c      	mov	r4, r3
 800acea:	2d39      	cmp	r5, #57	; 0x39
 800acec:	f104 33ff 	add.w	r3, r4, #4294967295
 800acf0:	d0f5      	beq.n	800acde <_dtoa_r+0x59e>
 800acf2:	3501      	adds	r5, #1
 800acf4:	701d      	strb	r5, [r3, #0]
 800acf6:	e179      	b.n	800afec <_dtoa_r+0x8ac>
 800acf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acfa:	2a00      	cmp	r2, #0
 800acfc:	d03b      	beq.n	800ad76 <_dtoa_r+0x636>
 800acfe:	9a02      	ldr	r2, [sp, #8]
 800ad00:	2a01      	cmp	r2, #1
 800ad02:	f340 820b 	ble.w	800b11c <_dtoa_r+0x9dc>
 800ad06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad08:	1e5f      	subs	r7, r3, #1
 800ad0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad0c:	42bb      	cmp	r3, r7
 800ad0e:	f2c0 82e6 	blt.w	800b2de <_dtoa_r+0xb9e>
 800ad12:	1bdf      	subs	r7, r3, r7
 800ad14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f2c0 830b 	blt.w	800b332 <_dtoa_r+0xbf2>
 800ad1c:	9a08      	ldr	r2, [sp, #32]
 800ad1e:	4614      	mov	r4, r2
 800ad20:	441a      	add	r2, r3
 800ad22:	4498      	add	r8, r3
 800ad24:	9208      	str	r2, [sp, #32]
 800ad26:	2101      	movs	r1, #1
 800ad28:	4648      	mov	r0, r9
 800ad2a:	f001 f8db 	bl	800bee4 <__i2b>
 800ad2e:	4605      	mov	r5, r0
 800ad30:	e024      	b.n	800ad7c <_dtoa_r+0x63c>
 800ad32:	2301      	movs	r3, #1
 800ad34:	930d      	str	r3, [sp, #52]	; 0x34
 800ad36:	e5af      	b.n	800a898 <_dtoa_r+0x158>
 800ad38:	9a08      	ldr	r2, [sp, #32]
 800ad3a:	9b06      	ldr	r3, [sp, #24]
 800ad3c:	1ad2      	subs	r2, r2, r3
 800ad3e:	425b      	negs	r3, r3
 800ad40:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad42:	2300      	movs	r3, #0
 800ad44:	9208      	str	r2, [sp, #32]
 800ad46:	930c      	str	r3, [sp, #48]	; 0x30
 800ad48:	e5b5      	b.n	800a8b6 <_dtoa_r+0x176>
 800ad4a:	f1c4 0301 	rsb	r3, r4, #1
 800ad4e:	9308      	str	r3, [sp, #32]
 800ad50:	f04f 0800 	mov.w	r8, #0
 800ad54:	e5a7      	b.n	800a8a6 <_dtoa_r+0x166>
 800ad56:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	f7f5 fd1c 	bl	8000798 <__aeabi_i2d>
 800ad60:	4632      	mov	r2, r6
 800ad62:	463b      	mov	r3, r7
 800ad64:	f7f5 ffea 	bl	8000d3c <__aeabi_dcmpeq>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	f47f ad81 	bne.w	800a870 <_dtoa_r+0x130>
 800ad6e:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad72:	9306      	str	r3, [sp, #24]
 800ad74:	e57c      	b.n	800a870 <_dtoa_r+0x130>
 800ad76:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800ad78:	9c08      	ldr	r4, [sp, #32]
 800ad7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ad7c:	2c00      	cmp	r4, #0
 800ad7e:	dd0c      	ble.n	800ad9a <_dtoa_r+0x65a>
 800ad80:	f1b8 0f00 	cmp.w	r8, #0
 800ad84:	dd09      	ble.n	800ad9a <_dtoa_r+0x65a>
 800ad86:	4544      	cmp	r4, r8
 800ad88:	9a08      	ldr	r2, [sp, #32]
 800ad8a:	4623      	mov	r3, r4
 800ad8c:	bfa8      	it	ge
 800ad8e:	4643      	movge	r3, r8
 800ad90:	1ad2      	subs	r2, r2, r3
 800ad92:	9208      	str	r2, [sp, #32]
 800ad94:	1ae4      	subs	r4, r4, r3
 800ad96:	eba8 0803 	sub.w	r8, r8, r3
 800ad9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad9c:	b16b      	cbz	r3, 800adba <_dtoa_r+0x67a>
 800ad9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ada0:	2a00      	cmp	r2, #0
 800ada2:	f000 8290 	beq.w	800b2c6 <_dtoa_r+0xb86>
 800ada6:	1bde      	subs	r6, r3, r7
 800ada8:	2f00      	cmp	r7, #0
 800adaa:	f040 819b 	bne.w	800b0e4 <_dtoa_r+0x9a4>
 800adae:	4651      	mov	r1, sl
 800adb0:	4632      	mov	r2, r6
 800adb2:	4648      	mov	r0, r9
 800adb4:	f001 f946 	bl	800c044 <__pow5mult>
 800adb8:	4682      	mov	sl, r0
 800adba:	2101      	movs	r1, #1
 800adbc:	4648      	mov	r0, r9
 800adbe:	f001 f891 	bl	800bee4 <__i2b>
 800adc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adc4:	4606      	mov	r6, r0
 800adc6:	2a00      	cmp	r2, #0
 800adc8:	f040 8125 	bne.w	800b016 <_dtoa_r+0x8d6>
 800adcc:	9b02      	ldr	r3, [sp, #8]
 800adce:	2b01      	cmp	r3, #1
 800add0:	f340 816c 	ble.w	800b0ac <_dtoa_r+0x96c>
 800add4:	2001      	movs	r0, #1
 800add6:	4440      	add	r0, r8
 800add8:	f010 001f 	ands.w	r0, r0, #31
 800addc:	f000 8119 	beq.w	800b012 <_dtoa_r+0x8d2>
 800ade0:	f1c0 0320 	rsb	r3, r0, #32
 800ade4:	2b04      	cmp	r3, #4
 800ade6:	f340 83ac 	ble.w	800b542 <_dtoa_r+0xe02>
 800adea:	f1c0 001c 	rsb	r0, r0, #28
 800adee:	9b08      	ldr	r3, [sp, #32]
 800adf0:	4403      	add	r3, r0
 800adf2:	9308      	str	r3, [sp, #32]
 800adf4:	4404      	add	r4, r0
 800adf6:	4480      	add	r8, r0
 800adf8:	9b08      	ldr	r3, [sp, #32]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	dd05      	ble.n	800ae0a <_dtoa_r+0x6ca>
 800adfe:	4651      	mov	r1, sl
 800ae00:	461a      	mov	r2, r3
 800ae02:	4648      	mov	r0, r9
 800ae04:	f001 f96e 	bl	800c0e4 <__lshift>
 800ae08:	4682      	mov	sl, r0
 800ae0a:	f1b8 0f00 	cmp.w	r8, #0
 800ae0e:	dd05      	ble.n	800ae1c <_dtoa_r+0x6dc>
 800ae10:	4631      	mov	r1, r6
 800ae12:	4642      	mov	r2, r8
 800ae14:	4648      	mov	r0, r9
 800ae16:	f001 f965 	bl	800c0e4 <__lshift>
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d177      	bne.n	800af12 <_dtoa_r+0x7d2>
 800ae22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f340 8209 	ble.w	800b23c <_dtoa_r+0xafc>
 800ae2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 8089 	beq.w	800af44 <_dtoa_r+0x804>
 800ae32:	2c00      	cmp	r4, #0
 800ae34:	f300 816b 	bgt.w	800b10e <_dtoa_r+0x9ce>
 800ae38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f040 81cd 	bne.w	800b1da <_dtoa_r+0xa9a>
 800ae40:	46a8      	mov	r8, r5
 800ae42:	9a00      	ldr	r2, [sp, #0]
 800ae44:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ae48:	f002 0201 	and.w	r2, r2, #1
 800ae4c:	920a      	str	r2, [sp, #40]	; 0x28
 800ae4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae50:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ae54:	441a      	add	r2, r3
 800ae56:	465f      	mov	r7, fp
 800ae58:	9209      	str	r2, [sp, #36]	; 0x24
 800ae5a:	46b3      	mov	fp, r6
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	4650      	mov	r0, sl
 800ae60:	f7ff fbdc 	bl	800a61c <quorem>
 800ae64:	4629      	mov	r1, r5
 800ae66:	4604      	mov	r4, r0
 800ae68:	4650      	mov	r0, sl
 800ae6a:	f001 f991 	bl	800c190 <__mcmp>
 800ae6e:	4659      	mov	r1, fp
 800ae70:	4606      	mov	r6, r0
 800ae72:	4642      	mov	r2, r8
 800ae74:	4648      	mov	r0, r9
 800ae76:	f001 f9a7 	bl	800c1c8 <__mdiff>
 800ae7a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	68c3      	ldr	r3, [r0, #12]
 800ae82:	4601      	mov	r1, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f040 81d4 	bne.w	800b232 <_dtoa_r+0xaf2>
 800ae8a:	9008      	str	r0, [sp, #32]
 800ae8c:	4650      	mov	r0, sl
 800ae8e:	f001 f97f 	bl	800c190 <__mcmp>
 800ae92:	9a08      	ldr	r2, [sp, #32]
 800ae94:	9007      	str	r0, [sp, #28]
 800ae96:	4611      	mov	r1, r2
 800ae98:	4648      	mov	r0, r9
 800ae9a:	f000 ff89 	bl	800bdb0 <_Bfree>
 800ae9e:	9b07      	ldr	r3, [sp, #28]
 800aea0:	b933      	cbnz	r3, 800aeb0 <_dtoa_r+0x770>
 800aea2:	9a02      	ldr	r2, [sp, #8]
 800aea4:	b922      	cbnz	r2, 800aeb0 <_dtoa_r+0x770>
 800aea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 8319 	beq.w	800b4e0 <_dtoa_r+0xda0>
 800aeae:	9b02      	ldr	r3, [sp, #8]
 800aeb0:	2e00      	cmp	r6, #0
 800aeb2:	f2c0 821c 	blt.w	800b2ee <_dtoa_r+0xbae>
 800aeb6:	d105      	bne.n	800aec4 <_dtoa_r+0x784>
 800aeb8:	9a02      	ldr	r2, [sp, #8]
 800aeba:	b91a      	cbnz	r2, 800aec4 <_dtoa_r+0x784>
 800aebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	f000 8215 	beq.w	800b2ee <_dtoa_r+0xbae>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f107 0401 	add.w	r4, r7, #1
 800aeca:	f300 8225 	bgt.w	800b318 <_dtoa_r+0xbd8>
 800aece:	9b00      	ldr	r3, [sp, #0]
 800aed0:	703b      	strb	r3, [r7, #0]
 800aed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed4:	42bb      	cmp	r3, r7
 800aed6:	f000 8230 	beq.w	800b33a <_dtoa_r+0xbfa>
 800aeda:	4651      	mov	r1, sl
 800aedc:	2300      	movs	r3, #0
 800aede:	220a      	movs	r2, #10
 800aee0:	4648      	mov	r0, r9
 800aee2:	f000 ff6f 	bl	800bdc4 <__multadd>
 800aee6:	4545      	cmp	r5, r8
 800aee8:	4682      	mov	sl, r0
 800aeea:	4629      	mov	r1, r5
 800aeec:	f04f 0300 	mov.w	r3, #0
 800aef0:	f04f 020a 	mov.w	r2, #10
 800aef4:	4648      	mov	r0, r9
 800aef6:	f000 8196 	beq.w	800b226 <_dtoa_r+0xae6>
 800aefa:	f000 ff63 	bl	800bdc4 <__multadd>
 800aefe:	4641      	mov	r1, r8
 800af00:	4605      	mov	r5, r0
 800af02:	2300      	movs	r3, #0
 800af04:	220a      	movs	r2, #10
 800af06:	4648      	mov	r0, r9
 800af08:	f000 ff5c 	bl	800bdc4 <__multadd>
 800af0c:	4627      	mov	r7, r4
 800af0e:	4680      	mov	r8, r0
 800af10:	e7a4      	b.n	800ae5c <_dtoa_r+0x71c>
 800af12:	4631      	mov	r1, r6
 800af14:	4650      	mov	r0, sl
 800af16:	f001 f93b 	bl	800c190 <__mcmp>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	da81      	bge.n	800ae22 <_dtoa_r+0x6e2>
 800af1e:	9f06      	ldr	r7, [sp, #24]
 800af20:	4651      	mov	r1, sl
 800af22:	2300      	movs	r3, #0
 800af24:	220a      	movs	r2, #10
 800af26:	4648      	mov	r0, r9
 800af28:	3f01      	subs	r7, #1
 800af2a:	9706      	str	r7, [sp, #24]
 800af2c:	f000 ff4a 	bl	800bdc4 <__multadd>
 800af30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af32:	4682      	mov	sl, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	f040 82eb 	bne.w	800b510 <_dtoa_r+0xdd0>
 800af3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f340 82f3 	ble.w	800b528 <_dtoa_r+0xde8>
 800af42:	9309      	str	r3, [sp, #36]	; 0x24
 800af44:	465c      	mov	r4, fp
 800af46:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800af4a:	e002      	b.n	800af52 <_dtoa_r+0x812>
 800af4c:	f000 ff3a 	bl	800bdc4 <__multadd>
 800af50:	4682      	mov	sl, r0
 800af52:	4631      	mov	r1, r6
 800af54:	4650      	mov	r0, sl
 800af56:	f7ff fb61 	bl	800a61c <quorem>
 800af5a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800af5e:	f804 7b01 	strb.w	r7, [r4], #1
 800af62:	eba4 030b 	sub.w	r3, r4, fp
 800af66:	4598      	cmp	r8, r3
 800af68:	f04f 020a 	mov.w	r2, #10
 800af6c:	f04f 0300 	mov.w	r3, #0
 800af70:	4651      	mov	r1, sl
 800af72:	4648      	mov	r0, r9
 800af74:	dcea      	bgt.n	800af4c <_dtoa_r+0x80c>
 800af76:	2300      	movs	r3, #0
 800af78:	9700      	str	r7, [sp, #0]
 800af7a:	9302      	str	r3, [sp, #8]
 800af7c:	4651      	mov	r1, sl
 800af7e:	2201      	movs	r2, #1
 800af80:	4648      	mov	r0, r9
 800af82:	f001 f8af 	bl	800c0e4 <__lshift>
 800af86:	4631      	mov	r1, r6
 800af88:	4682      	mov	sl, r0
 800af8a:	f001 f901 	bl	800c190 <__mcmp>
 800af8e:	2800      	cmp	r0, #0
 800af90:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800af94:	dc14      	bgt.n	800afc0 <_dtoa_r+0x880>
 800af96:	d108      	bne.n	800afaa <_dtoa_r+0x86a>
 800af98:	9b00      	ldr	r3, [sp, #0]
 800af9a:	07db      	lsls	r3, r3, #31
 800af9c:	d410      	bmi.n	800afc0 <_dtoa_r+0x880>
 800af9e:	e004      	b.n	800afaa <_dtoa_r+0x86a>
 800afa0:	40240000 	.word	0x40240000
 800afa4:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 800afa8:	461c      	mov	r4, r3
 800afaa:	2a30      	cmp	r2, #48	; 0x30
 800afac:	f104 33ff 	add.w	r3, r4, #4294967295
 800afb0:	d0f8      	beq.n	800afa4 <_dtoa_r+0x864>
 800afb2:	e00b      	b.n	800afcc <_dtoa_r+0x88c>
 800afb4:	459b      	cmp	fp, r3
 800afb6:	f000 814e 	beq.w	800b256 <_dtoa_r+0xb16>
 800afba:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800afbe:	461c      	mov	r4, r3
 800afc0:	2a39      	cmp	r2, #57	; 0x39
 800afc2:	f104 33ff 	add.w	r3, r4, #4294967295
 800afc6:	d0f5      	beq.n	800afb4 <_dtoa_r+0x874>
 800afc8:	3201      	adds	r2, #1
 800afca:	701a      	strb	r2, [r3, #0]
 800afcc:	4631      	mov	r1, r6
 800afce:	4648      	mov	r0, r9
 800afd0:	f000 feee 	bl	800bdb0 <_Bfree>
 800afd4:	b155      	cbz	r5, 800afec <_dtoa_r+0x8ac>
 800afd6:	9902      	ldr	r1, [sp, #8]
 800afd8:	b121      	cbz	r1, 800afe4 <_dtoa_r+0x8a4>
 800afda:	42a9      	cmp	r1, r5
 800afdc:	d002      	beq.n	800afe4 <_dtoa_r+0x8a4>
 800afde:	4648      	mov	r0, r9
 800afe0:	f000 fee6 	bl	800bdb0 <_Bfree>
 800afe4:	4629      	mov	r1, r5
 800afe6:	4648      	mov	r0, r9
 800afe8:	f000 fee2 	bl	800bdb0 <_Bfree>
 800afec:	4651      	mov	r1, sl
 800afee:	4648      	mov	r0, r9
 800aff0:	f000 fede 	bl	800bdb0 <_Bfree>
 800aff4:	2200      	movs	r2, #0
 800aff6:	9b06      	ldr	r3, [sp, #24]
 800aff8:	7022      	strb	r2, [r4, #0]
 800affa:	9a05      	ldr	r2, [sp, #20]
 800affc:	3301      	adds	r3, #1
 800affe:	6013      	str	r3, [r2, #0]
 800b000:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b002:	2b00      	cmp	r3, #0
 800b004:	f43f abdb 	beq.w	800a7be <_dtoa_r+0x7e>
 800b008:	4658      	mov	r0, fp
 800b00a:	601c      	str	r4, [r3, #0]
 800b00c:	b01b      	add	sp, #108	; 0x6c
 800b00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b012:	201c      	movs	r0, #28
 800b014:	e6eb      	b.n	800adee <_dtoa_r+0x6ae>
 800b016:	4601      	mov	r1, r0
 800b018:	4648      	mov	r0, r9
 800b01a:	f001 f813 	bl	800c044 <__pow5mult>
 800b01e:	9b02      	ldr	r3, [sp, #8]
 800b020:	2b01      	cmp	r3, #1
 800b022:	4606      	mov	r6, r0
 800b024:	f340 80d4 	ble.w	800b1d0 <_dtoa_r+0xa90>
 800b028:	2300      	movs	r3, #0
 800b02a:	930c      	str	r3, [sp, #48]	; 0x30
 800b02c:	6933      	ldr	r3, [r6, #16]
 800b02e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b032:	6918      	ldr	r0, [r3, #16]
 800b034:	f000 ff06 	bl	800be44 <__hi0bits>
 800b038:	f1c0 0020 	rsb	r0, r0, #32
 800b03c:	e6cb      	b.n	800add6 <_dtoa_r+0x696>
 800b03e:	900d      	str	r0, [sp, #52]	; 0x34
 800b040:	e42a      	b.n	800a898 <_dtoa_r+0x158>
 800b042:	2501      	movs	r5, #1
 800b044:	e440      	b.n	800a8c8 <_dtoa_r+0x188>
 800b046:	f1c3 0820 	rsb	r8, r3, #32
 800b04a:	9b00      	ldr	r3, [sp, #0]
 800b04c:	fa03 f008 	lsl.w	r0, r3, r8
 800b050:	f7ff bbd8 	b.w	800a804 <_dtoa_r+0xc4>
 800b054:	2300      	movs	r3, #0
 800b056:	930a      	str	r3, [sp, #40]	; 0x28
 800b058:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b05c:	4413      	add	r3, r2
 800b05e:	930e      	str	r3, [sp, #56]	; 0x38
 800b060:	3301      	adds	r3, #1
 800b062:	2b01      	cmp	r3, #1
 800b064:	461e      	mov	r6, r3
 800b066:	9309      	str	r3, [sp, #36]	; 0x24
 800b068:	bfb8      	it	lt
 800b06a:	2601      	movlt	r6, #1
 800b06c:	2100      	movs	r1, #0
 800b06e:	2e17      	cmp	r6, #23
 800b070:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800b074:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b076:	f77f ac89 	ble.w	800a98c <_dtoa_r+0x24c>
 800b07a:	2201      	movs	r2, #1
 800b07c:	2304      	movs	r3, #4
 800b07e:	005b      	lsls	r3, r3, #1
 800b080:	f103 0014 	add.w	r0, r3, #20
 800b084:	42b0      	cmp	r0, r6
 800b086:	4611      	mov	r1, r2
 800b088:	f102 0201 	add.w	r2, r2, #1
 800b08c:	d9f7      	bls.n	800b07e <_dtoa_r+0x93e>
 800b08e:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800b092:	e47b      	b.n	800a98c <_dtoa_r+0x24c>
 800b094:	2300      	movs	r3, #0
 800b096:	930a      	str	r3, [sp, #40]	; 0x28
 800b098:	9e07      	ldr	r6, [sp, #28]
 800b09a:	2e00      	cmp	r6, #0
 800b09c:	f340 80e2 	ble.w	800b264 <_dtoa_r+0xb24>
 800b0a0:	960e      	str	r6, [sp, #56]	; 0x38
 800b0a2:	9609      	str	r6, [sp, #36]	; 0x24
 800b0a4:	e7e2      	b.n	800b06c <_dtoa_r+0x92c>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	930a      	str	r3, [sp, #40]	; 0x28
 800b0aa:	e7f5      	b.n	800b098 <_dtoa_r+0x958>
 800b0ac:	9b00      	ldr	r3, [sp, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f47f ae90 	bne.w	800add4 <_dtoa_r+0x694>
 800b0b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0b8:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f040 8192 	bne.w	800b3e6 <_dtoa_r+0xca6>
 800b0c2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800b0c6:	0d1b      	lsrs	r3, r3, #20
 800b0c8:	051b      	lsls	r3, r3, #20
 800b0ca:	b12b      	cbz	r3, 800b0d8 <_dtoa_r+0x998>
 800b0cc:	9b08      	ldr	r3, [sp, #32]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	9308      	str	r3, [sp, #32]
 800b0d2:	f108 0801 	add.w	r8, r8, #1
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0da:	930c      	str	r3, [sp, #48]	; 0x30
 800b0dc:	2a00      	cmp	r2, #0
 800b0de:	f43f ae79 	beq.w	800add4 <_dtoa_r+0x694>
 800b0e2:	e7a3      	b.n	800b02c <_dtoa_r+0x8ec>
 800b0e4:	463a      	mov	r2, r7
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	4648      	mov	r0, r9
 800b0ea:	f000 ffab 	bl	800c044 <__pow5mult>
 800b0ee:	4652      	mov	r2, sl
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	4648      	mov	r0, r9
 800b0f6:	f000 feff 	bl	800bef8 <__multiply>
 800b0fa:	4651      	mov	r1, sl
 800b0fc:	4607      	mov	r7, r0
 800b0fe:	4648      	mov	r0, r9
 800b100:	f000 fe56 	bl	800bdb0 <_Bfree>
 800b104:	46ba      	mov	sl, r7
 800b106:	2e00      	cmp	r6, #0
 800b108:	f43f ae57 	beq.w	800adba <_dtoa_r+0x67a>
 800b10c:	e64f      	b.n	800adae <_dtoa_r+0x66e>
 800b10e:	4629      	mov	r1, r5
 800b110:	4622      	mov	r2, r4
 800b112:	4648      	mov	r0, r9
 800b114:	f000 ffe6 	bl	800c0e4 <__lshift>
 800b118:	4605      	mov	r5, r0
 800b11a:	e68d      	b.n	800ae38 <_dtoa_r+0x6f8>
 800b11c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b11e:	2a00      	cmp	r2, #0
 800b120:	f000 815d 	beq.w	800b3de <_dtoa_r+0xc9e>
 800b124:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b128:	9a08      	ldr	r2, [sp, #32]
 800b12a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b12c:	4614      	mov	r4, r2
 800b12e:	441a      	add	r2, r3
 800b130:	4498      	add	r8, r3
 800b132:	9208      	str	r2, [sp, #32]
 800b134:	e5f7      	b.n	800ad26 <_dtoa_r+0x5e6>
 800b136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f73f ad3e 	bgt.w	800abba <_dtoa_r+0x47a>
 800b13e:	f040 80bc 	bne.w	800b2ba <_dtoa_r+0xb7a>
 800b142:	ec51 0b17 	vmov	r0, r1, d7
 800b146:	2200      	movs	r2, #0
 800b148:	4bb2      	ldr	r3, [pc, #712]	; (800b414 <_dtoa_r+0xcd4>)
 800b14a:	f7f5 fb8f 	bl	800086c <__aeabi_dmul>
 800b14e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b152:	f7f5 fe11 	bl	8000d78 <__aeabi_dcmpge>
 800b156:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b158:	4635      	mov	r5, r6
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d176      	bne.n	800b24c <_dtoa_r+0xb0c>
 800b15e:	9a06      	ldr	r2, [sp, #24]
 800b160:	2331      	movs	r3, #49	; 0x31
 800b162:	3201      	adds	r2, #1
 800b164:	9206      	str	r2, [sp, #24]
 800b166:	f88b 3000 	strb.w	r3, [fp]
 800b16a:	f10b 0401 	add.w	r4, fp, #1
 800b16e:	4631      	mov	r1, r6
 800b170:	4648      	mov	r0, r9
 800b172:	f000 fe1d 	bl	800bdb0 <_Bfree>
 800b176:	2d00      	cmp	r5, #0
 800b178:	f47f af34 	bne.w	800afe4 <_dtoa_r+0x8a4>
 800b17c:	e736      	b.n	800afec <_dtoa_r+0x8ac>
 800b17e:	f000 8142 	beq.w	800b406 <_dtoa_r+0xcc6>
 800b182:	9b06      	ldr	r3, [sp, #24]
 800b184:	425c      	negs	r4, r3
 800b186:	4ba4      	ldr	r3, [pc, #656]	; (800b418 <_dtoa_r+0xcd8>)
 800b188:	f004 020f 	and.w	r2, r4, #15
 800b18c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b198:	f7f5 fb68 	bl	800086c <__aeabi_dmul>
 800b19c:	1124      	asrs	r4, r4, #4
 800b19e:	e9cd 0100 	strd	r0, r1, [sp]
 800b1a2:	f000 81c6 	beq.w	800b532 <_dtoa_r+0xdf2>
 800b1a6:	4d9d      	ldr	r5, [pc, #628]	; (800b41c <_dtoa_r+0xcdc>)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	2602      	movs	r6, #2
 800b1ac:	07e7      	lsls	r7, r4, #31
 800b1ae:	d505      	bpl.n	800b1bc <_dtoa_r+0xa7c>
 800b1b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1b4:	f7f5 fb5a 	bl	800086c <__aeabi_dmul>
 800b1b8:	3601      	adds	r6, #1
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	1064      	asrs	r4, r4, #1
 800b1be:	f105 0508 	add.w	r5, r5, #8
 800b1c2:	d1f3      	bne.n	800b1ac <_dtoa_r+0xa6c>
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f43f ac27 	beq.w	800aa18 <_dtoa_r+0x2d8>
 800b1ca:	e9cd 0100 	strd	r0, r1, [sp]
 800b1ce:	e423      	b.n	800aa18 <_dtoa_r+0x2d8>
 800b1d0:	9b00      	ldr	r3, [sp, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f43f af6e 	beq.w	800b0b4 <_dtoa_r+0x974>
 800b1d8:	e726      	b.n	800b028 <_dtoa_r+0x8e8>
 800b1da:	6869      	ldr	r1, [r5, #4]
 800b1dc:	4648      	mov	r0, r9
 800b1de:	f000 fdc1 	bl	800bd64 <_Balloc>
 800b1e2:	692b      	ldr	r3, [r5, #16]
 800b1e4:	3302      	adds	r3, #2
 800b1e6:	009a      	lsls	r2, r3, #2
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	f105 010c 	add.w	r1, r5, #12
 800b1ee:	300c      	adds	r0, #12
 800b1f0:	f7f5 f8e6 	bl	80003c0 <memcpy>
 800b1f4:	4621      	mov	r1, r4
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	4648      	mov	r0, r9
 800b1fa:	f000 ff73 	bl	800c0e4 <__lshift>
 800b1fe:	4680      	mov	r8, r0
 800b200:	e61f      	b.n	800ae42 <_dtoa_r+0x702>
 800b202:	2400      	movs	r4, #0
 800b204:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800b208:	4621      	mov	r1, r4
 800b20a:	4648      	mov	r0, r9
 800b20c:	f000 fdaa 	bl	800bd64 <_Balloc>
 800b210:	f04f 33ff 	mov.w	r3, #4294967295
 800b214:	930e      	str	r3, [sp, #56]	; 0x38
 800b216:	9309      	str	r3, [sp, #36]	; 0x24
 800b218:	2301      	movs	r3, #1
 800b21a:	4683      	mov	fp, r0
 800b21c:	9407      	str	r4, [sp, #28]
 800b21e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800b222:	930a      	str	r3, [sp, #40]	; 0x28
 800b224:	e4b6      	b.n	800ab94 <_dtoa_r+0x454>
 800b226:	f000 fdcd 	bl	800bdc4 <__multadd>
 800b22a:	4627      	mov	r7, r4
 800b22c:	4605      	mov	r5, r0
 800b22e:	4680      	mov	r8, r0
 800b230:	e614      	b.n	800ae5c <_dtoa_r+0x71c>
 800b232:	4648      	mov	r0, r9
 800b234:	f000 fdbc 	bl	800bdb0 <_Bfree>
 800b238:	2301      	movs	r3, #1
 800b23a:	e639      	b.n	800aeb0 <_dtoa_r+0x770>
 800b23c:	9b02      	ldr	r3, [sp, #8]
 800b23e:	2b02      	cmp	r3, #2
 800b240:	f77f adf3 	ble.w	800ae2a <_dtoa_r+0x6ea>
 800b244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 80cf 	beq.w	800b3ea <_dtoa_r+0xcaa>
 800b24c:	9b07      	ldr	r3, [sp, #28]
 800b24e:	43db      	mvns	r3, r3
 800b250:	9306      	str	r3, [sp, #24]
 800b252:	465c      	mov	r4, fp
 800b254:	e78b      	b.n	800b16e <_dtoa_r+0xa2e>
 800b256:	9a06      	ldr	r2, [sp, #24]
 800b258:	2331      	movs	r3, #49	; 0x31
 800b25a:	3201      	adds	r2, #1
 800b25c:	9206      	str	r2, [sp, #24]
 800b25e:	f88b 3000 	strb.w	r3, [fp]
 800b262:	e6b3      	b.n	800afcc <_dtoa_r+0x88c>
 800b264:	2401      	movs	r4, #1
 800b266:	9409      	str	r4, [sp, #36]	; 0x24
 800b268:	9407      	str	r4, [sp, #28]
 800b26a:	f7ff bb8b 	b.w	800a984 <_dtoa_r+0x244>
 800b26e:	4630      	mov	r0, r6
 800b270:	f7f5 fa92 	bl	8000798 <__aeabi_i2d>
 800b274:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b278:	f7f5 faf8 	bl	800086c <__aeabi_dmul>
 800b27c:	2200      	movs	r2, #0
 800b27e:	4b68      	ldr	r3, [pc, #416]	; (800b420 <_dtoa_r+0xce0>)
 800b280:	f7f5 f93e 	bl	8000500 <__adddf3>
 800b284:	4606      	mov	r6, r0
 800b286:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800b28a:	2200      	movs	r2, #0
 800b28c:	4b61      	ldr	r3, [pc, #388]	; (800b414 <_dtoa_r+0xcd4>)
 800b28e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b292:	f7f5 f933 	bl	80004fc <__aeabi_dsub>
 800b296:	4632      	mov	r2, r6
 800b298:	463b      	mov	r3, r7
 800b29a:	4604      	mov	r4, r0
 800b29c:	460d      	mov	r5, r1
 800b29e:	f7f5 fd75 	bl	8000d8c <__aeabi_dcmpgt>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d14f      	bne.n	800b346 <_dtoa_r+0xc06>
 800b2a6:	4632      	mov	r2, r6
 800b2a8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	f7f5 fd4e 	bl	8000d50 <__aeabi_dcmplt>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	f43f ac69 	beq.w	800ab8c <_dtoa_r+0x44c>
 800b2ba:	2600      	movs	r6, #0
 800b2bc:	4635      	mov	r5, r6
 800b2be:	e7c5      	b.n	800b24c <_dtoa_r+0xb0c>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b2c4:	e6c8      	b.n	800b058 <_dtoa_r+0x918>
 800b2c6:	4651      	mov	r1, sl
 800b2c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2ca:	4648      	mov	r0, r9
 800b2cc:	f000 feba 	bl	800c044 <__pow5mult>
 800b2d0:	4682      	mov	sl, r0
 800b2d2:	e572      	b.n	800adba <_dtoa_r+0x67a>
 800b2d4:	f8dd a000 	ldr.w	sl, [sp]
 800b2d8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800b2dc:	e686      	b.n	800afec <_dtoa_r+0x8ac>
 800b2de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2e2:	1afb      	subs	r3, r7, r3
 800b2e4:	441a      	add	r2, r3
 800b2e6:	e9cd 720b 	strd	r7, r2, [sp, #44]	; 0x2c
 800b2ea:	2700      	movs	r7, #0
 800b2ec:	e512      	b.n	800ad14 <_dtoa_r+0x5d4>
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	9402      	str	r4, [sp, #8]
 800b2f2:	465e      	mov	r6, fp
 800b2f4:	f107 0401 	add.w	r4, r7, #1
 800b2f8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800b2fc:	f300 80ba 	bgt.w	800b474 <_dtoa_r+0xd34>
 800b300:	9b00      	ldr	r3, [sp, #0]
 800b302:	9502      	str	r5, [sp, #8]
 800b304:	703b      	strb	r3, [r7, #0]
 800b306:	4645      	mov	r5, r8
 800b308:	e660      	b.n	800afcc <_dtoa_r+0x88c>
 800b30a:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 800b30e:	2602      	movs	r6, #2
 800b310:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800b314:	f7ff bb67 	b.w	800a9e6 <_dtoa_r+0x2a6>
 800b318:	9b00      	ldr	r3, [sp, #0]
 800b31a:	2b39      	cmp	r3, #57	; 0x39
 800b31c:	465e      	mov	r6, fp
 800b31e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800b322:	f000 80b9 	beq.w	800b498 <_dtoa_r+0xd58>
 800b326:	9b00      	ldr	r3, [sp, #0]
 800b328:	9502      	str	r5, [sp, #8]
 800b32a:	3301      	adds	r3, #1
 800b32c:	703b      	strb	r3, [r7, #0]
 800b32e:	4645      	mov	r5, r8
 800b330:	e64c      	b.n	800afcc <_dtoa_r+0x88c>
 800b332:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800b336:	1a9c      	subs	r4, r3, r2
 800b338:	e4f5      	b.n	800ad26 <_dtoa_r+0x5e6>
 800b33a:	465e      	mov	r6, fp
 800b33c:	9502      	str	r5, [sp, #8]
 800b33e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800b342:	4645      	mov	r5, r8
 800b344:	e61a      	b.n	800af7c <_dtoa_r+0x83c>
 800b346:	2600      	movs	r6, #0
 800b348:	4635      	mov	r5, r6
 800b34a:	e708      	b.n	800b15e <_dtoa_r+0xa1e>
 800b34c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b350:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b354:	f7f5 fa8a 	bl	800086c <__aeabi_dmul>
 800b358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b35a:	f88b 5000 	strb.w	r5, [fp]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	e9cd 0100 	strd	r0, r1, [sp]
 800b364:	d020      	beq.n	800b3a8 <_dtoa_r+0xc68>
 800b366:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b368:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 800b36c:	445b      	add	r3, fp
 800b36e:	4698      	mov	r8, r3
 800b370:	2200      	movs	r2, #0
 800b372:	4b2c      	ldr	r3, [pc, #176]	; (800b424 <_dtoa_r+0xce4>)
 800b374:	4630      	mov	r0, r6
 800b376:	4639      	mov	r1, r7
 800b378:	f7f5 fa78 	bl	800086c <__aeabi_dmul>
 800b37c:	460f      	mov	r7, r1
 800b37e:	4606      	mov	r6, r0
 800b380:	f7f5 fd24 	bl	8000dcc <__aeabi_d2iz>
 800b384:	4605      	mov	r5, r0
 800b386:	f7f5 fa07 	bl	8000798 <__aeabi_i2d>
 800b38a:	3530      	adds	r5, #48	; 0x30
 800b38c:	4602      	mov	r2, r0
 800b38e:	460b      	mov	r3, r1
 800b390:	4630      	mov	r0, r6
 800b392:	4639      	mov	r1, r7
 800b394:	f7f5 f8b2 	bl	80004fc <__aeabi_dsub>
 800b398:	f804 5b01 	strb.w	r5, [r4], #1
 800b39c:	4544      	cmp	r4, r8
 800b39e:	4606      	mov	r6, r0
 800b3a0:	460f      	mov	r7, r1
 800b3a2:	d1e5      	bne.n	800b370 <_dtoa_r+0xc30>
 800b3a4:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800b3a8:	4b1f      	ldr	r3, [pc, #124]	; (800b428 <_dtoa_r+0xce8>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3b0:	f7f5 f8a6 	bl	8000500 <__adddf3>
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	463b      	mov	r3, r7
 800b3b8:	f7f5 fcca 	bl	8000d50 <__aeabi_dcmplt>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d070      	beq.n	800b4a2 <_dtoa_r+0xd62>
 800b3c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b3c2:	9306      	str	r3, [sp, #24]
 800b3c4:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800b3c8:	e48f      	b.n	800acea <_dtoa_r+0x5aa>
 800b3ca:	2330      	movs	r3, #48	; 0x30
 800b3cc:	f88b 3000 	strb.w	r3, [fp]
 800b3d0:	9b06      	ldr	r3, [sp, #24]
 800b3d2:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	9306      	str	r3, [sp, #24]
 800b3da:	465b      	mov	r3, fp
 800b3dc:	e489      	b.n	800acf2 <_dtoa_r+0x5b2>
 800b3de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b3e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b3e4:	e6a0      	b.n	800b128 <_dtoa_r+0x9e8>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e676      	b.n	800b0d8 <_dtoa_r+0x998>
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	2205      	movs	r2, #5
 800b3ee:	4648      	mov	r0, r9
 800b3f0:	f000 fce8 	bl	800bdc4 <__multadd>
 800b3f4:	4601      	mov	r1, r0
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	4650      	mov	r0, sl
 800b3fa:	f000 fec9 	bl	800c190 <__mcmp>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f73f aead 	bgt.w	800b15e <_dtoa_r+0xa1e>
 800b404:	e722      	b.n	800b24c <_dtoa_r+0xb0c>
 800b406:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 800b40a:	2602      	movs	r6, #2
 800b40c:	ed8d 7b00 	vstr	d7, [sp]
 800b410:	f7ff bb02 	b.w	800aa18 <_dtoa_r+0x2d8>
 800b414:	40140000 	.word	0x40140000
 800b418:	0800cc20 	.word	0x0800cc20
 800b41c:	0800cbf8 	.word	0x0800cbf8
 800b420:	401c0000 	.word	0x401c0000
 800b424:	40240000 	.word	0x40240000
 800b428:	3fe00000 	.word	0x3fe00000
 800b42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f43f af1d 	beq.w	800b26e <_dtoa_r+0xb2e>
 800b434:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b436:	2c00      	cmp	r4, #0
 800b438:	f77f aba8 	ble.w	800ab8c <_dtoa_r+0x44c>
 800b43c:	2200      	movs	r2, #0
 800b43e:	4b45      	ldr	r3, [pc, #276]	; (800b554 <_dtoa_r+0xe14>)
 800b440:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b444:	f7f5 fa12 	bl	800086c <__aeabi_dmul>
 800b448:	e9cd 0100 	strd	r0, r1, [sp]
 800b44c:	1c70      	adds	r0, r6, #1
 800b44e:	f7f5 f9a3 	bl	8000798 <__aeabi_i2d>
 800b452:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b456:	f7f5 fa09 	bl	800086c <__aeabi_dmul>
 800b45a:	4b3f      	ldr	r3, [pc, #252]	; (800b558 <_dtoa_r+0xe18>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	f7f5 f84f 	bl	8000500 <__adddf3>
 800b462:	9b06      	ldr	r3, [sp, #24]
 800b464:	9412      	str	r4, [sp, #72]	; 0x48
 800b466:	3b01      	subs	r3, #1
 800b468:	4606      	mov	r6, r0
 800b46a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800b46e:	9316      	str	r3, [sp, #88]	; 0x58
 800b470:	f7ff baf3 	b.w	800aa5a <_dtoa_r+0x31a>
 800b474:	4651      	mov	r1, sl
 800b476:	2201      	movs	r2, #1
 800b478:	4648      	mov	r0, r9
 800b47a:	f000 fe33 	bl	800c0e4 <__lshift>
 800b47e:	4631      	mov	r1, r6
 800b480:	4682      	mov	sl, r0
 800b482:	f000 fe85 	bl	800c190 <__mcmp>
 800b486:	2800      	cmp	r0, #0
 800b488:	dd3b      	ble.n	800b502 <_dtoa_r+0xdc2>
 800b48a:	9b00      	ldr	r3, [sp, #0]
 800b48c:	2b39      	cmp	r3, #57	; 0x39
 800b48e:	d003      	beq.n	800b498 <_dtoa_r+0xd58>
 800b490:	9b02      	ldr	r3, [sp, #8]
 800b492:	3331      	adds	r3, #49	; 0x31
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	e733      	b.n	800b300 <_dtoa_r+0xbc0>
 800b498:	2239      	movs	r2, #57	; 0x39
 800b49a:	9502      	str	r5, [sp, #8]
 800b49c:	703a      	strb	r2, [r7, #0]
 800b49e:	4645      	mov	r5, r8
 800b4a0:	e58e      	b.n	800afc0 <_dtoa_r+0x880>
 800b4a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	492c      	ldr	r1, [pc, #176]	; (800b55c <_dtoa_r+0xe1c>)
 800b4aa:	f7f5 f827 	bl	80004fc <__aeabi_dsub>
 800b4ae:	4632      	mov	r2, r6
 800b4b0:	463b      	mov	r3, r7
 800b4b2:	f7f5 fc6b 	bl	8000d8c <__aeabi_dcmpgt>
 800b4b6:	b910      	cbnz	r0, 800b4be <_dtoa_r+0xd7e>
 800b4b8:	f7ff bb68 	b.w	800ab8c <_dtoa_r+0x44c>
 800b4bc:	4614      	mov	r4, r2
 800b4be:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800b4c2:	2b30      	cmp	r3, #48	; 0x30
 800b4c4:	f104 32ff 	add.w	r2, r4, #4294967295
 800b4c8:	d0f8      	beq.n	800b4bc <_dtoa_r+0xd7c>
 800b4ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b4cc:	9306      	str	r3, [sp, #24]
 800b4ce:	e58d      	b.n	800afec <_dtoa_r+0x8ac>
 800b4d0:	46d9      	mov	r9, fp
 800b4d2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 800b4d6:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800b4da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b4dc:	9306      	str	r3, [sp, #24]
 800b4de:	e404      	b.n	800acea <_dtoa_r+0x5aa>
 800b4e0:	9b00      	ldr	r3, [sp, #0]
 800b4e2:	2b39      	cmp	r3, #57	; 0x39
 800b4e4:	4621      	mov	r1, r4
 800b4e6:	4632      	mov	r2, r6
 800b4e8:	f107 0401 	add.w	r4, r7, #1
 800b4ec:	465e      	mov	r6, fp
 800b4ee:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800b4f2:	d0d1      	beq.n	800b498 <_dtoa_r+0xd58>
 800b4f4:	2a00      	cmp	r2, #0
 800b4f6:	f77f af03 	ble.w	800b300 <_dtoa_r+0xbc0>
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	3331      	adds	r3, #49	; 0x31
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	e6fe      	b.n	800b300 <_dtoa_r+0xbc0>
 800b502:	f47f aefd 	bne.w	800b300 <_dtoa_r+0xbc0>
 800b506:	9b00      	ldr	r3, [sp, #0]
 800b508:	07da      	lsls	r2, r3, #31
 800b50a:	f57f aef9 	bpl.w	800b300 <_dtoa_r+0xbc0>
 800b50e:	e7bc      	b.n	800b48a <_dtoa_r+0xd4a>
 800b510:	4629      	mov	r1, r5
 800b512:	2300      	movs	r3, #0
 800b514:	220a      	movs	r2, #10
 800b516:	4648      	mov	r0, r9
 800b518:	f000 fc54 	bl	800bdc4 <__multadd>
 800b51c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b51e:	2b00      	cmp	r3, #0
 800b520:	4605      	mov	r5, r0
 800b522:	dd09      	ble.n	800b538 <_dtoa_r+0xdf8>
 800b524:	9309      	str	r3, [sp, #36]	; 0x24
 800b526:	e484      	b.n	800ae32 <_dtoa_r+0x6f2>
 800b528:	9b02      	ldr	r3, [sp, #8]
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	dc0e      	bgt.n	800b54c <_dtoa_r+0xe0c>
 800b52e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b530:	e507      	b.n	800af42 <_dtoa_r+0x802>
 800b532:	2602      	movs	r6, #2
 800b534:	f7ff ba70 	b.w	800aa18 <_dtoa_r+0x2d8>
 800b538:	9b02      	ldr	r3, [sp, #8]
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	dc06      	bgt.n	800b54c <_dtoa_r+0xe0c>
 800b53e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b540:	e7f0      	b.n	800b524 <_dtoa_r+0xde4>
 800b542:	f43f ac59 	beq.w	800adf8 <_dtoa_r+0x6b8>
 800b546:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800b54a:	e450      	b.n	800adee <_dtoa_r+0x6ae>
 800b54c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b54e:	9309      	str	r3, [sp, #36]	; 0x24
 800b550:	e678      	b.n	800b244 <_dtoa_r+0xb04>
 800b552:	bf00      	nop
 800b554:	40240000 	.word	0x40240000
 800b558:	401c0000 	.word	0x401c0000
 800b55c:	3fe00000 	.word	0x3fe00000

0800b560 <_malloc_trim_r>:
 800b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b562:	4f24      	ldr	r7, [pc, #144]	; (800b5f4 <_malloc_trim_r+0x94>)
 800b564:	460c      	mov	r4, r1
 800b566:	4606      	mov	r6, r0
 800b568:	f000 fbf0 	bl	800bd4c <__malloc_lock>
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	685d      	ldr	r5, [r3, #4]
 800b570:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800b574:	310f      	adds	r1, #15
 800b576:	f025 0503 	bic.w	r5, r5, #3
 800b57a:	4429      	add	r1, r5
 800b57c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800b580:	f021 010f 	bic.w	r1, r1, #15
 800b584:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800b588:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800b58c:	db07      	blt.n	800b59e <_malloc_trim_r+0x3e>
 800b58e:	2100      	movs	r1, #0
 800b590:	4630      	mov	r0, r6
 800b592:	f000 ff25 	bl	800c3e0 <_sbrk_r>
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	442b      	add	r3, r5
 800b59a:	4298      	cmp	r0, r3
 800b59c:	d004      	beq.n	800b5a8 <_malloc_trim_r+0x48>
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f000 fbda 	bl	800bd58 <__malloc_unlock>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5a8:	4261      	negs	r1, r4
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f000 ff18 	bl	800c3e0 <_sbrk_r>
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	d00d      	beq.n	800b5d0 <_malloc_trim_r+0x70>
 800b5b4:	4b10      	ldr	r3, [pc, #64]	; (800b5f8 <_malloc_trim_r+0x98>)
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	6819      	ldr	r1, [r3, #0]
 800b5ba:	1b2d      	subs	r5, r5, r4
 800b5bc:	f045 0501 	orr.w	r5, r5, #1
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	1b09      	subs	r1, r1, r4
 800b5c4:	6055      	str	r5, [r2, #4]
 800b5c6:	6019      	str	r1, [r3, #0]
 800b5c8:	f000 fbc6 	bl	800bd58 <__malloc_unlock>
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	f000 ff04 	bl	800c3e0 <_sbrk_r>
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	1a83      	subs	r3, r0, r2
 800b5dc:	2b0f      	cmp	r3, #15
 800b5de:	ddde      	ble.n	800b59e <_malloc_trim_r+0x3e>
 800b5e0:	4c06      	ldr	r4, [pc, #24]	; (800b5fc <_malloc_trim_r+0x9c>)
 800b5e2:	4905      	ldr	r1, [pc, #20]	; (800b5f8 <_malloc_trim_r+0x98>)
 800b5e4:	6824      	ldr	r4, [r4, #0]
 800b5e6:	f043 0301 	orr.w	r3, r3, #1
 800b5ea:	1b00      	subs	r0, r0, r4
 800b5ec:	6053      	str	r3, [r2, #4]
 800b5ee:	6008      	str	r0, [r1, #0]
 800b5f0:	e7d5      	b.n	800b59e <_malloc_trim_r+0x3e>
 800b5f2:	bf00      	nop
 800b5f4:	20000464 	.word	0x20000464
 800b5f8:	20000bc0 	.word	0x20000bc0
 800b5fc:	2000086c 	.word	0x2000086c

0800b600 <_free_r>:
 800b600:	2900      	cmp	r1, #0
 800b602:	d053      	beq.n	800b6ac <_free_r+0xac>
 800b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b606:	460c      	mov	r4, r1
 800b608:	4606      	mov	r6, r0
 800b60a:	f000 fb9f 	bl	800bd4c <__malloc_lock>
 800b60e:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800b612:	4f71      	ldr	r7, [pc, #452]	; (800b7d8 <_free_r+0x1d8>)
 800b614:	f02c 0101 	bic.w	r1, ip, #1
 800b618:	f1a4 0508 	sub.w	r5, r4, #8
 800b61c:	186b      	adds	r3, r5, r1
 800b61e:	68b8      	ldr	r0, [r7, #8]
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	4298      	cmp	r0, r3
 800b624:	f022 0203 	bic.w	r2, r2, #3
 800b628:	d053      	beq.n	800b6d2 <_free_r+0xd2>
 800b62a:	f01c 0f01 	tst.w	ip, #1
 800b62e:	605a      	str	r2, [r3, #4]
 800b630:	eb03 0002 	add.w	r0, r3, r2
 800b634:	d13b      	bne.n	800b6ae <_free_r+0xae>
 800b636:	f854 cc08 	ldr.w	ip, [r4, #-8]
 800b63a:	6840      	ldr	r0, [r0, #4]
 800b63c:	eba5 050c 	sub.w	r5, r5, ip
 800b640:	f107 0e08 	add.w	lr, r7, #8
 800b644:	68ac      	ldr	r4, [r5, #8]
 800b646:	4574      	cmp	r4, lr
 800b648:	4461      	add	r1, ip
 800b64a:	f000 0001 	and.w	r0, r0, #1
 800b64e:	d075      	beq.n	800b73c <_free_r+0x13c>
 800b650:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800b654:	f8c4 c00c 	str.w	ip, [r4, #12]
 800b658:	f8cc 4008 	str.w	r4, [ip, #8]
 800b65c:	b360      	cbz	r0, 800b6b8 <_free_r+0xb8>
 800b65e:	f041 0301 	orr.w	r3, r1, #1
 800b662:	606b      	str	r3, [r5, #4]
 800b664:	5069      	str	r1, [r5, r1]
 800b666:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b66a:	d350      	bcc.n	800b70e <_free_r+0x10e>
 800b66c:	0a4b      	lsrs	r3, r1, #9
 800b66e:	2b04      	cmp	r3, #4
 800b670:	d870      	bhi.n	800b754 <_free_r+0x154>
 800b672:	098b      	lsrs	r3, r1, #6
 800b674:	f103 0439 	add.w	r4, r3, #57	; 0x39
 800b678:	00e4      	lsls	r4, r4, #3
 800b67a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b67e:	1938      	adds	r0, r7, r4
 800b680:	593b      	ldr	r3, [r7, r4]
 800b682:	3808      	subs	r0, #8
 800b684:	4298      	cmp	r0, r3
 800b686:	d078      	beq.n	800b77a <_free_r+0x17a>
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	f022 0203 	bic.w	r2, r2, #3
 800b68e:	428a      	cmp	r2, r1
 800b690:	d971      	bls.n	800b776 <_free_r+0x176>
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	4298      	cmp	r0, r3
 800b696:	d1f7      	bne.n	800b688 <_free_r+0x88>
 800b698:	68c3      	ldr	r3, [r0, #12]
 800b69a:	e9c5 0302 	strd	r0, r3, [r5, #8]
 800b69e:	609d      	str	r5, [r3, #8]
 800b6a0:	60c5      	str	r5, [r0, #12]
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b6a8:	f000 bb56 	b.w	800bd58 <__malloc_unlock>
 800b6ac:	4770      	bx	lr
 800b6ae:	6840      	ldr	r0, [r0, #4]
 800b6b0:	f000 0001 	and.w	r0, r0, #1
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d1d2      	bne.n	800b65e <_free_r+0x5e>
 800b6b8:	6898      	ldr	r0, [r3, #8]
 800b6ba:	4c48      	ldr	r4, [pc, #288]	; (800b7dc <_free_r+0x1dc>)
 800b6bc:	4411      	add	r1, r2
 800b6be:	42a0      	cmp	r0, r4
 800b6c0:	f041 0201 	orr.w	r2, r1, #1
 800b6c4:	d062      	beq.n	800b78c <_free_r+0x18c>
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	60c3      	str	r3, [r0, #12]
 800b6ca:	6098      	str	r0, [r3, #8]
 800b6cc:	606a      	str	r2, [r5, #4]
 800b6ce:	5069      	str	r1, [r5, r1]
 800b6d0:	e7c9      	b.n	800b666 <_free_r+0x66>
 800b6d2:	f01c 0f01 	tst.w	ip, #1
 800b6d6:	440a      	add	r2, r1
 800b6d8:	d107      	bne.n	800b6ea <_free_r+0xea>
 800b6da:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800b6de:	1aed      	subs	r5, r5, r3
 800b6e0:	441a      	add	r2, r3
 800b6e2:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800b6e6:	60cb      	str	r3, [r1, #12]
 800b6e8:	6099      	str	r1, [r3, #8]
 800b6ea:	4b3d      	ldr	r3, [pc, #244]	; (800b7e0 <_free_r+0x1e0>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f042 0101 	orr.w	r1, r2, #1
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	6069      	str	r1, [r5, #4]
 800b6f6:	60bd      	str	r5, [r7, #8]
 800b6f8:	d804      	bhi.n	800b704 <_free_r+0x104>
 800b6fa:	4b3a      	ldr	r3, [pc, #232]	; (800b7e4 <_free_r+0x1e4>)
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	6819      	ldr	r1, [r3, #0]
 800b700:	f7ff ff2e 	bl	800b560 <_malloc_trim_r>
 800b704:	4630      	mov	r0, r6
 800b706:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b70a:	f000 bb25 	b.w	800bd58 <__malloc_unlock>
 800b70e:	08c9      	lsrs	r1, r1, #3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	1c4a      	adds	r2, r1, #1
 800b714:	2301      	movs	r3, #1
 800b716:	1089      	asrs	r1, r1, #2
 800b718:	408b      	lsls	r3, r1
 800b71a:	4303      	orrs	r3, r0
 800b71c:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 800b720:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 800b724:	607b      	str	r3, [r7, #4]
 800b726:	3908      	subs	r1, #8
 800b728:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b72c:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
 800b730:	60c5      	str	r5, [r0, #12]
 800b732:	4630      	mov	r0, r6
 800b734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b738:	f000 bb0e 	b.w	800bd58 <__malloc_unlock>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d145      	bne.n	800b7cc <_free_r+0x1cc>
 800b740:	440a      	add	r2, r1
 800b742:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 800b746:	f042 0001 	orr.w	r0, r2, #1
 800b74a:	60cb      	str	r3, [r1, #12]
 800b74c:	6099      	str	r1, [r3, #8]
 800b74e:	6068      	str	r0, [r5, #4]
 800b750:	50aa      	str	r2, [r5, r2]
 800b752:	e7d7      	b.n	800b704 <_free_r+0x104>
 800b754:	2b14      	cmp	r3, #20
 800b756:	d908      	bls.n	800b76a <_free_r+0x16a>
 800b758:	2b54      	cmp	r3, #84	; 0x54
 800b75a:	d81e      	bhi.n	800b79a <_free_r+0x19a>
 800b75c:	0b0b      	lsrs	r3, r1, #12
 800b75e:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800b762:	00e4      	lsls	r4, r4, #3
 800b764:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800b768:	e789      	b.n	800b67e <_free_r+0x7e>
 800b76a:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800b76e:	00e4      	lsls	r4, r4, #3
 800b770:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800b774:	e783      	b.n	800b67e <_free_r+0x7e>
 800b776:	4618      	mov	r0, r3
 800b778:	e78e      	b.n	800b698 <_free_r+0x98>
 800b77a:	1093      	asrs	r3, r2, #2
 800b77c:	6879      	ldr	r1, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	fa02 f303 	lsl.w	r3, r2, r3
 800b784:	430b      	orrs	r3, r1
 800b786:	607b      	str	r3, [r7, #4]
 800b788:	4603      	mov	r3, r0
 800b78a:	e786      	b.n	800b69a <_free_r+0x9a>
 800b78c:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800b790:	e9c5 0002 	strd	r0, r0, [r5, #8]
 800b794:	606a      	str	r2, [r5, #4]
 800b796:	5069      	str	r1, [r5, r1]
 800b798:	e7b4      	b.n	800b704 <_free_r+0x104>
 800b79a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800b79e:	d806      	bhi.n	800b7ae <_free_r+0x1ae>
 800b7a0:	0bcb      	lsrs	r3, r1, #15
 800b7a2:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800b7a6:	00e4      	lsls	r4, r4, #3
 800b7a8:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800b7ac:	e767      	b.n	800b67e <_free_r+0x7e>
 800b7ae:	f240 5254 	movw	r2, #1364	; 0x554
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d806      	bhi.n	800b7c4 <_free_r+0x1c4>
 800b7b6:	0c8b      	lsrs	r3, r1, #18
 800b7b8:	f103 047d 	add.w	r4, r3, #125	; 0x7d
 800b7bc:	00e4      	lsls	r4, r4, #3
 800b7be:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800b7c2:	e75c      	b.n	800b67e <_free_r+0x7e>
 800b7c4:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 800b7c8:	227e      	movs	r2, #126	; 0x7e
 800b7ca:	e758      	b.n	800b67e <_free_r+0x7e>
 800b7cc:	f041 0201 	orr.w	r2, r1, #1
 800b7d0:	606a      	str	r2, [r5, #4]
 800b7d2:	6019      	str	r1, [r3, #0]
 800b7d4:	e796      	b.n	800b704 <_free_r+0x104>
 800b7d6:	bf00      	nop
 800b7d8:	20000464 	.word	0x20000464
 800b7dc:	2000046c 	.word	0x2000046c
 800b7e0:	20000870 	.word	0x20000870
 800b7e4:	20000bf0 	.word	0x20000bf0

0800b7e8 <_localeconv_r>:
 800b7e8:	4a04      	ldr	r2, [pc, #16]	; (800b7fc <_localeconv_r+0x14>)
 800b7ea:	4b05      	ldr	r3, [pc, #20]	; (800b800 <_localeconv_r+0x18>)
 800b7ec:	6812      	ldr	r2, [r2, #0]
 800b7ee:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	bf08      	it	eq
 800b7f4:	4618      	moveq	r0, r3
 800b7f6:	30f0      	adds	r0, #240	; 0xf0
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	20000034 	.word	0x20000034
 800b800:	20000874 	.word	0x20000874

0800b804 <_malloc_r>:
 800b804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b808:	f101 050b 	add.w	r5, r1, #11
 800b80c:	2d16      	cmp	r5, #22
 800b80e:	b083      	sub	sp, #12
 800b810:	4606      	mov	r6, r0
 800b812:	d823      	bhi.n	800b85c <_malloc_r+0x58>
 800b814:	2910      	cmp	r1, #16
 800b816:	f200 80b9 	bhi.w	800b98c <_malloc_r+0x188>
 800b81a:	f000 fa97 	bl	800bd4c <__malloc_lock>
 800b81e:	2510      	movs	r5, #16
 800b820:	2318      	movs	r3, #24
 800b822:	2002      	movs	r0, #2
 800b824:	4fc5      	ldr	r7, [pc, #788]	; (800bb3c <_malloc_r+0x338>)
 800b826:	443b      	add	r3, r7
 800b828:	f1a3 0208 	sub.w	r2, r3, #8
 800b82c:	685c      	ldr	r4, [r3, #4]
 800b82e:	4294      	cmp	r4, r2
 800b830:	f000 8166 	beq.w	800bb00 <_malloc_r+0x2fc>
 800b834:	6863      	ldr	r3, [r4, #4]
 800b836:	f023 0303 	bic.w	r3, r3, #3
 800b83a:	4423      	add	r3, r4
 800b83c:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 800b840:	685a      	ldr	r2, [r3, #4]
 800b842:	60e9      	str	r1, [r5, #12]
 800b844:	f042 0201 	orr.w	r2, r2, #1
 800b848:	608d      	str	r5, [r1, #8]
 800b84a:	4630      	mov	r0, r6
 800b84c:	605a      	str	r2, [r3, #4]
 800b84e:	f000 fa83 	bl	800bd58 <__malloc_unlock>
 800b852:	3408      	adds	r4, #8
 800b854:	4620      	mov	r0, r4
 800b856:	b003      	add	sp, #12
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85c:	f035 0507 	bics.w	r5, r5, #7
 800b860:	f100 8094 	bmi.w	800b98c <_malloc_r+0x188>
 800b864:	42a9      	cmp	r1, r5
 800b866:	f200 8091 	bhi.w	800b98c <_malloc_r+0x188>
 800b86a:	f000 fa6f 	bl	800bd4c <__malloc_lock>
 800b86e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800b872:	f0c0 8183 	bcc.w	800bb7c <_malloc_r+0x378>
 800b876:	0a6b      	lsrs	r3, r5, #9
 800b878:	f000 808f 	beq.w	800b99a <_malloc_r+0x196>
 800b87c:	2b04      	cmp	r3, #4
 800b87e:	f200 8146 	bhi.w	800bb0e <_malloc_r+0x30a>
 800b882:	09ab      	lsrs	r3, r5, #6
 800b884:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800b888:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 800b88c:	00c3      	lsls	r3, r0, #3
 800b88e:	4fab      	ldr	r7, [pc, #684]	; (800bb3c <_malloc_r+0x338>)
 800b890:	443b      	add	r3, r7
 800b892:	f1a3 0108 	sub.w	r1, r3, #8
 800b896:	685c      	ldr	r4, [r3, #4]
 800b898:	42a1      	cmp	r1, r4
 800b89a:	d106      	bne.n	800b8aa <_malloc_r+0xa6>
 800b89c:	e00c      	b.n	800b8b8 <_malloc_r+0xb4>
 800b89e:	2a00      	cmp	r2, #0
 800b8a0:	f280 811d 	bge.w	800bade <_malloc_r+0x2da>
 800b8a4:	68e4      	ldr	r4, [r4, #12]
 800b8a6:	42a1      	cmp	r1, r4
 800b8a8:	d006      	beq.n	800b8b8 <_malloc_r+0xb4>
 800b8aa:	6863      	ldr	r3, [r4, #4]
 800b8ac:	f023 0303 	bic.w	r3, r3, #3
 800b8b0:	1b5a      	subs	r2, r3, r5
 800b8b2:	2a0f      	cmp	r2, #15
 800b8b4:	ddf3      	ble.n	800b89e <_malloc_r+0x9a>
 800b8b6:	4660      	mov	r0, ip
 800b8b8:	693c      	ldr	r4, [r7, #16]
 800b8ba:	f8df c294 	ldr.w	ip, [pc, #660]	; 800bb50 <_malloc_r+0x34c>
 800b8be:	4564      	cmp	r4, ip
 800b8c0:	d071      	beq.n	800b9a6 <_malloc_r+0x1a2>
 800b8c2:	6863      	ldr	r3, [r4, #4]
 800b8c4:	f023 0303 	bic.w	r3, r3, #3
 800b8c8:	1b5a      	subs	r2, r3, r5
 800b8ca:	2a0f      	cmp	r2, #15
 800b8cc:	f300 8144 	bgt.w	800bb58 <_malloc_r+0x354>
 800b8d0:	2a00      	cmp	r2, #0
 800b8d2:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 800b8d6:	f280 8126 	bge.w	800bb26 <_malloc_r+0x322>
 800b8da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8de:	f080 8169 	bcs.w	800bbb4 <_malloc_r+0x3b0>
 800b8e2:	08db      	lsrs	r3, r3, #3
 800b8e4:	1c59      	adds	r1, r3, #1
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 800b8ec:	f8c4 8008 	str.w	r8, [r4, #8]
 800b8f0:	f04f 0e01 	mov.w	lr, #1
 800b8f4:	109b      	asrs	r3, r3, #2
 800b8f6:	fa0e f303 	lsl.w	r3, lr, r3
 800b8fa:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 800b8fe:	4313      	orrs	r3, r2
 800b900:	f1ae 0208 	sub.w	r2, lr, #8
 800b904:	60e2      	str	r2, [r4, #12]
 800b906:	607b      	str	r3, [r7, #4]
 800b908:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 800b90c:	f8c8 400c 	str.w	r4, [r8, #12]
 800b910:	1082      	asrs	r2, r0, #2
 800b912:	2401      	movs	r4, #1
 800b914:	4094      	lsls	r4, r2
 800b916:	429c      	cmp	r4, r3
 800b918:	d84b      	bhi.n	800b9b2 <_malloc_r+0x1ae>
 800b91a:	421c      	tst	r4, r3
 800b91c:	d106      	bne.n	800b92c <_malloc_r+0x128>
 800b91e:	f020 0003 	bic.w	r0, r0, #3
 800b922:	0064      	lsls	r4, r4, #1
 800b924:	421c      	tst	r4, r3
 800b926:	f100 0004 	add.w	r0, r0, #4
 800b92a:	d0fa      	beq.n	800b922 <_malloc_r+0x11e>
 800b92c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800b930:	46ce      	mov	lr, r9
 800b932:	4680      	mov	r8, r0
 800b934:	f8de 300c 	ldr.w	r3, [lr, #12]
 800b938:	459e      	cmp	lr, r3
 800b93a:	d107      	bne.n	800b94c <_malloc_r+0x148>
 800b93c:	e122      	b.n	800bb84 <_malloc_r+0x380>
 800b93e:	2a00      	cmp	r2, #0
 800b940:	f280 8129 	bge.w	800bb96 <_malloc_r+0x392>
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	459e      	cmp	lr, r3
 800b948:	f000 811c 	beq.w	800bb84 <_malloc_r+0x380>
 800b94c:	6859      	ldr	r1, [r3, #4]
 800b94e:	f021 0103 	bic.w	r1, r1, #3
 800b952:	1b4a      	subs	r2, r1, r5
 800b954:	2a0f      	cmp	r2, #15
 800b956:	ddf2      	ble.n	800b93e <_malloc_r+0x13a>
 800b958:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 800b95c:	195c      	adds	r4, r3, r5
 800b95e:	f045 0501 	orr.w	r5, r5, #1
 800b962:	605d      	str	r5, [r3, #4]
 800b964:	f042 0501 	orr.w	r5, r2, #1
 800b968:	f8c8 e00c 	str.w	lr, [r8, #12]
 800b96c:	4630      	mov	r0, r6
 800b96e:	f8ce 8008 	str.w	r8, [lr, #8]
 800b972:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800b976:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 800b97a:	6065      	str	r5, [r4, #4]
 800b97c:	505a      	str	r2, [r3, r1]
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	f000 f9ea 	bl	800bd58 <__malloc_unlock>
 800b984:	9b01      	ldr	r3, [sp, #4]
 800b986:	f103 0408 	add.w	r4, r3, #8
 800b98a:	e763      	b.n	800b854 <_malloc_r+0x50>
 800b98c:	2400      	movs	r4, #0
 800b98e:	230c      	movs	r3, #12
 800b990:	4620      	mov	r0, r4
 800b992:	6033      	str	r3, [r6, #0]
 800b994:	b003      	add	sp, #12
 800b996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b99e:	2040      	movs	r0, #64	; 0x40
 800b9a0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800b9a4:	e773      	b.n	800b88e <_malloc_r+0x8a>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	1082      	asrs	r2, r0, #2
 800b9aa:	2401      	movs	r4, #1
 800b9ac:	4094      	lsls	r4, r2
 800b9ae:	429c      	cmp	r4, r3
 800b9b0:	d9b3      	bls.n	800b91a <_malloc_r+0x116>
 800b9b2:	68bc      	ldr	r4, [r7, #8]
 800b9b4:	6863      	ldr	r3, [r4, #4]
 800b9b6:	f023 0903 	bic.w	r9, r3, #3
 800b9ba:	45a9      	cmp	r9, r5
 800b9bc:	d303      	bcc.n	800b9c6 <_malloc_r+0x1c2>
 800b9be:	eba9 0305 	sub.w	r3, r9, r5
 800b9c2:	2b0f      	cmp	r3, #15
 800b9c4:	dc7b      	bgt.n	800babe <_malloc_r+0x2ba>
 800b9c6:	4b5e      	ldr	r3, [pc, #376]	; (800bb40 <_malloc_r+0x33c>)
 800b9c8:	f8df a188 	ldr.w	sl, [pc, #392]	; 800bb54 <_malloc_r+0x350>
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	f8da 3000 	ldr.w	r3, [sl]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	eb05 0802 	add.w	r8, r5, r2
 800b9d8:	f000 8148 	beq.w	800bc6c <_malloc_r+0x468>
 800b9dc:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 800b9e0:	f108 080f 	add.w	r8, r8, #15
 800b9e4:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 800b9e8:	f028 080f 	bic.w	r8, r8, #15
 800b9ec:	4641      	mov	r1, r8
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f000 fcf6 	bl	800c3e0 <_sbrk_r>
 800b9f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b9f8:	4683      	mov	fp, r0
 800b9fa:	f000 8104 	beq.w	800bc06 <_malloc_r+0x402>
 800b9fe:	eb04 0009 	add.w	r0, r4, r9
 800ba02:	4558      	cmp	r0, fp
 800ba04:	f200 80fd 	bhi.w	800bc02 <_malloc_r+0x3fe>
 800ba08:	4a4e      	ldr	r2, [pc, #312]	; (800bb44 <_malloc_r+0x340>)
 800ba0a:	6813      	ldr	r3, [r2, #0]
 800ba0c:	4443      	add	r3, r8
 800ba0e:	6013      	str	r3, [r2, #0]
 800ba10:	f000 814d 	beq.w	800bcae <_malloc_r+0x4aa>
 800ba14:	f8da 1000 	ldr.w	r1, [sl]
 800ba18:	3101      	adds	r1, #1
 800ba1a:	bf1b      	ittet	ne
 800ba1c:	ebab 0000 	subne.w	r0, fp, r0
 800ba20:	181b      	addne	r3, r3, r0
 800ba22:	f8ca b000 	streq.w	fp, [sl]
 800ba26:	6013      	strne	r3, [r2, #0]
 800ba28:	f01b 0307 	ands.w	r3, fp, #7
 800ba2c:	f000 8134 	beq.w	800bc98 <_malloc_r+0x494>
 800ba30:	f1c3 0108 	rsb	r1, r3, #8
 800ba34:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800ba38:	448b      	add	fp, r1
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	44d8      	add	r8, fp
 800ba3e:	f3c8 080b 	ubfx	r8, r8, #0, #12
 800ba42:	eba3 0808 	sub.w	r8, r3, r8
 800ba46:	4641      	mov	r1, r8
 800ba48:	4630      	mov	r0, r6
 800ba4a:	9201      	str	r2, [sp, #4]
 800ba4c:	f000 fcc8 	bl	800c3e0 <_sbrk_r>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	9a01      	ldr	r2, [sp, #4]
 800ba54:	f000 8146 	beq.w	800bce4 <_malloc_r+0x4e0>
 800ba58:	eba0 010b 	sub.w	r1, r0, fp
 800ba5c:	4441      	add	r1, r8
 800ba5e:	f041 0101 	orr.w	r1, r1, #1
 800ba62:	6813      	ldr	r3, [r2, #0]
 800ba64:	f8c7 b008 	str.w	fp, [r7, #8]
 800ba68:	4443      	add	r3, r8
 800ba6a:	42bc      	cmp	r4, r7
 800ba6c:	f8cb 1004 	str.w	r1, [fp, #4]
 800ba70:	6013      	str	r3, [r2, #0]
 800ba72:	d015      	beq.n	800baa0 <_malloc_r+0x29c>
 800ba74:	f1b9 0f0f 	cmp.w	r9, #15
 800ba78:	f240 8130 	bls.w	800bcdc <_malloc_r+0x4d8>
 800ba7c:	6860      	ldr	r0, [r4, #4]
 800ba7e:	f1a9 010c 	sub.w	r1, r9, #12
 800ba82:	f021 0107 	bic.w	r1, r1, #7
 800ba86:	f000 0001 	and.w	r0, r0, #1
 800ba8a:	eb04 0c01 	add.w	ip, r4, r1
 800ba8e:	4308      	orrs	r0, r1
 800ba90:	f04f 0e05 	mov.w	lr, #5
 800ba94:	290f      	cmp	r1, #15
 800ba96:	6060      	str	r0, [r4, #4]
 800ba98:	e9cc ee01 	strd	lr, lr, [ip, #4]
 800ba9c:	f200 813a 	bhi.w	800bd14 <_malloc_r+0x510>
 800baa0:	4a29      	ldr	r2, [pc, #164]	; (800bb48 <_malloc_r+0x344>)
 800baa2:	482a      	ldr	r0, [pc, #168]	; (800bb4c <_malloc_r+0x348>)
 800baa4:	6811      	ldr	r1, [r2, #0]
 800baa6:	68bc      	ldr	r4, [r7, #8]
 800baa8:	428b      	cmp	r3, r1
 800baaa:	6801      	ldr	r1, [r0, #0]
 800baac:	bf88      	it	hi
 800baae:	6013      	strhi	r3, [r2, #0]
 800bab0:	6862      	ldr	r2, [r4, #4]
 800bab2:	428b      	cmp	r3, r1
 800bab4:	f022 0203 	bic.w	r2, r2, #3
 800bab8:	bf88      	it	hi
 800baba:	6003      	strhi	r3, [r0, #0]
 800babc:	e0a7      	b.n	800bc0e <_malloc_r+0x40a>
 800babe:	1962      	adds	r2, r4, r5
 800bac0:	f043 0301 	orr.w	r3, r3, #1
 800bac4:	f045 0501 	orr.w	r5, r5, #1
 800bac8:	6065      	str	r5, [r4, #4]
 800baca:	4630      	mov	r0, r6
 800bacc:	60ba      	str	r2, [r7, #8]
 800bace:	6053      	str	r3, [r2, #4]
 800bad0:	f000 f942 	bl	800bd58 <__malloc_unlock>
 800bad4:	3408      	adds	r4, #8
 800bad6:	4620      	mov	r0, r4
 800bad8:	b003      	add	sp, #12
 800bada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bade:	4423      	add	r3, r4
 800bae0:	68e1      	ldr	r1, [r4, #12]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	68a5      	ldr	r5, [r4, #8]
 800bae6:	f042 0201 	orr.w	r2, r2, #1
 800baea:	60e9      	str	r1, [r5, #12]
 800baec:	4630      	mov	r0, r6
 800baee:	608d      	str	r5, [r1, #8]
 800baf0:	605a      	str	r2, [r3, #4]
 800baf2:	f000 f931 	bl	800bd58 <__malloc_unlock>
 800baf6:	3408      	adds	r4, #8
 800baf8:	4620      	mov	r0, r4
 800bafa:	b003      	add	sp, #12
 800bafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb00:	68dc      	ldr	r4, [r3, #12]
 800bb02:	42a3      	cmp	r3, r4
 800bb04:	bf08      	it	eq
 800bb06:	3002      	addeq	r0, #2
 800bb08:	f43f aed6 	beq.w	800b8b8 <_malloc_r+0xb4>
 800bb0c:	e692      	b.n	800b834 <_malloc_r+0x30>
 800bb0e:	2b14      	cmp	r3, #20
 800bb10:	d971      	bls.n	800bbf6 <_malloc_r+0x3f2>
 800bb12:	2b54      	cmp	r3, #84	; 0x54
 800bb14:	f200 80ad 	bhi.w	800bc72 <_malloc_r+0x46e>
 800bb18:	0b2b      	lsrs	r3, r5, #12
 800bb1a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800bb1e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 800bb22:	00c3      	lsls	r3, r0, #3
 800bb24:	e6b3      	b.n	800b88e <_malloc_r+0x8a>
 800bb26:	4423      	add	r3, r4
 800bb28:	4630      	mov	r0, r6
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	f042 0201 	orr.w	r2, r2, #1
 800bb30:	605a      	str	r2, [r3, #4]
 800bb32:	3408      	adds	r4, #8
 800bb34:	f000 f910 	bl	800bd58 <__malloc_unlock>
 800bb38:	e68c      	b.n	800b854 <_malloc_r+0x50>
 800bb3a:	bf00      	nop
 800bb3c:	20000464 	.word	0x20000464
 800bb40:	20000bf0 	.word	0x20000bf0
 800bb44:	20000bc0 	.word	0x20000bc0
 800bb48:	20000be8 	.word	0x20000be8
 800bb4c:	20000bec 	.word	0x20000bec
 800bb50:	2000046c 	.word	0x2000046c
 800bb54:	2000086c 	.word	0x2000086c
 800bb58:	1961      	adds	r1, r4, r5
 800bb5a:	f045 0e01 	orr.w	lr, r5, #1
 800bb5e:	f042 0501 	orr.w	r5, r2, #1
 800bb62:	f8c4 e004 	str.w	lr, [r4, #4]
 800bb66:	4630      	mov	r0, r6
 800bb68:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800bb6c:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800bb70:	604d      	str	r5, [r1, #4]
 800bb72:	50e2      	str	r2, [r4, r3]
 800bb74:	f000 f8f0 	bl	800bd58 <__malloc_unlock>
 800bb78:	3408      	adds	r4, #8
 800bb7a:	e66b      	b.n	800b854 <_malloc_r+0x50>
 800bb7c:	08e8      	lsrs	r0, r5, #3
 800bb7e:	f105 0308 	add.w	r3, r5, #8
 800bb82:	e64f      	b.n	800b824 <_malloc_r+0x20>
 800bb84:	f108 0801 	add.w	r8, r8, #1
 800bb88:	f018 0f03 	tst.w	r8, #3
 800bb8c:	f10e 0e08 	add.w	lr, lr, #8
 800bb90:	f47f aed0 	bne.w	800b934 <_malloc_r+0x130>
 800bb94:	e052      	b.n	800bc3c <_malloc_r+0x438>
 800bb96:	4419      	add	r1, r3
 800bb98:	461c      	mov	r4, r3
 800bb9a:	684a      	ldr	r2, [r1, #4]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800bba2:	f042 0201 	orr.w	r2, r2, #1
 800bba6:	604a      	str	r2, [r1, #4]
 800bba8:	4630      	mov	r0, r6
 800bbaa:	60eb      	str	r3, [r5, #12]
 800bbac:	609d      	str	r5, [r3, #8]
 800bbae:	f000 f8d3 	bl	800bd58 <__malloc_unlock>
 800bbb2:	e64f      	b.n	800b854 <_malloc_r+0x50>
 800bbb4:	0a5a      	lsrs	r2, r3, #9
 800bbb6:	2a04      	cmp	r2, #4
 800bbb8:	d935      	bls.n	800bc26 <_malloc_r+0x422>
 800bbba:	2a14      	cmp	r2, #20
 800bbbc:	d86f      	bhi.n	800bc9e <_malloc_r+0x49a>
 800bbbe:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800bbc2:	00c9      	lsls	r1, r1, #3
 800bbc4:	325b      	adds	r2, #91	; 0x5b
 800bbc6:	eb07 0e01 	add.w	lr, r7, r1
 800bbca:	5879      	ldr	r1, [r7, r1]
 800bbcc:	f1ae 0e08 	sub.w	lr, lr, #8
 800bbd0:	458e      	cmp	lr, r1
 800bbd2:	d058      	beq.n	800bc86 <_malloc_r+0x482>
 800bbd4:	684a      	ldr	r2, [r1, #4]
 800bbd6:	f022 0203 	bic.w	r2, r2, #3
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d902      	bls.n	800bbe4 <_malloc_r+0x3e0>
 800bbde:	6889      	ldr	r1, [r1, #8]
 800bbe0:	458e      	cmp	lr, r1
 800bbe2:	d1f7      	bne.n	800bbd4 <_malloc_r+0x3d0>
 800bbe4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 800bbee:	f8ce 4008 	str.w	r4, [lr, #8]
 800bbf2:	60cc      	str	r4, [r1, #12]
 800bbf4:	e68c      	b.n	800b910 <_malloc_r+0x10c>
 800bbf6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800bbfa:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800bbfe:	00c3      	lsls	r3, r0, #3
 800bc00:	e645      	b.n	800b88e <_malloc_r+0x8a>
 800bc02:	42bc      	cmp	r4, r7
 800bc04:	d072      	beq.n	800bcec <_malloc_r+0x4e8>
 800bc06:	68bc      	ldr	r4, [r7, #8]
 800bc08:	6862      	ldr	r2, [r4, #4]
 800bc0a:	f022 0203 	bic.w	r2, r2, #3
 800bc0e:	4295      	cmp	r5, r2
 800bc10:	eba2 0305 	sub.w	r3, r2, r5
 800bc14:	d802      	bhi.n	800bc1c <_malloc_r+0x418>
 800bc16:	2b0f      	cmp	r3, #15
 800bc18:	f73f af51 	bgt.w	800babe <_malloc_r+0x2ba>
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f000 f89b 	bl	800bd58 <__malloc_unlock>
 800bc22:	2400      	movs	r4, #0
 800bc24:	e616      	b.n	800b854 <_malloc_r+0x50>
 800bc26:	099a      	lsrs	r2, r3, #6
 800bc28:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800bc2c:	00c9      	lsls	r1, r1, #3
 800bc2e:	3238      	adds	r2, #56	; 0x38
 800bc30:	e7c9      	b.n	800bbc6 <_malloc_r+0x3c2>
 800bc32:	f8d9 9000 	ldr.w	r9, [r9]
 800bc36:	4599      	cmp	r9, r3
 800bc38:	f040 8083 	bne.w	800bd42 <_malloc_r+0x53e>
 800bc3c:	f010 0f03 	tst.w	r0, #3
 800bc40:	f1a9 0308 	sub.w	r3, r9, #8
 800bc44:	f100 30ff 	add.w	r0, r0, #4294967295
 800bc48:	d1f3      	bne.n	800bc32 <_malloc_r+0x42e>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	ea23 0304 	bic.w	r3, r3, r4
 800bc50:	607b      	str	r3, [r7, #4]
 800bc52:	0064      	lsls	r4, r4, #1
 800bc54:	429c      	cmp	r4, r3
 800bc56:	f63f aeac 	bhi.w	800b9b2 <_malloc_r+0x1ae>
 800bc5a:	b91c      	cbnz	r4, 800bc64 <_malloc_r+0x460>
 800bc5c:	e6a9      	b.n	800b9b2 <_malloc_r+0x1ae>
 800bc5e:	0064      	lsls	r4, r4, #1
 800bc60:	f108 0804 	add.w	r8, r8, #4
 800bc64:	421c      	tst	r4, r3
 800bc66:	d0fa      	beq.n	800bc5e <_malloc_r+0x45a>
 800bc68:	4640      	mov	r0, r8
 800bc6a:	e65f      	b.n	800b92c <_malloc_r+0x128>
 800bc6c:	f108 0810 	add.w	r8, r8, #16
 800bc70:	e6bc      	b.n	800b9ec <_malloc_r+0x1e8>
 800bc72:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800bc76:	d826      	bhi.n	800bcc6 <_malloc_r+0x4c2>
 800bc78:	0beb      	lsrs	r3, r5, #15
 800bc7a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800bc7e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800bc82:	00c3      	lsls	r3, r0, #3
 800bc84:	e603      	b.n	800b88e <_malloc_r+0x8a>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	1092      	asrs	r2, r2, #2
 800bc8a:	f04f 0801 	mov.w	r8, #1
 800bc8e:	fa08 f202 	lsl.w	r2, r8, r2
 800bc92:	4313      	orrs	r3, r2
 800bc94:	607b      	str	r3, [r7, #4]
 800bc96:	e7a8      	b.n	800bbea <_malloc_r+0x3e6>
 800bc98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc9c:	e6ce      	b.n	800ba3c <_malloc_r+0x238>
 800bc9e:	2a54      	cmp	r2, #84	; 0x54
 800bca0:	d829      	bhi.n	800bcf6 <_malloc_r+0x4f2>
 800bca2:	0b1a      	lsrs	r2, r3, #12
 800bca4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800bca8:	00c9      	lsls	r1, r1, #3
 800bcaa:	326e      	adds	r2, #110	; 0x6e
 800bcac:	e78b      	b.n	800bbc6 <_malloc_r+0x3c2>
 800bcae:	f3c0 010b 	ubfx	r1, r0, #0, #12
 800bcb2:	2900      	cmp	r1, #0
 800bcb4:	f47f aeae 	bne.w	800ba14 <_malloc_r+0x210>
 800bcb8:	eb09 0208 	add.w	r2, r9, r8
 800bcbc:	68b9      	ldr	r1, [r7, #8]
 800bcbe:	f042 0201 	orr.w	r2, r2, #1
 800bcc2:	604a      	str	r2, [r1, #4]
 800bcc4:	e6ec      	b.n	800baa0 <_malloc_r+0x29c>
 800bcc6:	f240 5254 	movw	r2, #1364	; 0x554
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d81c      	bhi.n	800bd08 <_malloc_r+0x504>
 800bcce:	0cab      	lsrs	r3, r5, #18
 800bcd0:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800bcd4:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 800bcd8:	00c3      	lsls	r3, r0, #3
 800bcda:	e5d8      	b.n	800b88e <_malloc_r+0x8a>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	f8cb 3004 	str.w	r3, [fp, #4]
 800bce2:	e79b      	b.n	800bc1c <_malloc_r+0x418>
 800bce4:	2101      	movs	r1, #1
 800bce6:	f04f 0800 	mov.w	r8, #0
 800bcea:	e6ba      	b.n	800ba62 <_malloc_r+0x25e>
 800bcec:	4a16      	ldr	r2, [pc, #88]	; (800bd48 <_malloc_r+0x544>)
 800bcee:	6813      	ldr	r3, [r2, #0]
 800bcf0:	4443      	add	r3, r8
 800bcf2:	6013      	str	r3, [r2, #0]
 800bcf4:	e68e      	b.n	800ba14 <_malloc_r+0x210>
 800bcf6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800bcfa:	d814      	bhi.n	800bd26 <_malloc_r+0x522>
 800bcfc:	0bda      	lsrs	r2, r3, #15
 800bcfe:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800bd02:	00c9      	lsls	r1, r1, #3
 800bd04:	3277      	adds	r2, #119	; 0x77
 800bd06:	e75e      	b.n	800bbc6 <_malloc_r+0x3c2>
 800bd08:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800bd0c:	207f      	movs	r0, #127	; 0x7f
 800bd0e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800bd12:	e5bc      	b.n	800b88e <_malloc_r+0x8a>
 800bd14:	f104 0108 	add.w	r1, r4, #8
 800bd18:	4630      	mov	r0, r6
 800bd1a:	9201      	str	r2, [sp, #4]
 800bd1c:	f7ff fc70 	bl	800b600 <_free_r>
 800bd20:	9a01      	ldr	r2, [sp, #4]
 800bd22:	6813      	ldr	r3, [r2, #0]
 800bd24:	e6bc      	b.n	800baa0 <_malloc_r+0x29c>
 800bd26:	f240 5154 	movw	r1, #1364	; 0x554
 800bd2a:	428a      	cmp	r2, r1
 800bd2c:	d805      	bhi.n	800bd3a <_malloc_r+0x536>
 800bd2e:	0c9a      	lsrs	r2, r3, #18
 800bd30:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800bd34:	00c9      	lsls	r1, r1, #3
 800bd36:	327c      	adds	r2, #124	; 0x7c
 800bd38:	e745      	b.n	800bbc6 <_malloc_r+0x3c2>
 800bd3a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800bd3e:	227e      	movs	r2, #126	; 0x7e
 800bd40:	e741      	b.n	800bbc6 <_malloc_r+0x3c2>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	e785      	b.n	800bc52 <_malloc_r+0x44e>
 800bd46:	bf00      	nop
 800bd48:	20000bc0 	.word	0x20000bc0

0800bd4c <__malloc_lock>:
 800bd4c:	4801      	ldr	r0, [pc, #4]	; (800bd54 <__malloc_lock+0x8>)
 800bd4e:	f7fc bf1b 	b.w	8008b88 <__retarget_lock_acquire_recursive>
 800bd52:	bf00      	nop
 800bd54:	20000e5c 	.word	0x20000e5c

0800bd58 <__malloc_unlock>:
 800bd58:	4801      	ldr	r0, [pc, #4]	; (800bd60 <__malloc_unlock+0x8>)
 800bd5a:	f7fc bf17 	b.w	8008b8c <__retarget_lock_release_recursive>
 800bd5e:	bf00      	nop
 800bd60:	20000e5c 	.word	0x20000e5c

0800bd64 <_Balloc>:
 800bd64:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bd66:	b570      	push	{r4, r5, r6, lr}
 800bd68:	4605      	mov	r5, r0
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	b14b      	cbz	r3, 800bd82 <_Balloc+0x1e>
 800bd6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bd72:	b180      	cbz	r0, 800bd96 <_Balloc+0x32>
 800bd74:	6802      	ldr	r2, [r0, #0]
 800bd76:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd80:	bd70      	pop	{r4, r5, r6, pc}
 800bd82:	2221      	movs	r2, #33	; 0x21
 800bd84:	2104      	movs	r1, #4
 800bd86:	f000 fbe9 	bl	800c55c <_calloc_r>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	64e8      	str	r0, [r5, #76]	; 0x4c
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d1ed      	bne.n	800bd6e <_Balloc+0xa>
 800bd92:	2000      	movs	r0, #0
 800bd94:	bd70      	pop	{r4, r5, r6, pc}
 800bd96:	2101      	movs	r1, #1
 800bd98:	fa01 f604 	lsl.w	r6, r1, r4
 800bd9c:	1d72      	adds	r2, r6, #5
 800bd9e:	4628      	mov	r0, r5
 800bda0:	0092      	lsls	r2, r2, #2
 800bda2:	f000 fbdb 	bl	800c55c <_calloc_r>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d0f3      	beq.n	800bd92 <_Balloc+0x2e>
 800bdaa:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800bdae:	e7e4      	b.n	800bd7a <_Balloc+0x16>

0800bdb0 <_Bfree>:
 800bdb0:	b131      	cbz	r1, 800bdc0 <_Bfree+0x10>
 800bdb2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bdb4:	684a      	ldr	r2, [r1, #4]
 800bdb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bdba:	6008      	str	r0, [r1, #0]
 800bdbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop

0800bdc4 <__multadd>:
 800bdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc6:	690c      	ldr	r4, [r1, #16]
 800bdc8:	b083      	sub	sp, #12
 800bdca:	460d      	mov	r5, r1
 800bdcc:	4606      	mov	r6, r0
 800bdce:	f101 0c14 	add.w	ip, r1, #20
 800bdd2:	2700      	movs	r7, #0
 800bdd4:	f8dc 0000 	ldr.w	r0, [ip]
 800bdd8:	b281      	uxth	r1, r0
 800bdda:	fb02 3301 	mla	r3, r2, r1, r3
 800bdde:	0c01      	lsrs	r1, r0, #16
 800bde0:	0c18      	lsrs	r0, r3, #16
 800bde2:	fb02 0101 	mla	r1, r2, r1, r0
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	3701      	adds	r7, #1
 800bdea:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800bdee:	42bc      	cmp	r4, r7
 800bdf0:	f84c 3b04 	str.w	r3, [ip], #4
 800bdf4:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800bdf8:	dcec      	bgt.n	800bdd4 <__multadd+0x10>
 800bdfa:	b13b      	cbz	r3, 800be0c <__multadd+0x48>
 800bdfc:	68aa      	ldr	r2, [r5, #8]
 800bdfe:	42a2      	cmp	r2, r4
 800be00:	dd07      	ble.n	800be12 <__multadd+0x4e>
 800be02:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800be06:	3401      	adds	r4, #1
 800be08:	6153      	str	r3, [r2, #20]
 800be0a:	612c      	str	r4, [r5, #16]
 800be0c:	4628      	mov	r0, r5
 800be0e:	b003      	add	sp, #12
 800be10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be12:	6869      	ldr	r1, [r5, #4]
 800be14:	9301      	str	r3, [sp, #4]
 800be16:	3101      	adds	r1, #1
 800be18:	4630      	mov	r0, r6
 800be1a:	f7ff ffa3 	bl	800bd64 <_Balloc>
 800be1e:	692a      	ldr	r2, [r5, #16]
 800be20:	3202      	adds	r2, #2
 800be22:	f105 010c 	add.w	r1, r5, #12
 800be26:	4607      	mov	r7, r0
 800be28:	0092      	lsls	r2, r2, #2
 800be2a:	300c      	adds	r0, #12
 800be2c:	f7f4 fac8 	bl	80003c0 <memcpy>
 800be30:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800be32:	6869      	ldr	r1, [r5, #4]
 800be34:	9b01      	ldr	r3, [sp, #4]
 800be36:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800be3a:	6028      	str	r0, [r5, #0]
 800be3c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800be40:	463d      	mov	r5, r7
 800be42:	e7de      	b.n	800be02 <__multadd+0x3e>

0800be44 <__hi0bits>:
 800be44:	0c02      	lsrs	r2, r0, #16
 800be46:	0412      	lsls	r2, r2, #16
 800be48:	4603      	mov	r3, r0
 800be4a:	b9c2      	cbnz	r2, 800be7e <__hi0bits+0x3a>
 800be4c:	0403      	lsls	r3, r0, #16
 800be4e:	2010      	movs	r0, #16
 800be50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800be54:	bf04      	itt	eq
 800be56:	021b      	lsleq	r3, r3, #8
 800be58:	3008      	addeq	r0, #8
 800be5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800be5e:	bf04      	itt	eq
 800be60:	011b      	lsleq	r3, r3, #4
 800be62:	3004      	addeq	r0, #4
 800be64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800be68:	bf04      	itt	eq
 800be6a:	009b      	lsleq	r3, r3, #2
 800be6c:	3002      	addeq	r0, #2
 800be6e:	2b00      	cmp	r3, #0
 800be70:	db04      	blt.n	800be7c <__hi0bits+0x38>
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	d501      	bpl.n	800be7a <__hi0bits+0x36>
 800be76:	3001      	adds	r0, #1
 800be78:	4770      	bx	lr
 800be7a:	2020      	movs	r0, #32
 800be7c:	4770      	bx	lr
 800be7e:	2000      	movs	r0, #0
 800be80:	e7e6      	b.n	800be50 <__hi0bits+0xc>
 800be82:	bf00      	nop

0800be84 <__lo0bits>:
 800be84:	6803      	ldr	r3, [r0, #0]
 800be86:	f013 0207 	ands.w	r2, r3, #7
 800be8a:	4601      	mov	r1, r0
 800be8c:	d007      	beq.n	800be9e <__lo0bits+0x1a>
 800be8e:	07da      	lsls	r2, r3, #31
 800be90:	d41f      	bmi.n	800bed2 <__lo0bits+0x4e>
 800be92:	0798      	lsls	r0, r3, #30
 800be94:	d51f      	bpl.n	800bed6 <__lo0bits+0x52>
 800be96:	085b      	lsrs	r3, r3, #1
 800be98:	600b      	str	r3, [r1, #0]
 800be9a:	2001      	movs	r0, #1
 800be9c:	4770      	bx	lr
 800be9e:	b298      	uxth	r0, r3
 800bea0:	b1a0      	cbz	r0, 800becc <__lo0bits+0x48>
 800bea2:	4610      	mov	r0, r2
 800bea4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bea8:	bf04      	itt	eq
 800beaa:	0a1b      	lsreq	r3, r3, #8
 800beac:	3008      	addeq	r0, #8
 800beae:	071a      	lsls	r2, r3, #28
 800beb0:	bf04      	itt	eq
 800beb2:	091b      	lsreq	r3, r3, #4
 800beb4:	3004      	addeq	r0, #4
 800beb6:	079a      	lsls	r2, r3, #30
 800beb8:	bf04      	itt	eq
 800beba:	089b      	lsreq	r3, r3, #2
 800bebc:	3002      	addeq	r0, #2
 800bebe:	07da      	lsls	r2, r3, #31
 800bec0:	d402      	bmi.n	800bec8 <__lo0bits+0x44>
 800bec2:	085b      	lsrs	r3, r3, #1
 800bec4:	d00b      	beq.n	800bede <__lo0bits+0x5a>
 800bec6:	3001      	adds	r0, #1
 800bec8:	600b      	str	r3, [r1, #0]
 800beca:	4770      	bx	lr
 800becc:	0c1b      	lsrs	r3, r3, #16
 800bece:	2010      	movs	r0, #16
 800bed0:	e7e8      	b.n	800bea4 <__lo0bits+0x20>
 800bed2:	2000      	movs	r0, #0
 800bed4:	4770      	bx	lr
 800bed6:	089b      	lsrs	r3, r3, #2
 800bed8:	600b      	str	r3, [r1, #0]
 800beda:	2002      	movs	r0, #2
 800bedc:	4770      	bx	lr
 800bede:	2020      	movs	r0, #32
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop

0800bee4 <__i2b>:
 800bee4:	b510      	push	{r4, lr}
 800bee6:	460c      	mov	r4, r1
 800bee8:	2101      	movs	r1, #1
 800beea:	f7ff ff3b 	bl	800bd64 <_Balloc>
 800beee:	2201      	movs	r2, #1
 800bef0:	e9c0 2404 	strd	r2, r4, [r0, #16]
 800bef4:	bd10      	pop	{r4, pc}
 800bef6:	bf00      	nop

0800bef8 <__multiply>:
 800bef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befc:	690e      	ldr	r6, [r1, #16]
 800befe:	6914      	ldr	r4, [r2, #16]
 800bf00:	42a6      	cmp	r6, r4
 800bf02:	b083      	sub	sp, #12
 800bf04:	460f      	mov	r7, r1
 800bf06:	4615      	mov	r5, r2
 800bf08:	da04      	bge.n	800bf14 <__multiply+0x1c>
 800bf0a:	4632      	mov	r2, r6
 800bf0c:	462f      	mov	r7, r5
 800bf0e:	4626      	mov	r6, r4
 800bf10:	460d      	mov	r5, r1
 800bf12:	4614      	mov	r4, r2
 800bf14:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
 800bf18:	eb06 0804 	add.w	r8, r6, r4
 800bf1c:	4543      	cmp	r3, r8
 800bf1e:	bfb8      	it	lt
 800bf20:	3101      	addlt	r1, #1
 800bf22:	f7ff ff1f 	bl	800bd64 <_Balloc>
 800bf26:	f100 0914 	add.w	r9, r0, #20
 800bf2a:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
 800bf2e:	45f1      	cmp	r9, lr
 800bf30:	9000      	str	r0, [sp, #0]
 800bf32:	d205      	bcs.n	800bf40 <__multiply+0x48>
 800bf34:	464b      	mov	r3, r9
 800bf36:	2200      	movs	r2, #0
 800bf38:	f843 2b04 	str.w	r2, [r3], #4
 800bf3c:	459e      	cmp	lr, r3
 800bf3e:	d8fb      	bhi.n	800bf38 <__multiply+0x40>
 800bf40:	f105 0a14 	add.w	sl, r5, #20
 800bf44:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 800bf48:	f107 0314 	add.w	r3, r7, #20
 800bf4c:	45a2      	cmp	sl, r4
 800bf4e:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 800bf52:	d261      	bcs.n	800c018 <__multiply+0x120>
 800bf54:	1b64      	subs	r4, r4, r5
 800bf56:	3c15      	subs	r4, #21
 800bf58:	f024 0403 	bic.w	r4, r4, #3
 800bf5c:	f8cd e004 	str.w	lr, [sp, #4]
 800bf60:	44a2      	add	sl, r4
 800bf62:	f105 0210 	add.w	r2, r5, #16
 800bf66:	469e      	mov	lr, r3
 800bf68:	e005      	b.n	800bf76 <__multiply+0x7e>
 800bf6a:	0c2d      	lsrs	r5, r5, #16
 800bf6c:	d12b      	bne.n	800bfc6 <__multiply+0xce>
 800bf6e:	4592      	cmp	sl, r2
 800bf70:	f109 0904 	add.w	r9, r9, #4
 800bf74:	d04e      	beq.n	800c014 <__multiply+0x11c>
 800bf76:	f852 5f04 	ldr.w	r5, [r2, #4]!
 800bf7a:	fa1f fb85 	uxth.w	fp, r5
 800bf7e:	f1bb 0f00 	cmp.w	fp, #0
 800bf82:	d0f2      	beq.n	800bf6a <__multiply+0x72>
 800bf84:	4677      	mov	r7, lr
 800bf86:	464e      	mov	r6, r9
 800bf88:	2000      	movs	r0, #0
 800bf8a:	e000      	b.n	800bf8e <__multiply+0x96>
 800bf8c:	4626      	mov	r6, r4
 800bf8e:	f857 1b04 	ldr.w	r1, [r7], #4
 800bf92:	6834      	ldr	r4, [r6, #0]
 800bf94:	b28b      	uxth	r3, r1
 800bf96:	b2a5      	uxth	r5, r4
 800bf98:	0c09      	lsrs	r1, r1, #16
 800bf9a:	0c24      	lsrs	r4, r4, #16
 800bf9c:	fb0b 5303 	mla	r3, fp, r3, r5
 800bfa0:	4403      	add	r3, r0
 800bfa2:	fb0b 4001 	mla	r0, fp, r1, r4
 800bfa6:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800bfaa:	4634      	mov	r4, r6
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bfb2:	45bc      	cmp	ip, r7
 800bfb4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800bfb8:	f844 3b04 	str.w	r3, [r4], #4
 800bfbc:	d8e6      	bhi.n	800bf8c <__multiply+0x94>
 800bfbe:	6070      	str	r0, [r6, #4]
 800bfc0:	6815      	ldr	r5, [r2, #0]
 800bfc2:	0c2d      	lsrs	r5, r5, #16
 800bfc4:	d0d3      	beq.n	800bf6e <__multiply+0x76>
 800bfc6:	f8d9 3000 	ldr.w	r3, [r9]
 800bfca:	4676      	mov	r6, lr
 800bfcc:	4618      	mov	r0, r3
 800bfce:	46cb      	mov	fp, r9
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	e000      	b.n	800bfd6 <__multiply+0xde>
 800bfd4:	46a3      	mov	fp, r4
 800bfd6:	8834      	ldrh	r4, [r6, #0]
 800bfd8:	0c00      	lsrs	r0, r0, #16
 800bfda:	fb05 0004 	mla	r0, r5, r4, r0
 800bfde:	4401      	add	r1, r0
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	465c      	mov	r4, fp
 800bfe4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bfe8:	f844 3b04 	str.w	r3, [r4], #4
 800bfec:	f856 3b04 	ldr.w	r3, [r6], #4
 800bff0:	f8db 0004 	ldr.w	r0, [fp, #4]
 800bff4:	0c1b      	lsrs	r3, r3, #16
 800bff6:	b287      	uxth	r7, r0
 800bff8:	fb05 7303 	mla	r3, r5, r3, r7
 800bffc:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800c000:	45b4      	cmp	ip, r6
 800c002:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800c006:	d8e5      	bhi.n	800bfd4 <__multiply+0xdc>
 800c008:	4592      	cmp	sl, r2
 800c00a:	f8cb 3004 	str.w	r3, [fp, #4]
 800c00e:	f109 0904 	add.w	r9, r9, #4
 800c012:	d1b0      	bne.n	800bf76 <__multiply+0x7e>
 800c014:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c018:	f1b8 0f00 	cmp.w	r8, #0
 800c01c:	dd0b      	ble.n	800c036 <__multiply+0x13e>
 800c01e:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800c022:	f1ae 0e04 	sub.w	lr, lr, #4
 800c026:	b11b      	cbz	r3, 800c030 <__multiply+0x138>
 800c028:	e005      	b.n	800c036 <__multiply+0x13e>
 800c02a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c02e:	b913      	cbnz	r3, 800c036 <__multiply+0x13e>
 800c030:	f1b8 0801 	subs.w	r8, r8, #1
 800c034:	d1f9      	bne.n	800c02a <__multiply+0x132>
 800c036:	9800      	ldr	r0, [sp, #0]
 800c038:	f8c0 8010 	str.w	r8, [r0, #16]
 800c03c:	b003      	add	sp, #12
 800c03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c042:	bf00      	nop

0800c044 <__pow5mult>:
 800c044:	f012 0303 	ands.w	r3, r2, #3
 800c048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04c:	4614      	mov	r4, r2
 800c04e:	4607      	mov	r7, r0
 800c050:	d12e      	bne.n	800c0b0 <__pow5mult+0x6c>
 800c052:	460d      	mov	r5, r1
 800c054:	10a4      	asrs	r4, r4, #2
 800c056:	d01c      	beq.n	800c092 <__pow5mult+0x4e>
 800c058:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800c05a:	b396      	cbz	r6, 800c0c2 <__pow5mult+0x7e>
 800c05c:	07e3      	lsls	r3, r4, #31
 800c05e:	f04f 0800 	mov.w	r8, #0
 800c062:	d406      	bmi.n	800c072 <__pow5mult+0x2e>
 800c064:	1064      	asrs	r4, r4, #1
 800c066:	d014      	beq.n	800c092 <__pow5mult+0x4e>
 800c068:	6830      	ldr	r0, [r6, #0]
 800c06a:	b1a8      	cbz	r0, 800c098 <__pow5mult+0x54>
 800c06c:	4606      	mov	r6, r0
 800c06e:	07e3      	lsls	r3, r4, #31
 800c070:	d5f8      	bpl.n	800c064 <__pow5mult+0x20>
 800c072:	4632      	mov	r2, r6
 800c074:	4629      	mov	r1, r5
 800c076:	4638      	mov	r0, r7
 800c078:	f7ff ff3e 	bl	800bef8 <__multiply>
 800c07c:	b1b5      	cbz	r5, 800c0ac <__pow5mult+0x68>
 800c07e:	686a      	ldr	r2, [r5, #4]
 800c080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c082:	1064      	asrs	r4, r4, #1
 800c084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c088:	6029      	str	r1, [r5, #0]
 800c08a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c08e:	4605      	mov	r5, r0
 800c090:	d1ea      	bne.n	800c068 <__pow5mult+0x24>
 800c092:	4628      	mov	r0, r5
 800c094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c098:	4632      	mov	r2, r6
 800c09a:	4631      	mov	r1, r6
 800c09c:	4638      	mov	r0, r7
 800c09e:	f7ff ff2b 	bl	800bef8 <__multiply>
 800c0a2:	6030      	str	r0, [r6, #0]
 800c0a4:	f8c0 8000 	str.w	r8, [r0]
 800c0a8:	4606      	mov	r6, r0
 800c0aa:	e7e0      	b.n	800c06e <__pow5mult+0x2a>
 800c0ac:	4605      	mov	r5, r0
 800c0ae:	e7d9      	b.n	800c064 <__pow5mult+0x20>
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	4a0b      	ldr	r2, [pc, #44]	; (800c0e0 <__pow5mult+0x9c>)
 800c0b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	f7ff fe83 	bl	800bdc4 <__multadd>
 800c0be:	4605      	mov	r5, r0
 800c0c0:	e7c8      	b.n	800c054 <__pow5mult+0x10>
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	4638      	mov	r0, r7
 800c0c6:	f7ff fe4d 	bl	800bd64 <_Balloc>
 800c0ca:	f240 2371 	movw	r3, #625	; 0x271
 800c0ce:	6143      	str	r3, [r0, #20]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	6102      	str	r2, [r0, #16]
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	64b8      	str	r0, [r7, #72]	; 0x48
 800c0da:	6003      	str	r3, [r0, #0]
 800c0dc:	e7be      	b.n	800c05c <__pow5mult+0x18>
 800c0de:	bf00      	nop
 800c0e0:	0800cce8 	.word	0x0800cce8

0800c0e4 <__lshift>:
 800c0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e8:	4691      	mov	r9, r2
 800c0ea:	690a      	ldr	r2, [r1, #16]
 800c0ec:	460e      	mov	r6, r1
 800c0ee:	ea4f 1469 	mov.w	r4, r9, asr #5
 800c0f2:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
 800c0f6:	eb04 0802 	add.w	r8, r4, r2
 800c0fa:	f108 0501 	add.w	r5, r8, #1
 800c0fe:	429d      	cmp	r5, r3
 800c100:	4607      	mov	r7, r0
 800c102:	dd04      	ble.n	800c10e <__lshift+0x2a>
 800c104:	005b      	lsls	r3, r3, #1
 800c106:	429d      	cmp	r5, r3
 800c108:	f101 0101 	add.w	r1, r1, #1
 800c10c:	dcfa      	bgt.n	800c104 <__lshift+0x20>
 800c10e:	4638      	mov	r0, r7
 800c110:	f7ff fe28 	bl	800bd64 <_Balloc>
 800c114:	2c00      	cmp	r4, #0
 800c116:	f100 0314 	add.w	r3, r0, #20
 800c11a:	dd37      	ble.n	800c18c <__lshift+0xa8>
 800c11c:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 800c120:	2200      	movs	r2, #0
 800c122:	f843 2b04 	str.w	r2, [r3], #4
 800c126:	428b      	cmp	r3, r1
 800c128:	d1fb      	bne.n	800c122 <__lshift+0x3e>
 800c12a:	6934      	ldr	r4, [r6, #16]
 800c12c:	f106 0314 	add.w	r3, r6, #20
 800c130:	f019 091f 	ands.w	r9, r9, #31
 800c134:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 800c138:	d020      	beq.n	800c17c <__lshift+0x98>
 800c13a:	f1c9 0e20 	rsb	lr, r9, #32
 800c13e:	2200      	movs	r2, #0
 800c140:	e000      	b.n	800c144 <__lshift+0x60>
 800c142:	4651      	mov	r1, sl
 800c144:	681c      	ldr	r4, [r3, #0]
 800c146:	468a      	mov	sl, r1
 800c148:	fa04 f409 	lsl.w	r4, r4, r9
 800c14c:	4314      	orrs	r4, r2
 800c14e:	f84a 4b04 	str.w	r4, [sl], #4
 800c152:	f853 2b04 	ldr.w	r2, [r3], #4
 800c156:	4563      	cmp	r3, ip
 800c158:	fa22 f20e 	lsr.w	r2, r2, lr
 800c15c:	d3f1      	bcc.n	800c142 <__lshift+0x5e>
 800c15e:	604a      	str	r2, [r1, #4]
 800c160:	b10a      	cbz	r2, 800c166 <__lshift+0x82>
 800c162:	f108 0502 	add.w	r5, r8, #2
 800c166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c168:	6872      	ldr	r2, [r6, #4]
 800c16a:	3d01      	subs	r5, #1
 800c16c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c170:	6105      	str	r5, [r0, #16]
 800c172:	6031      	str	r1, [r6, #0]
 800c174:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800c178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c17c:	3904      	subs	r1, #4
 800c17e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c182:	f841 2f04 	str.w	r2, [r1, #4]!
 800c186:	459c      	cmp	ip, r3
 800c188:	d8f9      	bhi.n	800c17e <__lshift+0x9a>
 800c18a:	e7ec      	b.n	800c166 <__lshift+0x82>
 800c18c:	4619      	mov	r1, r3
 800c18e:	e7cc      	b.n	800c12a <__lshift+0x46>

0800c190 <__mcmp>:
 800c190:	b430      	push	{r4, r5}
 800c192:	690b      	ldr	r3, [r1, #16]
 800c194:	4605      	mov	r5, r0
 800c196:	6900      	ldr	r0, [r0, #16]
 800c198:	1ac0      	subs	r0, r0, r3
 800c19a:	d10f      	bne.n	800c1bc <__mcmp+0x2c>
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	3514      	adds	r5, #20
 800c1a0:	3114      	adds	r1, #20
 800c1a2:	4419      	add	r1, r3
 800c1a4:	442b      	add	r3, r5
 800c1a6:	e001      	b.n	800c1ac <__mcmp+0x1c>
 800c1a8:	429d      	cmp	r5, r3
 800c1aa:	d207      	bcs.n	800c1bc <__mcmp+0x2c>
 800c1ac:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800c1b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c1b4:	4294      	cmp	r4, r2
 800c1b6:	d0f7      	beq.n	800c1a8 <__mcmp+0x18>
 800c1b8:	d302      	bcc.n	800c1c0 <__mcmp+0x30>
 800c1ba:	2001      	movs	r0, #1
 800c1bc:	bc30      	pop	{r4, r5}
 800c1be:	4770      	bx	lr
 800c1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c4:	e7fa      	b.n	800c1bc <__mcmp+0x2c>
 800c1c6:	bf00      	nop

0800c1c8 <__mdiff>:
 800c1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1cc:	6913      	ldr	r3, [r2, #16]
 800c1ce:	690d      	ldr	r5, [r1, #16]
 800c1d0:	1aed      	subs	r5, r5, r3
 800c1d2:	2d00      	cmp	r5, #0
 800c1d4:	460e      	mov	r6, r1
 800c1d6:	4690      	mov	r8, r2
 800c1d8:	f101 0414 	add.w	r4, r1, #20
 800c1dc:	f102 0714 	add.w	r7, r2, #20
 800c1e0:	d114      	bne.n	800c20c <__mdiff+0x44>
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	18e2      	adds	r2, r4, r3
 800c1e6:	443b      	add	r3, r7
 800c1e8:	e001      	b.n	800c1ee <__mdiff+0x26>
 800c1ea:	42a2      	cmp	r2, r4
 800c1ec:	d959      	bls.n	800c2a2 <__mdiff+0xda>
 800c1ee:	f852 cd04 	ldr.w	ip, [r2, #-4]!
 800c1f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1f6:	458c      	cmp	ip, r1
 800c1f8:	d0f7      	beq.n	800c1ea <__mdiff+0x22>
 800c1fa:	d209      	bcs.n	800c210 <__mdiff+0x48>
 800c1fc:	4622      	mov	r2, r4
 800c1fe:	4633      	mov	r3, r6
 800c200:	463c      	mov	r4, r7
 800c202:	4646      	mov	r6, r8
 800c204:	4617      	mov	r7, r2
 800c206:	4698      	mov	r8, r3
 800c208:	2501      	movs	r5, #1
 800c20a:	e001      	b.n	800c210 <__mdiff+0x48>
 800c20c:	dbf6      	blt.n	800c1fc <__mdiff+0x34>
 800c20e:	2500      	movs	r5, #0
 800c210:	6871      	ldr	r1, [r6, #4]
 800c212:	f7ff fda7 	bl	800bd64 <_Balloc>
 800c216:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c21a:	6936      	ldr	r6, [r6, #16]
 800c21c:	60c5      	str	r5, [r0, #12]
 800c21e:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 800c222:	46bc      	mov	ip, r7
 800c224:	f100 0514 	add.w	r5, r0, #20
 800c228:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800c22c:	2300      	movs	r3, #0
 800c22e:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c232:	f854 8b04 	ldr.w	r8, [r4], #4
 800c236:	b28a      	uxth	r2, r1
 800c238:	fa13 f388 	uxtah	r3, r3, r8
 800c23c:	0c09      	lsrs	r1, r1, #16
 800c23e:	1a9a      	subs	r2, r3, r2
 800c240:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800c244:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800c248:	b292      	uxth	r2, r2
 800c24a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c24e:	45e6      	cmp	lr, ip
 800c250:	f845 2b04 	str.w	r2, [r5], #4
 800c254:	ea4f 4323 	mov.w	r3, r3, asr #16
 800c258:	d8e9      	bhi.n	800c22e <__mdiff+0x66>
 800c25a:	42a7      	cmp	r7, r4
 800c25c:	d917      	bls.n	800c28e <__mdiff+0xc6>
 800c25e:	46ae      	mov	lr, r5
 800c260:	46a4      	mov	ip, r4
 800c262:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c266:	fa13 f382 	uxtah	r3, r3, r2
 800c26a:	1419      	asrs	r1, r3, #16
 800c26c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c270:	b29b      	uxth	r3, r3
 800c272:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 800c276:	4567      	cmp	r7, ip
 800c278:	f84e 2b04 	str.w	r2, [lr], #4
 800c27c:	ea4f 4321 	mov.w	r3, r1, asr #16
 800c280:	d8ef      	bhi.n	800c262 <__mdiff+0x9a>
 800c282:	43e4      	mvns	r4, r4
 800c284:	4427      	add	r7, r4
 800c286:	f027 0703 	bic.w	r7, r7, #3
 800c28a:	3704      	adds	r7, #4
 800c28c:	443d      	add	r5, r7
 800c28e:	3d04      	subs	r5, #4
 800c290:	b922      	cbnz	r2, 800c29c <__mdiff+0xd4>
 800c292:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c296:	3e01      	subs	r6, #1
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d0fa      	beq.n	800c292 <__mdiff+0xca>
 800c29c:	6106      	str	r6, [r0, #16]
 800c29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	f7ff fd5e 	bl	800bd64 <_Balloc>
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c2b4 <__d2b>:
 800c2b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2b8:	460f      	mov	r7, r1
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	2101      	movs	r1, #1
 800c2be:	ec55 4b10 	vmov	r4, r5, d0
 800c2c2:	4616      	mov	r6, r2
 800c2c4:	f7ff fd4e 	bl	800bd64 <_Balloc>
 800c2c8:	f3c5 580a 	ubfx	r8, r5, #20, #11
 800c2cc:	4681      	mov	r9, r0
 800c2ce:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c2d2:	f1b8 0f00 	cmp.w	r8, #0
 800c2d6:	d001      	beq.n	800c2dc <__d2b+0x28>
 800c2d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2dc:	2c00      	cmp	r4, #0
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	d024      	beq.n	800c32c <__d2b+0x78>
 800c2e2:	a802      	add	r0, sp, #8
 800c2e4:	f840 4d08 	str.w	r4, [r0, #-8]!
 800c2e8:	f7ff fdcc 	bl	800be84 <__lo0bits>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d136      	bne.n	800c35e <__d2b+0xaa>
 800c2f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2f4:	f8c9 2014 	str.w	r2, [r9, #20]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	bf0c      	ite	eq
 800c2fc:	2101      	moveq	r1, #1
 800c2fe:	2102      	movne	r1, #2
 800c300:	f8c9 3018 	str.w	r3, [r9, #24]
 800c304:	f8c9 1010 	str.w	r1, [r9, #16]
 800c308:	f1b8 0f00 	cmp.w	r8, #0
 800c30c:	d11b      	bne.n	800c346 <__d2b+0x92>
 800c30e:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 800c312:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c316:	6038      	str	r0, [r7, #0]
 800c318:	6918      	ldr	r0, [r3, #16]
 800c31a:	f7ff fd93 	bl	800be44 <__hi0bits>
 800c31e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c322:	6030      	str	r0, [r6, #0]
 800c324:	4648      	mov	r0, r9
 800c326:	b003      	add	sp, #12
 800c328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c32c:	a801      	add	r0, sp, #4
 800c32e:	f7ff fda9 	bl	800be84 <__lo0bits>
 800c332:	9b01      	ldr	r3, [sp, #4]
 800c334:	f8c9 3014 	str.w	r3, [r9, #20]
 800c338:	2101      	movs	r1, #1
 800c33a:	3020      	adds	r0, #32
 800c33c:	f8c9 1010 	str.w	r1, [r9, #16]
 800c340:	f1b8 0f00 	cmp.w	r8, #0
 800c344:	d0e3      	beq.n	800c30e <__d2b+0x5a>
 800c346:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
 800c34a:	eb08 0300 	add.w	r3, r8, r0
 800c34e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	6030      	str	r0, [r6, #0]
 800c356:	4648      	mov	r0, r9
 800c358:	b003      	add	sp, #12
 800c35a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c35e:	e9dd 1300 	ldrd	r1, r3, [sp]
 800c362:	f1c0 0220 	rsb	r2, r0, #32
 800c366:	fa03 f202 	lsl.w	r2, r3, r2
 800c36a:	430a      	orrs	r2, r1
 800c36c:	40c3      	lsrs	r3, r0
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	f8c9 2014 	str.w	r2, [r9, #20]
 800c374:	e7c0      	b.n	800c2f8 <__d2b+0x44>
 800c376:	bf00      	nop

0800c378 <frexp>:
 800c378:	ec53 2b10 	vmov	r2, r3, d0
 800c37c:	b570      	push	{r4, r5, r6, lr}
 800c37e:	4e16      	ldr	r6, [pc, #88]	; (800c3d8 <frexp+0x60>)
 800c380:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c384:	2500      	movs	r5, #0
 800c386:	42b1      	cmp	r1, r6
 800c388:	4604      	mov	r4, r0
 800c38a:	6005      	str	r5, [r0, #0]
 800c38c:	dc21      	bgt.n	800c3d2 <frexp+0x5a>
 800c38e:	ee10 6a10 	vmov	r6, s0
 800c392:	430e      	orrs	r6, r1
 800c394:	d01d      	beq.n	800c3d2 <frexp+0x5a>
 800c396:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c39a:	4618      	mov	r0, r3
 800c39c:	da0c      	bge.n	800c3b8 <frexp+0x40>
 800c39e:	4619      	mov	r1, r3
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	ee10 0a10 	vmov	r0, s0
 800c3a6:	4b0d      	ldr	r3, [pc, #52]	; (800c3dc <frexp+0x64>)
 800c3a8:	f7f4 fa60 	bl	800086c <__aeabi_dmul>
 800c3ac:	f06f 0535 	mvn.w	r5, #53	; 0x35
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	4608      	mov	r0, r1
 800c3b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c3b8:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c3bc:	1509      	asrs	r1, r1, #20
 800c3be:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
 800c3c2:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 800c3c6:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800c3ca:	4429      	add	r1, r5
 800c3cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3d0:	6021      	str	r1, [r4, #0]
 800c3d2:	ec43 2b10 	vmov	d0, r2, r3
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}
 800c3d8:	7fefffff 	.word	0x7fefffff
 800c3dc:	43500000 	.word	0x43500000

0800c3e0 <_sbrk_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4c07      	ldr	r4, [pc, #28]	; (800c400 <_sbrk_r+0x20>)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	6023      	str	r3, [r4, #0]
 800c3ec:	f7f6 fdd6 	bl	8002f9c <_sbrk>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d000      	beq.n	800c3f6 <_sbrk_r+0x16>
 800c3f4:	bd38      	pop	{r3, r4, r5, pc}
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d0fb      	beq.n	800c3f4 <_sbrk_r+0x14>
 800c3fc:	602b      	str	r3, [r5, #0]
 800c3fe:	bd38      	pop	{r3, r4, r5, pc}
 800c400:	20000e70 	.word	0x20000e70

0800c404 <strncpy>:
 800c404:	ea40 0301 	orr.w	r3, r0, r1
 800c408:	079b      	lsls	r3, r3, #30
 800c40a:	b470      	push	{r4, r5, r6}
 800c40c:	d12a      	bne.n	800c464 <strncpy+0x60>
 800c40e:	2a03      	cmp	r2, #3
 800c410:	d928      	bls.n	800c464 <strncpy+0x60>
 800c412:	460c      	mov	r4, r1
 800c414:	4603      	mov	r3, r0
 800c416:	4621      	mov	r1, r4
 800c418:	f854 6b04 	ldr.w	r6, [r4], #4
 800c41c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800c420:	ea25 0506 	bic.w	r5, r5, r6
 800c424:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800c428:	d106      	bne.n	800c438 <strncpy+0x34>
 800c42a:	3a04      	subs	r2, #4
 800c42c:	2a03      	cmp	r2, #3
 800c42e:	f843 6b04 	str.w	r6, [r3], #4
 800c432:	4621      	mov	r1, r4
 800c434:	d8ef      	bhi.n	800c416 <strncpy+0x12>
 800c436:	b19a      	cbz	r2, 800c460 <strncpy+0x5c>
 800c438:	780c      	ldrb	r4, [r1, #0]
 800c43a:	701c      	strb	r4, [r3, #0]
 800c43c:	3a01      	subs	r2, #1
 800c43e:	3301      	adds	r3, #1
 800c440:	b13c      	cbz	r4, 800c452 <strncpy+0x4e>
 800c442:	b16a      	cbz	r2, 800c460 <strncpy+0x5c>
 800c444:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c448:	f803 4b01 	strb.w	r4, [r3], #1
 800c44c:	3a01      	subs	r2, #1
 800c44e:	2c00      	cmp	r4, #0
 800c450:	d1f7      	bne.n	800c442 <strncpy+0x3e>
 800c452:	b12a      	cbz	r2, 800c460 <strncpy+0x5c>
 800c454:	441a      	add	r2, r3
 800c456:	2100      	movs	r1, #0
 800c458:	f803 1b01 	strb.w	r1, [r3], #1
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d1fb      	bne.n	800c458 <strncpy+0x54>
 800c460:	bc70      	pop	{r4, r5, r6}
 800c462:	4770      	bx	lr
 800c464:	4603      	mov	r3, r0
 800c466:	e7e6      	b.n	800c436 <strncpy+0x32>

0800c468 <__ssprint_r>:
 800c468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46c:	6893      	ldr	r3, [r2, #8]
 800c46e:	b083      	sub	sp, #12
 800c470:	4690      	mov	r8, r2
 800c472:	2b00      	cmp	r3, #0
 800c474:	d06c      	beq.n	800c550 <__ssprint_r+0xe8>
 800c476:	6817      	ldr	r7, [r2, #0]
 800c478:	688d      	ldr	r5, [r1, #8]
 800c47a:	4682      	mov	sl, r0
 800c47c:	460c      	mov	r4, r1
 800c47e:	6808      	ldr	r0, [r1, #0]
 800c480:	3708      	adds	r7, #8
 800c482:	e042      	b.n	800c50a <__ssprint_r+0xa2>
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c48a:	d02d      	beq.n	800c4e8 <__ssprint_r+0x80>
 800c48c:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 800c490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c494:	eba0 0b01 	sub.w	fp, r0, r1
 800c498:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c49c:	1c70      	adds	r0, r6, #1
 800c49e:	106d      	asrs	r5, r5, #1
 800c4a0:	4458      	add	r0, fp
 800c4a2:	42a8      	cmp	r0, r5
 800c4a4:	462a      	mov	r2, r5
 800c4a6:	bf84      	itt	hi
 800c4a8:	4605      	movhi	r5, r0
 800c4aa:	462a      	movhi	r2, r5
 800c4ac:	055b      	lsls	r3, r3, #21
 800c4ae:	d536      	bpl.n	800c51e <__ssprint_r+0xb6>
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	4650      	mov	r0, sl
 800c4b4:	f7ff f9a6 	bl	800b804 <_malloc_r>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d03a      	beq.n	800c532 <__ssprint_r+0xca>
 800c4bc:	465a      	mov	r2, fp
 800c4be:	6921      	ldr	r1, [r4, #16]
 800c4c0:	9001      	str	r0, [sp, #4]
 800c4c2:	f7f3 ff7d 	bl	80003c0 <memcpy>
 800c4c6:	89a2      	ldrh	r2, [r4, #12]
 800c4c8:	9b01      	ldr	r3, [sp, #4]
 800c4ca:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c4ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c4d2:	81a2      	strh	r2, [r4, #12]
 800c4d4:	eba5 020b 	sub.w	r2, r5, fp
 800c4d8:	eb03 000b 	add.w	r0, r3, fp
 800c4dc:	6165      	str	r5, [r4, #20]
 800c4de:	6123      	str	r3, [r4, #16]
 800c4e0:	6020      	str	r0, [r4, #0]
 800c4e2:	60a2      	str	r2, [r4, #8]
 800c4e4:	4635      	mov	r5, r6
 800c4e6:	46b3      	mov	fp, r6
 800c4e8:	465a      	mov	r2, fp
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	f000 f880 	bl	800c5f0 <memmove>
 800c4f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4f4:	68a2      	ldr	r2, [r4, #8]
 800c4f6:	6820      	ldr	r0, [r4, #0]
 800c4f8:	1b55      	subs	r5, r2, r5
 800c4fa:	4458      	add	r0, fp
 800c4fc:	1b9e      	subs	r6, r3, r6
 800c4fe:	60a5      	str	r5, [r4, #8]
 800c500:	6020      	str	r0, [r4, #0]
 800c502:	f8c8 6008 	str.w	r6, [r8, #8]
 800c506:	b31e      	cbz	r6, 800c550 <__ssprint_r+0xe8>
 800c508:	3708      	adds	r7, #8
 800c50a:	e957 9602 	ldrd	r9, r6, [r7, #-8]
 800c50e:	46ab      	mov	fp, r5
 800c510:	2e00      	cmp	r6, #0
 800c512:	d0f9      	beq.n	800c508 <__ssprint_r+0xa0>
 800c514:	42ae      	cmp	r6, r5
 800c516:	d2b5      	bcs.n	800c484 <__ssprint_r+0x1c>
 800c518:	4635      	mov	r5, r6
 800c51a:	46b3      	mov	fp, r6
 800c51c:	e7e4      	b.n	800c4e8 <__ssprint_r+0x80>
 800c51e:	4650      	mov	r0, sl
 800c520:	f000 f8ca 	bl	800c6b8 <_realloc_r>
 800c524:	4603      	mov	r3, r0
 800c526:	2800      	cmp	r0, #0
 800c528:	d1d4      	bne.n	800c4d4 <__ssprint_r+0x6c>
 800c52a:	6921      	ldr	r1, [r4, #16]
 800c52c:	4650      	mov	r0, sl
 800c52e:	f7ff f867 	bl	800b600 <_free_r>
 800c532:	230c      	movs	r3, #12
 800c534:	f8ca 3000 	str.w	r3, [sl]
 800c538:	89a3      	ldrh	r3, [r4, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c540:	f04f 30ff 	mov.w	r0, #4294967295
 800c544:	81a3      	strh	r3, [r4, #12]
 800c546:	e9c8 2201 	strd	r2, r2, [r8, #4]
 800c54a:	b003      	add	sp, #12
 800c54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c550:	2000      	movs	r0, #0
 800c552:	f8c8 0004 	str.w	r0, [r8, #4]
 800c556:	b003      	add	sp, #12
 800c558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c55c <_calloc_r>:
 800c55c:	b510      	push	{r4, lr}
 800c55e:	fb02 f101 	mul.w	r1, r2, r1
 800c562:	f7ff f94f 	bl	800b804 <_malloc_r>
 800c566:	4604      	mov	r4, r0
 800c568:	b1d8      	cbz	r0, 800c5a2 <_calloc_r+0x46>
 800c56a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c56e:	f022 0203 	bic.w	r2, r2, #3
 800c572:	3a04      	subs	r2, #4
 800c574:	2a24      	cmp	r2, #36	; 0x24
 800c576:	d81d      	bhi.n	800c5b4 <_calloc_r+0x58>
 800c578:	2a13      	cmp	r2, #19
 800c57a:	d914      	bls.n	800c5a6 <_calloc_r+0x4a>
 800c57c:	2300      	movs	r3, #0
 800c57e:	2a1b      	cmp	r2, #27
 800c580:	e9c0 3300 	strd	r3, r3, [r0]
 800c584:	d91b      	bls.n	800c5be <_calloc_r+0x62>
 800c586:	2a24      	cmp	r2, #36	; 0x24
 800c588:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800c58c:	bf0a      	itet	eq
 800c58e:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 800c592:	f100 0210 	addne.w	r2, r0, #16
 800c596:	f100 0218 	addeq.w	r2, r0, #24
 800c59a:	2300      	movs	r3, #0
 800c59c:	e9c2 3300 	strd	r3, r3, [r2]
 800c5a0:	6093      	str	r3, [r2, #8]
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	bd10      	pop	{r4, pc}
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	e9c2 3300 	strd	r3, r3, [r2]
 800c5ae:	6093      	str	r3, [r2, #8]
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	bd10      	pop	{r4, pc}
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	f7fc fa53 	bl	8008a60 <memset>
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	bd10      	pop	{r4, pc}
 800c5be:	f100 0208 	add.w	r2, r0, #8
 800c5c2:	e7f1      	b.n	800c5a8 <_calloc_r+0x4c>

0800c5c4 <__ascii_mbtowc>:
 800c5c4:	b082      	sub	sp, #8
 800c5c6:	b149      	cbz	r1, 800c5dc <__ascii_mbtowc+0x18>
 800c5c8:	b15a      	cbz	r2, 800c5e2 <__ascii_mbtowc+0x1e>
 800c5ca:	b16b      	cbz	r3, 800c5e8 <__ascii_mbtowc+0x24>
 800c5cc:	7813      	ldrb	r3, [r2, #0]
 800c5ce:	600b      	str	r3, [r1, #0]
 800c5d0:	7812      	ldrb	r2, [r2, #0]
 800c5d2:	1c10      	adds	r0, r2, #0
 800c5d4:	bf18      	it	ne
 800c5d6:	2001      	movne	r0, #1
 800c5d8:	b002      	add	sp, #8
 800c5da:	4770      	bx	lr
 800c5dc:	a901      	add	r1, sp, #4
 800c5de:	2a00      	cmp	r2, #0
 800c5e0:	d1f3      	bne.n	800c5ca <__ascii_mbtowc+0x6>
 800c5e2:	4610      	mov	r0, r2
 800c5e4:	b002      	add	sp, #8
 800c5e6:	4770      	bx	lr
 800c5e8:	f06f 0001 	mvn.w	r0, #1
 800c5ec:	e7f4      	b.n	800c5d8 <__ascii_mbtowc+0x14>
 800c5ee:	bf00      	nop

0800c5f0 <memmove>:
 800c5f0:	4288      	cmp	r0, r1
 800c5f2:	b4f0      	push	{r4, r5, r6, r7}
 800c5f4:	d90d      	bls.n	800c612 <memmove+0x22>
 800c5f6:	188b      	adds	r3, r1, r2
 800c5f8:	4283      	cmp	r3, r0
 800c5fa:	d90a      	bls.n	800c612 <memmove+0x22>
 800c5fc:	1884      	adds	r4, r0, r2
 800c5fe:	b132      	cbz	r2, 800c60e <memmove+0x1e>
 800c600:	4622      	mov	r2, r4
 800c602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c60a:	4299      	cmp	r1, r3
 800c60c:	d1f9      	bne.n	800c602 <memmove+0x12>
 800c60e:	bcf0      	pop	{r4, r5, r6, r7}
 800c610:	4770      	bx	lr
 800c612:	2a0f      	cmp	r2, #15
 800c614:	d949      	bls.n	800c6aa <memmove+0xba>
 800c616:	ea40 0301 	orr.w	r3, r0, r1
 800c61a:	079b      	lsls	r3, r3, #30
 800c61c:	d147      	bne.n	800c6ae <memmove+0xbe>
 800c61e:	f1a2 0310 	sub.w	r3, r2, #16
 800c622:	091b      	lsrs	r3, r3, #4
 800c624:	f101 0720 	add.w	r7, r1, #32
 800c628:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 800c62c:	f101 0410 	add.w	r4, r1, #16
 800c630:	f100 0510 	add.w	r5, r0, #16
 800c634:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800c638:	f845 6c10 	str.w	r6, [r5, #-16]
 800c63c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800c640:	f845 6c0c 	str.w	r6, [r5, #-12]
 800c644:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800c648:	f845 6c08 	str.w	r6, [r5, #-8]
 800c64c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800c650:	f845 6c04 	str.w	r6, [r5, #-4]
 800c654:	3410      	adds	r4, #16
 800c656:	42bc      	cmp	r4, r7
 800c658:	f105 0510 	add.w	r5, r5, #16
 800c65c:	d1ea      	bne.n	800c634 <memmove+0x44>
 800c65e:	3301      	adds	r3, #1
 800c660:	f002 050f 	and.w	r5, r2, #15
 800c664:	011b      	lsls	r3, r3, #4
 800c666:	2d03      	cmp	r5, #3
 800c668:	4419      	add	r1, r3
 800c66a:	4403      	add	r3, r0
 800c66c:	d921      	bls.n	800c6b2 <memmove+0xc2>
 800c66e:	1f1f      	subs	r7, r3, #4
 800c670:	460e      	mov	r6, r1
 800c672:	462c      	mov	r4, r5
 800c674:	3c04      	subs	r4, #4
 800c676:	f856 cb04 	ldr.w	ip, [r6], #4
 800c67a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c67e:	2c03      	cmp	r4, #3
 800c680:	d8f8      	bhi.n	800c674 <memmove+0x84>
 800c682:	1f2c      	subs	r4, r5, #4
 800c684:	f024 0403 	bic.w	r4, r4, #3
 800c688:	3404      	adds	r4, #4
 800c68a:	4423      	add	r3, r4
 800c68c:	4421      	add	r1, r4
 800c68e:	f002 0203 	and.w	r2, r2, #3
 800c692:	2a00      	cmp	r2, #0
 800c694:	d0bb      	beq.n	800c60e <memmove+0x1e>
 800c696:	3b01      	subs	r3, #1
 800c698:	440a      	add	r2, r1
 800c69a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c69e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6a2:	4291      	cmp	r1, r2
 800c6a4:	d1f9      	bne.n	800c69a <memmove+0xaa>
 800c6a6:	bcf0      	pop	{r4, r5, r6, r7}
 800c6a8:	4770      	bx	lr
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	e7f1      	b.n	800c692 <memmove+0xa2>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	e7f1      	b.n	800c696 <memmove+0xa6>
 800c6b2:	462a      	mov	r2, r5
 800c6b4:	e7ed      	b.n	800c692 <memmove+0xa2>
 800c6b6:	bf00      	nop

0800c6b8 <_realloc_r>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	4692      	mov	sl, r2
 800c6be:	b083      	sub	sp, #12
 800c6c0:	2900      	cmp	r1, #0
 800c6c2:	f000 80a1 	beq.w	800c808 <_realloc_r+0x150>
 800c6c6:	460d      	mov	r5, r1
 800c6c8:	4680      	mov	r8, r0
 800c6ca:	f10a 040b 	add.w	r4, sl, #11
 800c6ce:	f7ff fb3d 	bl	800bd4c <__malloc_lock>
 800c6d2:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800c6d6:	2c16      	cmp	r4, #22
 800c6d8:	f022 0603 	bic.w	r6, r2, #3
 800c6dc:	f1a5 0708 	sub.w	r7, r5, #8
 800c6e0:	d83e      	bhi.n	800c760 <_realloc_r+0xa8>
 800c6e2:	2410      	movs	r4, #16
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	45a2      	cmp	sl, r4
 800c6e8:	d83f      	bhi.n	800c76a <_realloc_r+0xb2>
 800c6ea:	428e      	cmp	r6, r1
 800c6ec:	eb07 0906 	add.w	r9, r7, r6
 800c6f0:	da74      	bge.n	800c7dc <_realloc_r+0x124>
 800c6f2:	4bc7      	ldr	r3, [pc, #796]	; (800ca10 <_realloc_r+0x358>)
 800c6f4:	6898      	ldr	r0, [r3, #8]
 800c6f6:	4548      	cmp	r0, r9
 800c6f8:	f000 80aa 	beq.w	800c850 <_realloc_r+0x198>
 800c6fc:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c700:	f020 0301 	bic.w	r3, r0, #1
 800c704:	444b      	add	r3, r9
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	07db      	lsls	r3, r3, #31
 800c70a:	f140 8083 	bpl.w	800c814 <_realloc_r+0x15c>
 800c70e:	07d2      	lsls	r2, r2, #31
 800c710:	d534      	bpl.n	800c77c <_realloc_r+0xc4>
 800c712:	4651      	mov	r1, sl
 800c714:	4640      	mov	r0, r8
 800c716:	f7ff f875 	bl	800b804 <_malloc_r>
 800c71a:	4682      	mov	sl, r0
 800c71c:	b1e0      	cbz	r0, 800c758 <_realloc_r+0xa0>
 800c71e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800c722:	f023 0301 	bic.w	r3, r3, #1
 800c726:	443b      	add	r3, r7
 800c728:	f1a0 0208 	sub.w	r2, r0, #8
 800c72c:	4293      	cmp	r3, r2
 800c72e:	f000 80f9 	beq.w	800c924 <_realloc_r+0x26c>
 800c732:	1f32      	subs	r2, r6, #4
 800c734:	2a24      	cmp	r2, #36	; 0x24
 800c736:	f200 8107 	bhi.w	800c948 <_realloc_r+0x290>
 800c73a:	2a13      	cmp	r2, #19
 800c73c:	6829      	ldr	r1, [r5, #0]
 800c73e:	f200 80e6 	bhi.w	800c90e <_realloc_r+0x256>
 800c742:	4603      	mov	r3, r0
 800c744:	462a      	mov	r2, r5
 800c746:	6019      	str	r1, [r3, #0]
 800c748:	6851      	ldr	r1, [r2, #4]
 800c74a:	6059      	str	r1, [r3, #4]
 800c74c:	6892      	ldr	r2, [r2, #8]
 800c74e:	609a      	str	r2, [r3, #8]
 800c750:	4629      	mov	r1, r5
 800c752:	4640      	mov	r0, r8
 800c754:	f7fe ff54 	bl	800b600 <_free_r>
 800c758:	4640      	mov	r0, r8
 800c75a:	f7ff fafd 	bl	800bd58 <__malloc_unlock>
 800c75e:	e04f      	b.n	800c800 <_realloc_r+0x148>
 800c760:	f024 0407 	bic.w	r4, r4, #7
 800c764:	2c00      	cmp	r4, #0
 800c766:	4621      	mov	r1, r4
 800c768:	dabd      	bge.n	800c6e6 <_realloc_r+0x2e>
 800c76a:	f04f 0a00 	mov.w	sl, #0
 800c76e:	230c      	movs	r3, #12
 800c770:	4650      	mov	r0, sl
 800c772:	f8c8 3000 	str.w	r3, [r8]
 800c776:	b003      	add	sp, #12
 800c778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77c:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800c780:	eba7 0b03 	sub.w	fp, r7, r3
 800c784:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c788:	f022 0203 	bic.w	r2, r2, #3
 800c78c:	18b3      	adds	r3, r6, r2
 800c78e:	428b      	cmp	r3, r1
 800c790:	dbbf      	blt.n	800c712 <_realloc_r+0x5a>
 800c792:	46da      	mov	sl, fp
 800c794:	f8db 100c 	ldr.w	r1, [fp, #12]
 800c798:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800c79c:	1f32      	subs	r2, r6, #4
 800c79e:	2a24      	cmp	r2, #36	; 0x24
 800c7a0:	60c1      	str	r1, [r0, #12]
 800c7a2:	eb0b 0903 	add.w	r9, fp, r3
 800c7a6:	6088      	str	r0, [r1, #8]
 800c7a8:	f200 80c6 	bhi.w	800c938 <_realloc_r+0x280>
 800c7ac:	2a13      	cmp	r2, #19
 800c7ae:	6829      	ldr	r1, [r5, #0]
 800c7b0:	f240 80c0 	bls.w	800c934 <_realloc_r+0x27c>
 800c7b4:	f8cb 1008 	str.w	r1, [fp, #8]
 800c7b8:	6869      	ldr	r1, [r5, #4]
 800c7ba:	f8cb 100c 	str.w	r1, [fp, #12]
 800c7be:	2a1b      	cmp	r2, #27
 800c7c0:	68a9      	ldr	r1, [r5, #8]
 800c7c2:	f200 80d8 	bhi.w	800c976 <_realloc_r+0x2be>
 800c7c6:	f10b 0210 	add.w	r2, fp, #16
 800c7ca:	3508      	adds	r5, #8
 800c7cc:	6011      	str	r1, [r2, #0]
 800c7ce:	6869      	ldr	r1, [r5, #4]
 800c7d0:	6051      	str	r1, [r2, #4]
 800c7d2:	68a9      	ldr	r1, [r5, #8]
 800c7d4:	6091      	str	r1, [r2, #8]
 800c7d6:	461e      	mov	r6, r3
 800c7d8:	465f      	mov	r7, fp
 800c7da:	4655      	mov	r5, sl
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	1b32      	subs	r2, r6, r4
 800c7e0:	2a0f      	cmp	r2, #15
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	d822      	bhi.n	800c82e <_realloc_r+0x176>
 800c7e8:	4333      	orrs	r3, r6
 800c7ea:	607b      	str	r3, [r7, #4]
 800c7ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c7f0:	f043 0301 	orr.w	r3, r3, #1
 800c7f4:	f8c9 3004 	str.w	r3, [r9, #4]
 800c7f8:	4640      	mov	r0, r8
 800c7fa:	f7ff faad 	bl	800bd58 <__malloc_unlock>
 800c7fe:	46aa      	mov	sl, r5
 800c800:	4650      	mov	r0, sl
 800c802:	b003      	add	sp, #12
 800c804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c808:	4611      	mov	r1, r2
 800c80a:	b003      	add	sp, #12
 800c80c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	f7fe bff8 	b.w	800b804 <_malloc_r>
 800c814:	f020 0003 	bic.w	r0, r0, #3
 800c818:	1833      	adds	r3, r6, r0
 800c81a:	428b      	cmp	r3, r1
 800c81c:	db61      	blt.n	800c8e2 <_realloc_r+0x22a>
 800c81e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800c822:	461e      	mov	r6, r3
 800c824:	60ca      	str	r2, [r1, #12]
 800c826:	eb07 0903 	add.w	r9, r7, r3
 800c82a:	6091      	str	r1, [r2, #8]
 800c82c:	e7d6      	b.n	800c7dc <_realloc_r+0x124>
 800c82e:	1939      	adds	r1, r7, r4
 800c830:	4323      	orrs	r3, r4
 800c832:	f042 0201 	orr.w	r2, r2, #1
 800c836:	607b      	str	r3, [r7, #4]
 800c838:	604a      	str	r2, [r1, #4]
 800c83a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c83e:	f043 0301 	orr.w	r3, r3, #1
 800c842:	3108      	adds	r1, #8
 800c844:	f8c9 3004 	str.w	r3, [r9, #4]
 800c848:	4640      	mov	r0, r8
 800c84a:	f7fe fed9 	bl	800b600 <_free_r>
 800c84e:	e7d3      	b.n	800c7f8 <_realloc_r+0x140>
 800c850:	6840      	ldr	r0, [r0, #4]
 800c852:	f020 0903 	bic.w	r9, r0, #3
 800c856:	44b1      	add	r9, r6
 800c858:	f104 0010 	add.w	r0, r4, #16
 800c85c:	4581      	cmp	r9, r0
 800c85e:	da77      	bge.n	800c950 <_realloc_r+0x298>
 800c860:	07d2      	lsls	r2, r2, #31
 800c862:	f53f af56 	bmi.w	800c712 <_realloc_r+0x5a>
 800c866:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800c86a:	eba7 0b02 	sub.w	fp, r7, r2
 800c86e:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c872:	f022 0203 	bic.w	r2, r2, #3
 800c876:	4491      	add	r9, r2
 800c878:	4548      	cmp	r0, r9
 800c87a:	dc87      	bgt.n	800c78c <_realloc_r+0xd4>
 800c87c:	46da      	mov	sl, fp
 800c87e:	f8db 100c 	ldr.w	r1, [fp, #12]
 800c882:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800c886:	1f32      	subs	r2, r6, #4
 800c888:	2a24      	cmp	r2, #36	; 0x24
 800c88a:	60c1      	str	r1, [r0, #12]
 800c88c:	6088      	str	r0, [r1, #8]
 800c88e:	f200 80a1 	bhi.w	800c9d4 <_realloc_r+0x31c>
 800c892:	2a13      	cmp	r2, #19
 800c894:	6829      	ldr	r1, [r5, #0]
 800c896:	f240 809b 	bls.w	800c9d0 <_realloc_r+0x318>
 800c89a:	f8cb 1008 	str.w	r1, [fp, #8]
 800c89e:	6869      	ldr	r1, [r5, #4]
 800c8a0:	f8cb 100c 	str.w	r1, [fp, #12]
 800c8a4:	2a1b      	cmp	r2, #27
 800c8a6:	68a9      	ldr	r1, [r5, #8]
 800c8a8:	f200 809b 	bhi.w	800c9e2 <_realloc_r+0x32a>
 800c8ac:	f10b 0210 	add.w	r2, fp, #16
 800c8b0:	3508      	adds	r5, #8
 800c8b2:	6011      	str	r1, [r2, #0]
 800c8b4:	6869      	ldr	r1, [r5, #4]
 800c8b6:	6051      	str	r1, [r2, #4]
 800c8b8:	68a9      	ldr	r1, [r5, #8]
 800c8ba:	6091      	str	r1, [r2, #8]
 800c8bc:	eb0b 0104 	add.w	r1, fp, r4
 800c8c0:	eba9 0204 	sub.w	r2, r9, r4
 800c8c4:	f042 0201 	orr.w	r2, r2, #1
 800c8c8:	6099      	str	r1, [r3, #8]
 800c8ca:	604a      	str	r2, [r1, #4]
 800c8cc:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	431c      	orrs	r4, r3
 800c8d6:	4640      	mov	r0, r8
 800c8d8:	f8cb 4004 	str.w	r4, [fp, #4]
 800c8dc:	f7ff fa3c 	bl	800bd58 <__malloc_unlock>
 800c8e0:	e78e      	b.n	800c800 <_realloc_r+0x148>
 800c8e2:	07d3      	lsls	r3, r2, #31
 800c8e4:	f53f af15 	bmi.w	800c712 <_realloc_r+0x5a>
 800c8e8:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800c8ec:	eba7 0b03 	sub.w	fp, r7, r3
 800c8f0:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c8f4:	f022 0203 	bic.w	r2, r2, #3
 800c8f8:	4410      	add	r0, r2
 800c8fa:	1983      	adds	r3, r0, r6
 800c8fc:	428b      	cmp	r3, r1
 800c8fe:	f6ff af45 	blt.w	800c78c <_realloc_r+0xd4>
 800c902:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800c906:	46da      	mov	sl, fp
 800c908:	60ca      	str	r2, [r1, #12]
 800c90a:	6091      	str	r1, [r2, #8]
 800c90c:	e742      	b.n	800c794 <_realloc_r+0xdc>
 800c90e:	6001      	str	r1, [r0, #0]
 800c910:	686b      	ldr	r3, [r5, #4]
 800c912:	6043      	str	r3, [r0, #4]
 800c914:	2a1b      	cmp	r2, #27
 800c916:	d83a      	bhi.n	800c98e <_realloc_r+0x2d6>
 800c918:	f105 0208 	add.w	r2, r5, #8
 800c91c:	f100 0308 	add.w	r3, r0, #8
 800c920:	68a9      	ldr	r1, [r5, #8]
 800c922:	e710      	b.n	800c746 <_realloc_r+0x8e>
 800c924:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c928:	f023 0303 	bic.w	r3, r3, #3
 800c92c:	441e      	add	r6, r3
 800c92e:	eb07 0906 	add.w	r9, r7, r6
 800c932:	e753      	b.n	800c7dc <_realloc_r+0x124>
 800c934:	4652      	mov	r2, sl
 800c936:	e749      	b.n	800c7cc <_realloc_r+0x114>
 800c938:	4629      	mov	r1, r5
 800c93a:	4650      	mov	r0, sl
 800c93c:	461e      	mov	r6, r3
 800c93e:	465f      	mov	r7, fp
 800c940:	f7ff fe56 	bl	800c5f0 <memmove>
 800c944:	4655      	mov	r5, sl
 800c946:	e749      	b.n	800c7dc <_realloc_r+0x124>
 800c948:	4629      	mov	r1, r5
 800c94a:	f7ff fe51 	bl	800c5f0 <memmove>
 800c94e:	e6ff      	b.n	800c750 <_realloc_r+0x98>
 800c950:	4427      	add	r7, r4
 800c952:	eba9 0904 	sub.w	r9, r9, r4
 800c956:	f049 0201 	orr.w	r2, r9, #1
 800c95a:	609f      	str	r7, [r3, #8]
 800c95c:	607a      	str	r2, [r7, #4]
 800c95e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	431c      	orrs	r4, r3
 800c968:	4640      	mov	r0, r8
 800c96a:	f845 4c04 	str.w	r4, [r5, #-4]
 800c96e:	f7ff f9f3 	bl	800bd58 <__malloc_unlock>
 800c972:	46aa      	mov	sl, r5
 800c974:	e744      	b.n	800c800 <_realloc_r+0x148>
 800c976:	f8cb 1010 	str.w	r1, [fp, #16]
 800c97a:	68e9      	ldr	r1, [r5, #12]
 800c97c:	f8cb 1014 	str.w	r1, [fp, #20]
 800c980:	2a24      	cmp	r2, #36	; 0x24
 800c982:	d010      	beq.n	800c9a6 <_realloc_r+0x2ee>
 800c984:	6929      	ldr	r1, [r5, #16]
 800c986:	f10b 0218 	add.w	r2, fp, #24
 800c98a:	3510      	adds	r5, #16
 800c98c:	e71e      	b.n	800c7cc <_realloc_r+0x114>
 800c98e:	68ab      	ldr	r3, [r5, #8]
 800c990:	6083      	str	r3, [r0, #8]
 800c992:	68eb      	ldr	r3, [r5, #12]
 800c994:	60c3      	str	r3, [r0, #12]
 800c996:	2a24      	cmp	r2, #36	; 0x24
 800c998:	d010      	beq.n	800c9bc <_realloc_r+0x304>
 800c99a:	f105 0210 	add.w	r2, r5, #16
 800c99e:	f100 0310 	add.w	r3, r0, #16
 800c9a2:	6929      	ldr	r1, [r5, #16]
 800c9a4:	e6cf      	b.n	800c746 <_realloc_r+0x8e>
 800c9a6:	692a      	ldr	r2, [r5, #16]
 800c9a8:	f8cb 2018 	str.w	r2, [fp, #24]
 800c9ac:	696a      	ldr	r2, [r5, #20]
 800c9ae:	f8cb 201c 	str.w	r2, [fp, #28]
 800c9b2:	69a9      	ldr	r1, [r5, #24]
 800c9b4:	f10b 0220 	add.w	r2, fp, #32
 800c9b8:	3518      	adds	r5, #24
 800c9ba:	e707      	b.n	800c7cc <_realloc_r+0x114>
 800c9bc:	692b      	ldr	r3, [r5, #16]
 800c9be:	6103      	str	r3, [r0, #16]
 800c9c0:	696b      	ldr	r3, [r5, #20]
 800c9c2:	6143      	str	r3, [r0, #20]
 800c9c4:	69a9      	ldr	r1, [r5, #24]
 800c9c6:	f105 0218 	add.w	r2, r5, #24
 800c9ca:	f100 0318 	add.w	r3, r0, #24
 800c9ce:	e6ba      	b.n	800c746 <_realloc_r+0x8e>
 800c9d0:	4652      	mov	r2, sl
 800c9d2:	e76e      	b.n	800c8b2 <_realloc_r+0x1fa>
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	4650      	mov	r0, sl
 800c9d8:	9301      	str	r3, [sp, #4]
 800c9da:	f7ff fe09 	bl	800c5f0 <memmove>
 800c9de:	9b01      	ldr	r3, [sp, #4]
 800c9e0:	e76c      	b.n	800c8bc <_realloc_r+0x204>
 800c9e2:	f8cb 1010 	str.w	r1, [fp, #16]
 800c9e6:	68e9      	ldr	r1, [r5, #12]
 800c9e8:	f8cb 1014 	str.w	r1, [fp, #20]
 800c9ec:	2a24      	cmp	r2, #36	; 0x24
 800c9ee:	d004      	beq.n	800c9fa <_realloc_r+0x342>
 800c9f0:	6929      	ldr	r1, [r5, #16]
 800c9f2:	f10b 0218 	add.w	r2, fp, #24
 800c9f6:	3510      	adds	r5, #16
 800c9f8:	e75b      	b.n	800c8b2 <_realloc_r+0x1fa>
 800c9fa:	692a      	ldr	r2, [r5, #16]
 800c9fc:	f8cb 2018 	str.w	r2, [fp, #24]
 800ca00:	696a      	ldr	r2, [r5, #20]
 800ca02:	f8cb 201c 	str.w	r2, [fp, #28]
 800ca06:	69a9      	ldr	r1, [r5, #24]
 800ca08:	f10b 0220 	add.w	r2, fp, #32
 800ca0c:	3518      	adds	r5, #24
 800ca0e:	e750      	b.n	800c8b2 <_realloc_r+0x1fa>
 800ca10:	20000464 	.word	0x20000464

0800ca14 <__ascii_wctomb>:
 800ca14:	b121      	cbz	r1, 800ca20 <__ascii_wctomb+0xc>
 800ca16:	2aff      	cmp	r2, #255	; 0xff
 800ca18:	d804      	bhi.n	800ca24 <__ascii_wctomb+0x10>
 800ca1a:	700a      	strb	r2, [r1, #0]
 800ca1c:	2001      	movs	r0, #1
 800ca1e:	4770      	bx	lr
 800ca20:	4608      	mov	r0, r1
 800ca22:	4770      	bx	lr
 800ca24:	238a      	movs	r3, #138	; 0x8a
 800ca26:	6003      	str	r3, [r0, #0]
 800ca28:	f04f 30ff 	mov.w	r0, #4294967295
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop

0800ca30 <_init>:
 800ca30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca32:	bf00      	nop
 800ca34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca36:	bc08      	pop	{r3}
 800ca38:	469e      	mov	lr, r3
 800ca3a:	4770      	bx	lr

0800ca3c <_fini>:
 800ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3e:	bf00      	nop
 800ca40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca42:	bc08      	pop	{r3}
 800ca44:	469e      	mov	lr, r3
 800ca46:	4770      	bx	lr
