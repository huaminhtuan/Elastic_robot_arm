
elastic_actuator_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800a7a0  0800a7a0  0001a7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa88  0800aa88  000209e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa90  0800aa90  000209e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800aa90  0800aa90  0001aa90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa98  0800aa98  0001aa98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e8  20000000  0800aa9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200009e8  0800b484  000209e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d38  0800b484  00020d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bd3  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002af5  00000000  00000000  000335eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  000360e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  000371a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022149  00000000  00000000  00038118  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec73  00000000  00000000  0005a261  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2c38  00000000  00000000  00068ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bb0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005024  00000000  00000000  0013bb88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e8 	.word	0x200009e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a784 	.word	0x0800a784

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009ec 	.word	0x200009ec
 800020c:	0800a784 	.word	0x0800a784

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MRAC>:
 * @return:
 */
void MRAC(double theta_l, double theta_l_dot, double theta_m, double theta_m_dot,
		double theta_m_d, double phi_k_1[5], double theta_r_k_1[2],
		double *V_control, double phi_k[5], double theta_r[2])
{
 8000f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f8c:	b0d1      	sub	sp, #324	; 0x144
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
 8000f94:	ed87 1b12 	vstr	d1, [r7, #72]	; 0x48
 8000f98:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000f9c:	ed84 2b00 	vstr	d2, [r4]
 8000fa0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000fa4:	ed84 3b00 	vstr	d3, [r4]
 8000fa8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000fac:	ed84 4b00 	vstr	d4, [r4]
 8000fb0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000fb4:	6020      	str	r0, [r4, #0]
 8000fb6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000fba:	6001      	str	r1, [r0, #0]
 8000fbc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000fc0:	600a      	str	r2, [r1, #0]
 8000fc2:	f107 0220 	add.w	r2, r7, #32
 8000fc6:	6013      	str	r3, [r2, #0]
	/*  State variable */
	/*  Error between System respond and reference model respond */
	/*  Regressor */
	/*  Derivative of parameters calculated from parameter */
	/*  adaption law */
	theta_idx_1 = 1.9599999999999997 / phi_k_1[2];
 8000fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3310      	adds	r3, #16
 8000fd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	f20f 51a8 	addw	r1, pc, #1448	; 0x5a8
 8000fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fe0:	f7ff fc54 	bl	800088c <__aeabi_ddiv>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	460c      	mov	r4, r1
 8000fe8:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	theta_r[0] = (theta_r_k_1[0] + T * theta_r_k_1[1]) + 0.0 * theta_m_d;
 8000fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	e9d3 5600 	ldrd	r5, r6, [r3]
 8000ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3308      	adds	r3, #8
 8000ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001002:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fb15 	bl	8000638 <__aeabi_dmul>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	461a      	mov	r2, r3
 8001014:	4623      	mov	r3, r4
 8001016:	4628      	mov	r0, r5
 8001018:	4631      	mov	r1, r6
 800101a:	f7ff f957 	bl	80002cc <__adddf3>
 800101e:	4603      	mov	r3, r0
 8001020:	460c      	mov	r4, r1
 8001022:	461d      	mov	r5, r3
 8001024:	4626      	mov	r6, r4
 8001026:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001036:	f7ff faff 	bl	8000638 <__aeabi_dmul>
 800103a:	4603      	mov	r3, r0
 800103c:	460c      	mov	r4, r1
 800103e:	461a      	mov	r2, r3
 8001040:	4623      	mov	r3, r4
 8001042:	4628      	mov	r0, r5
 8001044:	4631      	mov	r1, r6
 8001046:	f7ff f941 	bl	80002cc <__adddf3>
 800104a:	4603      	mov	r3, r0
 800104c:	460c      	mov	r4, r1
 800104e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8001052:	e9c2 3400 	strd	r3, r4, [r2]
	theta[0] = -theta_m;
 8001056:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	61ba      	str	r2, [r7, #24]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	ed97 7b06 	vldr	d7, [r7, #24]
 800106a:	ed87 7b3e 	vstr	d7, [r7, #248]	; 0xf8
	theta_r[1] = (-0.00196 * theta_r_k_1[0] + 0.9972 * theta_r_k_1[1]) + 0.00196 *
 800106e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001078:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fada 	bl	8000638 <__aeabi_dmul>
 8001084:	4603      	mov	r3, r0
 8001086:	460c      	mov	r4, r1
 8001088:	461d      	mov	r5, r3
 800108a:	4626      	mov	r6, r4
 800108c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3308      	adds	r3, #8
 8001094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001098:	f20f 5300 	addw	r3, pc, #1280	; 0x500
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff faca 	bl	8000638 <__aeabi_dmul>
 80010a4:	4603      	mov	r3, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	461a      	mov	r2, r3
 80010aa:	4623      	mov	r3, r4
 80010ac:	4628      	mov	r0, r5
 80010ae:	4631      	mov	r1, r6
 80010b0:	f7ff f90c 	bl	80002cc <__adddf3>
 80010b4:	4603      	mov	r3, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	4698      	mov	r8, r3
 80010ba:	46a1      	mov	r9, r4
 80010bc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80010c0:	f20f 43e0 	addw	r3, pc, #1248	; 0x4e0
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010cc:	f7ff fab4 	bl	8000638 <__aeabi_dmul>
 80010d0:	4603      	mov	r3, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	4619      	mov	r1, r3
 80010d6:	4622      	mov	r2, r4
 80010d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010dc:	f103 0508 	add.w	r5, r3, #8
 80010e0:	4613      	mov	r3, r2
 80010e2:	460a      	mov	r2, r1
 80010e4:	4640      	mov	r0, r8
 80010e6:	4649      	mov	r1, r9
 80010e8:	f7ff f8f0 	bl	80002cc <__adddf3>
 80010ec:	4603      	mov	r3, r0
 80010ee:	460c      	mov	r4, r1
 80010f0:	e9c5 3400 	strd	r3, r4, [r5]
			theta_m_d;
	theta[1] = -theta_m_dot;
 80010f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	613a      	str	r2, [r7, #16]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	ed97 7b04 	vldr	d7, [r7, #16]
 8001108:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
	theta[2] = theta_m_d;
 800110c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001110:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001114:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	theta[3] = -1.0 / N * theta_l;
 8001118:	f20f 4390 	addw	r3, pc, #1168	; 0x490
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001124:	f7ff fa88 	bl	8000638 <__aeabi_dmul>
 8001128:	4603      	mov	r3, r0
 800112a:	460c      	mov	r4, r1
 800112c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	theta[4] = -1.0 / N * theta_l_dot;
 8001130:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800113c:	f7ff fa7c 	bl	8000638 <__aeabi_dmul>
 8001140:	4603      	mov	r3, r0
 8001142:	460c      	mov	r4, r1
 8001144:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	for (i0 = 0; i0 < 5; i0++) {
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800114e:	e037      	b.n	80011c0 <MRAC+0x238>
		c_gamma[i0] = 0.0 * theta[i0];
 8001150:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800115a:	4413      	add	r3, r2
 800115c:	3b48      	subs	r3, #72	; 0x48
 800115e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	f7ff fa65 	bl	8000638 <__aeabi_dmul>
 800116e:	4603      	mov	r3, r0
 8001170:	460c      	mov	r4, r1
 8001172:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001176:	00d2      	lsls	r2, r2, #3
 8001178:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800117c:	440a      	add	r2, r1
 800117e:	3a98      	subs	r2, #152	; 0x98
 8001180:	e9c2 3400 	strd	r3, r4, [r2]
		c_gamma[i0 + 5] = theta_idx_1 * theta[i0];
 8001184:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800118e:	4413      	add	r3, r2
 8001190:	3b48      	subs	r3, #72	; 0x48
 8001192:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001196:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800119a:	1d5d      	adds	r5, r3, #5
 800119c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80011a0:	f7ff fa4a 	bl	8000638 <__aeabi_dmul>
 80011a4:	4603      	mov	r3, r0
 80011a6:	460c      	mov	r4, r1
 80011a8:	00ea      	lsls	r2, r5, #3
 80011aa:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80011ae:	440a      	add	r2, r1
 80011b0:	3a98      	subs	r2, #152	; 0x98
 80011b2:	e9c2 3400 	strd	r3, r4, [r2]
	for (i0 = 0; i0 < 5; i0++) {
 80011b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011ba:	3301      	adds	r3, #1
 80011bc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80011c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	ddc3      	ble.n	8001150 <MRAC+0x1c8>
	}

	for (i0 = 0; i0 < 10; i0++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80011ce:	e019      	b.n	8001204 <MRAC+0x27c>
		c_gamma[i0] *= -gamma;
 80011d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80011da:	4413      	add	r3, r2
 80011dc:	3b98      	subs	r3, #152	; 0x98
 80011de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011e2:	469a      	mov	sl, r3
 80011e4:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 80011e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80011f2:	4413      	add	r3, r2
 80011f4:	3b98      	subs	r3, #152	; 0x98
 80011f6:	e9c3 ab00 	strd	sl, fp, [r3]
	for (i0 = 0; i0 < 10; i0++) {
 80011fa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011fe:	3301      	adds	r3, #1
 8001200:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001204:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001208:	2b09      	cmp	r3, #9
 800120a:	dde1      	ble.n	80011d0 <MRAC+0x248>
	}

	for (i0 = 0; i0 < 5; i0++) {
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001212:	e086      	b.n	8001322 <MRAC+0x39a>
		d_gamma[i0] = 0.0;
 8001214:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800121e:	4413      	add	r3, r2
 8001220:	f1a3 02e8 	sub.w	r2, r3, #232	; 0xe8
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	f04f 0400 	mov.w	r4, #0
 800122c:	e9c2 3400 	strd	r3, r4, [r2]
		d0 = c_gamma[i0 + 5];
 8001230:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001234:	3305      	adds	r3, #5
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800123c:	4413      	add	r3, r2
 800123e:	3b98      	subs	r3, #152	; 0x98
 8001240:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001244:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		d_gamma[i0] = c_gamma[i0] * 1.26 + d0 * 0.26;
 8001248:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001252:	4413      	add	r3, r2
 8001254:	3b98      	subs	r3, #152	; 0x98
 8001256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800125a:	a3d6      	add	r3, pc, #856	; (adr r3, 80015b4 <MRAC+0x62c>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f9ea 	bl	8000638 <__aeabi_dmul>
 8001264:	4603      	mov	r3, r0
 8001266:	460c      	mov	r4, r1
 8001268:	4625      	mov	r5, r4
 800126a:	461c      	mov	r4, r3
 800126c:	a3d3      	add	r3, pc, #844	; (adr r3, 80015bc <MRAC+0x634>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001276:	f7ff f9df 	bl	8000638 <__aeabi_dmul>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4620      	mov	r0, r4
 8001280:	4629      	mov	r1, r5
 8001282:	f7ff f823 	bl	80002cc <__adddf3>
 8001286:	4603      	mov	r3, r0
 8001288:	460c      	mov	r4, r1
 800128a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800128e:	00d2      	lsls	r2, r2, #3
 8001290:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001294:	440a      	add	r2, r1
 8001296:	3ae8      	subs	r2, #232	; 0xe8
 8001298:	e9c2 3400 	strd	r3, r4, [r2]
		d_gamma[i0 + 5] = 0.0;
 800129c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012a0:	3305      	adds	r3, #5
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80012a8:	4413      	add	r3, r2
 80012aa:	f1a3 02e8 	sub.w	r2, r3, #232	; 0xe8
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	f04f 0400 	mov.w	r4, #0
 80012b6:	e9c2 3400 	strd	r3, r4, [r2]
		d_gamma[i0 + 5] = c_gamma[i0] * 0.26 + d0 * 0.27;
 80012ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80012c4:	4413      	add	r3, r2
 80012c6:	3b98      	subs	r3, #152	; 0x98
 80012c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012cc:	a3bb      	add	r3, pc, #748	; (adr r3, 80015bc <MRAC+0x634>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff f9b1 	bl	8000638 <__aeabi_dmul>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4698      	mov	r8, r3
 80012dc:	46a1      	mov	r9, r4
 80012de:	a3b9      	add	r3, pc, #740	; (adr r3, 80015c4 <MRAC+0x63c>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80012e8:	f7ff f9a6 	bl	8000638 <__aeabi_dmul>
 80012ec:	4603      	mov	r3, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	4619      	mov	r1, r3
 80012f2:	4622      	mov	r2, r4
 80012f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012f8:	1d5d      	adds	r5, r3, #5
 80012fa:	4613      	mov	r3, r2
 80012fc:	460a      	mov	r2, r1
 80012fe:	4640      	mov	r0, r8
 8001300:	4649      	mov	r1, r9
 8001302:	f7fe ffe3 	bl	80002cc <__adddf3>
 8001306:	4603      	mov	r3, r0
 8001308:	460c      	mov	r4, r1
 800130a:	00ea      	lsls	r2, r5, #3
 800130c:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001310:	440a      	add	r2, r1
 8001312:	3ae8      	subs	r2, #232	; 0xe8
 8001314:	e9c2 3400 	strd	r3, r4, [r2]
	for (i0 = 0; i0 < 5; i0++) {
 8001318:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800131c:	3301      	adds	r3, #1
 800131e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001322:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001326:	2b04      	cmp	r3, #4
 8001328:	f77f af74 	ble.w	8001214 <MRAC+0x28c>
	}

	theta_idx_0 = theta_m - theta_r[0];
 800132c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001330:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001334:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001338:	461a      	mov	r2, r3
 800133a:	4623      	mov	r3, r4
 800133c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001340:	f7fe ffc2 	bl	80002c8 <__aeabi_dsub>
 8001344:	4603      	mov	r3, r0
 8001346:	460c      	mov	r4, r1
 8001348:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	theta_idx_1 = theta_m_dot - theta_r[1];
 800134c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001350:	3308      	adds	r3, #8
 8001352:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001356:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800135a:	461a      	mov	r2, r3
 800135c:	4623      	mov	r3, r4
 800135e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001362:	f7fe ffb1 	bl	80002c8 <__aeabi_dsub>
 8001366:	4603      	mov	r3, r0
 8001368:	460c      	mov	r4, r1
 800136a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	for (i0 = 0; i0 < 5; i0++) {
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001374:	e06a      	b.n	800144c <MRAC+0x4c4>
		phi_k[i0] = 0.0;
 8001376:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	f107 0220 	add.w	r2, r7, #32
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	441a      	add	r2, r3
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	f04f 0400 	mov.w	r4, #0
 800138c:	e9c2 3400 	strd	r3, r4, [r2]
		d0 = d_gamma[i0] * theta_idx_0 + d_gamma[i0 + 5] * theta_idx_1;
 8001390:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800139a:	4413      	add	r3, r2
 800139c:	3be8      	subs	r3, #232	; 0xe8
 800139e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80013a6:	f7ff f947 	bl	8000638 <__aeabi_dmul>
 80013aa:	4603      	mov	r3, r0
 80013ac:	460c      	mov	r4, r1
 80013ae:	4625      	mov	r5, r4
 80013b0:	461c      	mov	r4, r3
 80013b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013b6:	3305      	adds	r3, #5
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80013be:	4413      	add	r3, r2
 80013c0:	3be8      	subs	r3, #232	; 0xe8
 80013c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80013ca:	f7ff f935 	bl	8000638 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7fe ff79 	bl	80002cc <__adddf3>
 80013da:	4603      	mov	r3, r0
 80013dc:	460c      	mov	r4, r1
 80013de:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		phi_k[i0] = d0;
 80013e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	f107 0220 	add.w	r2, r7, #32
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	441a      	add	r2, r3
 80013f0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80013f4:	e9c2 3400 	strd	r3, r4, [r2]
		phi_k[i0] = phi_k_1[i0] + T * d0;
 80013f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	4413      	add	r3, r2
 8001406:	e9d3 4500 	ldrd	r4, r5, [r3]
 800140a:	a360      	add	r3, pc, #384	; (adr r3, 800158c <MRAC+0x604>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001414:	f7ff f910 	bl	8000638 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	f107 0220 	add.w	r2, r7, #32
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	18d6      	adds	r6, r2, r3
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7fe ff49 	bl	80002cc <__adddf3>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	e9c6 3400 	strd	r3, r4, [r6]
	for (i0 = 0; i0 < 5; i0++) {
 8001442:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001446:	3301      	adds	r3, #1
 8001448:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800144c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001450:	2b04      	cmp	r3, #4
 8001452:	dd90      	ble.n	8001376 <MRAC+0x3ee>

	/*  Appoximated parameters calculated from its derivative */
	/*  [L^T M Ks_hat Ds_hat] */
	/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
	/* %%%%%%%% Control Signal %%%%%%%%% */
	*V_control = Kv * ((((-phi_k[0] * theta_m + -phi_k[1] * theta_m_dot) + phi_k[2]
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001472:	f7ff f8e1 	bl	8000638 <__aeabi_dmul>
 8001476:	4603      	mov	r3, r0
 8001478:	460c      	mov	r4, r1
 800147a:	461d      	mov	r5, r3
 800147c:	4626      	mov	r6, r4
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3308      	adds	r3, #8
 8001486:	e9d3 3400 	ldrd	r3, r4, [r3]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800149e:	f7ff f8cb 	bl	8000638 <__aeabi_dmul>
 80014a2:	4603      	mov	r3, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	461a      	mov	r2, r3
 80014a8:	4623      	mov	r3, r4
 80014aa:	4628      	mov	r0, r5
 80014ac:	4631      	mov	r1, r6
 80014ae:	f7fe ff0d 	bl	80002cc <__adddf3>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	4625      	mov	r5, r4
 80014b8:	461c      	mov	r4, r3
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3310      	adds	r3, #16
 80014c2:	e9d3 0100 	ldrd	r0, r1, [r3]
																				 * theta_m_d) - phi_k[3] * (1.0 / N) * theta_l) - phi_k[4]
 80014c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f8b3 	bl	8000638 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
	*V_control = Kv * ((((-phi_k[0] * theta_m + -phi_k[1] * theta_m_dot) + phi_k[2]
 80014d6:	4620      	mov	r0, r4
 80014d8:	4629      	mov	r1, r5
 80014da:	f7fe fef7 	bl	80002cc <__adddf3>
 80014de:	4603      	mov	r3, r0
 80014e0:	460c      	mov	r4, r1
 80014e2:	4625      	mov	r5, r4
 80014e4:	461c      	mov	r4, r3
																				 * theta_m_d) - phi_k[3] * (1.0 / N) * theta_l) - phi_k[4]
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3318      	adds	r3, #24
 80014ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f2:	a336      	add	r3, pc, #216	; (adr r3, 80015cc <MRAC+0x644>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f89e 	bl	8000638 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001508:	f7ff f896 	bl	8000638 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4620      	mov	r0, r4
 8001512:	4629      	mov	r1, r5
 8001514:	f7fe fed8 	bl	80002c8 <__aeabi_dsub>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	4625      	mov	r5, r4
 800151e:	461c      	mov	r4, r3
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3320      	adds	r3, #32
 8001528:	e9d3 0100 	ldrd	r0, r1, [r3]
																																		* (1.0 / N) * theta_l_dot);
 800152c:	a327      	add	r3, pc, #156	; (adr r3, 80015cc <MRAC+0x644>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f881 	bl	8000638 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001542:	f7ff f879 	bl	8000638 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
																				 * theta_m_d) - phi_k[3] * (1.0 / N) * theta_l) - phi_k[4]
 800154a:	4620      	mov	r0, r4
 800154c:	4629      	mov	r1, r5
 800154e:	f7fe febb 	bl	80002c8 <__aeabi_dsub>
 8001552:	4603      	mov	r3, r0
 8001554:	460c      	mov	r4, r1
 8001556:	4618      	mov	r0, r3
 8001558:	4621      	mov	r1, r4
	*V_control = Kv * ((((-phi_k[0] * theta_m + -phi_k[1] * theta_m_dot) + phi_k[2]
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MRAC+0x5f8>)
 8001560:	f7ff f86a 	bl	8000638 <__aeabi_dmul>
 8001564:	4603      	mov	r3, r0
 8001566:	460c      	mov	r4, r1
 8001568:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	e9c2 3400 	strd	r3, r4, [r2]

	/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
}
 8001572:	bf00      	nop
 8001574:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8001578:	46bd      	mov	sp, r7
 800157a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800157e:	bf00      	nop
 8001580:	40280000 	.word	0x40280000
 8001584:	f5c28f5b 	.word	0xf5c28f5b
 8001588:	3fff5c28 	.word	0x3fff5c28
 800158c:	47ae147b 	.word	0x47ae147b
 8001590:	3f847ae1 	.word	0x3f847ae1
 8001594:	fcce1c58 	.word	0xfcce1c58
 8001598:	bf600e6a 	.word	0xbf600e6a
 800159c:	f9724745 	.word	0xf9724745
 80015a0:	3fefe90f 	.word	0x3fefe90f
 80015a4:	fcce1c58 	.word	0xfcce1c58
 80015a8:	3f600e6a 	.word	0x3f600e6a
 80015ac:	9999999a 	.word	0x9999999a
 80015b0:	bfd99999 	.word	0xbfd99999
 80015b4:	c28f5c29 	.word	0xc28f5c29
 80015b8:	3ff428f5 	.word	0x3ff428f5
 80015bc:	0a3d70a4 	.word	0x0a3d70a4
 80015c0:	3fd0a3d7 	.word	0x3fd0a3d7
 80015c4:	147ae148 	.word	0x147ae148
 80015c8:	3fd147ae 	.word	0x3fd147ae
 80015cc:	9999999a 	.word	0x9999999a
 80015d0:	3fd99999 	.word	0x3fd99999

080015d4 <InitController>:
 * @brief :
 * @param :
 * @return:
 */
void InitController()
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_MspInit+0x4c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <HAL_MspInit+0x4c>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_MspInit+0x4c>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001622:	2007      	movs	r0, #7
 8001624:	f001 f96c 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_TIM_PWM_MspInit+0x3c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10d      	bne.n	8001662 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_TIM_PWM_MspInit+0x40>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <HAL_TIM_PWM_MspInit+0x40>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_TIM_PWM_MspInit+0x40>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40010000 	.word	0x40010000
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001688:	d115      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_TIM_Base_MspInit+0x48>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_TIM_Base_MspInit+0x48>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_TIM_Base_MspInit+0x48>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	201c      	movs	r0, #28
 80016ac:	f001 f933 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016b0:	201c      	movs	r0, #28
 80016b2:	f001 f94c 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a32      	ldr	r2, [pc, #200]	; (80017ac <HAL_TIM_Encoder_MspInit+0xe8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d12c      	bne.n	8001740 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a30      	ldr	r2, [pc, #192]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a29      	ldr	r2, [pc, #164]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800171e:	23c0      	movs	r3, #192	; 0xc0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001726:	2301      	movs	r3, #1
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800172e:	2302      	movs	r3, #2
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	481e      	ldr	r0, [pc, #120]	; (80017b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800173a:	f001 fcc1 	bl	80030c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800173e:	e030      	b.n	80017a2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d12b      	bne.n	80017a2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001782:	23c0      	movs	r3, #192	; 0xc0
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178a:	2301      	movs	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001792:	2302      	movs	r3, #2
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4807      	ldr	r0, [pc, #28]	; (80017bc <HAL_TIM_Encoder_MspInit+0xf8>)
 800179e:	f001 fc8f 	bl	80030c0 <HAL_GPIO_Init>
}
 80017a2:	bf00      	nop
 80017a4:	3730      	adds	r7, #48	; 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40000400 	.word	0x40000400
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40000800 	.word	0x40000800
 80017bc:	40020400 	.word	0x40020400

080017c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_TIM_MspPostInit+0x68>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d11e      	bne.n	8001820 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_TIM_MspPostInit+0x6c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_TIM_MspPostInit+0x6c>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_TIM_MspPostInit+0x6c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001802:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001810:	2301      	movs	r3, #1
 8001812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4619      	mov	r1, r3
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <HAL_TIM_MspPostInit+0x70>)
 800181c:	f001 fc50 	bl	80030c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40010000 	.word	0x40010000
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000

08001834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a34      	ldr	r2, [pc, #208]	; (8001924 <HAL_UART_MspInit+0xf0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d161      	bne.n	800191a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b33      	ldr	r3, [pc, #204]	; (8001928 <HAL_UART_MspInit+0xf4>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a32      	ldr	r2, [pc, #200]	; (8001928 <HAL_UART_MspInit+0xf4>)
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_UART_MspInit+0xf4>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <HAL_UART_MspInit+0xf4>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <HAL_UART_MspInit+0xf4>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_UART_MspInit+0xf4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800188e:	230c      	movs	r3, #12
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800189e:	2307      	movs	r3, #7
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4820      	ldr	r0, [pc, #128]	; (800192c <HAL_UART_MspInit+0xf8>)
 80018aa:	f001 fc09 	bl	80030c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_UART_MspInit+0xfc>)
 80018b0:	4a20      	ldr	r2, [pc, #128]	; (8001934 <HAL_UART_MspInit+0x100>)
 80018b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_UART_MspInit+0xfc>)
 80018b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_UART_MspInit+0xfc>)
 80018be:	2240      	movs	r2, #64	; 0x40
 80018c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_UART_MspInit+0xfc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_UART_MspInit+0xfc>)
 80018ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_UART_MspInit+0xfc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_UART_MspInit+0xfc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_UART_MspInit+0xfc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_UART_MspInit+0xfc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_UART_MspInit+0xfc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018ee:	4810      	ldr	r0, [pc, #64]	; (8001930 <HAL_UART_MspInit+0xfc>)
 80018f0:	f001 f848 	bl	8002984 <HAL_DMA_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80018fa:	f000 f8ef 	bl	8001adc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <HAL_UART_MspInit+0xfc>)
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_UART_MspInit+0xfc>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2026      	movs	r0, #38	; 0x26
 8001910:	f001 f801 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001914:	2026      	movs	r0, #38	; 0x26
 8001916:	f001 f81a 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40004400 	.word	0x40004400
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000
 8001930:	20000c44 	.word	0x20000c44
 8001934:	400260a0 	.word	0x400260a0

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198c:	f000 fec8 	bl	8002720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <DMA1_Stream6_IRQHandler+0x10>)
 800199a:	f001 f91b 	bl	8002bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000c44 	.word	0x20000c44

080019a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <TIM2_IRQHandler+0x10>)
 80019ae:	f003 ff10 	bl	80057d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000ce4 	.word	0x20000ce4

080019bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <I2C1_EV_IRQHandler+0x10>)
 80019c2:	f001 fd28 	bl	8003416 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000bf0 	.word	0x20000bf0

080019d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <USART2_IRQHandler+0x10>)
 80019d6:	f004 fe57 	bl	8006688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000ca4 	.word	0x20000ca4

080019e4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <DMA1_Stream7_IRQHandler+0x10>)
 80019ea:	f001 f8f3 	bl	8002bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000b90 	.word	0x20000b90

080019f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_sbrk+0x50>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x16>
		heap_end = &end;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <_sbrk+0x50>)
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <_sbrk+0x54>)
 8001a0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <_sbrk+0x50>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <_sbrk+0x50>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	466a      	mov	r2, sp
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d907      	bls.n	8001a32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a22:	f005 fc83 	bl	800732c <__errno>
 8001a26:	4602      	mov	r2, r0
 8001a28:	230c      	movs	r3, #12
 8001a2a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	e006      	b.n	8001a40 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <_sbrk+0x50>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <_sbrk+0x50>)
 8001a3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000a04 	.word	0x20000a04
 8001a4c:	20000d38 	.word	0x20000d38

08001a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <SystemInit+0x28>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <SystemInit+0x28>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SystemInit+0x28>)
 8001a66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a6a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a82:	e003      	b.n	8001a8c <LoopCopyDataInit>

08001a84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a8a:	3104      	adds	r1, #4

08001a8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a8c:	480b      	ldr	r0, [pc, #44]	; (8001abc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a94:	d3f6      	bcc.n	8001a84 <CopyDataInit>
  ldr  r2, =_sbss
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a98:	e002      	b.n	8001aa0 <LoopFillZerobss>

08001a9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a9c:	f842 3b04 	str.w	r3, [r2], #4

08001aa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001aa4:	d3f9      	bcc.n	8001a9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aa6:	f7ff ffd3 	bl	8001a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f005 fc45 	bl	8007338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aae:	f000 f80e 	bl	8001ace <main>
  bx  lr    
 8001ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ab8:	0800aa9c 	.word	0x0800aa9c
  ldr  r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ac0:	200009e8 	.word	0x200009e8
  ldr  r2, =_sbss
 8001ac4:	200009e8 	.word	0x200009e8
  ldr  r3, = _ebss
 8001ac8:	20000d38 	.word	0x20000d38

08001acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC_IRQHandler>

08001ace <main>:
 * @brief :
 * @param :
 * @return:
 */
int main(void)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/
	InitSystem();
 8001ad2:	f000 faf7 	bl	80020c4 <InitSystem>

	/* Infinite loop */
	while (1)
	{
		SystemStateMachineProcessing();
 8001ad6:	f000 fb2b 	bl	8002130 <SystemStateMachineProcessing>
 8001ada:	e7fc      	b.n	8001ad6 <main+0x8>

08001adc <Error_Handler>:
 * @brief :
 * @param : None
 * @return: None
 */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	/* User can add his own implementation to report the HAL error return state */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <InitEncoder>:
 * @brief :
 * @param :
 * @return:
 */
void InitEncoder()
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 8001af0:	f000 f852 	bl	8001b98 <MX_TIM4_Init>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001af4:	213c      	movs	r1, #60	; 0x3c
 8001af6:	4802      	ldr	r0, [pc, #8]	; (8001b00 <InitEncoder+0x14>)
 8001af8:	f003 fe34 	bl	8005764 <HAL_TIM_Encoder_Start>
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000a08 	.word	0x20000a08
 8001b04:	00000000 	.word	0x00000000

08001b08 <EncoderReadEncoder>:
 * @param velocity    : Current velocity (unit: radian/second)
 * @param samplingTime: Sampling time (unit: second)
 * @return: None
 */
void EncoderReadEncoder(double *position, double *velocity, double samplingTime)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	ed87 0b00 	vstr	d0, [r7]
	uint16_t currPulse;
	double encoderIncrement;

	currPulse = TIM4->CNT;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <EncoderReadEncoder+0x88>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	83fb      	strh	r3, [r7, #30]
	encoderIncrement = (double)((currPulse - prevPulse)*ENC_RAD_PER_PULSE);
 8001b1c:	8bfb      	ldrh	r3, [r7, #30]
 8001b1e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001b22:	3b7f      	subs	r3, #127	; 0x7f
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd1d 	bl	8000564 <__aeabi_i2d>
 8001b2a:	a317      	add	r3, pc, #92	; (adr r3, 8001b88 <EncoderReadEncoder+0x80>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe fd82 	bl	8000638 <__aeabi_dmul>
 8001b34:	4603      	mov	r3, r0
 8001b36:	460c      	mov	r4, r1
 8001b38:	e9c7 3404 	strd	r3, r4, [r7, #16]

	motorPosition += encoderIncrement;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <EncoderReadEncoder+0x8c>)
 8001b3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b46:	f7fe fbc1 	bl	80002cc <__adddf3>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <EncoderReadEncoder+0x8c>)
 8001b50:	e9c2 3400 	strd	r3, r4, [r2]
	*position = motorPosition;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <EncoderReadEncoder+0x8c>)
 8001b56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	e9c2 3400 	strd	r3, r4, [r2]
	*velocity = encoderIncrement/samplingTime;
 8001b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b68:	f7fe fe90 	bl	800088c <__aeabi_ddiv>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460c      	mov	r4, r1
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	e9c2 3400 	strd	r3, r4, [r2]

	/* Reset counter */
	TIM4->CNT = 32767;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <EncoderReadEncoder+0x88>)
 8001b78:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b7e:	bf00      	nop
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	b68b71c3 	.word	0xb68b71c3
 8001b8c:	3f59bc65 	.word	0x3f59bc65
 8001b90:	40000800 	.word	0x40000800
 8001b94:	20000a48 	.word	0x20000a48

08001b98 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static inline void MX_TIM4_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	; 0x30
 8001b9c:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig = {0};
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	2224      	movs	r2, #36	; 0x24
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f005 fbea 	bl	8007380 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <MX_TIM4_Init+0xa8>)
 8001bb6:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <MX_TIM4_Init+0xac>)
 8001bb8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <MX_TIM4_Init+0xa8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <MX_TIM4_Init+0xa8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <MX_TIM4_Init+0xa8>)
 8001bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bcc:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <MX_TIM4_Init+0xa8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <MX_TIM4_Init+0xa8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001be2:	2301      	movs	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4619      	mov	r1, r3
 8001c04:	480e      	ldr	r0, [pc, #56]	; (8001c40 <MX_TIM4_Init+0xa8>)
 8001c06:	f003 fd1b 	bl	8005640 <HAL_TIM_Encoder_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM4_Init+0x7c>
	{
		Error_Handler();
 8001c10:	f7ff ff64 	bl	8001adc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4807      	ldr	r0, [pc, #28]	; (8001c40 <MX_TIM4_Init+0xa8>)
 8001c22:	f004 fb95 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM4_Init+0x98>
	{
		Error_Handler();
 8001c2c:	f7ff ff56 	bl	8001adc <Error_Handler>
	}

	/* Reset Counter */
	TIM4->CNT = 32767;
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <MX_TIM4_Init+0xac>)
 8001c32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c38:	bf00      	nop
 8001c3a:	3730      	adds	r7, #48	; 0x30
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000a08 	.word	0x20000a08
 8001c44:	40000800 	.word	0x40000800

08001c48 <InitLog>:
 * @brief :
 * @param :
 * @return:
 */
void InitLog()
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 8001c4c:	f000 f87e 	bl	8001d4c <MX_USART2_UART_Init>
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <LogPrint>:

void LogPrint(LOG_MESSAGE_TYPE_t messageType, const char *string,...)
{
 8001c54:	b40e      	push	{r1, r2, r3}
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
	while(transmitInProgress);
 8001c60:	bf00      	nop
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <LogPrint+0xdc>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1fb      	bne.n	8001c62 <LogPrint+0xe>

	uint8_t userStringStartPosition = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
	memset((void *) LogTxBuffer, 0, sizeof(LogTxBuffer));
 8001c6e:	2264      	movs	r2, #100	; 0x64
 8001c70:	2100      	movs	r1, #0
 8001c72:	4830      	ldr	r0, [pc, #192]	; (8001d34 <LogPrint+0xe0>)
 8001c74:	f005 fb84 	bl	8007380 <memset>

	switch (messageType)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d836      	bhi.n	8001cec <LogPrint+0x98>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <LogPrint+0x30>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001ca9 	.word	0x08001ca9
 8001c8c:	08001cc3 	.word	0x08001cc3
 8001c90:	08001cd3 	.word	0x08001cd3
	{
	case LOG_INFO:
		strncpy(LogTxBuffer, "INFO: ", 6);
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <LogPrint+0xe0>)
 8001c96:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <LogPrint+0xe4>)
 8001c98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c9c:	6018      	str	r0, [r3, #0]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	8019      	strh	r1, [r3, #0]
		userStringStartPosition = 6;
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	73fb      	strb	r3, [r7, #15]
		break;
 8001ca6:	e022      	b.n	8001cee <LogPrint+0x9a>
	case LOG_DEBUG:
		strncpy(LogTxBuffer, "DEBUG: ", 7);
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <LogPrint+0xe0>)
 8001caa:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <LogPrint+0xe8>)
 8001cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cb0:	6018      	str	r0, [r3, #0]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	8019      	strh	r1, [r3, #0]
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	0c0a      	lsrs	r2, r1, #16
 8001cba:	701a      	strb	r2, [r3, #0]
		userStringStartPosition = 7;
 8001cbc:	2307      	movs	r3, #7
 8001cbe:	73fb      	strb	r3, [r7, #15]
		break;
 8001cc0:	e015      	b.n	8001cee <LogPrint+0x9a>
	case LOG_WARNING:
		strncpy(LogTxBuffer, "WARNING: ", 9);
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <LogPrint+0xe0>)
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <LogPrint+0xec>)
 8001cc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cc8:	c303      	stmia	r3!, {r0, r1}
 8001cca:	701a      	strb	r2, [r3, #0]
		userStringStartPosition = 9;
 8001ccc:	2309      	movs	r3, #9
 8001cce:	73fb      	strb	r3, [r7, #15]
		break;
 8001cd0:	e00d      	b.n	8001cee <LogPrint+0x9a>
	case LOG_ERROR:
		strncpy(LogTxBuffer, "ERROR: ", 7);
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <LogPrint+0xe0>)
 8001cd4:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <LogPrint+0xf0>)
 8001cd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cda:	6018      	str	r0, [r3, #0]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	8019      	strh	r1, [r3, #0]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	0c0a      	lsrs	r2, r1, #16
 8001ce4:	701a      	strb	r2, [r3, #0]
		userStringStartPosition = 7;
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	73fb      	strb	r3, [r7, #15]
		break;
 8001cea:	e000      	b.n	8001cee <LogPrint+0x9a>
	default:
		break;
 8001cec:	bf00      	nop
	}

	va_list arg;

	va_start(arg, string);
 8001cee:	f107 0320 	add.w	r3, r7, #32
 8001cf2:	60bb      	str	r3, [r7, #8]
	vsprintf((char *) (LogTxBuffer+userStringStartPosition), string, arg);
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <LogPrint+0xe0>)
 8001cf8:	4413      	add	r3, r2
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	69f9      	ldr	r1, [r7, #28]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f005 fb5c 	bl	80073bc <vsprintf>
	va_end(arg);

	uint16_t len = strlen(LogTxBuffer);
 8001d04:	480b      	ldr	r0, [pc, #44]	; (8001d34 <LogPrint+0xe0>)
 8001d06:	f7fe fa83 	bl	8000210 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)(LogTxBuffer), len);
 8001d0e:	89bb      	ldrh	r3, [r7, #12]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <LogPrint+0xe0>)
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <LogPrint+0xf4>)
 8001d16:	f004 fc4b 	bl	80065b0 <HAL_UART_Transmit_DMA>

	transmitInProgress = true;
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <LogPrint+0xdc>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d2a:	b003      	add	sp, #12
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000a50 	.word	0x20000a50
 8001d34:	20000a54 	.word	0x20000a54
 8001d38:	0800a7a0 	.word	0x0800a7a0
 8001d3c:	0800a7a8 	.word	0x0800a7a8
 8001d40:	0800a7b0 	.word	0x0800a7b0
 8001d44:	0800a7bc 	.word	0x0800a7bc
 8001d48:	20000ca4 	.word	0x20000ca4

08001d4c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static inline void MX_USART2_UART_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <MX_USART2_UART_Init+0x50>)
 8001d54:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d5c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d72:	220c      	movs	r2, #12
 8001d74:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d84:	f004 fbc6 	bl	8006514 <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001d8e:	f7ff fea5 	bl	8001adc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000ca4 	.word	0x20000ca4
 8001d9c:	40004400 	.word	0x40004400

08001da0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	transmitInProgress = false;
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_UART_TxCpltCallback+0x1c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000a50 	.word	0x20000a50

08001dc0 <InitMotorController>:
 * 			- ENC for encoder reading
 * @param : None
 * @return: None
 */
void InitMotorController()
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	/* Configure PWM for H-bridge controlling */
	MX_TIM1_Init();
 8001dc4:	f000 f8a2 	bl	8001f0c <MX_TIM1_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <InitMotorController+0x20>)
 8001dcc:	f003 fbfa 	bl	80055c4 <HAL_TIM_PWM_Start>
	/* Configure ENC for encoder reading */
	MX_TIM3_Init();
 8001dd0:	f000 f920 	bl	8002014 <MX_TIM3_Init>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001dd4:	213c      	movs	r1, #60	; 0x3c
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <InitMotorController+0x24>)
 8001dd8:	f003 fcc4 	bl	8005764 <HAL_TIM_Encoder_Start>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000ab8 	.word	0x20000ab8
 8001de4:	20000af8 	.word	0x20000af8

08001de8 <MotorSetDutyCycle>:

void MotorSetDutyCycle(float dutyCycle)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	ed87 0a01 	vstr	s0, [r7, #4]
	if(dutyCycle > 1)
 8001df2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	dd03      	ble.n	8001e0c <MotorSetDutyCycle+0x24>
		dutyCycle = 1;
 8001e04:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	e009      	b.n	8001e20 <MotorSetDutyCycle+0x38>
	else if (dutyCycle < 0)
 8001e0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	d502      	bpl.n	8001e20 <MotorSetDutyCycle+0x38>
		dutyCycle = 0;
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	607b      	str	r3, [r7, #4]

	uint16_t counterValue = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	81fb      	strh	r3, [r7, #14]
	counterValue = (uint16_t)(dutyCycle*TIM_PWM_CCR_COUNTER-1);
 8001e24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e28:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001e54 <MotorSetDutyCycle+0x6c>
 8001e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3c:	ee17 3a90 	vmov	r3, s15
 8001e40:	81fb      	strh	r3, [r7, #14]
	TIM1->CCR1 = counterValue;
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <MotorSetDutyCycle+0x70>)
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	6353      	str	r3, [r2, #52]	; 0x34
//	sConfigOC.Pulse = counterValue;
//	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
//	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
//	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	43c80000 	.word	0x43c80000
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	00000000 	.word	0x00000000

08001e60 <MotorReadEncoder>:
 * @param velocity    : Current velocity (unit: radian/second)
 * @param samplingTime: Sampling time (unit: second)
 * @return: None
 */
void MotorReadEncoder(double *position, double *velocity, double samplingTime)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	ed87 0b00 	vstr	d0, [r7]
	uint16_t currPulse;
	double encoderIncrement;

	currPulse = TIM3->CNT;
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <MotorReadEncoder+0xa0>)
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	83fb      	strh	r3, [r7, #30]
	encoderIncrement = (double)((currPulse - prevPulse)*ENC_RAD_PER_PULSE);
 8001e74:	8bfb      	ldrh	r3, [r7, #30]
 8001e76:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001e7a:	3b7f      	subs	r3, #127	; 0x7f
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb71 	bl	8000564 <__aeabi_i2d>
 8001e82:	a31d      	add	r3, pc, #116	; (adr r3, 8001ef8 <MotorReadEncoder+0x98>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fbd6 	bl	8000638 <__aeabi_dmul>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	460c      	mov	r4, r1
 8001e90:	e9c7 3404 	strd	r3, r4, [r7, #16]
	encoderIncrement /= MOTOR_GEAR_REDUCTION_RATIO;
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MotorReadEncoder+0xa4>)
 8001e9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e9e:	f7fe fcf5 	bl	800088c <__aeabi_ddiv>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	e9c7 3404 	strd	r3, r4, [r7, #16]

	motorPosition += encoderIncrement;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <MotorReadEncoder+0xa8>)
 8001eac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eb4:	f7fe fa0a 	bl	80002cc <__adddf3>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <MotorReadEncoder+0xa8>)
 8001ebe:	e9c2 3400 	strd	r3, r4, [r2]
	*position = motorPosition;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MotorReadEncoder+0xa8>)
 8001ec4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	e9c2 3400 	strd	r3, r4, [r2]
	*velocity = encoderIncrement/samplingTime;
 8001ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ed2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ed6:	f7fe fcd9 	bl	800088c <__aeabi_ddiv>
 8001eda:	4603      	mov	r3, r0
 8001edc:	460c      	mov	r4, r1
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	e9c2 3400 	strd	r3, r4, [r2]

	/* Reset counter */
	TIM3->CNT = prevPulse;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MotorReadEncoder+0xa0>)
 8001ee6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001eec:	bf00      	nop
 8001eee:	3724      	adds	r7, #36	; 0x24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	b68b71c3 	.word	0xb68b71c3
 8001efc:	3f59bc65 	.word	0x3f59bc65
 8001f00:	40000400 	.word	0x40000400
 8001f04:	403b0000 	.word	0x403b0000
 8001f08:	20000b38 	.word	0x20000b38

08001f0c <MX_TIM1_Init>:
 * @brief : TIM1 Initialization Function
 * @param : None
 * @return: None
 */
static inline void MX_TIM1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b092      	sub	sp, #72	; 0x48
 8001f10:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
 8001f2c:	615a      	str	r2, [r3, #20]
 8001f2e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2220      	movs	r2, #32
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f005 fa22 	bl	8007380 <memset>

	htim1.Instance = TIM1;
 8001f3c:	4b33      	ldr	r3, [pc, #204]	; (800200c <MX_TIM1_Init+0x100>)
 8001f3e:	4a34      	ldr	r2, [pc, #208]	; (8002010 <MX_TIM1_Init+0x104>)
 8001f40:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = TIM_PWM_PRESCALER-1;
 8001f42:	4b32      	ldr	r3, [pc, #200]	; (800200c <MX_TIM1_Init+0x100>)
 8001f44:	2211      	movs	r2, #17
 8001f46:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <MX_TIM1_Init+0x100>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = TIM_PWM_CCR_COUNTER-1;
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	; (800200c <MX_TIM1_Init+0x100>)
 8001f50:	f240 128f 	movw	r2, #399	; 0x18f
 8001f54:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f56:	4b2d      	ldr	r3, [pc, #180]	; (800200c <MX_TIM1_Init+0x100>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <MX_TIM1_Init+0x100>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <MX_TIM1_Init+0x100>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f68:	4828      	ldr	r0, [pc, #160]	; (800200c <MX_TIM1_Init+0x100>)
 8001f6a:	f003 fb00 	bl	800556e <HAL_TIM_PWM_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM1_Init+0x6c>
	{
		Error_Handler();
 8001f74:	f7ff fdb2 	bl	8001adc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f84:	4619      	mov	r1, r3
 8001f86:	4821      	ldr	r0, [pc, #132]	; (800200c <MX_TIM1_Init+0x100>)
 8001f88:	f004 f9e2 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM1_Init+0x8a>
	{
		Error_Handler();
 8001f92:	f7ff fda3 	bl	8001adc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f96:	2360      	movs	r3, #96	; 0x60
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = TIM_PWM_CCR_COUNTER*0.5-1;
 8001f9a:	23c7      	movs	r3, #199	; 0xc7
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4814      	ldr	r0, [pc, #80]	; (800200c <MX_TIM1_Init+0x100>)
 8001fbc:	f003 fd12 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM1_Init+0xbe>
	{
		Error_Handler();
 8001fc6:	f7ff fd89 	bl	8001adc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	4807      	ldr	r0, [pc, #28]	; (800200c <MX_TIM1_Init+0x100>)
 8001fee:	f004 fa2b 	bl	8006448 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM1_Init+0xf0>
	{
		Error_Handler();
 8001ff8:	f7ff fd70 	bl	8001adc <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim1);
 8001ffc:	4803      	ldr	r0, [pc, #12]	; (800200c <MX_TIM1_Init+0x100>)
 8001ffe:	f7ff fbdf 	bl	80017c0 <HAL_TIM_MspPostInit>

}
 8002002:	bf00      	nop
 8002004:	3748      	adds	r7, #72	; 0x48
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000ab8 	.word	0x20000ab8
 8002010:	40010000 	.word	0x40010000

08002014 <MX_TIM3_Init>:
 * @brief : TIM3 Initialization Function
 * @param : None
 * @return: None
 */
static inline void MX_TIM3_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08c      	sub	sp, #48	; 0x30
 8002018:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig = {0};
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	2224      	movs	r2, #36	; 0x24
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f005 f9ac 	bl	8007380 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]

	htim3.Instance = TIM3;
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <MX_TIM3_Init+0xa8>)
 8002032:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <MX_TIM3_Init+0xac>)
 8002034:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <MX_TIM3_Init+0xa8>)
 8002038:	2200      	movs	r2, #0
 800203a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <MX_TIM3_Init+0xa8>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <MX_TIM3_Init+0xa8>)
 8002044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002048:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <MX_TIM3_Init+0xa8>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <MX_TIM3_Init+0xa8>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002056:	2303      	movs	r3, #3
 8002058:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800205e:	2301      	movs	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800206e:	2301      	movs	r3, #1
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002072:	2300      	movs	r3, #0
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	4619      	mov	r1, r3
 8002080:	480e      	ldr	r0, [pc, #56]	; (80020bc <MX_TIM3_Init+0xa8>)
 8002082:	f003 fadd 	bl	8005640 <HAL_TIM_Encoder_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 800208c:	f7ff fd26 	bl	8001adc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	4619      	mov	r1, r3
 800209c:	4807      	ldr	r0, [pc, #28]	; (80020bc <MX_TIM3_Init+0xa8>)
 800209e:	f004 f957 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 80020a8:	f7ff fd18 	bl	8001adc <Error_Handler>
	}

	/* Reset Counter */
	TIM3->CNT = 32767;
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <MX_TIM3_Init+0xac>)
 80020ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80020b4:	bf00      	nop
 80020b6:	3730      	adds	r7, #48	; 0x30
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000af8 	.word	0x20000af8
 80020c0:	40000400 	.word	0x40000400

080020c4 <InitSystem>:
 * @brief : Configure essential peripherals
 * @param :
 * @return:
 */
void InitSystem()
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80020c8:	f000 fad8 	bl	800267c <HAL_Init>

	/* Configure the system clock */
	SystemClockConfig();
 80020cc:	f000 f938 	bl	8002340 <SystemClockConfig>

	/* Configure GPIO */
	InitSystemGPIO();
 80020d0:	f000 f930 	bl	8002334 <InitSystemGPIO>

	/* Configure DMA */
	InitSystemDMA();
 80020d4:	f000 f928 	bl	8002328 <InitSystemDMA>

	/* Configure logger for outputting data */
	InitLog();
 80020d8:	f7ff fdb6 	bl	8001c48 <InitLog>
	LogPrint(LOG_INFO, "Configuring!\n");
 80020dc:	490f      	ldr	r1, [pc, #60]	; (800211c <InitSystem+0x58>)
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff fdb8 	bl	8001c54 <LogPrint>

	/* Configure system timer */
	InitSystemTimer();
 80020e4:	f000 f91a 	bl	800231c <InitSystemTimer>

	/* Configure the motor controller's essential peripherals */
	InitMotorController();
 80020e8:	f7ff fe6a 	bl	8001dc0 <InitMotorController>
	MotorSetDirection(MOTOR_DIR_POSITIVE);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2120      	movs	r1, #32
 80020f0:	480b      	ldr	r0, [pc, #44]	; (8002120 <InitSystem+0x5c>)
 80020f2:	f001 f977 	bl	80033e4 <HAL_GPIO_WritePin>
	MotorSetDutyCycle(0.2); // min: 0.16
 80020f6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002124 <InitSystem+0x60>
 80020fa:	f7ff fe75 	bl	8001de8 <MotorSetDutyCycle>

	/* Configure controller */
	InitController();
 80020fe:	f7ff fa69 	bl	80015d4 <InitController>

	/* Configure encoder */
	InitEncoder();
 8002102:	f7ff fcf3 	bl	8001aec <InitEncoder>

	/* Configure EEPROM module */
//	InitEEPROM();

	/* Start system timer */
	SystemStartTimer();
 8002106:	f000 f9b5 	bl	8002474 <SystemStartTimer>

	LogPrint(LOG_INFO, "Done, ready to run.....\n");
 800210a:	4907      	ldr	r1, [pc, #28]	; (8002128 <InitSystem+0x64>)
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff fda1 	bl	8001c54 <LogPrint>
	systemState = SYSTEM_STATE_RUN;
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <InitSystem+0x68>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	0800a7c4 	.word	0x0800a7c4
 8002120:	40020000 	.word	0x40020000
 8002124:	3e4ccccd 	.word	0x3e4ccccd
 8002128:	0800a7d4 	.word	0x0800a7d4
 800212c:	20000b41 	.word	0x20000b41

08002130 <SystemStateMachineProcessing>:

void SystemStateMachineProcessing()
{
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b09e      	sub	sp, #120	; 0x78
 8002134:	af02      	add	r7, sp, #8
	switch (systemState) {
 8002136:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <SystemStateMachineProcessing+0x1c8>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80d1 	beq.w	80022e2 <SystemStateMachineProcessing+0x1b2>
 8002140:	2b01      	cmp	r3, #1
 8002142:	d000      	beq.n	8002146 <SystemStateMachineProcessing+0x16>
				/* Clear flag */
				systemFlags.System_Flags_storeParamters = false;
			}
			break;
		default:
			break;
 8002144:	e0d0      	b.n	80022e8 <SystemStateMachineProcessing+0x1b8>
			if(systemFlags.System_Flags_runAlgorithm)
 8002146:	4b6d      	ldr	r3, [pc, #436]	; (80022fc <SystemStateMachineProcessing+0x1cc>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80b9 	beq.w	80022c8 <SystemStateMachineProcessing+0x198>
				systemFlags.System_Flags_runAlgorithm = false;
 8002156:	4a69      	ldr	r2, [pc, #420]	; (80022fc <SystemStateMachineProcessing+0x1cc>)
 8002158:	7813      	ldrb	r3, [r2, #0]
 800215a:	f36f 0300 	bfc	r3, #0, #1
 800215e:	7013      	strb	r3, [r2, #0]
				MotorReadEncoder(&motorAngle, &motorVelocity, CONTROLLER_SAMPLING_TIME_SEC);
 8002160:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002164:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002168:	ed9f 0b61 	vldr	d0, [pc, #388]	; 80022f0 <SystemStateMachineProcessing+0x1c0>
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fe76 	bl	8001e60 <MotorReadEncoder>
				EncoderReadEncoder(&loadAngle, &loadVelocity, CONTROLLER_SAMPLING_TIME_SEC);
 8002174:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002178:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800217c:	ed9f 0b5c 	vldr	d0, [pc, #368]	; 80022f0 <SystemStateMachineProcessing+0x1c0>
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fcc0 	bl	8001b08 <EncoderReadEncoder>
				currMotorDesiredAngle = 0.5;
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	4b5c      	ldr	r3, [pc, #368]	; (8002300 <SystemStateMachineProcessing+0x1d0>)
 800218e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				MRAC(loadAngle, loadVelocity, motorAngle, motorVelocity, currMotorDesiredAngle, prevParameter, prevReferenceModel,
 8002192:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002196:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 800219a:	ed97 5b16 	vldr	d5, [r7, #88]	; 0x58
 800219e:	ed97 3b14 	vldr	d3, [r7, #80]	; 0x50
 80021a2:	4639      	mov	r1, r7
 80021a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	460b      	mov	r3, r1
 80021b0:	4954      	ldr	r1, [pc, #336]	; (8002304 <SystemStateMachineProcessing+0x1d4>)
 80021b2:	4855      	ldr	r0, [pc, #340]	; (8002308 <SystemStateMachineProcessing+0x1d8>)
 80021b4:	ed97 4b1a 	vldr	d4, [r7, #104]	; 0x68
 80021b8:	eeb0 2a45 	vmov.f32	s4, s10
 80021bc:	eef0 2a65 	vmov.f32	s5, s11
 80021c0:	eeb0 1a46 	vmov.f32	s2, s12
 80021c4:	eef0 1a66 	vmov.f32	s3, s13
 80021c8:	eeb0 0a47 	vmov.f32	s0, s14
 80021cc:	eef0 0a67 	vmov.f32	s1, s15
 80021d0:	f7fe feda 	bl	8000f88 <MRAC>
				prevParameter[0] = currParameter[0];
 80021d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021d8:	494b      	ldr	r1, [pc, #300]	; (8002308 <SystemStateMachineProcessing+0x1d8>)
 80021da:	e9c1 2300 	strd	r2, r3, [r1]
				prevParameter[1] = currParameter[1];
 80021de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021e2:	4949      	ldr	r1, [pc, #292]	; (8002308 <SystemStateMachineProcessing+0x1d8>)
 80021e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
				prevParameter[2] = currParameter[2];
 80021e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021ec:	4946      	ldr	r1, [pc, #280]	; (8002308 <SystemStateMachineProcessing+0x1d8>)
 80021ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
				prevParameter[3] = currParameter[3];
 80021f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f6:	4944      	ldr	r1, [pc, #272]	; (8002308 <SystemStateMachineProcessing+0x1d8>)
 80021f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
				prevParameter[4] = currParameter[4];
 80021fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002200:	4941      	ldr	r1, [pc, #260]	; (8002308 <SystemStateMachineProcessing+0x1d8>)
 8002202:	e9c1 2308 	strd	r2, r3, [r1, #32]
				prevReferenceModel[0] = currReferenceModel[0];
 8002206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800220a:	493e      	ldr	r1, [pc, #248]	; (8002304 <SystemStateMachineProcessing+0x1d4>)
 800220c:	e9c1 2300 	strd	r2, r3, [r1]
				prevReferenceModel[1] = currReferenceModel[1];
 8002210:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002214:	493b      	ldr	r1, [pc, #236]	; (8002304 <SystemStateMachineProcessing+0x1d4>)
 8002216:	e9c1 2302 	strd	r2, r3, [r1, #8]
				if(controlVoltage > MAX_MOTOR_CONTROL_VOLTAGE)
 800221a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	4b3a      	ldr	r3, [pc, #232]	; (800230c <SystemStateMachineProcessing+0x1dc>)
 8002224:	f7fe fc98 	bl	8000b58 <__aeabi_dcmpgt>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <SystemStateMachineProcessing+0x10a>
					controlVoltage = MAX_MOTOR_CONTROL_VOLTAGE;
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	4b36      	ldr	r3, [pc, #216]	; (800230c <SystemStateMachineProcessing+0x1dc>)
 8002234:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002238:	e00e      	b.n	8002258 <SystemStateMachineProcessing+0x128>
				else if(controlVoltage < -MAX_MOTOR_CONTROL_VOLTAGE)
 800223a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <SystemStateMachineProcessing+0x1e0>)
 8002244:	f7fe fc6a 	bl	8000b1c <__aeabi_dcmplt>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d004      	beq.n	8002258 <SystemStateMachineProcessing+0x128>
					controlVoltage = -MAX_MOTOR_CONTROL_VOLTAGE;
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <SystemStateMachineProcessing+0x1e0>)
 8002254:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				if(controlVoltage < 0)
 8002258:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	f7fe fc5a 	bl	8000b1c <__aeabi_dcmplt>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00c      	beq.n	8002288 <SystemStateMachineProcessing+0x158>
					MotorSetDirection(MOTOR_DIR_NEGATIVE);
 800226e:	2201      	movs	r2, #1
 8002270:	2120      	movs	r1, #32
 8002272:	4828      	ldr	r0, [pc, #160]	; (8002314 <SystemStateMachineProcessing+0x1e4>)
 8002274:	f001 f8b6 	bl	80033e4 <HAL_GPIO_WritePin>
					controlVoltage = -controlVoltage;
 8002278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800227c:	4614      	mov	r4, r2
 800227e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002282:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8002286:	e004      	b.n	8002292 <SystemStateMachineProcessing+0x162>
					MotorSetDirection(MOTOR_DIR_POSITIVE);
 8002288:	2200      	movs	r2, #0
 800228a:	2120      	movs	r1, #32
 800228c:	4821      	ldr	r0, [pc, #132]	; (8002314 <SystemStateMachineProcessing+0x1e4>)
 800228e:	f001 f8a9 	bl	80033e4 <HAL_GPIO_WritePin>
				float dutyCycle = (float)(controlVoltage/MAX_MOTOR_CONTROL_VOLTAGE);
 8002292:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <SystemStateMachineProcessing+0x1dc>)
 800229c:	f7fe faf6 	bl	800088c <__aeabi_ddiv>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	4618      	mov	r0, r3
 80022a6:	4621      	mov	r1, r4
 80022a8:	f7fe fc9e 	bl	8000be8 <__aeabi_d2f>
 80022ac:	4603      	mov	r3, r0
 80022ae:	667b      	str	r3, [r7, #100]	; 0x64
				MotorSetDutyCycle(dutyCycle);
 80022b0:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 80022b4:	f7ff fd98 	bl	8001de8 <MotorSetDutyCycle>
				LogPrint(LOG_DEBUG, "%f\n", controlVoltage);
 80022b8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	4915      	ldr	r1, [pc, #84]	; (8002318 <SystemStateMachineProcessing+0x1e8>)
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7ff fcc6 	bl	8001c54 <LogPrint>
			if(systemFlags.System_Flags_storeParamters)
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <SystemStateMachineProcessing+0x1cc>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <SystemStateMachineProcessing+0x1b6>
				systemFlags.System_Flags_storeParamters = false;
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <SystemStateMachineProcessing+0x1cc>)
 80022d8:	7813      	ldrb	r3, [r2, #0]
 80022da:	f36f 0341 	bfc	r3, #1, #1
 80022de:	7013      	strb	r3, [r2, #0]
			break;
 80022e0:	e001      	b.n	80022e6 <SystemStateMachineProcessing+0x1b6>
			break;
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <SystemStateMachineProcessing+0x1b8>
			break;
 80022e6:	bf00      	nop
	}
}
 80022e8:	bf00      	nop
 80022ea:	3770      	adds	r7, #112	; 0x70
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bdb0      	pop	{r4, r5, r7, pc}
 80022f0:	47ae147b 	.word	0x47ae147b
 80022f4:	3f847ae1 	.word	0x3f847ae1
 80022f8:	20000b41 	.word	0x20000b41
 80022fc:	20000b40 	.word	0x20000b40
 8002300:	3fe00000 	.word	0x3fe00000
 8002304:	20000b48 	.word	0x20000b48
 8002308:	20000008 	.word	0x20000008
 800230c:	40280000 	.word	0x40280000
 8002310:	c0280000 	.word	0xc0280000
 8002314:	40020000 	.word	0x40020000
 8002318:	0800a7f0 	.word	0x0800a7f0

0800231c <InitSystemTimer>:
 * @brief : System timer configuration
 * @param : None
 * @return: None
 */
static inline void InitSystemTimer()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8002320:	f000 f8b2 	bl	8002488 <MX_TIM2_Init>
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}

08002328 <InitSystemDMA>:

static inline void InitSystemDMA()
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	MX_DMA_Init();
 800232c:	f000 f87a 	bl	8002424 <MX_DMA_Init>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <InitSystemGPIO>:

static inline void InitSystemGPIO()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8002338:	f000 f8f2 	bl	8002520 <MX_GPIO_Init>
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}

08002340 <SystemClockConfig>:
 * @brief : System Clock Configuration
 * @param : None
 * @return: None
 */
void SystemClockConfig()
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b094      	sub	sp, #80	; 0x50
 8002344:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	2234      	movs	r2, #52	; 0x34
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f005 f816 	bl	8007380 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002354:	f107 0308 	add.w	r3, r7, #8
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002364:	2300      	movs	r3, #0
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	4b2c      	ldr	r3, [pc, #176]	; (800241c <SystemClockConfig+0xdc>)
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	4a2b      	ldr	r2, [pc, #172]	; (800241c <SystemClockConfig+0xdc>)
 800236e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002372:	6413      	str	r3, [r2, #64]	; 0x40
 8002374:	4b29      	ldr	r3, [pc, #164]	; (800241c <SystemClockConfig+0xdc>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002380:	2300      	movs	r3, #0
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <SystemClockConfig+0xe0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a25      	ldr	r2, [pc, #148]	; (8002420 <SystemClockConfig+0xe0>)
 800238a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <SystemClockConfig+0xe0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800239c:	2302      	movs	r3, #2
 800239e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a0:	2301      	movs	r3, #1
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a4:	2310      	movs	r3, #16
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023a8:	2302      	movs	r3, #2
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023ac:	2300      	movs	r3, #0
 80023ae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80023b0:	2308      	movs	r3, #8
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80023b4:	23b4      	movs	r3, #180	; 0xb4
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023b8:	2302      	movs	r3, #2
 80023ba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80023bc:	2302      	movs	r3, #2
 80023be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80023c0:	2302      	movs	r3, #2
 80023c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	4618      	mov	r0, r3
 80023ca:	f002 fe27 	bl	800501c <HAL_RCC_OscConfig>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <SystemClockConfig+0x98>
	{
		Error_Handler();
 80023d4:	f7ff fb82 	bl	8001adc <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023d8:	f002 fb16 	bl	8004a08 <HAL_PWREx_EnableOverDrive>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <SystemClockConfig+0xa6>
	{
		Error_Handler();
 80023e2:	f7ff fb7b 	bl	8001adc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e6:	230f      	movs	r3, #15
 80023e8:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ea:	2302      	movs	r3, #2
 80023ec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023f6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fc:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023fe:	f107 0308 	add.w	r3, r7, #8
 8002402:	2105      	movs	r1, #5
 8002404:	4618      	mov	r0, r3
 8002406:	f002 fb4f 	bl	8004aa8 <HAL_RCC_ClockConfig>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <SystemClockConfig+0xd4>
	{
		Error_Handler();
 8002410:	f7ff fb64 	bl	8001adc <Error_Handler>
	}
}
 8002414:	bf00      	nop
 8002416:	3750      	adds	r7, #80	; 0x50
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	40007000 	.word	0x40007000

08002424 <MX_DMA_Init>:
 * @brief : Enable DMA controller clock
 * @param : None
 * @return: None
 */
static inline void MX_DMA_Init()
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <MX_DMA_Init+0x4c>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <MX_DMA_Init+0x4c>)
 8002434:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <MX_DMA_Init+0x4c>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	2011      	movs	r0, #17
 800244c:	f000 fa63 	bl	8002916 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002450:	2011      	movs	r0, #17
 8002452:	f000 fa7c 	bl	800294e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	202f      	movs	r0, #47	; 0x2f
 800245c:	f000 fa5b 	bl	8002916 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002460:	202f      	movs	r0, #47	; 0x2f
 8002462:	f000 fa74 	bl	800294e <HAL_NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800

08002474 <SystemStartTimer>:
 * @brief : Start system 1ms timer
 * @param : None
 * @return: None
 */
static inline void SystemStartTimer()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <SystemStartTimer+0x10>)
 800247a:	f003 f854 	bl	8005526 <HAL_TIM_Base_Start_IT>
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000ce4 	.word	0x20000ce4

08002488 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static inline void MX_TIM2_Init()
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	463b      	mov	r3, r7
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]

	htim2.Instance = TIM2;
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <MX_TIM2_Init+0x94>)
 80024a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024aa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9000-1;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <MX_TIM2_Init+0x94>)
 80024ae:	f242 3227 	movw	r2, #8999	; 0x2327
 80024b2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <MX_TIM2_Init+0x94>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10-1;
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <MX_TIM2_Init+0x94>)
 80024bc:	2209      	movs	r2, #9
 80024be:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <MX_TIM2_Init+0x94>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <MX_TIM2_Init+0x94>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024cc:	4813      	ldr	r0, [pc, #76]	; (800251c <MX_TIM2_Init+0x94>)
 80024ce:	f002 ffff 	bl	80054d0 <HAL_TIM_Base_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 80024d8:	f7ff fb00 	bl	8001adc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	4619      	mov	r1, r3
 80024e8:	480c      	ldr	r0, [pc, #48]	; (800251c <MX_TIM2_Init+0x94>)
 80024ea:	f003 fb41 	bl	8005b70 <HAL_TIM_ConfigClockSource>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 80024f4:	f7ff faf2 	bl	8001adc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002500:	463b      	mov	r3, r7
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_TIM2_Init+0x94>)
 8002506:	f003 ff23 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8002510:	f7ff fae4 	bl	8001adc <Error_Handler>
	}
}
 8002514:	bf00      	nop
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000ce4 	.word	0x20000ce4

08002520 <MX_GPIO_Init>:
 * @brief : GPIO Initialization Function
 * @param : None
 * @return: None
 */
static inline void MX_GPIO_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <MX_GPIO_Init+0xd0>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a2c      	ldr	r2, [pc, #176]	; (80025f0 <MX_GPIO_Init+0xd0>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <MX_GPIO_Init+0xd0>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <MX_GPIO_Init+0xd0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a25      	ldr	r2, [pc, #148]	; (80025f0 <MX_GPIO_Init+0xd0>)
 800255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <MX_GPIO_Init+0xd0>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <MX_GPIO_Init+0xd0>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <MX_GPIO_Init+0xd0>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <MX_GPIO_Init+0xd0>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <MX_GPIO_Init+0xd0>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <MX_GPIO_Init+0xd0>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <MX_GPIO_Init+0xd0>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2120      	movs	r1, #32
 80025aa:	4812      	ldr	r0, [pc, #72]	; (80025f4 <MX_GPIO_Init+0xd4>)
 80025ac:	f000 ff1a 	bl	80033e4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 80025b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <MX_GPIO_Init+0xd8>)
 80025b8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	480d      	ldr	r0, [pc, #52]	; (80025fc <MX_GPIO_Init+0xdc>)
 80025c6:	f000 fd7b 	bl	80030c0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : DIR_Pin */
	  GPIO_InitStruct.Pin = DIR_Pin;
 80025ca:	2320      	movs	r3, #32
 80025cc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	4804      	ldr	r0, [pc, #16]	; (80025f4 <MX_GPIO_Init+0xd4>)
 80025e2:	f000 fd6d 	bl	80030c0 <HAL_GPIO_Init>
}
 80025e6:	bf00      	nop
 80025e8:	3728      	adds	r7, #40	; 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	10210000 	.word	0x10210000
 80025fc:	40020800 	.word	0x40020800

08002600 <HAL_TIM_PeriodElapsedCallback>:
  * @brief : Period elapsed callback in non blocking mode
  * @param htim: TIM handle
  * @return: None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	static uint32_t timerCount = 0;
    if (htim->Instance == htim2.Instance)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b17      	ldr	r3, [pc, #92]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d124      	bne.n	800265e <HAL_TIM_PeriodElapsedCallback+0x5e>
    {
    	timerCount++;
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	4a15      	ldr	r2, [pc, #84]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800261c:	6013      	str	r3, [r2, #0]
    	/* 10ms */
    	if(timerCount%CONTROLLER_SAMPLING_TIME_MSEC == 0)
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002624:	fba3 2301 	umull	r2, r3, r3, r1
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	1aca      	subs	r2, r1, r3
 8002634:	2a00      	cmp	r2, #0
 8002636:	d104      	bne.n	8002642 <HAL_TIM_PeriodElapsedCallback+0x42>
    	{
    		systemFlags.System_Flags_runAlgorithm = true;
 8002638:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800263a:	7813      	ldrb	r3, [r2, #0]
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	7013      	strb	r3, [r2, #0]
    	}

    	/* 60s */
    	if(timerCount >= 60000)
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800264a:	4293      	cmp	r3, r2
 800264c:	d907      	bls.n	800265e <HAL_TIM_PeriodElapsedCallback+0x5e>
    	{
    		timerCount = 0;
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
    		systemFlags.System_Flags_storeParamters = true;
 8002654:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002656:	7813      	ldrb	r3, [r2, #0]
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	7013      	strb	r3, [r2, #0]
    	}
    }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000ce4 	.word	0x20000ce4
 8002670:	20000b58 	.word	0x20000b58
 8002674:	cccccccd 	.word	0xcccccccd
 8002678:	20000b40 	.word	0x20000b40

0800267c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <HAL_Init+0x40>)
 8002686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <HAL_Init+0x40>)
 8002692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a07      	ldr	r2, [pc, #28]	; (80026bc <HAL_Init+0x40>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a4:	2003      	movs	r0, #3
 80026a6:	f000 f92b 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f000 f808 	bl	80026c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b0:	f7fe ff98 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023c00 	.word	0x40023c00

080026c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_InitTick+0x54>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_InitTick+0x58>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f943 	bl	800296a <HAL_SYSTICK_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00e      	b.n	800270c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b0f      	cmp	r3, #15
 80026f2:	d80a      	bhi.n	800270a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f4:	2200      	movs	r2, #0
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f000 f90b 	bl	8002916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002700:	4a06      	ldr	r2, [pc, #24]	; (800271c <HAL_InitTick+0x5c>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000000 	.word	0x20000000
 8002718:	20000034 	.word	0x20000034
 800271c:	20000030 	.word	0x20000030

08002720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x20>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_IncTick+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	; (8002744 <HAL_IncTick+0x24>)
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000034 	.word	0x20000034
 8002744:	20000d24 	.word	0x20000d24

08002748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return uwTick;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_GetTick+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000d24 	.word	0x20000d24

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <__NVIC_EnableIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db0a      	blt.n	800282a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	490c      	ldr	r1, [pc, #48]	; (800284c <__NVIC_SetPriority+0x4c>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	440b      	add	r3, r1
 8002824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002828:	e00a      	b.n	8002840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4908      	ldr	r1, [pc, #32]	; (8002850 <__NVIC_SetPriority+0x50>)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3b04      	subs	r3, #4
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	440b      	add	r3, r1
 800283e:	761a      	strb	r2, [r3, #24]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	bf28      	it	cs
 8002872:	2304      	movcs	r3, #4
 8002874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3304      	adds	r3, #4
 800287a:	2b06      	cmp	r3, #6
 800287c:	d902      	bls.n	8002884 <NVIC_EncodePriority+0x30>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3b03      	subs	r3, #3
 8002882:	e000      	b.n	8002886 <NVIC_EncodePriority+0x32>
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	f04f 32ff 	mov.w	r2, #4294967295
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800289c:	f04f 31ff 	mov.w	r1, #4294967295
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	4313      	orrs	r3, r2
         );
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	; 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028cc:	d301      	bcc.n	80028d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00f      	b.n	80028f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <SysTick_Config+0x40>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028da:	210f      	movs	r1, #15
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f7ff ff8e 	bl	8002800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <SysTick_Config+0x40>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <SysTick_Config+0x40>)
 80028ec:	2207      	movs	r2, #7
 80028ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	e000e010 	.word	0xe000e010

08002900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff29 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002928:	f7ff ff3e 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 800292c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f7ff ff8e 	bl	8002854 <NVIC_EncodePriority>
 8002938:	4602      	mov	r2, r0
 800293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff5d 	bl	8002800 <__NVIC_SetPriority>
}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff31 	bl	80027c4 <__NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffa2 	bl	80028bc <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7ff feda 	bl	8002748 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e099      	b.n	8002ad4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c0:	e00f      	b.n	80029e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029c2:	f7ff fec1 	bl	8002748 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b05      	cmp	r3, #5
 80029ce:	d908      	bls.n	80029e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2203      	movs	r2, #3
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e078      	b.n	8002ad4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e8      	bne.n	80029c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4b38      	ldr	r3, [pc, #224]	; (8002adc <HAL_DMA_Init+0x158>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d107      	bne.n	8002a4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	4313      	orrs	r3, r2
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f023 0307 	bic.w	r3, r3, #7
 8002a62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d117      	bne.n	8002aa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00e      	beq.n	8002aa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fa9f 	bl	8002fcc <DMA_CheckFifoParam>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2240      	movs	r2, #64	; 0x40
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e016      	b.n	8002ad4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fa56 	bl	8002f60 <DMA_CalcBaseAndBitshift>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	223f      	movs	r2, #63	; 0x3f
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	f010803f 	.word	0xf010803f

08002ae0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_DMA_Start_IT+0x26>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e040      	b.n	8002b88 <HAL_DMA_Start_IT+0xa8>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d12f      	bne.n	8002b7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f9e8 	bl	8002f04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	223f      	movs	r2, #63	; 0x3f
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0216 	orr.w	r2, r2, #22
 8002b4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0208 	orr.w	r2, r2, #8
 8002b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e005      	b.n	8002b86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
 8002b84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d004      	beq.n	8002bae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2280      	movs	r2, #128	; 0x80
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00c      	b.n	8002bc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002be0:	4b92      	ldr	r3, [pc, #584]	; (8002e2c <HAL_DMA_IRQHandler+0x258>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a92      	ldr	r2, [pc, #584]	; (8002e30 <HAL_DMA_IRQHandler+0x25c>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	0a9b      	lsrs	r3, r3, #10
 8002bec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	2208      	movs	r2, #8
 8002c00:	409a      	lsls	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01a      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0204 	bic.w	r2, r2, #4
 8002c26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	2201      	movs	r2, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d012      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	2201      	movs	r2, #1
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	f043 0202 	orr.w	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d012      	beq.n	8002cac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	2204      	movs	r2, #4
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	f043 0204 	orr.w	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d043      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d03c      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	2210      	movs	r2, #16
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d018      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d108      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d024      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
 8002d02:	e01f      	b.n	8002d44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01b      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
 8002d14:	e016      	b.n	8002d44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d107      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0208 	bic.w	r2, r2, #8
 8002d32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	2220      	movs	r2, #32
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 808e 	beq.w	8002e72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8086 	beq.w	8002e72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d136      	bne.n	8002dec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0216 	bic.w	r2, r2, #22
 8002d8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <HAL_DMA_IRQHandler+0x1da>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0208 	bic.w	r2, r2, #8
 8002dbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	223f      	movs	r2, #63	; 0x3f
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d07d      	beq.n	8002ede <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
        }
        return;
 8002dea:	e078      	b.n	8002ede <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01c      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d108      	bne.n	8002e1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d030      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
 8002e18:	e02b      	b.n	8002e72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d027      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
 8002e2a:	e022      	b.n	8002e72 <HAL_DMA_IRQHandler+0x29e>
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0210 	bic.w	r2, r2, #16
 8002e50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d032      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d022      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2205      	movs	r2, #5
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d307      	bcc.n	8002eba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f2      	bne.n	8002e9e <HAL_DMA_IRQHandler+0x2ca>
 8002eb8:	e000      	b.n	8002ebc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002eba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
 8002edc:	e000      	b.n	8002ee0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ede:	bf00      	nop
    }
  }
}
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop

08002ee8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef6:	b2db      	uxtb	r3, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d108      	bne.n	8002f44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f42:	e007      	b.n	8002f54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3b10      	subs	r3, #16
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f7a:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d909      	bls.n	8002fa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f96:	f023 0303 	bic.w	r3, r3, #3
 8002f9a:	1d1a      	adds	r2, r3, #4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002fa0:	e007      	b.n	8002fb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	aaaaaaab 	.word	0xaaaaaaab
 8002fc8:	0800a80c 	.word	0x0800a80c

08002fcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d11f      	bne.n	8003026 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d855      	bhi.n	8003098 <DMA_CheckFifoParam+0xcc>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <DMA_CheckFifoParam+0x28>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003017 	.word	0x08003017
 8002ffc:	08003005 	.word	0x08003005
 8003000:	08003099 	.word	0x08003099
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d045      	beq.n	800309c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003014:	e042      	b.n	800309c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800301e:	d13f      	bne.n	80030a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003024:	e03c      	b.n	80030a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302e:	d121      	bne.n	8003074 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d836      	bhi.n	80030a4 <DMA_CheckFifoParam+0xd8>
 8003036:	a201      	add	r2, pc, #4	; (adr r2, 800303c <DMA_CheckFifoParam+0x70>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	0800304d 	.word	0x0800304d
 8003040:	08003053 	.word	0x08003053
 8003044:	0800304d 	.word	0x0800304d
 8003048:	08003065 	.word	0x08003065
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e02f      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d024      	beq.n	80030a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003062:	e021      	b.n	80030a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800306c:	d11e      	bne.n	80030ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003072:	e01b      	b.n	80030ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d902      	bls.n	8003080 <DMA_CheckFifoParam+0xb4>
 800307a:	2b03      	cmp	r3, #3
 800307c:	d003      	beq.n	8003086 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800307e:	e018      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      break;
 8003084:	e015      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00e      	beq.n	80030b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
      break;
 8003096:	e00b      	b.n	80030b0 <DMA_CheckFifoParam+0xe4>
      break;
 8003098:	bf00      	nop
 800309a:	e00a      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
      break;
 800309c:	bf00      	nop
 800309e:	e008      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
      break;
 80030a0:	bf00      	nop
 80030a2:	e006      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
      break;
 80030a4:	bf00      	nop
 80030a6:	e004      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
      break;
 80030a8:	bf00      	nop
 80030aa:	e002      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80030ac:	bf00      	nop
 80030ae:	e000      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
      break;
 80030b0:	bf00      	nop
    }
  } 
  
  return status; 
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	; 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e165      	b.n	80033a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030dc:	2201      	movs	r2, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	f040 8154 	bne.w	80033a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d00b      	beq.n	800311a <HAL_GPIO_Init+0x5a>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d007      	beq.n	800311a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800310e:	2b11      	cmp	r3, #17
 8003110:	d003      	beq.n	800311a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b12      	cmp	r3, #18
 8003118:	d130      	bne.n	800317c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	2203      	movs	r2, #3
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003150:	2201      	movs	r2, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 0201 	and.w	r2, r3, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2203      	movs	r2, #3
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0xfc>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b12      	cmp	r3, #18
 80031ba:	d123      	bne.n	8003204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	08da      	lsrs	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3208      	adds	r2, #8
 80031c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	220f      	movs	r2, #15
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	08da      	lsrs	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3208      	adds	r2, #8
 80031fe:	69b9      	ldr	r1, [r7, #24]
 8003200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	2203      	movs	r2, #3
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0203 	and.w	r2, r3, #3
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80ae 	beq.w	80033a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	4b5c      	ldr	r3, [pc, #368]	; (80033bc <HAL_GPIO_Init+0x2fc>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	4a5b      	ldr	r2, [pc, #364]	; (80033bc <HAL_GPIO_Init+0x2fc>)
 8003250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003254:	6453      	str	r3, [r2, #68]	; 0x44
 8003256:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_GPIO_Init+0x2fc>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003262:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <HAL_GPIO_Init+0x300>)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	220f      	movs	r2, #15
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4e      	ldr	r2, [pc, #312]	; (80033c4 <HAL_GPIO_Init+0x304>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d025      	beq.n	80032da <HAL_GPIO_Init+0x21a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4d      	ldr	r2, [pc, #308]	; (80033c8 <HAL_GPIO_Init+0x308>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01f      	beq.n	80032d6 <HAL_GPIO_Init+0x216>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4c      	ldr	r2, [pc, #304]	; (80033cc <HAL_GPIO_Init+0x30c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d019      	beq.n	80032d2 <HAL_GPIO_Init+0x212>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a4b      	ldr	r2, [pc, #300]	; (80033d0 <HAL_GPIO_Init+0x310>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_GPIO_Init+0x20e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4a      	ldr	r2, [pc, #296]	; (80033d4 <HAL_GPIO_Init+0x314>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00d      	beq.n	80032ca <HAL_GPIO_Init+0x20a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a49      	ldr	r2, [pc, #292]	; (80033d8 <HAL_GPIO_Init+0x318>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d007      	beq.n	80032c6 <HAL_GPIO_Init+0x206>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a48      	ldr	r2, [pc, #288]	; (80033dc <HAL_GPIO_Init+0x31c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_GPIO_Init+0x202>
 80032be:	2306      	movs	r3, #6
 80032c0:	e00c      	b.n	80032dc <HAL_GPIO_Init+0x21c>
 80032c2:	2307      	movs	r3, #7
 80032c4:	e00a      	b.n	80032dc <HAL_GPIO_Init+0x21c>
 80032c6:	2305      	movs	r3, #5
 80032c8:	e008      	b.n	80032dc <HAL_GPIO_Init+0x21c>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x21c>
 80032ce:	2303      	movs	r3, #3
 80032d0:	e004      	b.n	80032dc <HAL_GPIO_Init+0x21c>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_Init+0x21c>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_GPIO_Init+0x21c>
 80032da:	2300      	movs	r3, #0
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	f002 0203 	and.w	r2, r2, #3
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	4093      	lsls	r3, r2
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032ec:	4934      	ldr	r1, [pc, #208]	; (80033c0 <HAL_GPIO_Init+0x300>)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	3302      	adds	r3, #2
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032fa:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <HAL_GPIO_Init+0x320>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800331e:	4a30      	ldr	r2, [pc, #192]	; (80033e0 <HAL_GPIO_Init+0x320>)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003324:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <HAL_GPIO_Init+0x320>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003348:	4a25      	ldr	r2, [pc, #148]	; (80033e0 <HAL_GPIO_Init+0x320>)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334e:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <HAL_GPIO_Init+0x320>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003372:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <HAL_GPIO_Init+0x320>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_GPIO_Init+0x320>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800339c:	4a10      	ldr	r2, [pc, #64]	; (80033e0 <HAL_GPIO_Init+0x320>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	f67f ae96 	bls.w	80030dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033b0:	bf00      	nop
 80033b2:	3724      	adds	r7, #36	; 0x24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40013800 	.word	0x40013800
 80033c4:	40020000 	.word	0x40020000
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40020800 	.word	0x40020800
 80033d0:	40020c00 	.word	0x40020c00
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40021400 	.word	0x40021400
 80033dc:	40021800 	.word	0x40021800
 80033e0:	40013c00 	.word	0x40013c00

080033e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
 80033f0:	4613      	mov	r3, r2
 80033f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f4:	787b      	ldrb	r3, [r7, #1]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003400:	e003      	b.n	800340a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003402:	887b      	ldrh	r3, [r7, #2]
 8003404:	041a      	lsls	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	619a      	str	r2, [r3, #24]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b088      	sub	sp, #32
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003436:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b10      	cmp	r3, #16
 8003444:	d003      	beq.n	800344e <HAL_I2C_EV_IRQHandler+0x38>
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	f040 80b6 	bne.w	80035ba <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10d      	bne.n	8003484 <HAL_I2C_EV_IRQHandler+0x6e>
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800346e:	d003      	beq.n	8003478 <HAL_I2C_EV_IRQHandler+0x62>
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003476:	d101      	bne.n	800347c <HAL_I2C_EV_IRQHandler+0x66>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <HAL_I2C_EV_IRQHandler+0x68>
 800347c:	2300      	movs	r3, #0
 800347e:	2b01      	cmp	r3, #1
 8003480:	f000 8127 	beq.w	80036d2 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00c      	beq.n	80034a8 <HAL_I2C_EV_IRQHandler+0x92>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	0a5b      	lsrs	r3, r3, #9
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f001 fa99 	bl	80049d2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fc75 	bl	8003d90 <I2C_Master_SB>
 80034a6:	e087      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	08db      	lsrs	r3, r3, #3
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <HAL_I2C_EV_IRQHandler+0xb2>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	0a5b      	lsrs	r3, r3, #9
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fceb 	bl	8003e9c <I2C_Master_ADD10>
 80034c6:	e077      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <HAL_I2C_EV_IRQHandler+0xd2>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	0a5b      	lsrs	r3, r3, #9
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fd05 	bl	8003ef0 <I2C_Master_ADDR>
 80034e6:	e067      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d030      	beq.n	8003556 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003502:	f000 80e8 	beq.w	80036d6 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	09db      	lsrs	r3, r3, #7
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00f      	beq.n	8003532 <HAL_I2C_EV_IRQHandler+0x11c>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	0a9b      	lsrs	r3, r3, #10
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_I2C_EV_IRQHandler+0x11c>
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f941 	bl	80037b2 <I2C_MasterTransmit_TXE>
 8003530:	e042      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80cb 	beq.w	80036d6 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	0a5b      	lsrs	r3, r3, #9
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80c4 	beq.w	80036d6 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f9cb 	bl	80038ea <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003554:	e0bf      	b.n	80036d6 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003564:	f000 80b7 	beq.w	80036d6 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00f      	beq.n	8003594 <HAL_I2C_EV_IRQHandler+0x17e>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	0a9b      	lsrs	r3, r3, #10
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <HAL_I2C_EV_IRQHandler+0x17e>
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d103      	bne.n	8003594 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fa93 	bl	8003ab8 <I2C_MasterReceive_RXNE>
 8003592:	e011      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 809a 	beq.w	80036d6 <HAL_I2C_EV_IRQHandler+0x2c0>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	0a5b      	lsrs	r3, r3, #9
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8093 	beq.w	80036d6 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fb03 	bl	8003bbc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b6:	e08e      	b.n	80036d6 <HAL_I2C_EV_IRQHandler+0x2c0>
 80035b8:	e08d      	b.n	80036d6 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d004      	beq.n	80035cc <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e007      	b.n	80035dc <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d012      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x1f8>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	0a5b      	lsrs	r3, r3, #9
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00c      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003604:	69b9      	ldr	r1, [r7, #24]
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fec1 	bl	800438e <I2C_Slave_ADDR>
 800360c:	e066      	b.n	80036dc <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_I2C_EV_IRQHandler+0x218>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	0a5b      	lsrs	r3, r3, #9
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fef6 	bl	8004418 <I2C_Slave_STOPF>
 800362c:	e056      	b.n	80036dc <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800362e:	7bbb      	ldrb	r3, [r7, #14]
 8003630:	2b21      	cmp	r3, #33	; 0x21
 8003632:	d002      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0x224>
 8003634:	7bbb      	ldrb	r3, [r7, #14]
 8003636:	2b29      	cmp	r3, #41	; 0x29
 8003638:	d125      	bne.n	8003686 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	09db      	lsrs	r3, r3, #7
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00f      	beq.n	8003666 <HAL_I2C_EV_IRQHandler+0x250>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	0a9b      	lsrs	r3, r3, #10
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_I2C_EV_IRQHandler+0x250>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fdd7 	bl	8004212 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003664:	e039      	b.n	80036da <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	089b      	lsrs	r3, r3, #2
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d033      	beq.n	80036da <HAL_I2C_EV_IRQHandler+0x2c4>
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	0a5b      	lsrs	r3, r3, #9
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d02d      	beq.n	80036da <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fe04 	bl	800428c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003684:	e029      	b.n	80036da <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00f      	beq.n	80036b2 <HAL_I2C_EV_IRQHandler+0x29c>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	0a9b      	lsrs	r3, r3, #10
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_I2C_EV_IRQHandler+0x29c>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	089b      	lsrs	r3, r3, #2
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fe0f 	bl	80042ce <I2C_SlaveReceive_RXNE>
 80036b0:	e014      	b.n	80036dc <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00e      	beq.n	80036dc <HAL_I2C_EV_IRQHandler+0x2c6>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	0a5b      	lsrs	r3, r3, #9
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fe3d 	bl	800434a <I2C_SlaveReceive_BTF>
 80036d0:	e004      	b.n	80036dc <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80036d2:	bf00      	nop
 80036d4:	e002      	b.n	80036dc <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036d6:	bf00      	nop
 80036d8:	e000      	b.n	80036dc <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	70fb      	strb	r3, [r7, #3]
 800373e:	4613      	mov	r3, r2
 8003740:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d150      	bne.n	800387a <I2C_MasterTransmit_TXE+0xc8>
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b21      	cmp	r3, #33	; 0x21
 80037dc:	d14d      	bne.n	800387a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d01d      	beq.n	8003820 <I2C_MasterTransmit_TXE+0x6e>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d01a      	beq.n	8003820 <I2C_MasterTransmit_TXE+0x6e>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f0:	d016      	beq.n	8003820 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003800:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2211      	movs	r2, #17
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ff62 	bl	80036e2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800381e:	e060      	b.n	80038e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800382e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d107      	bne.n	800386a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ff7d 	bl	8003762 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003868:	e03b      	b.n	80038e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff35 	bl	80036e2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003878:	e033      	b.n	80038e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b21      	cmp	r3, #33	; 0x21
 800387e:	d005      	beq.n	800388c <I2C_MasterTransmit_TXE+0xda>
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d12d      	bne.n	80038e2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b22      	cmp	r3, #34	; 0x22
 800388a:	d12a      	bne.n	80038e2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80038a6:	e01c      	b.n	80038e2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d103      	bne.n	80038bc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f898 	bl	80039ea <I2C_MemoryTransmit_TXE_BTF>
}
 80038ba:	e012      	b.n	80038e2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038e0:	e7ff      	b.n	80038e2 <I2C_MasterTransmit_TXE+0x130>
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b21      	cmp	r3, #33	; 0x21
 8003902:	d165      	bne.n	80039d0 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d012      	beq.n	8003934 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	781a      	ldrb	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003932:	e056      	b.n	80039e2 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d01d      	beq.n	8003976 <I2C_MasterTransmit_BTF+0x8c>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b20      	cmp	r3, #32
 800393e:	d01a      	beq.n	8003976 <I2C_MasterTransmit_BTF+0x8c>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003946:	d016      	beq.n	8003976 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003956:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2211      	movs	r2, #17
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff feb7 	bl	80036e2 <HAL_I2C_MasterTxCpltCallback>
}
 8003974:	e035      	b.n	80039e2 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003984:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003994:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d107      	bne.n	80039c0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff fed2 	bl	8003762 <HAL_I2C_MemTxCpltCallback>
}
 80039be:	e010      	b.n	80039e2 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fe8a 	bl	80036e2 <HAL_I2C_MasterTxCpltCallback>
}
 80039ce:	e008      	b.n	80039e2 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d102      	bne.n	80039e2 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f804 	bl	80039ea <I2C_MemoryTransmit_TXE_BTF>
}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11d      	bne.n	8003a36 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d10b      	bne.n	8003a1a <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a12:	1c9a      	adds	r2, r3, #2
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a18:	e048      	b.n	8003aac <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	121b      	asrs	r3, r3, #8
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a34:	e03a      	b.n	8003aac <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d10b      	bne.n	8003a56 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a54:	e02a      	b.n	8003aac <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d126      	bne.n	8003aac <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b22      	cmp	r3, #34	; 0x22
 8003a68:	d108      	bne.n	8003a7c <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a78:	601a      	str	r2, [r3, #0]
}
 8003a7a:	e017      	b.n	8003aac <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b21      	cmp	r3, #33	; 0x21
 8003a86:	d111      	bne.n	8003aac <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b22      	cmp	r3, #34	; 0x22
 8003aca:	d173      	bne.n	8003bb4 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d920      	bls.n	8003b1c <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d154      	bne.n	8003bb4 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b18:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003b1a:	e04b      	b.n	8003bb4 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d047      	beq.n	8003bb4 <I2C_MasterReceive_RXNE+0xfc>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d002      	beq.n	8003b30 <I2C_MasterReceive_RXNE+0x78>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d141      	bne.n	8003bb4 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b4e:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d10a      	bne.n	8003ba0 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fdec 	bl	8003776 <HAL_I2C_MemRxCpltCallback>
}
 8003b9e:	e009      	b.n	8003bb4 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2212      	movs	r2, #18
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff fda1 	bl	80036f6 <HAL_I2C_MasterRxCpltCallback>
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d11b      	bne.n	8003c0c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c0a:	e0bd      	b.n	8003d88 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d129      	bne.n	8003c6a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d00a      	beq.n	8003c42 <I2C_MasterReceive_BTF+0x86>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d007      	beq.n	8003c42 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c68:	e08e      	b.n	8003d88 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d176      	bne.n	8003d62 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d002      	beq.n	8003c80 <I2C_MasterReceive_BTF+0xc4>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d108      	bne.n	8003c92 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e019      	b.n	8003cc6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d002      	beq.n	8003c9e <I2C_MasterReceive_BTF+0xe2>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d108      	bne.n	8003cb0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	e00a      	b.n	8003cc6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d007      	beq.n	8003cc6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d20:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d10a      	bne.n	8003d4c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff fd16 	bl	8003776 <HAL_I2C_MemRxCpltCallback>
}
 8003d4a:	e01d      	b.n	8003d88 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2212      	movs	r2, #18
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fccb 	bl	80036f6 <HAL_I2C_MasterRxCpltCallback>
}
 8003d60:	e012      	b.n	8003d88 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	d117      	bne.n	8003dd4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dbc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003dbe:	e067      	b.n	8003e90 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	611a      	str	r2, [r3, #16]
}
 8003dd2:	e05d      	b.n	8003e90 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ddc:	d133      	bne.n	8003e46 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b21      	cmp	r3, #33	; 0x21
 8003de8:	d109      	bne.n	8003dfe <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dfa:	611a      	str	r2, [r3, #16]
 8003dfc:	e008      	b.n	8003e10 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d004      	beq.n	8003e22 <I2C_Master_SB+0x92>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d108      	bne.n	8003e34 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d032      	beq.n	8003e90 <I2C_Master_SB+0x100>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d02d      	beq.n	8003e90 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e42:	605a      	str	r2, [r3, #4]
}
 8003e44:	e024      	b.n	8003e90 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10e      	bne.n	8003e6c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	11db      	asrs	r3, r3, #7
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f003 0306 	and.w	r3, r3, #6
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f063 030f 	orn	r3, r3, #15
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	611a      	str	r2, [r3, #16]
}
 8003e6a:	e011      	b.n	8003e90 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d10d      	bne.n	8003e90 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	11db      	asrs	r3, r3, #7
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f003 0306 	and.w	r3, r3, #6
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f063 030e 	orn	r3, r3, #14
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	611a      	str	r2, [r3, #16]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <I2C_Master_ADD10+0x24>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d011      	beq.n	8003ee4 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <I2C_Master_ADD10+0x38>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee2:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b091      	sub	sp, #68	; 0x44
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003efe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b22      	cmp	r3, #34	; 0x22
 8003f18:	f040 8169 	bne.w	80041ee <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10f      	bne.n	8003f44 <I2C_Master_ADDR+0x54>
 8003f24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d10b      	bne.n	8003f44 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	e160      	b.n	8004206 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d11d      	bne.n	8003f88 <I2C_Master_ADDR+0x98>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f54:	d118      	bne.n	8003f88 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f56:	2300      	movs	r3, #0
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	651a      	str	r2, [r3, #80]	; 0x50
 8003f86:	e13e      	b.n	8004206 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d113      	bne.n	8003fba <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f92:	2300      	movs	r3, #0
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e115      	b.n	80041e6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	f040 808a 	bne.w	80040da <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fcc:	d137      	bne.n	800403e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fdc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fec:	d113      	bne.n	8004016 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffe:	2300      	movs	r3, #0
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	e0e7      	b.n	80041e6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004016:	2300      	movs	r3, #0
 8004018:	623b      	str	r3, [r7, #32]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	623b      	str	r3, [r7, #32]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e0d3      	b.n	80041e6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	2b08      	cmp	r3, #8
 8004042:	d02e      	beq.n	80040a2 <I2C_Master_ADDR+0x1b2>
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	2b20      	cmp	r3, #32
 8004048:	d02b      	beq.n	80040a2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404c:	2b12      	cmp	r3, #18
 800404e:	d102      	bne.n	8004056 <I2C_Master_ADDR+0x166>
 8004050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004052:	2b01      	cmp	r3, #1
 8004054:	d125      	bne.n	80040a2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	2b04      	cmp	r3, #4
 800405a:	d00e      	beq.n	800407a <I2C_Master_ADDR+0x18a>
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	2b02      	cmp	r3, #2
 8004060:	d00b      	beq.n	800407a <I2C_Master_ADDR+0x18a>
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	2b10      	cmp	r3, #16
 8004066:	d008      	beq.n	800407a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e007      	b.n	800408a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004088:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	e0a1      	b.n	80041e6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e085      	b.n	80041e6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d14d      	bne.n	8004180 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d016      	beq.n	8004118 <I2C_Master_ADDR+0x228>
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d013      	beq.n	8004118 <I2C_Master_ADDR+0x228>
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d010      	beq.n	8004118 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004104:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	e007      	b.n	8004128 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004126:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004136:	d117      	bne.n	8004168 <I2C_Master_ADDR+0x278>
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800413e:	d00b      	beq.n	8004158 <I2C_Master_ADDR+0x268>
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	2b01      	cmp	r3, #1
 8004144:	d008      	beq.n	8004158 <I2C_Master_ADDR+0x268>
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	2b08      	cmp	r3, #8
 800414a:	d005      	beq.n	8004158 <I2C_Master_ADDR+0x268>
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	2b10      	cmp	r3, #16
 8004150:	d002      	beq.n	8004158 <I2C_Master_ADDR+0x268>
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	2b20      	cmp	r3, #32
 8004156:	d107      	bne.n	8004168 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004166:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	e032      	b.n	80041e6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800418e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419e:	d117      	bne.n	80041d0 <I2C_Master_ADDR+0x2e0>
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041a6:	d00b      	beq.n	80041c0 <I2C_Master_ADDR+0x2d0>
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d008      	beq.n	80041c0 <I2C_Master_ADDR+0x2d0>
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d005      	beq.n	80041c0 <I2C_Master_ADDR+0x2d0>
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	2b10      	cmp	r3, #16
 80041b8:	d002      	beq.n	80041c0 <I2C_Master_ADDR+0x2d0>
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d107      	bne.n	80041d0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041ce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80041ec:	e00b      	b.n	8004206 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
}
 8004204:	e7ff      	b.n	8004206 <I2C_Master_ADDR+0x316>
 8004206:	bf00      	nop
 8004208:	3744      	adds	r7, #68	; 0x44
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d02b      	beq.n	8004284 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	781a      	ldrb	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d114      	bne.n	8004284 <I2C_SlaveTransmit_TXE+0x72>
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b29      	cmp	r3, #41	; 0x29
 800425e:	d111      	bne.n	8004284 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2221      	movs	r2, #33	; 0x21
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2228      	movs	r2, #40	; 0x28
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fa43 	bl	800370a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d011      	beq.n	80042c2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d02c      	beq.n	8004342 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d114      	bne.n	8004342 <I2C_SlaveReceive_RXNE+0x74>
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b2a      	cmp	r3, #42	; 0x2a
 800431c:	d111      	bne.n	8004342 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2222      	movs	r2, #34	; 0x22
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2228      	movs	r2, #40	; 0x28
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff f9ee 	bl	800371e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d012      	beq.n	8004382 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004398:	2300      	movs	r3, #0
 800439a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043a8:	2b28      	cmp	r3, #40	; 0x28
 80043aa:	d127      	bne.n	80043fc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ba:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	09db      	lsrs	r3, r3, #7
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	81bb      	strh	r3, [r7, #12]
 80043de:	e002      	b.n	80043e6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043ee:	89ba      	ldrh	r2, [r7, #12]
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff f99c 	bl	8003732 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043fa:	e008      	b.n	800440e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0202 	mvn.w	r2, #2
 8004404:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004436:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004438:	2300      	movs	r3, #0
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004464:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004474:	d172      	bne.n	800455c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	2b22      	cmp	r3, #34	; 0x22
 800447a:	d002      	beq.n	8004482 <I2C_Slave_STOPF+0x6a>
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b2a      	cmp	r3, #42	; 0x2a
 8004480:	d135      	bne.n	80044ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	b29a      	uxth	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f043 0204 	orr.w	r2, r3, #4
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fd14 	bl	8002ee8 <HAL_DMA_GetState>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d049      	beq.n	800455a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	4a69      	ldr	r2, [pc, #420]	; (8004670 <I2C_Slave_STOPF+0x258>)
 80044cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fb5c 	bl	8002b90 <HAL_DMA_Abort_IT>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d03d      	beq.n	800455a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044e8:	4610      	mov	r0, r2
 80044ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ec:	e035      	b.n	800455a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0204 	orr.w	r2, r3, #4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004520:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fcde 	bl	8002ee8 <HAL_DMA_GetState>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d014      	beq.n	800455c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004536:	4a4e      	ldr	r2, [pc, #312]	; (8004670 <I2C_Slave_STOPF+0x258>)
 8004538:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fb26 	bl	8002b90 <HAL_DMA_Abort_IT>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004554:	4610      	mov	r0, r2
 8004556:	4798      	blx	r3
 8004558:	e000      	b.n	800455c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800455a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d03e      	beq.n	80045e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d112      	bne.n	800459a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d112      	bne.n	80045ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f043 0204 	orr.w	r2, r3, #4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f843 	bl	8004678 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80045f2:	e039      	b.n	8004668 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b2a      	cmp	r3, #42	; 0x2a
 80045f8:	d109      	bne.n	800460e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2228      	movs	r2, #40	; 0x28
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff f888 	bl	800371e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b28      	cmp	r3, #40	; 0x28
 8004618:	d111      	bne.n	800463e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a15      	ldr	r2, [pc, #84]	; (8004674 <I2C_Slave_STOPF+0x25c>)
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff f889 	bl	800374e <HAL_I2C_ListenCpltCallback>
}
 800463c:	e014      	b.n	8004668 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	2b22      	cmp	r3, #34	; 0x22
 8004644:	d002      	beq.n	800464c <I2C_Slave_STOPF+0x234>
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	2b22      	cmp	r3, #34	; 0x22
 800464a:	d10d      	bne.n	8004668 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff f85b 	bl	800371e <HAL_I2C_SlaveRxCpltCallback>
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	080048d5 	.word	0x080048d5
 8004674:	ffff0000 	.word	0xffff0000

08004678 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004686:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b10      	cmp	r3, #16
 8004692:	d10a      	bne.n	80046aa <I2C_ITError+0x32>
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b22      	cmp	r3, #34	; 0x22
 8004698:	d107      	bne.n	80046aa <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046b0:	2b28      	cmp	r3, #40	; 0x28
 80046b2:	d107      	bne.n	80046c4 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2228      	movs	r2, #40	; 0x28
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046c2:	e015      	b.n	80046f0 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d2:	d006      	beq.n	80046e2 <I2C_ITError+0x6a>
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b60      	cmp	r3, #96	; 0x60
 80046d8:	d003      	beq.n	80046e2 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fe:	d162      	bne.n	80047c6 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800470e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d020      	beq.n	8004760 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	4a6a      	ldr	r2, [pc, #424]	; (80048cc <I2C_ITError+0x254>)
 8004724:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe fa30 	bl	8002b90 <HAL_DMA_Abort_IT>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8089 	beq.w	800484a <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800475a:	4610      	mov	r0, r2
 800475c:	4798      	blx	r3
 800475e:	e074      	b.n	800484a <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	4a59      	ldr	r2, [pc, #356]	; (80048cc <I2C_ITError+0x254>)
 8004766:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	4618      	mov	r0, r3
 800476e:	f7fe fa0f 	bl	8002b90 <HAL_DMA_Abort_IT>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d068      	beq.n	800484a <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	d10b      	bne.n	800479e <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047c0:	4610      	mov	r0, r2
 80047c2:	4798      	blx	r3
 80047c4:	e041      	b.n	800484a <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b60      	cmp	r3, #96	; 0x60
 80047d0:	d125      	bne.n	800481e <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d10b      	bne.n	8004806 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fe ffc1 	bl	800379e <HAL_I2C_AbortCpltCallback>
 800481c:	e015      	b.n	800484a <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	d10b      	bne.n	8004844 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fe ffa0 	bl	800378a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10e      	bne.n	8004878 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004886:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b04      	cmp	r3, #4
 800489a:	d113      	bne.n	80048c4 <I2C_ITError+0x24c>
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b28      	cmp	r3, #40	; 0x28
 80048a0:	d110      	bne.n	80048c4 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <I2C_ITError+0x258>)
 80048a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fe ff45 	bl	800374e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	080048d5 	.word	0x080048d5
 80048d0:	ffff0000 	.word	0xffff0000

080048d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f6:	2200      	movs	r2, #0
 80048f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	2200      	movs	r2, #0
 8004908:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004918:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492c:	2200      	movs	r2, #0
 800492e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	2200      	movs	r2, #0
 800493e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0201 	bic.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b60      	cmp	r3, #96	; 0x60
 800495a:	d10e      	bne.n	800497a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7fe ff13 	bl	800379e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004978:	e027      	b.n	80049ca <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800497a:	7afb      	ldrb	r3, [r7, #11]
 800497c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004980:	2b28      	cmp	r3, #40	; 0x28
 8004982:	d117      	bne.n	80049b4 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2228      	movs	r2, #40	; 0x28
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049b2:	e007      	b.n	80049c4 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f7fe fee0 	bl	800378a <HAL_I2C_ErrorCallback>
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80049e2:	d103      	bne.n	80049ec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80049ea:	e007      	b.n	80049fc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80049f4:	d102      	bne.n	80049fc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2208      	movs	r2, #8
 80049fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6413      	str	r3, [r2, #64]	; 0x40
 8004a22:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <HAL_PWREx_EnableOverDrive+0x94>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a34:	f7fd fe88 	bl	8002748 <HAL_GetTick>
 8004a38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a3a:	e009      	b.n	8004a50 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a3c:	f7fd fe84 	bl	8002748 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a4a:	d901      	bls.n	8004a50 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e01f      	b.n	8004a90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5c:	d1ee      	bne.n	8004a3c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a64:	f7fd fe70 	bl	8002748 <HAL_GetTick>
 8004a68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a6a:	e009      	b.n	8004a80 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a6c:	f7fd fe6c 	bl	8002748 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a7a:	d901      	bls.n	8004a80 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e007      	b.n	8004a90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a8c:	d1ee      	bne.n	8004a6c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	420e0040 	.word	0x420e0040
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	420e0044 	.word	0x420e0044

08004aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0cc      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004abc:	4b68      	ldr	r3, [pc, #416]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d90c      	bls.n	8004ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b65      	ldr	r3, [pc, #404]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b63      	ldr	r3, [pc, #396]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0b8      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d020      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004afc:	4b59      	ldr	r3, [pc, #356]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4a58      	ldr	r2, [pc, #352]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b14:	4b53      	ldr	r3, [pc, #332]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4a52      	ldr	r2, [pc, #328]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b20:	4b50      	ldr	r3, [pc, #320]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	494d      	ldr	r1, [pc, #308]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d044      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d107      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d119      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e07f      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b66:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e06f      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b76:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e067      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b86:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 0203 	bic.w	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4934      	ldr	r1, [pc, #208]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b98:	f7fd fdd6 	bl	8002748 <HAL_GetTick>
 8004b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba0:	f7fd fdd2 	bl	8002748 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e04f      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 020c 	and.w	r2, r3, #12
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d1eb      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d20c      	bcs.n	8004bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e032      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bfc:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4916      	ldr	r1, [pc, #88]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	490e      	ldr	r1, [pc, #56]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c2e:	f000 f855 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8004c32:	4601      	mov	r1, r0
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	4a0a      	ldr	r2, [pc, #40]	; (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004c40:	5cd3      	ldrb	r3, [r2, r3]
 8004c42:	fa21 f303 	lsr.w	r3, r1, r3
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c4a:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd fd36 	bl	80026c0 <HAL_InitTick>

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40023c00 	.word	0x40023c00
 8004c64:	40023800 	.word	0x40023800
 8004c68:	0800a7f4 	.word	0x0800a7f4
 8004c6c:	20000000 	.word	0x20000000
 8004c70:	20000030 	.word	0x20000030

08004c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000000 	.word	0x20000000

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c90:	f7ff fff0 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004c94:	4601      	mov	r1, r0
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4a03      	ldr	r2, [pc, #12]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca2:	5cd3      	ldrb	r3, [r2, r3]
 8004ca4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	0800a804 	.word	0x0800a804

08004cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cb8:	f7ff ffdc 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4601      	mov	r1, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0b5b      	lsrs	r3, r3, #13
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4a03      	ldr	r2, [pc, #12]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cca:	5cd3      	ldrb	r3, [r2, r3]
 8004ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	0800a804 	.word	0x0800a804

08004cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf6:	4bc6      	ldr	r3, [pc, #792]	; (8005010 <HAL_RCC_GetSysClockFreq+0x334>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	f200 817e 	bhi.w	8005000 <HAL_RCC_GetSysClockFreq+0x324>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <HAL_RCC_GetSysClockFreq+0x30>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08005001 	.word	0x08005001
 8004d14:	08005001 	.word	0x08005001
 8004d18:	08005001 	.word	0x08005001
 8004d1c:	08004d47 	.word	0x08004d47
 8004d20:	08005001 	.word	0x08005001
 8004d24:	08005001 	.word	0x08005001
 8004d28:	08005001 	.word	0x08005001
 8004d2c:	08004d4d 	.word	0x08004d4d
 8004d30:	08005001 	.word	0x08005001
 8004d34:	08005001 	.word	0x08005001
 8004d38:	08005001 	.word	0x08005001
 8004d3c:	08004ea9 	.word	0x08004ea9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d40:	4bb4      	ldr	r3, [pc, #720]	; (8005014 <HAL_RCC_GetSysClockFreq+0x338>)
 8004d42:	613b      	str	r3, [r7, #16]
       break;
 8004d44:	e15f      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d46:	4bb4      	ldr	r3, [pc, #720]	; (8005018 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004d48:	613b      	str	r3, [r7, #16]
      break;
 8004d4a:	e15c      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d4c:	4bb0      	ldr	r3, [pc, #704]	; (8005010 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d54:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d56:	4bae      	ldr	r3, [pc, #696]	; (8005010 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d04a      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d62:	4bab      	ldr	r3, [pc, #684]	; (8005010 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	f04f 0400 	mov.w	r4, #0
 8004d6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	ea03 0501 	and.w	r5, r3, r1
 8004d78:	ea04 0602 	and.w	r6, r4, r2
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4632      	mov	r2, r6
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	f04f 0400 	mov.w	r4, #0
 8004d88:	0154      	lsls	r4, r2, #5
 8004d8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d8e:	014b      	lsls	r3, r1, #5
 8004d90:	4619      	mov	r1, r3
 8004d92:	4622      	mov	r2, r4
 8004d94:	1b49      	subs	r1, r1, r5
 8004d96:	eb62 0206 	sbc.w	r2, r2, r6
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	f04f 0400 	mov.w	r4, #0
 8004da2:	0194      	lsls	r4, r2, #6
 8004da4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004da8:	018b      	lsls	r3, r1, #6
 8004daa:	1a5b      	subs	r3, r3, r1
 8004dac:	eb64 0402 	sbc.w	r4, r4, r2
 8004db0:	f04f 0100 	mov.w	r1, #0
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	00e2      	lsls	r2, r4, #3
 8004dba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dbe:	00d9      	lsls	r1, r3, #3
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4614      	mov	r4, r2
 8004dc4:	195b      	adds	r3, r3, r5
 8004dc6:	eb44 0406 	adc.w	r4, r4, r6
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	0262      	lsls	r2, r4, #9
 8004dd4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004dd8:	0259      	lsls	r1, r3, #9
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4614      	mov	r4, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	4621      	mov	r1, r4
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f04f 0400 	mov.w	r4, #0
 8004de8:	461a      	mov	r2, r3
 8004dea:	4623      	mov	r3, r4
 8004dec:	f7fb ff4c 	bl	8000c88 <__aeabi_uldivmod>
 8004df0:	4603      	mov	r3, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e049      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df8:	4b85      	ldr	r3, [pc, #532]	; (8005010 <HAL_RCC_GetSysClockFreq+0x334>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	f04f 0400 	mov.w	r4, #0
 8004e02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	ea03 0501 	and.w	r5, r3, r1
 8004e0e:	ea04 0602 	and.w	r6, r4, r2
 8004e12:	4629      	mov	r1, r5
 8004e14:	4632      	mov	r2, r6
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	f04f 0400 	mov.w	r4, #0
 8004e1e:	0154      	lsls	r4, r2, #5
 8004e20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e24:	014b      	lsls	r3, r1, #5
 8004e26:	4619      	mov	r1, r3
 8004e28:	4622      	mov	r2, r4
 8004e2a:	1b49      	subs	r1, r1, r5
 8004e2c:	eb62 0206 	sbc.w	r2, r2, r6
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	f04f 0400 	mov.w	r4, #0
 8004e38:	0194      	lsls	r4, r2, #6
 8004e3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e3e:	018b      	lsls	r3, r1, #6
 8004e40:	1a5b      	subs	r3, r3, r1
 8004e42:	eb64 0402 	sbc.w	r4, r4, r2
 8004e46:	f04f 0100 	mov.w	r1, #0
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	00e2      	lsls	r2, r4, #3
 8004e50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e54:	00d9      	lsls	r1, r3, #3
 8004e56:	460b      	mov	r3, r1
 8004e58:	4614      	mov	r4, r2
 8004e5a:	195b      	adds	r3, r3, r5
 8004e5c:	eb44 0406 	adc.w	r4, r4, r6
 8004e60:	f04f 0100 	mov.w	r1, #0
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	02a2      	lsls	r2, r4, #10
 8004e6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e6e:	0299      	lsls	r1, r3, #10
 8004e70:	460b      	mov	r3, r1
 8004e72:	4614      	mov	r4, r2
 8004e74:	4618      	mov	r0, r3
 8004e76:	4621      	mov	r1, r4
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f04f 0400 	mov.w	r4, #0
 8004e7e:	461a      	mov	r2, r3
 8004e80:	4623      	mov	r3, r4
 8004e82:	f7fb ff01 	bl	8000c88 <__aeabi_uldivmod>
 8004e86:	4603      	mov	r3, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e8c:	4b60      	ldr	r3, [pc, #384]	; (8005010 <HAL_RCC_GetSysClockFreq+0x334>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	3301      	adds	r3, #1
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	613b      	str	r3, [r7, #16]
      break;
 8004ea6:	e0ae      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ea8:	4b59      	ldr	r3, [pc, #356]	; (8005010 <HAL_RCC_GetSysClockFreq+0x334>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eb0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eb2:	4b57      	ldr	r3, [pc, #348]	; (8005010 <HAL_RCC_GetSysClockFreq+0x334>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d04a      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ebe:	4b54      	ldr	r3, [pc, #336]	; (8005010 <HAL_RCC_GetSysClockFreq+0x334>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	099b      	lsrs	r3, r3, #6
 8004ec4:	f04f 0400 	mov.w	r4, #0
 8004ec8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	ea03 0501 	and.w	r5, r3, r1
 8004ed4:	ea04 0602 	and.w	r6, r4, r2
 8004ed8:	4629      	mov	r1, r5
 8004eda:	4632      	mov	r2, r6
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	f04f 0400 	mov.w	r4, #0
 8004ee4:	0154      	lsls	r4, r2, #5
 8004ee6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004eea:	014b      	lsls	r3, r1, #5
 8004eec:	4619      	mov	r1, r3
 8004eee:	4622      	mov	r2, r4
 8004ef0:	1b49      	subs	r1, r1, r5
 8004ef2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	f04f 0400 	mov.w	r4, #0
 8004efe:	0194      	lsls	r4, r2, #6
 8004f00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f04:	018b      	lsls	r3, r1, #6
 8004f06:	1a5b      	subs	r3, r3, r1
 8004f08:	eb64 0402 	sbc.w	r4, r4, r2
 8004f0c:	f04f 0100 	mov.w	r1, #0
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	00e2      	lsls	r2, r4, #3
 8004f16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f1a:	00d9      	lsls	r1, r3, #3
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4614      	mov	r4, r2
 8004f20:	195b      	adds	r3, r3, r5
 8004f22:	eb44 0406 	adc.w	r4, r4, r6
 8004f26:	f04f 0100 	mov.w	r1, #0
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	0262      	lsls	r2, r4, #9
 8004f30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004f34:	0259      	lsls	r1, r3, #9
 8004f36:	460b      	mov	r3, r1
 8004f38:	4614      	mov	r4, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f04f 0400 	mov.w	r4, #0
 8004f44:	461a      	mov	r2, r3
 8004f46:	4623      	mov	r3, r4
 8004f48:	f7fb fe9e 	bl	8000c88 <__aeabi_uldivmod>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e049      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f54:	4b2e      	ldr	r3, [pc, #184]	; (8005010 <HAL_RCC_GetSysClockFreq+0x334>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	099b      	lsrs	r3, r3, #6
 8004f5a:	f04f 0400 	mov.w	r4, #0
 8004f5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	ea03 0501 	and.w	r5, r3, r1
 8004f6a:	ea04 0602 	and.w	r6, r4, r2
 8004f6e:	4629      	mov	r1, r5
 8004f70:	4632      	mov	r2, r6
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	f04f 0400 	mov.w	r4, #0
 8004f7a:	0154      	lsls	r4, r2, #5
 8004f7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f80:	014b      	lsls	r3, r1, #5
 8004f82:	4619      	mov	r1, r3
 8004f84:	4622      	mov	r2, r4
 8004f86:	1b49      	subs	r1, r1, r5
 8004f88:	eb62 0206 	sbc.w	r2, r2, r6
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	f04f 0400 	mov.w	r4, #0
 8004f94:	0194      	lsls	r4, r2, #6
 8004f96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f9a:	018b      	lsls	r3, r1, #6
 8004f9c:	1a5b      	subs	r3, r3, r1
 8004f9e:	eb64 0402 	sbc.w	r4, r4, r2
 8004fa2:	f04f 0100 	mov.w	r1, #0
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	00e2      	lsls	r2, r4, #3
 8004fac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fb0:	00d9      	lsls	r1, r3, #3
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	195b      	adds	r3, r3, r5
 8004fb8:	eb44 0406 	adc.w	r4, r4, r6
 8004fbc:	f04f 0100 	mov.w	r1, #0
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	02a2      	lsls	r2, r4, #10
 8004fc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004fca:	0299      	lsls	r1, r3, #10
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4614      	mov	r4, r2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f04f 0400 	mov.w	r4, #0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4623      	mov	r3, r4
 8004fde:	f7fb fe53 	bl	8000c88 <__aeabi_uldivmod>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004fe8:	4b09      	ldr	r3, [pc, #36]	; (8005010 <HAL_RCC_GetSysClockFreq+0x334>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	0f1b      	lsrs	r3, r3, #28
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	613b      	str	r3, [r7, #16]
      break;
 8004ffe:	e002      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <HAL_RCC_GetSysClockFreq+0x338>)
 8005002:	613b      	str	r3, [r7, #16]
      break;
 8005004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005006:	693b      	ldr	r3, [r7, #16]
}
 8005008:	4618      	mov	r0, r3
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005010:	40023800 	.word	0x40023800
 8005014:	00f42400 	.word	0x00f42400
 8005018:	007a1200 	.word	0x007a1200

0800501c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8083 	beq.w	800513c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005036:	4b95      	ldr	r3, [pc, #596]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
 800503e:	2b04      	cmp	r3, #4
 8005040:	d019      	beq.n	8005076 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005042:	4b92      	ldr	r3, [pc, #584]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800504a:	2b08      	cmp	r3, #8
 800504c:	d106      	bne.n	800505c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800504e:	4b8f      	ldr	r3, [pc, #572]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800505a:	d00c      	beq.n	8005076 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800505c:	4b8b      	ldr	r3, [pc, #556]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005064:	2b0c      	cmp	r3, #12
 8005066:	d112      	bne.n	800508e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005068:	4b88      	ldr	r3, [pc, #544]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005074:	d10b      	bne.n	800508e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005076:	4b85      	ldr	r3, [pc, #532]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d05b      	beq.n	800513a <HAL_RCC_OscConfig+0x11e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d157      	bne.n	800513a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e216      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005096:	d106      	bne.n	80050a6 <HAL_RCC_OscConfig+0x8a>
 8005098:	4b7c      	ldr	r3, [pc, #496]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a7b      	ldr	r2, [pc, #492]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800509e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e01d      	b.n	80050e2 <HAL_RCC_OscConfig+0xc6>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050ae:	d10c      	bne.n	80050ca <HAL_RCC_OscConfig+0xae>
 80050b0:	4b76      	ldr	r3, [pc, #472]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a75      	ldr	r2, [pc, #468]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b73      	ldr	r3, [pc, #460]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a72      	ldr	r2, [pc, #456]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e00b      	b.n	80050e2 <HAL_RCC_OscConfig+0xc6>
 80050ca:	4b70      	ldr	r3, [pc, #448]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a6f      	ldr	r2, [pc, #444]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	4b6d      	ldr	r3, [pc, #436]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a6c      	ldr	r2, [pc, #432]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d013      	beq.n	8005112 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ea:	f7fd fb2d 	bl	8002748 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050f2:	f7fd fb29 	bl	8002748 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b64      	cmp	r3, #100	; 0x64
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e1db      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005104:	4b61      	ldr	r3, [pc, #388]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCC_OscConfig+0xd6>
 8005110:	e014      	b.n	800513c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005112:	f7fd fb19 	bl	8002748 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800511a:	f7fd fb15 	bl	8002748 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b64      	cmp	r3, #100	; 0x64
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e1c7      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800512c:	4b57      	ldr	r3, [pc, #348]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f0      	bne.n	800511a <HAL_RCC_OscConfig+0xfe>
 8005138:	e000      	b.n	800513c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800513a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d06f      	beq.n	8005228 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005148:	4b50      	ldr	r3, [pc, #320]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b00      	cmp	r3, #0
 8005152:	d017      	beq.n	8005184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005154:	4b4d      	ldr	r3, [pc, #308]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800515c:	2b08      	cmp	r3, #8
 800515e:	d105      	bne.n	800516c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005160:	4b4a      	ldr	r3, [pc, #296]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800516c:	4b47      	ldr	r3, [pc, #284]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005174:	2b0c      	cmp	r3, #12
 8005176:	d11c      	bne.n	80051b2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005178:	4b44      	ldr	r3, [pc, #272]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d116      	bne.n	80051b2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005184:	4b41      	ldr	r3, [pc, #260]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <HAL_RCC_OscConfig+0x180>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d001      	beq.n	800519c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e18f      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519c:	4b3b      	ldr	r3, [pc, #236]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4938      	ldr	r1, [pc, #224]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b0:	e03a      	b.n	8005228 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d020      	beq.n	80051fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ba:	4b35      	ldr	r3, [pc, #212]	; (8005290 <HAL_RCC_OscConfig+0x274>)
 80051bc:	2201      	movs	r2, #1
 80051be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fd fac2 	bl	8002748 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c8:	f7fd fabe 	bl	8002748 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e170      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051da:	4b2c      	ldr	r3, [pc, #176]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e6:	4b29      	ldr	r3, [pc, #164]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	4925      	ldr	r1, [pc, #148]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
 80051fa:	e015      	b.n	8005228 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051fc:	4b24      	ldr	r3, [pc, #144]	; (8005290 <HAL_RCC_OscConfig+0x274>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005202:	f7fd faa1 	bl	8002748 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800520a:	f7fd fa9d 	bl	8002748 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e14f      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f0      	bne.n	800520a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d037      	beq.n	80052a4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d016      	beq.n	800526a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800523c:	4b15      	ldr	r3, [pc, #84]	; (8005294 <HAL_RCC_OscConfig+0x278>)
 800523e:	2201      	movs	r2, #1
 8005240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005242:	f7fd fa81 	bl	8002748 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800524a:	f7fd fa7d 	bl	8002748 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e12f      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800525e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x22e>
 8005268:	e01c      	b.n	80052a4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800526a:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <HAL_RCC_OscConfig+0x278>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fd fa6a 	bl	8002748 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005276:	e00f      	b.n	8005298 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005278:	f7fd fa66 	bl	8002748 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d908      	bls.n	8005298 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e118      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
 800528a:	bf00      	nop
 800528c:	40023800 	.word	0x40023800
 8005290:	42470000 	.word	0x42470000
 8005294:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005298:	4b8a      	ldr	r3, [pc, #552]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 800529a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e9      	bne.n	8005278 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 8097 	beq.w	80053e0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b2:	2300      	movs	r3, #0
 80052b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052b6:	4b83      	ldr	r3, [pc, #524]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10f      	bne.n	80052e2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	4b7f      	ldr	r3, [pc, #508]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	4a7e      	ldr	r2, [pc, #504]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 80052cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d0:	6413      	str	r3, [r2, #64]	; 0x40
 80052d2:	4b7c      	ldr	r3, [pc, #496]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052de:	2301      	movs	r3, #1
 80052e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e2:	4b79      	ldr	r3, [pc, #484]	; (80054c8 <HAL_RCC_OscConfig+0x4ac>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d118      	bne.n	8005320 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ee:	4b76      	ldr	r3, [pc, #472]	; (80054c8 <HAL_RCC_OscConfig+0x4ac>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a75      	ldr	r2, [pc, #468]	; (80054c8 <HAL_RCC_OscConfig+0x4ac>)
 80052f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052fa:	f7fd fa25 	bl	8002748 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005302:	f7fd fa21 	bl	8002748 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e0d3      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005314:	4b6c      	ldr	r3, [pc, #432]	; (80054c8 <HAL_RCC_OscConfig+0x4ac>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d106      	bne.n	8005336 <HAL_RCC_OscConfig+0x31a>
 8005328:	4b66      	ldr	r3, [pc, #408]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	4a65      	ldr	r2, [pc, #404]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	6713      	str	r3, [r2, #112]	; 0x70
 8005334:	e01c      	b.n	8005370 <HAL_RCC_OscConfig+0x354>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b05      	cmp	r3, #5
 800533c:	d10c      	bne.n	8005358 <HAL_RCC_OscConfig+0x33c>
 800533e:	4b61      	ldr	r3, [pc, #388]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	4a60      	ldr	r2, [pc, #384]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 8005344:	f043 0304 	orr.w	r3, r3, #4
 8005348:	6713      	str	r3, [r2, #112]	; 0x70
 800534a:	4b5e      	ldr	r3, [pc, #376]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	4a5d      	ldr	r2, [pc, #372]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	6713      	str	r3, [r2, #112]	; 0x70
 8005356:	e00b      	b.n	8005370 <HAL_RCC_OscConfig+0x354>
 8005358:	4b5a      	ldr	r3, [pc, #360]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	4a59      	ldr	r2, [pc, #356]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	6713      	str	r3, [r2, #112]	; 0x70
 8005364:	4b57      	ldr	r3, [pc, #348]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 8005366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005368:	4a56      	ldr	r2, [pc, #344]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 800536a:	f023 0304 	bic.w	r3, r3, #4
 800536e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d015      	beq.n	80053a4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005378:	f7fd f9e6 	bl	8002748 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800537e:	e00a      	b.n	8005396 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005380:	f7fd f9e2 	bl	8002748 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e092      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005396:	4b4b      	ldr	r3, [pc, #300]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0ee      	beq.n	8005380 <HAL_RCC_OscConfig+0x364>
 80053a2:	e014      	b.n	80053ce <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a4:	f7fd f9d0 	bl	8002748 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053aa:	e00a      	b.n	80053c2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ac:	f7fd f9cc 	bl	8002748 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e07c      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c2:	4b40      	ldr	r3, [pc, #256]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ee      	bne.n	80053ac <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ce:	7dfb      	ldrb	r3, [r7, #23]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d105      	bne.n	80053e0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d4:	4b3b      	ldr	r3, [pc, #236]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	4a3a      	ldr	r2, [pc, #232]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 80053da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d068      	beq.n	80054ba <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053e8:	4b36      	ldr	r3, [pc, #216]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 030c 	and.w	r3, r3, #12
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d060      	beq.n	80054b6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d145      	bne.n	8005488 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fc:	4b33      	ldr	r3, [pc, #204]	; (80054cc <HAL_RCC_OscConfig+0x4b0>)
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fd f9a1 	bl	8002748 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800540a:	f7fd f99d 	bl	8002748 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e04f      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541c:	4b29      	ldr	r3, [pc, #164]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f0      	bne.n	800540a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	019b      	lsls	r3, r3, #6
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	3b01      	subs	r3, #1
 8005442:	041b      	lsls	r3, r3, #16
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	061b      	lsls	r3, r3, #24
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	071b      	lsls	r3, r3, #28
 8005454:	491b      	ldr	r1, [pc, #108]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 8005456:	4313      	orrs	r3, r2
 8005458:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800545a:	4b1c      	ldr	r3, [pc, #112]	; (80054cc <HAL_RCC_OscConfig+0x4b0>)
 800545c:	2201      	movs	r2, #1
 800545e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fd f972 	bl	8002748 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005468:	f7fd f96e 	bl	8002748 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e020      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x44c>
 8005486:	e018      	b.n	80054ba <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005488:	4b10      	ldr	r3, [pc, #64]	; (80054cc <HAL_RCC_OscConfig+0x4b0>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548e:	f7fd f95b 	bl	8002748 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005496:	f7fd f957 	bl	8002748 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e009      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_RCC_OscConfig+0x4a8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1f0      	bne.n	8005496 <HAL_RCC_OscConfig+0x47a>
 80054b4:	e001      	b.n	80054ba <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40007000 	.word	0x40007000
 80054cc:	42470060 	.word	0x42470060

080054d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e01d      	b.n	800551e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fc f8be 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3304      	adds	r3, #4
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f000 fc0e 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0201 	orr.w	r2, r2, #1
 800553c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b06      	cmp	r3, #6
 800554e:	d007      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e01d      	b.n	80055bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d106      	bne.n	800559a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fc f84d 	bl	8001634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4619      	mov	r1, r3
 80055ac:	4610      	mov	r0, r2
 80055ae:	f000 fbbf 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2201      	movs	r2, #1
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fe94 	bl	8006304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a15      	ldr	r2, [pc, #84]	; (8005638 <HAL_TIM_PWM_Start+0x74>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <HAL_TIM_PWM_Start+0x2c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a14      	ldr	r2, [pc, #80]	; (800563c <HAL_TIM_PWM_Start+0x78>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d101      	bne.n	80055f4 <HAL_TIM_PWM_Start+0x30>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <HAL_TIM_PWM_Start+0x32>
 80055f4:	2300      	movs	r3, #0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b06      	cmp	r3, #6
 800561a:	d007      	beq.n	800562c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40010000 	.word	0x40010000
 800563c:	40010400 	.word	0x40010400

08005640 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e083      	b.n	800575c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d106      	bne.n	800566e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fc f82b 	bl	80016c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2202      	movs	r2, #2
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005684:	f023 0307 	bic.w	r3, r3, #7
 8005688:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3304      	adds	r3, #4
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f000 fb4b 	bl	8005d30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c2:	f023 0303 	bic.w	r3, r3, #3
 80056c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	021b      	lsls	r3, r3, #8
 80056d2:	4313      	orrs	r3, r2
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80056e0:	f023 030c 	bic.w	r3, r3, #12
 80056e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	4313      	orrs	r3, r2
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	011a      	lsls	r2, r3, #4
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	031b      	lsls	r3, r3, #12
 8005710:	4313      	orrs	r3, r2
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005726:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	4313      	orrs	r3, r2
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_TIM_Encoder_Start+0x16>
 8005774:	2b04      	cmp	r3, #4
 8005776:	d008      	beq.n	800578a <HAL_TIM_Encoder_Start+0x26>
 8005778:	e00f      	b.n	800579a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2201      	movs	r2, #1
 8005780:	2100      	movs	r1, #0
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fdbe 	bl	8006304 <TIM_CCxChannelCmd>
      break;
 8005788:	e016      	b.n	80057b8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2201      	movs	r2, #1
 8005790:	2104      	movs	r1, #4
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fdb6 	bl	8006304 <TIM_CCxChannelCmd>
      break;
 8005798:	e00e      	b.n	80057b8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2201      	movs	r2, #1
 80057a0:	2100      	movs	r1, #0
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fdae 	bl	8006304 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2201      	movs	r2, #1
 80057ae:	2104      	movs	r1, #4
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fda7 	bl	8006304 <TIM_CCxChannelCmd>
      break;
 80057b6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d122      	bne.n	800582e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d11b      	bne.n	800582e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f06f 0202 	mvn.w	r2, #2
 80057fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fa6c 	bl	8005cf2 <HAL_TIM_IC_CaptureCallback>
 800581a:	e005      	b.n	8005828 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fa5e 	bl	8005cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa6f 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b04      	cmp	r3, #4
 800583a:	d122      	bne.n	8005882 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b04      	cmp	r3, #4
 8005848:	d11b      	bne.n	8005882 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f06f 0204 	mvn.w	r2, #4
 8005852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fa42 	bl	8005cf2 <HAL_TIM_IC_CaptureCallback>
 800586e:	e005      	b.n	800587c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fa34 	bl	8005cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fa45 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b08      	cmp	r3, #8
 800588e:	d122      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b08      	cmp	r3, #8
 800589c:	d11b      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f06f 0208 	mvn.w	r2, #8
 80058a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2204      	movs	r2, #4
 80058ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fa18 	bl	8005cf2 <HAL_TIM_IC_CaptureCallback>
 80058c2:	e005      	b.n	80058d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fa0a 	bl	8005cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fa1b 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d122      	bne.n	800592a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d11b      	bne.n	800592a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f06f 0210 	mvn.w	r2, #16
 80058fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2208      	movs	r2, #8
 8005900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f9ee 	bl	8005cf2 <HAL_TIM_IC_CaptureCallback>
 8005916:	e005      	b.n	8005924 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f9e0 	bl	8005cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f9f1 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b01      	cmp	r3, #1
 8005936:	d10e      	bne.n	8005956 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d107      	bne.n	8005956 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f06f 0201 	mvn.w	r2, #1
 800594e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7fc fe55 	bl	8002600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005960:	2b80      	cmp	r3, #128	; 0x80
 8005962:	d10e      	bne.n	8005982 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d107      	bne.n	8005982 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800597a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fdbf 	bl	8006500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d10e      	bne.n	80059ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d107      	bne.n	80059ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f9b6 	bl	8005d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d10e      	bne.n	80059da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d107      	bne.n	80059da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f06f 0220 	mvn.w	r2, #32
 80059d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fd89 	bl	80064ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e0b4      	b.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x184>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b0c      	cmp	r3, #12
 8005a12:	f200 809f 	bhi.w	8005b54 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005a16:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005a51 	.word	0x08005a51
 8005a20:	08005b55 	.word	0x08005b55
 8005a24:	08005b55 	.word	0x08005b55
 8005a28:	08005b55 	.word	0x08005b55
 8005a2c:	08005a91 	.word	0x08005a91
 8005a30:	08005b55 	.word	0x08005b55
 8005a34:	08005b55 	.word	0x08005b55
 8005a38:	08005b55 	.word	0x08005b55
 8005a3c:	08005ad3 	.word	0x08005ad3
 8005a40:	08005b55 	.word	0x08005b55
 8005a44:	08005b55 	.word	0x08005b55
 8005a48:	08005b55 	.word	0x08005b55
 8005a4c:	08005b13 	.word	0x08005b13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fa0a 	bl	8005e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0208 	orr.w	r2, r2, #8
 8005a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0204 	bic.w	r2, r2, #4
 8005a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6999      	ldr	r1, [r3, #24]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	619a      	str	r2, [r3, #24]
      break;
 8005a8e:	e062      	b.n	8005b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fa5a 	bl	8005f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	021a      	lsls	r2, r3, #8
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	619a      	str	r2, [r3, #24]
      break;
 8005ad0:	e041      	b.n	8005b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 faaf 	bl	800603c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0208 	orr.w	r2, r2, #8
 8005aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0204 	bic.w	r2, r2, #4
 8005afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69d9      	ldr	r1, [r3, #28]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	61da      	str	r2, [r3, #28]
      break;
 8005b10:	e021      	b.n	8005b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fb03 	bl	8006124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69d9      	ldr	r1, [r3, #28]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	021a      	lsls	r2, r3, #8
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	61da      	str	r2, [r3, #28]
      break;
 8005b52:	e000      	b.n	8005b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005b54:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_TIM_ConfigClockSource+0x18>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e0a6      	b.n	8005cd6 <HAL_TIM_ConfigClockSource+0x166>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ba6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b40      	cmp	r3, #64	; 0x40
 8005bbe:	d067      	beq.n	8005c90 <HAL_TIM_ConfigClockSource+0x120>
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d80b      	bhi.n	8005bdc <HAL_TIM_ConfigClockSource+0x6c>
 8005bc4:	2b10      	cmp	r3, #16
 8005bc6:	d073      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x140>
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d802      	bhi.n	8005bd2 <HAL_TIM_ConfigClockSource+0x62>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d06f      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005bd0:	e078      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d06c      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x140>
 8005bd6:	2b30      	cmp	r3, #48	; 0x30
 8005bd8:	d06a      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005bda:	e073      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bdc:	2b70      	cmp	r3, #112	; 0x70
 8005bde:	d00d      	beq.n	8005bfc <HAL_TIM_ConfigClockSource+0x8c>
 8005be0:	2b70      	cmp	r3, #112	; 0x70
 8005be2:	d804      	bhi.n	8005bee <HAL_TIM_ConfigClockSource+0x7e>
 8005be4:	2b50      	cmp	r3, #80	; 0x50
 8005be6:	d033      	beq.n	8005c50 <HAL_TIM_ConfigClockSource+0xe0>
 8005be8:	2b60      	cmp	r3, #96	; 0x60
 8005bea:	d041      	beq.n	8005c70 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005bec:	e06a      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf2:	d066      	beq.n	8005cc2 <HAL_TIM_ConfigClockSource+0x152>
 8005bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf8:	d017      	beq.n	8005c2a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005bfa:	e063      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	6899      	ldr	r1, [r3, #8]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f000 fb5a 	bl	80062c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c1e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]
      break;
 8005c28:	e04c      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6899      	ldr	r1, [r3, #8]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f000 fb43 	bl	80062c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c4c:	609a      	str	r2, [r3, #8]
      break;
 8005c4e:	e039      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	6859      	ldr	r1, [r3, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f000 fab7 	bl	80061d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2150      	movs	r1, #80	; 0x50
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fb10 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005c6e:	e029      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	6859      	ldr	r1, [r3, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f000 fad6 	bl	800622e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2160      	movs	r1, #96	; 0x60
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fb00 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005c8e:	e019      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f000 fa97 	bl	80061d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2140      	movs	r1, #64	; 0x40
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 faf0 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005cae:	e009      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	f000 fae7 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005cc0:	e000      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
	...

08005d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a40      	ldr	r2, [pc, #256]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4e:	d00f      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a3d      	ldr	r2, [pc, #244]	; (8005e48 <TIM_Base_SetConfig+0x118>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3c      	ldr	r2, [pc, #240]	; (8005e4c <TIM_Base_SetConfig+0x11c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a3b      	ldr	r2, [pc, #236]	; (8005e50 <TIM_Base_SetConfig+0x120>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a3a      	ldr	r2, [pc, #232]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2f      	ldr	r2, [pc, #188]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d02b      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d90:	d027      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2c      	ldr	r2, [pc, #176]	; (8005e48 <TIM_Base_SetConfig+0x118>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d023      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2b      	ldr	r2, [pc, #172]	; (8005e4c <TIM_Base_SetConfig+0x11c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01f      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2a      	ldr	r2, [pc, #168]	; (8005e50 <TIM_Base_SetConfig+0x120>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01b      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a29      	ldr	r2, [pc, #164]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d017      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <TIM_Base_SetConfig+0x128>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a27      	ldr	r2, [pc, #156]	; (8005e5c <TIM_Base_SetConfig+0x12c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00f      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a26      	ldr	r2, [pc, #152]	; (8005e60 <TIM_Base_SetConfig+0x130>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00b      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a25      	ldr	r2, [pc, #148]	; (8005e64 <TIM_Base_SetConfig+0x134>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a24      	ldr	r2, [pc, #144]	; (8005e68 <TIM_Base_SetConfig+0x138>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a23      	ldr	r2, [pc, #140]	; (8005e6c <TIM_Base_SetConfig+0x13c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d108      	bne.n	8005df4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_Base_SetConfig+0xf8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a0c      	ldr	r2, [pc, #48]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d103      	bne.n	8005e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	615a      	str	r2, [r3, #20]
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40010000 	.word	0x40010000
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00
 8005e54:	40010400 	.word	0x40010400
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40014400 	.word	0x40014400
 8005e60:	40014800 	.word	0x40014800
 8005e64:	40001800 	.word	0x40001800
 8005e68:	40001c00 	.word	0x40001c00
 8005e6c:	40002000 	.word	0x40002000

08005e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f023 0201 	bic.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0303 	bic.w	r3, r3, #3
 8005ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f023 0302 	bic.w	r3, r3, #2
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a20      	ldr	r2, [pc, #128]	; (8005f48 <TIM_OC1_SetConfig+0xd8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_OC1_SetConfig+0x64>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <TIM_OC1_SetConfig+0xdc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d10c      	bne.n	8005eee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0308 	bic.w	r3, r3, #8
 8005eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 0304 	bic.w	r3, r3, #4
 8005eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <TIM_OC1_SetConfig+0xd8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d003      	beq.n	8005efe <TIM_OC1_SetConfig+0x8e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a14      	ldr	r2, [pc, #80]	; (8005f4c <TIM_OC1_SetConfig+0xdc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d111      	bne.n	8005f22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	621a      	str	r2, [r3, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40010400 	.word	0x40010400

08005f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f023 0210 	bic.w	r2, r3, #16
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0320 	bic.w	r3, r3, #32
 8005f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a22      	ldr	r2, [pc, #136]	; (8006034 <TIM_OC2_SetConfig+0xe4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d003      	beq.n	8005fb8 <TIM_OC2_SetConfig+0x68>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a21      	ldr	r2, [pc, #132]	; (8006038 <TIM_OC2_SetConfig+0xe8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d10d      	bne.n	8005fd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a17      	ldr	r2, [pc, #92]	; (8006034 <TIM_OC2_SetConfig+0xe4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_OC2_SetConfig+0x94>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a16      	ldr	r2, [pc, #88]	; (8006038 <TIM_OC2_SetConfig+0xe8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d113      	bne.n	800600c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40010000 	.word	0x40010000
 8006038:	40010400 	.word	0x40010400

0800603c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0303 	bic.w	r3, r3, #3
 8006072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a21      	ldr	r2, [pc, #132]	; (800611c <TIM_OC3_SetConfig+0xe0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_OC3_SetConfig+0x66>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a20      	ldr	r2, [pc, #128]	; (8006120 <TIM_OC3_SetConfig+0xe4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d10d      	bne.n	80060be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a16      	ldr	r2, [pc, #88]	; (800611c <TIM_OC3_SetConfig+0xe0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_OC3_SetConfig+0x92>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a15      	ldr	r2, [pc, #84]	; (8006120 <TIM_OC3_SetConfig+0xe4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d113      	bne.n	80060f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	621a      	str	r2, [r3, #32]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	40010000 	.word	0x40010000
 8006120:	40010400 	.word	0x40010400

08006124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800616e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	031b      	lsls	r3, r3, #12
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a12      	ldr	r2, [pc, #72]	; (80061c8 <TIM_OC4_SetConfig+0xa4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_OC4_SetConfig+0x68>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a11      	ldr	r2, [pc, #68]	; (80061cc <TIM_OC4_SetConfig+0xa8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d109      	bne.n	80061a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	019b      	lsls	r3, r3, #6
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40010400 	.word	0x40010400

080061d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f023 0201 	bic.w	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f023 030a 	bic.w	r3, r3, #10
 800620c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800622e:	b480      	push	{r7}
 8006230:	b087      	sub	sp, #28
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f023 0210 	bic.w	r2, r3, #16
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	031b      	lsls	r3, r3, #12
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800626a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f043 0307 	orr.w	r3, r3, #7
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	021a      	lsls	r2, r3, #8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	609a      	str	r2, [r3, #8]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	2201      	movs	r2, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a1a      	ldr	r2, [r3, #32]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	43db      	mvns	r3, r3
 8006326:	401a      	ands	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	fa01 f303 	lsl.w	r3, r1, r3
 800633c:	431a      	orrs	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e05a      	b.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a21      	ldr	r2, [pc, #132]	; (800642c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d022      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b4:	d01d      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1d      	ldr	r2, [pc, #116]	; (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d018      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a1b      	ldr	r2, [pc, #108]	; (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00e      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a18      	ldr	r2, [pc, #96]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d009      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a17      	ldr	r2, [pc, #92]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a15      	ldr	r2, [pc, #84]	; (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d10c      	bne.n	800640c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	4313      	orrs	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40010400 	.word	0x40010400
 8006440:	40014000 	.word	0x40014000
 8006444:	40001800 	.word	0x40001800

08006448 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006460:	2302      	movs	r3, #2
 8006462:	e03d      	b.n	80064e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e03f      	b.n	80065a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fb f97a 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2224      	movs	r2, #36	; 0x24
 8006544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fb6b 	bl	8006c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800656c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695a      	ldr	r2, [r3, #20]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800657c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800658c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d153      	bne.n	8006672 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_UART_Transmit_DMA+0x26>
 80065d0:	88fb      	ldrh	r3, [r7, #6]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e04c      	b.n	8006674 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_UART_Transmit_DMA+0x38>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e045      	b.n	8006674 <HAL_UART_Transmit_DMA+0xc4>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	88fa      	ldrh	r2, [r7, #6]
 80065fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	88fa      	ldrh	r2, [r7, #6]
 8006600:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2221      	movs	r2, #33	; 0x21
 800660c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	4a19      	ldr	r2, [pc, #100]	; (800667c <HAL_UART_Transmit_DMA+0xcc>)
 8006616:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	4a18      	ldr	r2, [pc, #96]	; (8006680 <HAL_UART_Transmit_DMA+0xd0>)
 800661e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	4a17      	ldr	r2, [pc, #92]	; (8006684 <HAL_UART_Transmit_DMA+0xd4>)
 8006626:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	2200      	movs	r2, #0
 800662e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006630:	f107 0308 	add.w	r3, r7, #8
 8006634:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	6819      	ldr	r1, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3304      	adds	r3, #4
 8006644:	461a      	mov	r2, r3
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	f7fc fa4a 	bl	8002ae0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006654:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695a      	ldr	r2, [r3, #20]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800666c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	e000      	b.n	8006674 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006672:	2302      	movs	r3, #2
  }
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	080068c5 	.word	0x080068c5
 8006680:	08006917 	.word	0x08006917
 8006684:	08006933 	.word	0x08006933

08006688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10d      	bne.n	80066da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_UART_IRQHandler+0x52>
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa2d 	bl	8006b32 <UART_Receive_IT>
      return;
 80066d8:	e0d1      	b.n	800687e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80b0 	beq.w	8006842 <HAL_UART_IRQHandler+0x1ba>
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d105      	bne.n	80066f8 <HAL_UART_IRQHandler+0x70>
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 80a5 	beq.w	8006842 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <HAL_UART_IRQHandler+0x90>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006710:	f043 0201 	orr.w	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f003 0304 	and.w	r3, r3, #4
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <HAL_UART_IRQHandler+0xb0>
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006730:	f043 0202 	orr.w	r2, r3, #2
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <HAL_UART_IRQHandler+0xd0>
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006750:	f043 0204 	orr.w	r2, r3, #4
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00f      	beq.n	8006782 <HAL_UART_IRQHandler+0xfa>
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d104      	bne.n	8006776 <HAL_UART_IRQHandler+0xee>
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	f043 0208 	orr.w	r2, r3, #8
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d078      	beq.n	800687c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <HAL_UART_IRQHandler+0x11c>
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f9c7 	bl	8006b32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	bf0c      	ite	eq
 80067b2:	2301      	moveq	r3, #1
 80067b4:	2300      	movne	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d102      	bne.n	80067cc <HAL_UART_IRQHandler+0x144>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d031      	beq.n	8006830 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f910 	bl	80069f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d123      	bne.n	8006828 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695a      	ldr	r2, [r3, #20]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d013      	beq.n	8006820 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fc:	4a21      	ldr	r2, [pc, #132]	; (8006884 <HAL_UART_IRQHandler+0x1fc>)
 80067fe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006804:	4618      	mov	r0, r3
 8006806:	f7fc f9c3 	bl	8002b90 <HAL_DMA_Abort_IT>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d016      	beq.n	800683e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800681a:	4610      	mov	r0, r2
 800681c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681e:	e00e      	b.n	800683e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f845 	bl	80068b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006826:	e00a      	b.n	800683e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f841 	bl	80068b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682e:	e006      	b.n	800683e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f83d 	bl	80068b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800683c:	e01e      	b.n	800687c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683e:	bf00      	nop
    return;
 8006840:	e01c      	b.n	800687c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_UART_IRQHandler+0x1d6>
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f8fd 	bl	8006a56 <UART_Transmit_IT>
    return;
 800685c:	e00f      	b.n	800687e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <HAL_UART_IRQHandler+0x1f6>
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f945 	bl	8006b02 <UART_EndTransmit_IT>
    return;
 8006878:	bf00      	nop
 800687a:	e000      	b.n	800687e <HAL_UART_IRQHandler+0x1f6>
    return;
 800687c:	bf00      	nop
  }
}
 800687e:	3720      	adds	r7, #32
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	08006a2f 	.word	0x08006a2f

08006888 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d113      	bne.n	8006908 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695a      	ldr	r2, [r3, #20]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068f4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006904:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006906:	e002      	b.n	800690e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7fb fa49 	bl	8001da0 <HAL_UART_TxCpltCallback>
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff ffaf 	bl	8006888 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b80      	cmp	r3, #128	; 0x80
 8006950:	bf0c      	ite	eq
 8006952:	2301      	moveq	r3, #1
 8006954:	2300      	movne	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b21      	cmp	r3, #33	; 0x21
 8006964:	d108      	bne.n	8006978 <UART_DMAError+0x46>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2200      	movs	r2, #0
 8006970:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006972:	68b8      	ldr	r0, [r7, #8]
 8006974:	f000 f827 	bl	80069c6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	bf0c      	ite	eq
 8006986:	2301      	moveq	r3, #1
 8006988:	2300      	movne	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b22      	cmp	r3, #34	; 0x22
 8006998:	d108      	bne.n	80069ac <UART_DMAError+0x7a>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2200      	movs	r2, #0
 80069a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80069a6:	68b8      	ldr	r0, [r7, #8]
 80069a8:	f000 f823 	bl	80069f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b0:	f043 0210 	orr.w	r2, r3, #16
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069b8:	68b8      	ldr	r0, [r7, #8]
 80069ba:	f7ff ff79 	bl	80068b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069be:	bf00      	nop
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80069dc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a08:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695a      	ldr	r2, [r3, #20]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0201 	bic.w	r2, r2, #1
 8006a18:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f7ff ff31 	bl	80068b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a4e:	bf00      	nop
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b21      	cmp	r3, #33	; 0x21
 8006a68:	d144      	bne.n	8006af4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a72:	d11a      	bne.n	8006aaa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a88:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	1c9a      	adds	r2, r3, #2
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	621a      	str	r2, [r3, #32]
 8006a9c:	e00e      	b.n	8006abc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	621a      	str	r2, [r3, #32]
 8006aa8:	e008      	b.n	8006abc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	1c59      	adds	r1, r3, #1
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6211      	str	r1, [r2, #32]
 8006ab4:	781a      	ldrb	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10f      	bne.n	8006af0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ade:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e000      	b.n	8006af6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006af4:	2302      	movs	r3, #2
  }
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fb f93c 	bl	8001da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b22      	cmp	r3, #34	; 0x22
 8006b44:	d171      	bne.n	8006c2a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4e:	d123      	bne.n	8006b98 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10e      	bne.n	8006b7c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	1c9a      	adds	r2, r3, #2
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	629a      	str	r2, [r3, #40]	; 0x28
 8006b7a:	e029      	b.n	8006bd0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	629a      	str	r2, [r3, #40]	; 0x28
 8006b96:	e01b      	b.n	8006bd0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6858      	ldr	r0, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	1c59      	adds	r1, r3, #1
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6291      	str	r1, [r2, #40]	; 0x28
 8006bb0:	b2c2      	uxtb	r2, r0
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	e00c      	b.n	8006bd0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc2:	1c58      	adds	r0, r3, #1
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	6288      	str	r0, [r1, #40]	; 0x28
 8006bc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d120      	bne.n	8006c26 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0220 	bic.w	r2, r2, #32
 8006bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695a      	ldr	r2, [r3, #20]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0201 	bic.w	r2, r2, #1
 8006c12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff fe3d 	bl	800689c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e002      	b.n	8006c2c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e000      	b.n	8006c2c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006c2a:	2302      	movs	r3, #2
  }
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006c76:	f023 030c 	bic.w	r3, r3, #12
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	430b      	orrs	r3, r1
 8006c82:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca2:	f040 818b 	bne.w	8006fbc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4ac1      	ldr	r2, [pc, #772]	; (8006fb0 <UART_SetConfig+0x37c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d005      	beq.n	8006cbc <UART_SetConfig+0x88>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4abf      	ldr	r2, [pc, #764]	; (8006fb4 <UART_SetConfig+0x380>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	f040 80bd 	bne.w	8006e36 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cbc:	f7fd fffa 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 8006cc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	461d      	mov	r5, r3
 8006cc6:	f04f 0600 	mov.w	r6, #0
 8006cca:	46a8      	mov	r8, r5
 8006ccc:	46b1      	mov	r9, r6
 8006cce:	eb18 0308 	adds.w	r3, r8, r8
 8006cd2:	eb49 0409 	adc.w	r4, r9, r9
 8006cd6:	4698      	mov	r8, r3
 8006cd8:	46a1      	mov	r9, r4
 8006cda:	eb18 0805 	adds.w	r8, r8, r5
 8006cde:	eb49 0906 	adc.w	r9, r9, r6
 8006ce2:	f04f 0100 	mov.w	r1, #0
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cf2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cf6:	4688      	mov	r8, r1
 8006cf8:	4691      	mov	r9, r2
 8006cfa:	eb18 0005 	adds.w	r0, r8, r5
 8006cfe:	eb49 0106 	adc.w	r1, r9, r6
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	461d      	mov	r5, r3
 8006d08:	f04f 0600 	mov.w	r6, #0
 8006d0c:	196b      	adds	r3, r5, r5
 8006d0e:	eb46 0406 	adc.w	r4, r6, r6
 8006d12:	461a      	mov	r2, r3
 8006d14:	4623      	mov	r3, r4
 8006d16:	f7f9 ffb7 	bl	8000c88 <__aeabi_uldivmod>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4ba5      	ldr	r3, [pc, #660]	; (8006fb8 <UART_SetConfig+0x384>)
 8006d22:	fba3 2302 	umull	r2, r3, r3, r2
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	461d      	mov	r5, r3
 8006d30:	f04f 0600 	mov.w	r6, #0
 8006d34:	46a9      	mov	r9, r5
 8006d36:	46b2      	mov	sl, r6
 8006d38:	eb19 0309 	adds.w	r3, r9, r9
 8006d3c:	eb4a 040a 	adc.w	r4, sl, sl
 8006d40:	4699      	mov	r9, r3
 8006d42:	46a2      	mov	sl, r4
 8006d44:	eb19 0905 	adds.w	r9, r9, r5
 8006d48:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d4c:	f04f 0100 	mov.w	r1, #0
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d60:	4689      	mov	r9, r1
 8006d62:	4692      	mov	sl, r2
 8006d64:	eb19 0005 	adds.w	r0, r9, r5
 8006d68:	eb4a 0106 	adc.w	r1, sl, r6
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	461d      	mov	r5, r3
 8006d72:	f04f 0600 	mov.w	r6, #0
 8006d76:	196b      	adds	r3, r5, r5
 8006d78:	eb46 0406 	adc.w	r4, r6, r6
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4623      	mov	r3, r4
 8006d80:	f7f9 ff82 	bl	8000c88 <__aeabi_uldivmod>
 8006d84:	4603      	mov	r3, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4b8b      	ldr	r3, [pc, #556]	; (8006fb8 <UART_SetConfig+0x384>)
 8006d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	2164      	movs	r1, #100	; 0x64
 8006d94:	fb01 f303 	mul.w	r3, r1, r3
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	3332      	adds	r3, #50	; 0x32
 8006d9e:	4a86      	ldr	r2, [pc, #536]	; (8006fb8 <UART_SetConfig+0x384>)
 8006da0:	fba2 2303 	umull	r2, r3, r2, r3
 8006da4:	095b      	lsrs	r3, r3, #5
 8006da6:	005b      	lsls	r3, r3, #1
 8006da8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dac:	4498      	add	r8, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	461d      	mov	r5, r3
 8006db2:	f04f 0600 	mov.w	r6, #0
 8006db6:	46a9      	mov	r9, r5
 8006db8:	46b2      	mov	sl, r6
 8006dba:	eb19 0309 	adds.w	r3, r9, r9
 8006dbe:	eb4a 040a 	adc.w	r4, sl, sl
 8006dc2:	4699      	mov	r9, r3
 8006dc4:	46a2      	mov	sl, r4
 8006dc6:	eb19 0905 	adds.w	r9, r9, r5
 8006dca:	eb4a 0a06 	adc.w	sl, sl, r6
 8006dce:	f04f 0100 	mov.w	r1, #0
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006de2:	4689      	mov	r9, r1
 8006de4:	4692      	mov	sl, r2
 8006de6:	eb19 0005 	adds.w	r0, r9, r5
 8006dea:	eb4a 0106 	adc.w	r1, sl, r6
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	461d      	mov	r5, r3
 8006df4:	f04f 0600 	mov.w	r6, #0
 8006df8:	196b      	adds	r3, r5, r5
 8006dfa:	eb46 0406 	adc.w	r4, r6, r6
 8006dfe:	461a      	mov	r2, r3
 8006e00:	4623      	mov	r3, r4
 8006e02:	f7f9 ff41 	bl	8000c88 <__aeabi_uldivmod>
 8006e06:	4603      	mov	r3, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	4b6a      	ldr	r3, [pc, #424]	; (8006fb8 <UART_SetConfig+0x384>)
 8006e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	2164      	movs	r1, #100	; 0x64
 8006e16:	fb01 f303 	mul.w	r3, r1, r3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	3332      	adds	r3, #50	; 0x32
 8006e20:	4a65      	ldr	r2, [pc, #404]	; (8006fb8 <UART_SetConfig+0x384>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	095b      	lsrs	r3, r3, #5
 8006e28:	f003 0207 	and.w	r2, r3, #7
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4442      	add	r2, r8
 8006e32:	609a      	str	r2, [r3, #8]
 8006e34:	e26f      	b.n	8007316 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e36:	f7fd ff29 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8006e3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	461d      	mov	r5, r3
 8006e40:	f04f 0600 	mov.w	r6, #0
 8006e44:	46a8      	mov	r8, r5
 8006e46:	46b1      	mov	r9, r6
 8006e48:	eb18 0308 	adds.w	r3, r8, r8
 8006e4c:	eb49 0409 	adc.w	r4, r9, r9
 8006e50:	4698      	mov	r8, r3
 8006e52:	46a1      	mov	r9, r4
 8006e54:	eb18 0805 	adds.w	r8, r8, r5
 8006e58:	eb49 0906 	adc.w	r9, r9, r6
 8006e5c:	f04f 0100 	mov.w	r1, #0
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e70:	4688      	mov	r8, r1
 8006e72:	4691      	mov	r9, r2
 8006e74:	eb18 0005 	adds.w	r0, r8, r5
 8006e78:	eb49 0106 	adc.w	r1, r9, r6
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	461d      	mov	r5, r3
 8006e82:	f04f 0600 	mov.w	r6, #0
 8006e86:	196b      	adds	r3, r5, r5
 8006e88:	eb46 0406 	adc.w	r4, r6, r6
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4623      	mov	r3, r4
 8006e90:	f7f9 fefa 	bl	8000c88 <__aeabi_uldivmod>
 8006e94:	4603      	mov	r3, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4b47      	ldr	r3, [pc, #284]	; (8006fb8 <UART_SetConfig+0x384>)
 8006e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	461d      	mov	r5, r3
 8006eaa:	f04f 0600 	mov.w	r6, #0
 8006eae:	46a9      	mov	r9, r5
 8006eb0:	46b2      	mov	sl, r6
 8006eb2:	eb19 0309 	adds.w	r3, r9, r9
 8006eb6:	eb4a 040a 	adc.w	r4, sl, sl
 8006eba:	4699      	mov	r9, r3
 8006ebc:	46a2      	mov	sl, r4
 8006ebe:	eb19 0905 	adds.w	r9, r9, r5
 8006ec2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ec6:	f04f 0100 	mov.w	r1, #0
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ed2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ed6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006eda:	4689      	mov	r9, r1
 8006edc:	4692      	mov	sl, r2
 8006ede:	eb19 0005 	adds.w	r0, r9, r5
 8006ee2:	eb4a 0106 	adc.w	r1, sl, r6
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	461d      	mov	r5, r3
 8006eec:	f04f 0600 	mov.w	r6, #0
 8006ef0:	196b      	adds	r3, r5, r5
 8006ef2:	eb46 0406 	adc.w	r4, r6, r6
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	4623      	mov	r3, r4
 8006efa:	f7f9 fec5 	bl	8000c88 <__aeabi_uldivmod>
 8006efe:	4603      	mov	r3, r0
 8006f00:	460c      	mov	r4, r1
 8006f02:	461a      	mov	r2, r3
 8006f04:	4b2c      	ldr	r3, [pc, #176]	; (8006fb8 <UART_SetConfig+0x384>)
 8006f06:	fba3 1302 	umull	r1, r3, r3, r2
 8006f0a:	095b      	lsrs	r3, r3, #5
 8006f0c:	2164      	movs	r1, #100	; 0x64
 8006f0e:	fb01 f303 	mul.w	r3, r1, r3
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	00db      	lsls	r3, r3, #3
 8006f16:	3332      	adds	r3, #50	; 0x32
 8006f18:	4a27      	ldr	r2, [pc, #156]	; (8006fb8 <UART_SetConfig+0x384>)
 8006f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f26:	4498      	add	r8, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	461d      	mov	r5, r3
 8006f2c:	f04f 0600 	mov.w	r6, #0
 8006f30:	46a9      	mov	r9, r5
 8006f32:	46b2      	mov	sl, r6
 8006f34:	eb19 0309 	adds.w	r3, r9, r9
 8006f38:	eb4a 040a 	adc.w	r4, sl, sl
 8006f3c:	4699      	mov	r9, r3
 8006f3e:	46a2      	mov	sl, r4
 8006f40:	eb19 0905 	adds.w	r9, r9, r5
 8006f44:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f48:	f04f 0100 	mov.w	r1, #0
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f5c:	4689      	mov	r9, r1
 8006f5e:	4692      	mov	sl, r2
 8006f60:	eb19 0005 	adds.w	r0, r9, r5
 8006f64:	eb4a 0106 	adc.w	r1, sl, r6
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	461d      	mov	r5, r3
 8006f6e:	f04f 0600 	mov.w	r6, #0
 8006f72:	196b      	adds	r3, r5, r5
 8006f74:	eb46 0406 	adc.w	r4, r6, r6
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	f7f9 fe84 	bl	8000c88 <__aeabi_uldivmod>
 8006f80:	4603      	mov	r3, r0
 8006f82:	460c      	mov	r4, r1
 8006f84:	461a      	mov	r2, r3
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <UART_SetConfig+0x384>)
 8006f88:	fba3 1302 	umull	r1, r3, r3, r2
 8006f8c:	095b      	lsrs	r3, r3, #5
 8006f8e:	2164      	movs	r1, #100	; 0x64
 8006f90:	fb01 f303 	mul.w	r3, r1, r3
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	3332      	adds	r3, #50	; 0x32
 8006f9a:	4a07      	ldr	r2, [pc, #28]	; (8006fb8 <UART_SetConfig+0x384>)
 8006f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	f003 0207 	and.w	r2, r3, #7
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4442      	add	r2, r8
 8006fac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006fae:	e1b2      	b.n	8007316 <UART_SetConfig+0x6e2>
 8006fb0:	40011000 	.word	0x40011000
 8006fb4:	40011400 	.word	0x40011400
 8006fb8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4ad7      	ldr	r2, [pc, #860]	; (8007320 <UART_SetConfig+0x6ec>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d005      	beq.n	8006fd2 <UART_SetConfig+0x39e>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4ad6      	ldr	r2, [pc, #856]	; (8007324 <UART_SetConfig+0x6f0>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	f040 80d1 	bne.w	8007174 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fd2:	f7fd fe6f 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 8006fd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	469a      	mov	sl, r3
 8006fdc:	f04f 0b00 	mov.w	fp, #0
 8006fe0:	46d0      	mov	r8, sl
 8006fe2:	46d9      	mov	r9, fp
 8006fe4:	eb18 0308 	adds.w	r3, r8, r8
 8006fe8:	eb49 0409 	adc.w	r4, r9, r9
 8006fec:	4698      	mov	r8, r3
 8006fee:	46a1      	mov	r9, r4
 8006ff0:	eb18 080a 	adds.w	r8, r8, sl
 8006ff4:	eb49 090b 	adc.w	r9, r9, fp
 8006ff8:	f04f 0100 	mov.w	r1, #0
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007004:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007008:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800700c:	4688      	mov	r8, r1
 800700e:	4691      	mov	r9, r2
 8007010:	eb1a 0508 	adds.w	r5, sl, r8
 8007014:	eb4b 0609 	adc.w	r6, fp, r9
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4619      	mov	r1, r3
 800701e:	f04f 0200 	mov.w	r2, #0
 8007022:	f04f 0300 	mov.w	r3, #0
 8007026:	f04f 0400 	mov.w	r4, #0
 800702a:	0094      	lsls	r4, r2, #2
 800702c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007030:	008b      	lsls	r3, r1, #2
 8007032:	461a      	mov	r2, r3
 8007034:	4623      	mov	r3, r4
 8007036:	4628      	mov	r0, r5
 8007038:	4631      	mov	r1, r6
 800703a:	f7f9 fe25 	bl	8000c88 <__aeabi_uldivmod>
 800703e:	4603      	mov	r3, r0
 8007040:	460c      	mov	r4, r1
 8007042:	461a      	mov	r2, r3
 8007044:	4bb8      	ldr	r3, [pc, #736]	; (8007328 <UART_SetConfig+0x6f4>)
 8007046:	fba3 2302 	umull	r2, r3, r3, r2
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	469b      	mov	fp, r3
 8007054:	f04f 0c00 	mov.w	ip, #0
 8007058:	46d9      	mov	r9, fp
 800705a:	46e2      	mov	sl, ip
 800705c:	eb19 0309 	adds.w	r3, r9, r9
 8007060:	eb4a 040a 	adc.w	r4, sl, sl
 8007064:	4699      	mov	r9, r3
 8007066:	46a2      	mov	sl, r4
 8007068:	eb19 090b 	adds.w	r9, r9, fp
 800706c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007070:	f04f 0100 	mov.w	r1, #0
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800707c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007080:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007084:	4689      	mov	r9, r1
 8007086:	4692      	mov	sl, r2
 8007088:	eb1b 0509 	adds.w	r5, fp, r9
 800708c:	eb4c 060a 	adc.w	r6, ip, sl
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	4619      	mov	r1, r3
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	f04f 0300 	mov.w	r3, #0
 800709e:	f04f 0400 	mov.w	r4, #0
 80070a2:	0094      	lsls	r4, r2, #2
 80070a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070a8:	008b      	lsls	r3, r1, #2
 80070aa:	461a      	mov	r2, r3
 80070ac:	4623      	mov	r3, r4
 80070ae:	4628      	mov	r0, r5
 80070b0:	4631      	mov	r1, r6
 80070b2:	f7f9 fde9 	bl	8000c88 <__aeabi_uldivmod>
 80070b6:	4603      	mov	r3, r0
 80070b8:	460c      	mov	r4, r1
 80070ba:	461a      	mov	r2, r3
 80070bc:	4b9a      	ldr	r3, [pc, #616]	; (8007328 <UART_SetConfig+0x6f4>)
 80070be:	fba3 1302 	umull	r1, r3, r3, r2
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	2164      	movs	r1, #100	; 0x64
 80070c6:	fb01 f303 	mul.w	r3, r1, r3
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	3332      	adds	r3, #50	; 0x32
 80070d0:	4a95      	ldr	r2, [pc, #596]	; (8007328 <UART_SetConfig+0x6f4>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070dc:	4498      	add	r8, r3
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	469b      	mov	fp, r3
 80070e2:	f04f 0c00 	mov.w	ip, #0
 80070e6:	46d9      	mov	r9, fp
 80070e8:	46e2      	mov	sl, ip
 80070ea:	eb19 0309 	adds.w	r3, r9, r9
 80070ee:	eb4a 040a 	adc.w	r4, sl, sl
 80070f2:	4699      	mov	r9, r3
 80070f4:	46a2      	mov	sl, r4
 80070f6:	eb19 090b 	adds.w	r9, r9, fp
 80070fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070fe:	f04f 0100 	mov.w	r1, #0
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800710a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800710e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007112:	4689      	mov	r9, r1
 8007114:	4692      	mov	sl, r2
 8007116:	eb1b 0509 	adds.w	r5, fp, r9
 800711a:	eb4c 060a 	adc.w	r6, ip, sl
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	4619      	mov	r1, r3
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	f04f 0300 	mov.w	r3, #0
 800712c:	f04f 0400 	mov.w	r4, #0
 8007130:	0094      	lsls	r4, r2, #2
 8007132:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007136:	008b      	lsls	r3, r1, #2
 8007138:	461a      	mov	r2, r3
 800713a:	4623      	mov	r3, r4
 800713c:	4628      	mov	r0, r5
 800713e:	4631      	mov	r1, r6
 8007140:	f7f9 fda2 	bl	8000c88 <__aeabi_uldivmod>
 8007144:	4603      	mov	r3, r0
 8007146:	460c      	mov	r4, r1
 8007148:	461a      	mov	r2, r3
 800714a:	4b77      	ldr	r3, [pc, #476]	; (8007328 <UART_SetConfig+0x6f4>)
 800714c:	fba3 1302 	umull	r1, r3, r3, r2
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	2164      	movs	r1, #100	; 0x64
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	3332      	adds	r3, #50	; 0x32
 800715e:	4a72      	ldr	r2, [pc, #456]	; (8007328 <UART_SetConfig+0x6f4>)
 8007160:	fba2 2303 	umull	r2, r3, r2, r3
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	f003 020f 	and.w	r2, r3, #15
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4442      	add	r2, r8
 8007170:	609a      	str	r2, [r3, #8]
 8007172:	e0d0      	b.n	8007316 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007174:	f7fd fd8a 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8007178:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	469a      	mov	sl, r3
 800717e:	f04f 0b00 	mov.w	fp, #0
 8007182:	46d0      	mov	r8, sl
 8007184:	46d9      	mov	r9, fp
 8007186:	eb18 0308 	adds.w	r3, r8, r8
 800718a:	eb49 0409 	adc.w	r4, r9, r9
 800718e:	4698      	mov	r8, r3
 8007190:	46a1      	mov	r9, r4
 8007192:	eb18 080a 	adds.w	r8, r8, sl
 8007196:	eb49 090b 	adc.w	r9, r9, fp
 800719a:	f04f 0100 	mov.w	r1, #0
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071ae:	4688      	mov	r8, r1
 80071b0:	4691      	mov	r9, r2
 80071b2:	eb1a 0508 	adds.w	r5, sl, r8
 80071b6:	eb4b 0609 	adc.w	r6, fp, r9
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	4619      	mov	r1, r3
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	f04f 0400 	mov.w	r4, #0
 80071cc:	0094      	lsls	r4, r2, #2
 80071ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071d2:	008b      	lsls	r3, r1, #2
 80071d4:	461a      	mov	r2, r3
 80071d6:	4623      	mov	r3, r4
 80071d8:	4628      	mov	r0, r5
 80071da:	4631      	mov	r1, r6
 80071dc:	f7f9 fd54 	bl	8000c88 <__aeabi_uldivmod>
 80071e0:	4603      	mov	r3, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	461a      	mov	r2, r3
 80071e6:	4b50      	ldr	r3, [pc, #320]	; (8007328 <UART_SetConfig+0x6f4>)
 80071e8:	fba3 2302 	umull	r2, r3, r3, r2
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	469b      	mov	fp, r3
 80071f6:	f04f 0c00 	mov.w	ip, #0
 80071fa:	46d9      	mov	r9, fp
 80071fc:	46e2      	mov	sl, ip
 80071fe:	eb19 0309 	adds.w	r3, r9, r9
 8007202:	eb4a 040a 	adc.w	r4, sl, sl
 8007206:	4699      	mov	r9, r3
 8007208:	46a2      	mov	sl, r4
 800720a:	eb19 090b 	adds.w	r9, r9, fp
 800720e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007212:	f04f 0100 	mov.w	r1, #0
 8007216:	f04f 0200 	mov.w	r2, #0
 800721a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800721e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007222:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007226:	4689      	mov	r9, r1
 8007228:	4692      	mov	sl, r2
 800722a:	eb1b 0509 	adds.w	r5, fp, r9
 800722e:	eb4c 060a 	adc.w	r6, ip, sl
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	4619      	mov	r1, r3
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	f04f 0400 	mov.w	r4, #0
 8007244:	0094      	lsls	r4, r2, #2
 8007246:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800724a:	008b      	lsls	r3, r1, #2
 800724c:	461a      	mov	r2, r3
 800724e:	4623      	mov	r3, r4
 8007250:	4628      	mov	r0, r5
 8007252:	4631      	mov	r1, r6
 8007254:	f7f9 fd18 	bl	8000c88 <__aeabi_uldivmod>
 8007258:	4603      	mov	r3, r0
 800725a:	460c      	mov	r4, r1
 800725c:	461a      	mov	r2, r3
 800725e:	4b32      	ldr	r3, [pc, #200]	; (8007328 <UART_SetConfig+0x6f4>)
 8007260:	fba3 1302 	umull	r1, r3, r3, r2
 8007264:	095b      	lsrs	r3, r3, #5
 8007266:	2164      	movs	r1, #100	; 0x64
 8007268:	fb01 f303 	mul.w	r3, r1, r3
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	3332      	adds	r3, #50	; 0x32
 8007272:	4a2d      	ldr	r2, [pc, #180]	; (8007328 <UART_SetConfig+0x6f4>)
 8007274:	fba2 2303 	umull	r2, r3, r2, r3
 8007278:	095b      	lsrs	r3, r3, #5
 800727a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800727e:	4498      	add	r8, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	469b      	mov	fp, r3
 8007284:	f04f 0c00 	mov.w	ip, #0
 8007288:	46d9      	mov	r9, fp
 800728a:	46e2      	mov	sl, ip
 800728c:	eb19 0309 	adds.w	r3, r9, r9
 8007290:	eb4a 040a 	adc.w	r4, sl, sl
 8007294:	4699      	mov	r9, r3
 8007296:	46a2      	mov	sl, r4
 8007298:	eb19 090b 	adds.w	r9, r9, fp
 800729c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80072a0:	f04f 0100 	mov.w	r1, #0
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072b4:	4689      	mov	r9, r1
 80072b6:	4692      	mov	sl, r2
 80072b8:	eb1b 0509 	adds.w	r5, fp, r9
 80072bc:	eb4c 060a 	adc.w	r6, ip, sl
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	4619      	mov	r1, r3
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	f04f 0400 	mov.w	r4, #0
 80072d2:	0094      	lsls	r4, r2, #2
 80072d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072d8:	008b      	lsls	r3, r1, #2
 80072da:	461a      	mov	r2, r3
 80072dc:	4623      	mov	r3, r4
 80072de:	4628      	mov	r0, r5
 80072e0:	4631      	mov	r1, r6
 80072e2:	f7f9 fcd1 	bl	8000c88 <__aeabi_uldivmod>
 80072e6:	4603      	mov	r3, r0
 80072e8:	460c      	mov	r4, r1
 80072ea:	461a      	mov	r2, r3
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <UART_SetConfig+0x6f4>)
 80072ee:	fba3 1302 	umull	r1, r3, r3, r2
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	2164      	movs	r1, #100	; 0x64
 80072f6:	fb01 f303 	mul.w	r3, r1, r3
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	3332      	adds	r3, #50	; 0x32
 8007300:	4a09      	ldr	r2, [pc, #36]	; (8007328 <UART_SetConfig+0x6f4>)
 8007302:	fba2 2303 	umull	r2, r3, r2, r3
 8007306:	095b      	lsrs	r3, r3, #5
 8007308:	f003 020f 	and.w	r2, r3, #15
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4442      	add	r2, r8
 8007312:	609a      	str	r2, [r3, #8]
}
 8007314:	e7ff      	b.n	8007316 <UART_SetConfig+0x6e2>
 8007316:	bf00      	nop
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007320:	40011000 	.word	0x40011000
 8007324:	40011400 	.word	0x40011400
 8007328:	51eb851f 	.word	0x51eb851f

0800732c <__errno>:
 800732c:	4b01      	ldr	r3, [pc, #4]	; (8007334 <__errno+0x8>)
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000038 	.word	0x20000038

08007338 <__libc_init_array>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	4e0d      	ldr	r6, [pc, #52]	; (8007370 <__libc_init_array+0x38>)
 800733c:	4c0d      	ldr	r4, [pc, #52]	; (8007374 <__libc_init_array+0x3c>)
 800733e:	1ba4      	subs	r4, r4, r6
 8007340:	10a4      	asrs	r4, r4, #2
 8007342:	2500      	movs	r5, #0
 8007344:	42a5      	cmp	r5, r4
 8007346:	d109      	bne.n	800735c <__libc_init_array+0x24>
 8007348:	4e0b      	ldr	r6, [pc, #44]	; (8007378 <__libc_init_array+0x40>)
 800734a:	4c0c      	ldr	r4, [pc, #48]	; (800737c <__libc_init_array+0x44>)
 800734c:	f003 fa1a 	bl	800a784 <_init>
 8007350:	1ba4      	subs	r4, r4, r6
 8007352:	10a4      	asrs	r4, r4, #2
 8007354:	2500      	movs	r5, #0
 8007356:	42a5      	cmp	r5, r4
 8007358:	d105      	bne.n	8007366 <__libc_init_array+0x2e>
 800735a:	bd70      	pop	{r4, r5, r6, pc}
 800735c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007360:	4798      	blx	r3
 8007362:	3501      	adds	r5, #1
 8007364:	e7ee      	b.n	8007344 <__libc_init_array+0xc>
 8007366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800736a:	4798      	blx	r3
 800736c:	3501      	adds	r5, #1
 800736e:	e7f2      	b.n	8007356 <__libc_init_array+0x1e>
 8007370:	0800aa90 	.word	0x0800aa90
 8007374:	0800aa90 	.word	0x0800aa90
 8007378:	0800aa90 	.word	0x0800aa90
 800737c:	0800aa98 	.word	0x0800aa98

08007380 <memset>:
 8007380:	4402      	add	r2, r0
 8007382:	4603      	mov	r3, r0
 8007384:	4293      	cmp	r3, r2
 8007386:	d100      	bne.n	800738a <memset+0xa>
 8007388:	4770      	bx	lr
 800738a:	f803 1b01 	strb.w	r1, [r3], #1
 800738e:	e7f9      	b.n	8007384 <memset+0x4>

08007390 <_vsprintf_r>:
 8007390:	b500      	push	{lr}
 8007392:	b09b      	sub	sp, #108	; 0x6c
 8007394:	9100      	str	r1, [sp, #0]
 8007396:	9104      	str	r1, [sp, #16]
 8007398:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800739c:	9105      	str	r1, [sp, #20]
 800739e:	9102      	str	r1, [sp, #8]
 80073a0:	4905      	ldr	r1, [pc, #20]	; (80073b8 <_vsprintf_r+0x28>)
 80073a2:	9103      	str	r1, [sp, #12]
 80073a4:	4669      	mov	r1, sp
 80073a6:	f000 f83b 	bl	8007420 <_svfprintf_r>
 80073aa:	9b00      	ldr	r3, [sp, #0]
 80073ac:	2200      	movs	r2, #0
 80073ae:	701a      	strb	r2, [r3, #0]
 80073b0:	b01b      	add	sp, #108	; 0x6c
 80073b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80073b6:	bf00      	nop
 80073b8:	ffff0208 	.word	0xffff0208

080073bc <vsprintf>:
 80073bc:	4613      	mov	r3, r2
 80073be:	460a      	mov	r2, r1
 80073c0:	4601      	mov	r1, r0
 80073c2:	4802      	ldr	r0, [pc, #8]	; (80073cc <vsprintf+0x10>)
 80073c4:	6800      	ldr	r0, [r0, #0]
 80073c6:	f7ff bfe3 	b.w	8007390 <_vsprintf_r>
 80073ca:	bf00      	nop
 80073cc:	20000038 	.word	0x20000038

080073d0 <register_fini>:
 80073d0:	4b02      	ldr	r3, [pc, #8]	; (80073dc <register_fini+0xc>)
 80073d2:	b113      	cbz	r3, 80073da <register_fini+0xa>
 80073d4:	4802      	ldr	r0, [pc, #8]	; (80073e0 <register_fini+0x10>)
 80073d6:	f000 b805 	b.w	80073e4 <atexit>
 80073da:	4770      	bx	lr
 80073dc:	00000000 	.word	0x00000000
 80073e0:	080073f1 	.word	0x080073f1

080073e4 <atexit>:
 80073e4:	2300      	movs	r3, #0
 80073e6:	4601      	mov	r1, r0
 80073e8:	461a      	mov	r2, r3
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 ba36 	b.w	800885c <__register_exitproc>

080073f0 <__libc_fini_array>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4d07      	ldr	r5, [pc, #28]	; (8007410 <__libc_fini_array+0x20>)
 80073f4:	4c07      	ldr	r4, [pc, #28]	; (8007414 <__libc_fini_array+0x24>)
 80073f6:	1b64      	subs	r4, r4, r5
 80073f8:	10a4      	asrs	r4, r4, #2
 80073fa:	b91c      	cbnz	r4, 8007404 <__libc_fini_array+0x14>
 80073fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007400:	f003 b9c6 	b.w	800a790 <_fini>
 8007404:	3c01      	subs	r4, #1
 8007406:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800740a:	4798      	blx	r3
 800740c:	e7f5      	b.n	80073fa <__libc_fini_array+0xa>
 800740e:	bf00      	nop
 8007410:	0800aa98 	.word	0x0800aa98
 8007414:	0800aa9c 	.word	0x0800aa9c

08007418 <__retarget_lock_acquire_recursive>:
 8007418:	4770      	bx	lr

0800741a <__retarget_lock_release_recursive>:
 800741a:	4770      	bx	lr
 800741c:	0000      	movs	r0, r0
	...

08007420 <_svfprintf_r>:
 8007420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	b0d3      	sub	sp, #332	; 0x14c
 8007426:	4688      	mov	r8, r1
 8007428:	4693      	mov	fp, r2
 800742a:	461e      	mov	r6, r3
 800742c:	9003      	str	r0, [sp, #12]
 800742e:	f002 f9af 	bl	8009790 <_localeconv_r>
 8007432:	6803      	ldr	r3, [r0, #0]
 8007434:	9316      	str	r3, [sp, #88]	; 0x58
 8007436:	4618      	mov	r0, r3
 8007438:	f7f8 feea 	bl	8000210 <strlen>
 800743c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007440:	900d      	str	r0, [sp, #52]	; 0x34
 8007442:	0618      	lsls	r0, r3, #24
 8007444:	d518      	bpl.n	8007478 <_svfprintf_r+0x58>
 8007446:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800744a:	b9ab      	cbnz	r3, 8007478 <_svfprintf_r+0x58>
 800744c:	2140      	movs	r1, #64	; 0x40
 800744e:	9803      	ldr	r0, [sp, #12]
 8007450:	f002 f9ac 	bl	80097ac <_malloc_r>
 8007454:	f8c8 0000 	str.w	r0, [r8]
 8007458:	f8c8 0010 	str.w	r0, [r8, #16]
 800745c:	b948      	cbnz	r0, 8007472 <_svfprintf_r+0x52>
 800745e:	9a03      	ldr	r2, [sp, #12]
 8007460:	230c      	movs	r3, #12
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	f04f 33ff 	mov.w	r3, #4294967295
 8007468:	930e      	str	r3, [sp, #56]	; 0x38
 800746a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800746c:	b053      	add	sp, #332	; 0x14c
 800746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007472:	2340      	movs	r3, #64	; 0x40
 8007474:	f8c8 3014 	str.w	r3, [r8, #20]
 8007478:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 80077a0 <_svfprintf_r+0x380>
 800747c:	2300      	movs	r3, #0
 800747e:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8007482:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007486:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800748a:	ac29      	add	r4, sp, #164	; 0xa4
 800748c:	9426      	str	r4, [sp, #152]	; 0x98
 800748e:	9304      	str	r3, [sp, #16]
 8007490:	9309      	str	r3, [sp, #36]	; 0x24
 8007492:	9312      	str	r3, [sp, #72]	; 0x48
 8007494:	9319      	str	r3, [sp, #100]	; 0x64
 8007496:	930e      	str	r3, [sp, #56]	; 0x38
 8007498:	465d      	mov	r5, fp
 800749a:	462b      	mov	r3, r5
 800749c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074a0:	b112      	cbz	r2, 80074a8 <_svfprintf_r+0x88>
 80074a2:	2a25      	cmp	r2, #37	; 0x25
 80074a4:	f040 80e4 	bne.w	8007670 <_svfprintf_r+0x250>
 80074a8:	ebb5 070b 	subs.w	r7, r5, fp
 80074ac:	d00e      	beq.n	80074cc <_svfprintf_r+0xac>
 80074ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80074b0:	443b      	add	r3, r7
 80074b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80074b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80074b6:	3301      	adds	r3, #1
 80074b8:	2b07      	cmp	r3, #7
 80074ba:	e9c4 b700 	strd	fp, r7, [r4]
 80074be:	9327      	str	r3, [sp, #156]	; 0x9c
 80074c0:	f300 80d8 	bgt.w	8007674 <_svfprintf_r+0x254>
 80074c4:	3408      	adds	r4, #8
 80074c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074c8:	443b      	add	r3, r7
 80074ca:	930e      	str	r3, [sp, #56]	; 0x38
 80074cc:	782b      	ldrb	r3, [r5, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f001 81b4 	beq.w	800883c <_svfprintf_r+0x141c>
 80074d4:	1c6b      	adds	r3, r5, #1
 80074d6:	930c      	str	r3, [sp, #48]	; 0x30
 80074d8:	2300      	movs	r3, #0
 80074da:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80074de:	f04f 35ff 	mov.w	r5, #4294967295
 80074e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80074e4:	469a      	mov	sl, r3
 80074e6:	270a      	movs	r7, #10
 80074e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	9306      	str	r3, [sp, #24]
 80074ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074f0:	3301      	adds	r3, #1
 80074f2:	930c      	str	r3, [sp, #48]	; 0x30
 80074f4:	9b06      	ldr	r3, [sp, #24]
 80074f6:	3b20      	subs	r3, #32
 80074f8:	2b5a      	cmp	r3, #90	; 0x5a
 80074fa:	f200 8624 	bhi.w	8008146 <_svfprintf_r+0xd26>
 80074fe:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <_svfprintf_r+0xe4>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	08007707 	.word	0x08007707
 8007508:	08008147 	.word	0x08008147
 800750c:	08008147 	.word	0x08008147
 8007510:	08007719 	.word	0x08007719
 8007514:	08008147 	.word	0x08008147
 8007518:	08008147 	.word	0x08008147
 800751c:	08008147 	.word	0x08008147
 8007520:	080076cd 	.word	0x080076cd
 8007524:	08008147 	.word	0x08008147
 8007528:	08008147 	.word	0x08008147
 800752c:	0800771f 	.word	0x0800771f
 8007530:	08007737 	.word	0x08007737
 8007534:	08008147 	.word	0x08008147
 8007538:	08007731 	.word	0x08007731
 800753c:	0800773b 	.word	0x0800773b
 8007540:	08008147 	.word	0x08008147
 8007544:	0800776f 	.word	0x0800776f
 8007548:	08007775 	.word	0x08007775
 800754c:	08007775 	.word	0x08007775
 8007550:	08007775 	.word	0x08007775
 8007554:	08007775 	.word	0x08007775
 8007558:	08007775 	.word	0x08007775
 800755c:	08007775 	.word	0x08007775
 8007560:	08007775 	.word	0x08007775
 8007564:	08007775 	.word	0x08007775
 8007568:	08007775 	.word	0x08007775
 800756c:	08008147 	.word	0x08008147
 8007570:	08008147 	.word	0x08008147
 8007574:	08008147 	.word	0x08008147
 8007578:	08008147 	.word	0x08008147
 800757c:	08008147 	.word	0x08008147
 8007580:	08008147 	.word	0x08008147
 8007584:	08008147 	.word	0x08008147
 8007588:	08007877 	.word	0x08007877
 800758c:	08008147 	.word	0x08008147
 8007590:	080077e1 	.word	0x080077e1
 8007594:	08007803 	.word	0x08007803
 8007598:	08007877 	.word	0x08007877
 800759c:	08007877 	.word	0x08007877
 80075a0:	08007877 	.word	0x08007877
 80075a4:	08008147 	.word	0x08008147
 80075a8:	08008147 	.word	0x08008147
 80075ac:	08008147 	.word	0x08008147
 80075b0:	08008147 	.word	0x08008147
 80075b4:	08007795 	.word	0x08007795
 80075b8:	08008147 	.word	0x08008147
 80075bc:	08008147 	.word	0x08008147
 80075c0:	08007d49 	.word	0x08007d49
 80075c4:	08008147 	.word	0x08008147
 80075c8:	08008147 	.word	0x08008147
 80075cc:	08008147 	.word	0x08008147
 80075d0:	08007dd5 	.word	0x08007dd5
 80075d4:	08008147 	.word	0x08008147
 80075d8:	08007fb7 	.word	0x08007fb7
 80075dc:	08008147 	.word	0x08008147
 80075e0:	08008147 	.word	0x08008147
 80075e4:	0800768d 	.word	0x0800768d
 80075e8:	08008147 	.word	0x08008147
 80075ec:	08008147 	.word	0x08008147
 80075f0:	08008147 	.word	0x08008147
 80075f4:	08008147 	.word	0x08008147
 80075f8:	08008147 	.word	0x08008147
 80075fc:	08008147 	.word	0x08008147
 8007600:	08008147 	.word	0x08008147
 8007604:	08008147 	.word	0x08008147
 8007608:	08007877 	.word	0x08007877
 800760c:	08008147 	.word	0x08008147
 8007610:	080077e1 	.word	0x080077e1
 8007614:	08007807 	.word	0x08007807
 8007618:	08007877 	.word	0x08007877
 800761c:	08007877 	.word	0x08007877
 8007620:	08007877 	.word	0x08007877
 8007624:	080077ad 	.word	0x080077ad
 8007628:	08007807 	.word	0x08007807
 800762c:	080077d5 	.word	0x080077d5
 8007630:	08008147 	.word	0x08008147
 8007634:	080077c7 	.word	0x080077c7
 8007638:	08008147 	.word	0x08008147
 800763c:	08007d03 	.word	0x08007d03
 8007640:	08007d4d 	.word	0x08007d4d
 8007644:	08007db5 	.word	0x08007db5
 8007648:	080077d5 	.word	0x080077d5
 800764c:	08008147 	.word	0x08008147
 8007650:	08007dd5 	.word	0x08007dd5
 8007654:	080074e9 	.word	0x080074e9
 8007658:	08007fbb 	.word	0x08007fbb
 800765c:	08008147 	.word	0x08008147
 8007660:	08008147 	.word	0x08008147
 8007664:	08007ff9 	.word	0x08007ff9
 8007668:	08008147 	.word	0x08008147
 800766c:	080074e9 	.word	0x080074e9
 8007670:	461d      	mov	r5, r3
 8007672:	e712      	b.n	800749a <_svfprintf_r+0x7a>
 8007674:	aa26      	add	r2, sp, #152	; 0x98
 8007676:	4641      	mov	r1, r8
 8007678:	9803      	ldr	r0, [sp, #12]
 800767a:	f002 fdf0 	bl	800a25e <__ssprint_r>
 800767e:	2800      	cmp	r0, #0
 8007680:	f040 8166 	bne.w	8007950 <_svfprintf_r+0x530>
 8007684:	ac29      	add	r4, sp, #164	; 0xa4
 8007686:	e71e      	b.n	80074c6 <_svfprintf_r+0xa6>
 8007688:	461e      	mov	r6, r3
 800768a:	e72d      	b.n	80074e8 <_svfprintf_r+0xc8>
 800768c:	4b46      	ldr	r3, [pc, #280]	; (80077a8 <_svfprintf_r+0x388>)
 800768e:	9318      	str	r3, [sp, #96]	; 0x60
 8007690:	f01a 0f20 	tst.w	sl, #32
 8007694:	f000 84b3 	beq.w	8007ffe <_svfprintf_r+0xbde>
 8007698:	3607      	adds	r6, #7
 800769a:	f026 0607 	bic.w	r6, r6, #7
 800769e:	f106 0308 	add.w	r3, r6, #8
 80076a2:	e9d6 6700 	ldrd	r6, r7, [r6]
 80076a6:	9308      	str	r3, [sp, #32]
 80076a8:	f01a 0f01 	tst.w	sl, #1
 80076ac:	d00a      	beq.n	80076c4 <_svfprintf_r+0x2a4>
 80076ae:	ea56 0307 	orrs.w	r3, r6, r7
 80076b2:	d007      	beq.n	80076c4 <_svfprintf_r+0x2a4>
 80076b4:	2330      	movs	r3, #48	; 0x30
 80076b6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80076ba:	9b06      	ldr	r3, [sp, #24]
 80076bc:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80076c0:	f04a 0a02 	orr.w	sl, sl, #2
 80076c4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80076c8:	2302      	movs	r3, #2
 80076ca:	e34d      	b.n	8007d68 <_svfprintf_r+0x948>
 80076cc:	9803      	ldr	r0, [sp, #12]
 80076ce:	f002 f85f 	bl	8009790 <_localeconv_r>
 80076d2:	6843      	ldr	r3, [r0, #4]
 80076d4:	9319      	str	r3, [sp, #100]	; 0x64
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7f8 fd9a 	bl	8000210 <strlen>
 80076dc:	9012      	str	r0, [sp, #72]	; 0x48
 80076de:	9803      	ldr	r0, [sp, #12]
 80076e0:	f002 f856 	bl	8009790 <_localeconv_r>
 80076e4:	6883      	ldr	r3, [r0, #8]
 80076e6:	9309      	str	r3, [sp, #36]	; 0x24
 80076e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f43f aefc 	beq.w	80074e8 <_svfprintf_r+0xc8>
 80076f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f43f aef8 	beq.w	80074e8 <_svfprintf_r+0xc8>
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f43f aef4 	beq.w	80074e8 <_svfprintf_r+0xc8>
 8007700:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8007704:	e6f0      	b.n	80074e8 <_svfprintf_r+0xc8>
 8007706:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800770a:	2b00      	cmp	r3, #0
 800770c:	f47f aeec 	bne.w	80074e8 <_svfprintf_r+0xc8>
 8007710:	2320      	movs	r3, #32
 8007712:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8007716:	e6e7      	b.n	80074e8 <_svfprintf_r+0xc8>
 8007718:	f04a 0a01 	orr.w	sl, sl, #1
 800771c:	e6e4      	b.n	80074e8 <_svfprintf_r+0xc8>
 800771e:	6832      	ldr	r2, [r6, #0]
 8007720:	920f      	str	r2, [sp, #60]	; 0x3c
 8007722:	2a00      	cmp	r2, #0
 8007724:	f106 0304 	add.w	r3, r6, #4
 8007728:	daae      	bge.n	8007688 <_svfprintf_r+0x268>
 800772a:	4252      	negs	r2, r2
 800772c:	920f      	str	r2, [sp, #60]	; 0x3c
 800772e:	461e      	mov	r6, r3
 8007730:	f04a 0a04 	orr.w	sl, sl, #4
 8007734:	e6d8      	b.n	80074e8 <_svfprintf_r+0xc8>
 8007736:	232b      	movs	r3, #43	; 0x2b
 8007738:	e7eb      	b.n	8007712 <_svfprintf_r+0x2f2>
 800773a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800773c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800773e:	7812      	ldrb	r2, [r2, #0]
 8007740:	9206      	str	r2, [sp, #24]
 8007742:	2a2a      	cmp	r2, #42	; 0x2a
 8007744:	f103 0301 	add.w	r3, r3, #1
 8007748:	d10f      	bne.n	800776a <_svfprintf_r+0x34a>
 800774a:	6835      	ldr	r5, [r6, #0]
 800774c:	930c      	str	r3, [sp, #48]	; 0x30
 800774e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8007752:	3604      	adds	r6, #4
 8007754:	e6c8      	b.n	80074e8 <_svfprintf_r+0xc8>
 8007756:	fb07 2505 	mla	r5, r7, r5, r2
 800775a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800775e:	9206      	str	r2, [sp, #24]
 8007760:	9a06      	ldr	r2, [sp, #24]
 8007762:	3a30      	subs	r2, #48	; 0x30
 8007764:	2a09      	cmp	r2, #9
 8007766:	d9f6      	bls.n	8007756 <_svfprintf_r+0x336>
 8007768:	e6c3      	b.n	80074f2 <_svfprintf_r+0xd2>
 800776a:	2500      	movs	r5, #0
 800776c:	e7f8      	b.n	8007760 <_svfprintf_r+0x340>
 800776e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8007772:	e6b9      	b.n	80074e8 <_svfprintf_r+0xc8>
 8007774:	2200      	movs	r2, #0
 8007776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007778:	920f      	str	r2, [sp, #60]	; 0x3c
 800777a:	9a06      	ldr	r2, [sp, #24]
 800777c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800777e:	3a30      	subs	r2, #48	; 0x30
 8007780:	fb07 2201 	mla	r2, r7, r1, r2
 8007784:	920f      	str	r2, [sp, #60]	; 0x3c
 8007786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800778a:	9206      	str	r2, [sp, #24]
 800778c:	3a30      	subs	r2, #48	; 0x30
 800778e:	2a09      	cmp	r2, #9
 8007790:	d9f3      	bls.n	800777a <_svfprintf_r+0x35a>
 8007792:	e6ae      	b.n	80074f2 <_svfprintf_r+0xd2>
 8007794:	f04a 0a08 	orr.w	sl, sl, #8
 8007798:	e6a6      	b.n	80074e8 <_svfprintf_r+0xc8>
 800779a:	bf00      	nop
 800779c:	f3af 8000 	nop.w
	...
 80077a8:	0800a839 	.word	0x0800a839
 80077ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b68      	cmp	r3, #104	; 0x68
 80077b2:	bf01      	itttt	eq
 80077b4:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 80077b6:	3301      	addeq	r3, #1
 80077b8:	930c      	streq	r3, [sp, #48]	; 0x30
 80077ba:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80077be:	bf18      	it	ne
 80077c0:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80077c4:	e690      	b.n	80074e8 <_svfprintf_r+0xc8>
 80077c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b6c      	cmp	r3, #108	; 0x6c
 80077cc:	d105      	bne.n	80077da <_svfprintf_r+0x3ba>
 80077ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077d0:	3301      	adds	r3, #1
 80077d2:	930c      	str	r3, [sp, #48]	; 0x30
 80077d4:	f04a 0a20 	orr.w	sl, sl, #32
 80077d8:	e686      	b.n	80074e8 <_svfprintf_r+0xc8>
 80077da:	f04a 0a10 	orr.w	sl, sl, #16
 80077de:	e683      	b.n	80074e8 <_svfprintf_r+0xc8>
 80077e0:	1d33      	adds	r3, r6, #4
 80077e2:	9308      	str	r3, [sp, #32]
 80077e4:	2000      	movs	r0, #0
 80077e6:	6833      	ldr	r3, [r6, #0]
 80077e8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80077ec:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80077f0:	4681      	mov	r9, r0
 80077f2:	2501      	movs	r5, #1
 80077f4:	9010      	str	r0, [sp, #64]	; 0x40
 80077f6:	4607      	mov	r7, r0
 80077f8:	9007      	str	r0, [sp, #28]
 80077fa:	4606      	mov	r6, r0
 80077fc:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8007800:	e301      	b.n	8007e06 <_svfprintf_r+0x9e6>
 8007802:	f04a 0a10 	orr.w	sl, sl, #16
 8007806:	f01a 0f20 	tst.w	sl, #32
 800780a:	d021      	beq.n	8007850 <_svfprintf_r+0x430>
 800780c:	3607      	adds	r6, #7
 800780e:	f026 0607 	bic.w	r6, r6, #7
 8007812:	f106 0308 	add.w	r3, r6, #8
 8007816:	e9d6 6700 	ldrd	r6, r7, [r6]
 800781a:	9308      	str	r3, [sp, #32]
 800781c:	2e00      	cmp	r6, #0
 800781e:	f177 0300 	sbcs.w	r3, r7, #0
 8007822:	da06      	bge.n	8007832 <_svfprintf_r+0x412>
 8007824:	4276      	negs	r6, r6
 8007826:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800782a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800782e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8007832:	1c6b      	adds	r3, r5, #1
 8007834:	f040 83f6 	bne.w	8008024 <_svfprintf_r+0xc04>
 8007838:	2f00      	cmp	r7, #0
 800783a:	bf08      	it	eq
 800783c:	2e0a      	cmpeq	r6, #10
 800783e:	f080 8427 	bcs.w	8008090 <_svfprintf_r+0xc70>
 8007842:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8007846:	3630      	adds	r6, #48	; 0x30
 8007848:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 800784c:	f000 bc0d 	b.w	800806a <_svfprintf_r+0xc4a>
 8007850:	1d33      	adds	r3, r6, #4
 8007852:	f01a 0f10 	tst.w	sl, #16
 8007856:	9308      	str	r3, [sp, #32]
 8007858:	d002      	beq.n	8007860 <_svfprintf_r+0x440>
 800785a:	6836      	ldr	r6, [r6, #0]
 800785c:	17f7      	asrs	r7, r6, #31
 800785e:	e7dd      	b.n	800781c <_svfprintf_r+0x3fc>
 8007860:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007864:	6836      	ldr	r6, [r6, #0]
 8007866:	d001      	beq.n	800786c <_svfprintf_r+0x44c>
 8007868:	b236      	sxth	r6, r6
 800786a:	e7f7      	b.n	800785c <_svfprintf_r+0x43c>
 800786c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007870:	bf18      	it	ne
 8007872:	b276      	sxtbne	r6, r6
 8007874:	e7f2      	b.n	800785c <_svfprintf_r+0x43c>
 8007876:	3607      	adds	r6, #7
 8007878:	f026 0607 	bic.w	r6, r6, #7
 800787c:	ed96 7b00 	vldr	d7, [r6]
 8007880:	f106 0308 	add.w	r3, r6, #8
 8007884:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007888:	9308      	str	r3, [sp, #32]
 800788a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800788c:	931a      	str	r3, [sp, #104]	; 0x68
 800788e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007894:	931b      	str	r3, [sp, #108]	; 0x6c
 8007896:	f04f 32ff 	mov.w	r2, #4294967295
 800789a:	4bb2      	ldr	r3, [pc, #712]	; (8007b64 <_svfprintf_r+0x744>)
 800789c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80078a0:	f7f9 f964 	bl	8000b6c <__aeabi_dcmpun>
 80078a4:	bb00      	cbnz	r0, 80078e8 <_svfprintf_r+0x4c8>
 80078a6:	f04f 32ff 	mov.w	r2, #4294967295
 80078aa:	4bae      	ldr	r3, [pc, #696]	; (8007b64 <_svfprintf_r+0x744>)
 80078ac:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80078b0:	f7f9 f93e 	bl	8000b30 <__aeabi_dcmple>
 80078b4:	b9c0      	cbnz	r0, 80078e8 <_svfprintf_r+0x4c8>
 80078b6:	2200      	movs	r2, #0
 80078b8:	2300      	movs	r3, #0
 80078ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078be:	f7f9 f92d 	bl	8000b1c <__aeabi_dcmplt>
 80078c2:	b110      	cbz	r0, 80078ca <_svfprintf_r+0x4aa>
 80078c4:	232d      	movs	r3, #45	; 0x2d
 80078c6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80078ca:	4aa7      	ldr	r2, [pc, #668]	; (8007b68 <_svfprintf_r+0x748>)
 80078cc:	4ba7      	ldr	r3, [pc, #668]	; (8007b6c <_svfprintf_r+0x74c>)
 80078ce:	9906      	ldr	r1, [sp, #24]
 80078d0:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80078d4:	2947      	cmp	r1, #71	; 0x47
 80078d6:	bfcc      	ite	gt
 80078d8:	4693      	movgt	fp, r2
 80078da:	469b      	movle	fp, r3
 80078dc:	f04f 0900 	mov.w	r9, #0
 80078e0:	2503      	movs	r5, #3
 80078e2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80078e6:	e3c6      	b.n	8008076 <_svfprintf_r+0xc56>
 80078e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078ec:	4610      	mov	r0, r2
 80078ee:	4619      	mov	r1, r3
 80078f0:	f7f9 f93c 	bl	8000b6c <__aeabi_dcmpun>
 80078f4:	4681      	mov	r9, r0
 80078f6:	b140      	cbz	r0, 800790a <_svfprintf_r+0x4ea>
 80078f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078fa:	4a9d      	ldr	r2, [pc, #628]	; (8007b70 <_svfprintf_r+0x750>)
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bfbc      	itt	lt
 8007900:	232d      	movlt	r3, #45	; 0x2d
 8007902:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8007906:	4b9b      	ldr	r3, [pc, #620]	; (8007b74 <_svfprintf_r+0x754>)
 8007908:	e7e1      	b.n	80078ce <_svfprintf_r+0x4ae>
 800790a:	9b06      	ldr	r3, [sp, #24]
 800790c:	f023 0320 	bic.w	r3, r3, #32
 8007910:	2b41      	cmp	r3, #65	; 0x41
 8007912:	9307      	str	r3, [sp, #28]
 8007914:	d125      	bne.n	8007962 <_svfprintf_r+0x542>
 8007916:	2330      	movs	r3, #48	; 0x30
 8007918:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800791c:	9b06      	ldr	r3, [sp, #24]
 800791e:	2b61      	cmp	r3, #97	; 0x61
 8007920:	bf14      	ite	ne
 8007922:	2358      	movne	r3, #88	; 0x58
 8007924:	2378      	moveq	r3, #120	; 0x78
 8007926:	2d63      	cmp	r5, #99	; 0x63
 8007928:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800792c:	f04a 0a02 	orr.w	sl, sl, #2
 8007930:	f340 8108 	ble.w	8007b44 <_svfprintf_r+0x724>
 8007934:	1c69      	adds	r1, r5, #1
 8007936:	9803      	ldr	r0, [sp, #12]
 8007938:	f001 ff38 	bl	80097ac <_malloc_r>
 800793c:	4683      	mov	fp, r0
 800793e:	2800      	cmp	r0, #0
 8007940:	f040 8103 	bne.w	8007b4a <_svfprintf_r+0x72a>
 8007944:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800794c:	f8a8 300c 	strh.w	r3, [r8, #12]
 8007950:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007954:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800795a:	bf18      	it	ne
 800795c:	f04f 33ff 	movne.w	r3, #4294967295
 8007960:	e582      	b.n	8007468 <_svfprintf_r+0x48>
 8007962:	1c69      	adds	r1, r5, #1
 8007964:	f000 80f3 	beq.w	8007b4e <_svfprintf_r+0x72e>
 8007968:	9b07      	ldr	r3, [sp, #28]
 800796a:	2b47      	cmp	r3, #71	; 0x47
 800796c:	d102      	bne.n	8007974 <_svfprintf_r+0x554>
 800796e:	2d00      	cmp	r5, #0
 8007970:	f000 80ef 	beq.w	8007b52 <_svfprintf_r+0x732>
 8007974:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8007978:	9310      	str	r3, [sp, #64]	; 0x40
 800797a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800797c:	2b00      	cmp	r3, #0
 800797e:	f280 80eb 	bge.w	8007b58 <_svfprintf_r+0x738>
 8007982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007984:	9314      	str	r3, [sp, #80]	; 0x50
 8007986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007988:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800798c:	9315      	str	r3, [sp, #84]	; 0x54
 800798e:	232d      	movs	r3, #45	; 0x2d
 8007990:	9313      	str	r3, [sp, #76]	; 0x4c
 8007992:	9b07      	ldr	r3, [sp, #28]
 8007994:	2b41      	cmp	r3, #65	; 0x41
 8007996:	f040 8105 	bne.w	8007ba4 <_svfprintf_r+0x784>
 800799a:	a820      	add	r0, sp, #128	; 0x80
 800799c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80079a0:	f002 fc02 	bl	800a1a8 <frexp>
 80079a4:	2200      	movs	r2, #0
 80079a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80079aa:	ec51 0b10 	vmov	r0, r1, d0
 80079ae:	f7f8 fe43 	bl	8000638 <__aeabi_dmul>
 80079b2:	2200      	movs	r2, #0
 80079b4:	2300      	movs	r3, #0
 80079b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079ba:	f7f9 f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 80079be:	b108      	cbz	r0, 80079c4 <_svfprintf_r+0x5a4>
 80079c0:	2301      	movs	r3, #1
 80079c2:	9320      	str	r3, [sp, #128]	; 0x80
 80079c4:	4f6c      	ldr	r7, [pc, #432]	; (8007b78 <_svfprintf_r+0x758>)
 80079c6:	4b6d      	ldr	r3, [pc, #436]	; (8007b7c <_svfprintf_r+0x75c>)
 80079c8:	9a06      	ldr	r2, [sp, #24]
 80079ca:	2a61      	cmp	r2, #97	; 0x61
 80079cc:	bf08      	it	eq
 80079ce:	461f      	moveq	r7, r3
 80079d0:	9711      	str	r7, [sp, #68]	; 0x44
 80079d2:	465e      	mov	r6, fp
 80079d4:	1e6f      	subs	r7, r5, #1
 80079d6:	2200      	movs	r2, #0
 80079d8:	4b69      	ldr	r3, [pc, #420]	; (8007b80 <_svfprintf_r+0x760>)
 80079da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079de:	f7f8 fe2b 	bl	8000638 <__aeabi_dmul>
 80079e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079e6:	f7f9 f8d7 	bl	8000b98 <__aeabi_d2iz>
 80079ea:	901c      	str	r0, [sp, #112]	; 0x70
 80079ec:	f7f8 fdba 	bl	8000564 <__aeabi_i2d>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079f8:	f7f8 fc66 	bl	80002c8 <__aeabi_dsub>
 80079fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80079fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a00:	971d      	str	r7, [sp, #116]	; 0x74
 8007a02:	5c9b      	ldrb	r3, [r3, r2]
 8007a04:	f806 3b01 	strb.w	r3, [r6], #1
 8007a08:	1c7a      	adds	r2, r7, #1
 8007a0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a0e:	d006      	beq.n	8007a1e <_svfprintf_r+0x5fe>
 8007a10:	2200      	movs	r2, #0
 8007a12:	2300      	movs	r3, #0
 8007a14:	3f01      	subs	r7, #1
 8007a16:	f7f9 f877 	bl	8000b08 <__aeabi_dcmpeq>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d0db      	beq.n	80079d6 <_svfprintf_r+0x5b6>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	4b58      	ldr	r3, [pc, #352]	; (8007b84 <_svfprintf_r+0x764>)
 8007a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a26:	f7f9 f897 	bl	8000b58 <__aeabi_dcmpgt>
 8007a2a:	b960      	cbnz	r0, 8007a46 <_svfprintf_r+0x626>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4b55      	ldr	r3, [pc, #340]	; (8007b84 <_svfprintf_r+0x764>)
 8007a30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a34:	f7f9 f868 	bl	8000b08 <__aeabi_dcmpeq>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	f000 80ae 	beq.w	8007b9a <_svfprintf_r+0x77a>
 8007a3e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007a40:	07db      	lsls	r3, r3, #31
 8007a42:	f140 80aa 	bpl.w	8007b9a <_svfprintf_r+0x77a>
 8007a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a48:	9624      	str	r6, [sp, #144]	; 0x90
 8007a4a:	7bd9      	ldrb	r1, [r3, #15]
 8007a4c:	2030      	movs	r0, #48	; 0x30
 8007a4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a50:	1e53      	subs	r3, r2, #1
 8007a52:	9324      	str	r3, [sp, #144]	; 0x90
 8007a54:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8007a58:	428b      	cmp	r3, r1
 8007a5a:	f000 8095 	beq.w	8007b88 <_svfprintf_r+0x768>
 8007a5e:	2b39      	cmp	r3, #57	; 0x39
 8007a60:	bf0b      	itete	eq
 8007a62:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 8007a64:	3301      	addne	r3, #1
 8007a66:	7a9b      	ldrbeq	r3, [r3, #10]
 8007a68:	b2db      	uxtbne	r3, r3
 8007a6a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a6e:	4633      	mov	r3, r6
 8007a70:	eba3 030b 	sub.w	r3, r3, fp
 8007a74:	9304      	str	r3, [sp, #16]
 8007a76:	9b07      	ldr	r3, [sp, #28]
 8007a78:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8007a7a:	2b47      	cmp	r3, #71	; 0x47
 8007a7c:	f040 80d7 	bne.w	8007c2e <_svfprintf_r+0x80e>
 8007a80:	1cf7      	adds	r7, r6, #3
 8007a82:	db02      	blt.n	8007a8a <_svfprintf_r+0x66a>
 8007a84:	42b5      	cmp	r5, r6
 8007a86:	f280 80fd 	bge.w	8007c84 <_svfprintf_r+0x864>
 8007a8a:	9b06      	ldr	r3, [sp, #24]
 8007a8c:	3b02      	subs	r3, #2
 8007a8e:	9306      	str	r3, [sp, #24]
 8007a90:	9906      	ldr	r1, [sp, #24]
 8007a92:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8007a96:	f021 0120 	bic.w	r1, r1, #32
 8007a9a:	2941      	cmp	r1, #65	; 0x41
 8007a9c:	bf08      	it	eq
 8007a9e:	320f      	addeq	r2, #15
 8007aa0:	f106 33ff 	add.w	r3, r6, #4294967295
 8007aa4:	bf06      	itte	eq
 8007aa6:	b2d2      	uxtbeq	r2, r2
 8007aa8:	2101      	moveq	r1, #1
 8007aaa:	2100      	movne	r1, #0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	9320      	str	r3, [sp, #128]	; 0x80
 8007ab0:	bfb8      	it	lt
 8007ab2:	f1c6 0301 	rsblt	r3, r6, #1
 8007ab6:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8007aba:	bfb4      	ite	lt
 8007abc:	222d      	movlt	r2, #45	; 0x2d
 8007abe:	222b      	movge	r2, #43	; 0x2b
 8007ac0:	2b09      	cmp	r3, #9
 8007ac2:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8007ac6:	f340 80c9 	ble.w	8007c5c <_svfprintf_r+0x83c>
 8007aca:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8007ace:	250a      	movs	r5, #10
 8007ad0:	fb93 f0f5 	sdiv	r0, r3, r5
 8007ad4:	fb05 3310 	mls	r3, r5, r0, r3
 8007ad8:	3330      	adds	r3, #48	; 0x30
 8007ada:	2809      	cmp	r0, #9
 8007adc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ae0:	f102 31ff 	add.w	r1, r2, #4294967295
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f300 80b2 	bgt.w	8007c4e <_svfprintf_r+0x82e>
 8007aea:	3330      	adds	r3, #48	; 0x30
 8007aec:	f801 3c01 	strb.w	r3, [r1, #-1]
 8007af0:	3a02      	subs	r2, #2
 8007af2:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8007af6:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8007afa:	4282      	cmp	r2, r0
 8007afc:	4619      	mov	r1, r3
 8007afe:	f0c0 80a8 	bcc.w	8007c52 <_svfprintf_r+0x832>
 8007b02:	9a04      	ldr	r2, [sp, #16]
 8007b04:	ab22      	add	r3, sp, #136	; 0x88
 8007b06:	1acb      	subs	r3, r1, r3
 8007b08:	2a01      	cmp	r2, #1
 8007b0a:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b0c:	eb03 0502 	add.w	r5, r3, r2
 8007b10:	dc02      	bgt.n	8007b18 <_svfprintf_r+0x6f8>
 8007b12:	f01a 0f01 	tst.w	sl, #1
 8007b16:	d001      	beq.n	8007b1c <_svfprintf_r+0x6fc>
 8007b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b1a:	441d      	add	r5, r3
 8007b1c:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8007b20:	2700      	movs	r7, #0
 8007b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b26:	9310      	str	r3, [sp, #64]	; 0x40
 8007b28:	9707      	str	r7, [sp, #28]
 8007b2a:	463e      	mov	r6, r7
 8007b2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 8315 	beq.w	800815e <_svfprintf_r+0xd3e>
 8007b34:	232d      	movs	r3, #45	; 0x2d
 8007b36:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8007b3a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8007b3e:	2300      	movs	r3, #0
 8007b40:	9310      	str	r3, [sp, #64]	; 0x40
 8007b42:	e160      	b.n	8007e06 <_svfprintf_r+0x9e6>
 8007b44:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8007b48:	e714      	b.n	8007974 <_svfprintf_r+0x554>
 8007b4a:	4681      	mov	r9, r0
 8007b4c:	e712      	b.n	8007974 <_svfprintf_r+0x554>
 8007b4e:	2506      	movs	r5, #6
 8007b50:	e710      	b.n	8007974 <_svfprintf_r+0x554>
 8007b52:	46a9      	mov	r9, r5
 8007b54:	2501      	movs	r5, #1
 8007b56:	e70d      	b.n	8007974 <_svfprintf_r+0x554>
 8007b58:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8007b62:	e715      	b.n	8007990 <_svfprintf_r+0x570>
 8007b64:	7fefffff 	.word	0x7fefffff
 8007b68:	0800a81c 	.word	0x0800a81c
 8007b6c:	0800a818 	.word	0x0800a818
 8007b70:	0800a824 	.word	0x0800a824
 8007b74:	0800a820 	.word	0x0800a820
 8007b78:	0800a839 	.word	0x0800a839
 8007b7c:	0800a828 	.word	0x0800a828
 8007b80:	40300000 	.word	0x40300000
 8007b84:	3fe00000 	.word	0x3fe00000
 8007b88:	f802 0c01 	strb.w	r0, [r2, #-1]
 8007b8c:	e75f      	b.n	8007a4e <_svfprintf_r+0x62e>
 8007b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b92:	1af2      	subs	r2, r6, r3
 8007b94:	2a00      	cmp	r2, #0
 8007b96:	dafa      	bge.n	8007b8e <_svfprintf_r+0x76e>
 8007b98:	e76a      	b.n	8007a70 <_svfprintf_r+0x650>
 8007b9a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007b9c:	4633      	mov	r3, r6
 8007b9e:	2130      	movs	r1, #48	; 0x30
 8007ba0:	4416      	add	r6, r2
 8007ba2:	e7f6      	b.n	8007b92 <_svfprintf_r+0x772>
 8007ba4:	9b07      	ldr	r3, [sp, #28]
 8007ba6:	2b46      	cmp	r3, #70	; 0x46
 8007ba8:	d004      	beq.n	8007bb4 <_svfprintf_r+0x794>
 8007baa:	2b45      	cmp	r3, #69	; 0x45
 8007bac:	d13a      	bne.n	8007c24 <_svfprintf_r+0x804>
 8007bae:	1c6e      	adds	r6, r5, #1
 8007bb0:	2102      	movs	r1, #2
 8007bb2:	e001      	b.n	8007bb8 <_svfprintf_r+0x798>
 8007bb4:	462e      	mov	r6, r5
 8007bb6:	2103      	movs	r1, #3
 8007bb8:	ab24      	add	r3, sp, #144	; 0x90
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	ab21      	add	r3, sp, #132	; 0x84
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4632      	mov	r2, r6
 8007bc2:	ab20      	add	r3, sp, #128	; 0x80
 8007bc4:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8007bc8:	9803      	ldr	r0, [sp, #12]
 8007bca:	f000 ff29 	bl	8008a20 <_dtoa_r>
 8007bce:	9b07      	ldr	r3, [sp, #28]
 8007bd0:	2b47      	cmp	r3, #71	; 0x47
 8007bd2:	4683      	mov	fp, r0
 8007bd4:	d102      	bne.n	8007bdc <_svfprintf_r+0x7bc>
 8007bd6:	f01a 0f01 	tst.w	sl, #1
 8007bda:	d026      	beq.n	8007c2a <_svfprintf_r+0x80a>
 8007bdc:	9b07      	ldr	r3, [sp, #28]
 8007bde:	2b46      	cmp	r3, #70	; 0x46
 8007be0:	eb0b 0706 	add.w	r7, fp, r6
 8007be4:	d10f      	bne.n	8007c06 <_svfprintf_r+0x7e6>
 8007be6:	f89b 3000 	ldrb.w	r3, [fp]
 8007bea:	2b30      	cmp	r3, #48	; 0x30
 8007bec:	d109      	bne.n	8007c02 <_svfprintf_r+0x7e2>
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007bf6:	f7f8 ff87 	bl	8000b08 <__aeabi_dcmpeq>
 8007bfa:	b910      	cbnz	r0, 8007c02 <_svfprintf_r+0x7e2>
 8007bfc:	f1c6 0601 	rsb	r6, r6, #1
 8007c00:	9620      	str	r6, [sp, #128]	; 0x80
 8007c02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c04:	441f      	add	r7, r3
 8007c06:	2200      	movs	r2, #0
 8007c08:	2300      	movs	r3, #0
 8007c0a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007c0e:	f7f8 ff7b 	bl	8000b08 <__aeabi_dcmpeq>
 8007c12:	b948      	cbnz	r0, 8007c28 <_svfprintf_r+0x808>
 8007c14:	2230      	movs	r2, #48	; 0x30
 8007c16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007c18:	429f      	cmp	r7, r3
 8007c1a:	d906      	bls.n	8007c2a <_svfprintf_r+0x80a>
 8007c1c:	1c59      	adds	r1, r3, #1
 8007c1e:	9124      	str	r1, [sp, #144]	; 0x90
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	e7f8      	b.n	8007c16 <_svfprintf_r+0x7f6>
 8007c24:	462e      	mov	r6, r5
 8007c26:	e7c3      	b.n	8007bb0 <_svfprintf_r+0x790>
 8007c28:	9724      	str	r7, [sp, #144]	; 0x90
 8007c2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007c2c:	e720      	b.n	8007a70 <_svfprintf_r+0x650>
 8007c2e:	9b07      	ldr	r3, [sp, #28]
 8007c30:	2b46      	cmp	r3, #70	; 0x46
 8007c32:	f47f af2d 	bne.w	8007a90 <_svfprintf_r+0x670>
 8007c36:	2e00      	cmp	r6, #0
 8007c38:	dd1d      	ble.n	8007c76 <_svfprintf_r+0x856>
 8007c3a:	b915      	cbnz	r5, 8007c42 <_svfprintf_r+0x822>
 8007c3c:	f01a 0f01 	tst.w	sl, #1
 8007c40:	d034      	beq.n	8007cac <_svfprintf_r+0x88c>
 8007c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c44:	18f3      	adds	r3, r6, r3
 8007c46:	441d      	add	r5, r3
 8007c48:	2366      	movs	r3, #102	; 0x66
 8007c4a:	9306      	str	r3, [sp, #24]
 8007c4c:	e033      	b.n	8007cb6 <_svfprintf_r+0x896>
 8007c4e:	460a      	mov	r2, r1
 8007c50:	e73e      	b.n	8007ad0 <_svfprintf_r+0x6b0>
 8007c52:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007c56:	f803 1b01 	strb.w	r1, [r3], #1
 8007c5a:	e74e      	b.n	8007afa <_svfprintf_r+0x6da>
 8007c5c:	b941      	cbnz	r1, 8007c70 <_svfprintf_r+0x850>
 8007c5e:	2230      	movs	r2, #48	; 0x30
 8007c60:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8007c64:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8007c68:	3330      	adds	r3, #48	; 0x30
 8007c6a:	1c51      	adds	r1, r2, #1
 8007c6c:	7013      	strb	r3, [r2, #0]
 8007c6e:	e748      	b.n	8007b02 <_svfprintf_r+0x6e2>
 8007c70:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8007c74:	e7f8      	b.n	8007c68 <_svfprintf_r+0x848>
 8007c76:	b915      	cbnz	r5, 8007c7e <_svfprintf_r+0x85e>
 8007c78:	f01a 0f01 	tst.w	sl, #1
 8007c7c:	d018      	beq.n	8007cb0 <_svfprintf_r+0x890>
 8007c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c80:	3301      	adds	r3, #1
 8007c82:	e7e0      	b.n	8007c46 <_svfprintf_r+0x826>
 8007c84:	9b04      	ldr	r3, [sp, #16]
 8007c86:	42b3      	cmp	r3, r6
 8007c88:	dc06      	bgt.n	8007c98 <_svfprintf_r+0x878>
 8007c8a:	f01a 0f01 	tst.w	sl, #1
 8007c8e:	d025      	beq.n	8007cdc <_svfprintf_r+0x8bc>
 8007c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c92:	18f5      	adds	r5, r6, r3
 8007c94:	2367      	movs	r3, #103	; 0x67
 8007c96:	e7d8      	b.n	8007c4a <_svfprintf_r+0x82a>
 8007c98:	9b04      	ldr	r3, [sp, #16]
 8007c9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c9c:	2e00      	cmp	r6, #0
 8007c9e:	eb03 0502 	add.w	r5, r3, r2
 8007ca2:	dcf7      	bgt.n	8007c94 <_svfprintf_r+0x874>
 8007ca4:	f1c6 0301 	rsb	r3, r6, #1
 8007ca8:	441d      	add	r5, r3
 8007caa:	e7f3      	b.n	8007c94 <_svfprintf_r+0x874>
 8007cac:	4635      	mov	r5, r6
 8007cae:	e7cb      	b.n	8007c48 <_svfprintf_r+0x828>
 8007cb0:	2366      	movs	r3, #102	; 0x66
 8007cb2:	9306      	str	r3, [sp, #24]
 8007cb4:	2501      	movs	r5, #1
 8007cb6:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8007cba:	9307      	str	r3, [sp, #28]
 8007cbc:	d01f      	beq.n	8007cfe <_svfprintf_r+0x8de>
 8007cbe:	2700      	movs	r7, #0
 8007cc0:	2e00      	cmp	r6, #0
 8007cc2:	9707      	str	r7, [sp, #28]
 8007cc4:	f77f af32 	ble.w	8007b2c <_svfprintf_r+0x70c>
 8007cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2bff      	cmp	r3, #255	; 0xff
 8007cce:	d107      	bne.n	8007ce0 <_svfprintf_r+0x8c0>
 8007cd0:	9b07      	ldr	r3, [sp, #28]
 8007cd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cd4:	443b      	add	r3, r7
 8007cd6:	fb02 5503 	mla	r5, r2, r3, r5
 8007cda:	e727      	b.n	8007b2c <_svfprintf_r+0x70c>
 8007cdc:	4635      	mov	r5, r6
 8007cde:	e7d9      	b.n	8007c94 <_svfprintf_r+0x874>
 8007ce0:	42b3      	cmp	r3, r6
 8007ce2:	daf5      	bge.n	8007cd0 <_svfprintf_r+0x8b0>
 8007ce4:	1af6      	subs	r6, r6, r3
 8007ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce8:	785b      	ldrb	r3, [r3, #1]
 8007cea:	b133      	cbz	r3, 8007cfa <_svfprintf_r+0x8da>
 8007cec:	9b07      	ldr	r3, [sp, #28]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	9307      	str	r3, [sp, #28]
 8007cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf8:	e7e6      	b.n	8007cc8 <_svfprintf_r+0x8a8>
 8007cfa:	3701      	adds	r7, #1
 8007cfc:	e7e4      	b.n	8007cc8 <_svfprintf_r+0x8a8>
 8007cfe:	9f07      	ldr	r7, [sp, #28]
 8007d00:	e714      	b.n	8007b2c <_svfprintf_r+0x70c>
 8007d02:	4632      	mov	r2, r6
 8007d04:	f01a 0f20 	tst.w	sl, #32
 8007d08:	f852 3b04 	ldr.w	r3, [r2], #4
 8007d0c:	9208      	str	r2, [sp, #32]
 8007d0e:	d009      	beq.n	8007d24 <_svfprintf_r+0x904>
 8007d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d12:	4610      	mov	r0, r2
 8007d14:	17d1      	asrs	r1, r2, #31
 8007d16:	e9c3 0100 	strd	r0, r1, [r3]
 8007d1a:	9e08      	ldr	r6, [sp, #32]
 8007d1c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8007d20:	f7ff bbba 	b.w	8007498 <_svfprintf_r+0x78>
 8007d24:	f01a 0f10 	tst.w	sl, #16
 8007d28:	d002      	beq.n	8007d30 <_svfprintf_r+0x910>
 8007d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	e7f4      	b.n	8007d1a <_svfprintf_r+0x8fa>
 8007d30:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007d34:	d002      	beq.n	8007d3c <_svfprintf_r+0x91c>
 8007d36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d38:	801a      	strh	r2, [r3, #0]
 8007d3a:	e7ee      	b.n	8007d1a <_svfprintf_r+0x8fa>
 8007d3c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007d40:	d0f3      	beq.n	8007d2a <_svfprintf_r+0x90a>
 8007d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	e7e8      	b.n	8007d1a <_svfprintf_r+0x8fa>
 8007d48:	f04a 0a10 	orr.w	sl, sl, #16
 8007d4c:	f01a 0f20 	tst.w	sl, #32
 8007d50:	d01e      	beq.n	8007d90 <_svfprintf_r+0x970>
 8007d52:	3607      	adds	r6, #7
 8007d54:	f026 0607 	bic.w	r6, r6, #7
 8007d58:	f106 0308 	add.w	r3, r6, #8
 8007d5c:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007d60:	9308      	str	r3, [sp, #32]
 8007d62:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007d66:	2300      	movs	r3, #0
 8007d68:	2200      	movs	r2, #0
 8007d6a:	1c69      	adds	r1, r5, #1
 8007d6c:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8007d70:	f000 815b 	beq.w	800802a <_svfprintf_r+0xc0a>
 8007d74:	4652      	mov	r2, sl
 8007d76:	ea56 0107 	orrs.w	r1, r6, r7
 8007d7a:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007d7e:	f040 8154 	bne.w	800802a <_svfprintf_r+0xc0a>
 8007d82:	2d00      	cmp	r5, #0
 8007d84:	f000 81d5 	beq.w	8008132 <_svfprintf_r+0xd12>
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	f040 8151 	bne.w	8008030 <_svfprintf_r+0xc10>
 8007d8e:	e558      	b.n	8007842 <_svfprintf_r+0x422>
 8007d90:	1d33      	adds	r3, r6, #4
 8007d92:	f01a 0f10 	tst.w	sl, #16
 8007d96:	9308      	str	r3, [sp, #32]
 8007d98:	d001      	beq.n	8007d9e <_svfprintf_r+0x97e>
 8007d9a:	6836      	ldr	r6, [r6, #0]
 8007d9c:	e003      	b.n	8007da6 <_svfprintf_r+0x986>
 8007d9e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007da2:	d002      	beq.n	8007daa <_svfprintf_r+0x98a>
 8007da4:	8836      	ldrh	r6, [r6, #0]
 8007da6:	2700      	movs	r7, #0
 8007da8:	e7db      	b.n	8007d62 <_svfprintf_r+0x942>
 8007daa:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007dae:	d0f4      	beq.n	8007d9a <_svfprintf_r+0x97a>
 8007db0:	7836      	ldrb	r6, [r6, #0]
 8007db2:	e7f8      	b.n	8007da6 <_svfprintf_r+0x986>
 8007db4:	1d33      	adds	r3, r6, #4
 8007db6:	9308      	str	r3, [sp, #32]
 8007db8:	f647 0330 	movw	r3, #30768	; 0x7830
 8007dbc:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8007dc0:	2278      	movs	r2, #120	; 0x78
 8007dc2:	4bb0      	ldr	r3, [pc, #704]	; (8008084 <_svfprintf_r+0xc64>)
 8007dc4:	9318      	str	r3, [sp, #96]	; 0x60
 8007dc6:	6836      	ldr	r6, [r6, #0]
 8007dc8:	9206      	str	r2, [sp, #24]
 8007dca:	2700      	movs	r7, #0
 8007dcc:	f04a 0a02 	orr.w	sl, sl, #2
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e7c9      	b.n	8007d68 <_svfprintf_r+0x948>
 8007dd4:	1d33      	adds	r3, r6, #4
 8007dd6:	f8d6 b000 	ldr.w	fp, [r6]
 8007dda:	9308      	str	r3, [sp, #32]
 8007ddc:	2600      	movs	r6, #0
 8007dde:	1c68      	adds	r0, r5, #1
 8007de0:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8007de4:	f000 80e1 	beq.w	8007faa <_svfprintf_r+0xb8a>
 8007de8:	462a      	mov	r2, r5
 8007dea:	4631      	mov	r1, r6
 8007dec:	4658      	mov	r0, fp
 8007dee:	f7f8 fa17 	bl	8000220 <memchr>
 8007df2:	4681      	mov	r9, r0
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f43f ad74 	beq.w	80078e2 <_svfprintf_r+0x4c2>
 8007dfa:	eba0 050b 	sub.w	r5, r0, fp
 8007dfe:	46b1      	mov	r9, r6
 8007e00:	9610      	str	r6, [sp, #64]	; 0x40
 8007e02:	4637      	mov	r7, r6
 8007e04:	9607      	str	r6, [sp, #28]
 8007e06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e08:	42ab      	cmp	r3, r5
 8007e0a:	bfb8      	it	lt
 8007e0c:	462b      	movlt	r3, r5
 8007e0e:	9311      	str	r3, [sp, #68]	; 0x44
 8007e10:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8007e14:	b113      	cbz	r3, 8007e1c <_svfprintf_r+0x9fc>
 8007e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e18:	3301      	adds	r3, #1
 8007e1a:	9311      	str	r3, [sp, #68]	; 0x44
 8007e1c:	f01a 0302 	ands.w	r3, sl, #2
 8007e20:	931c      	str	r3, [sp, #112]	; 0x70
 8007e22:	bf1e      	ittt	ne
 8007e24:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8007e26:	3302      	addne	r3, #2
 8007e28:	9311      	strne	r3, [sp, #68]	; 0x44
 8007e2a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8007e2e:	931d      	str	r3, [sp, #116]	; 0x74
 8007e30:	d122      	bne.n	8007e78 <_svfprintf_r+0xa58>
 8007e32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e36:	1a9b      	subs	r3, r3, r2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e3c:	dd1c      	ble.n	8007e78 <_svfprintf_r+0xa58>
 8007e3e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007e40:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8007e44:	2810      	cmp	r0, #16
 8007e46:	4890      	ldr	r0, [pc, #576]	; (8008088 <_svfprintf_r+0xc68>)
 8007e48:	6020      	str	r0, [r4, #0]
 8007e4a:	f102 0201 	add.w	r2, r2, #1
 8007e4e:	f104 0108 	add.w	r1, r4, #8
 8007e52:	f300 8188 	bgt.w	8008166 <_svfprintf_r+0xd46>
 8007e56:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007e58:	6060      	str	r0, [r4, #4]
 8007e5a:	4403      	add	r3, r0
 8007e5c:	2a07      	cmp	r2, #7
 8007e5e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8007e62:	f340 8195 	ble.w	8008190 <_svfprintf_r+0xd70>
 8007e66:	aa26      	add	r2, sp, #152	; 0x98
 8007e68:	4641      	mov	r1, r8
 8007e6a:	9803      	ldr	r0, [sp, #12]
 8007e6c:	f002 f9f7 	bl	800a25e <__ssprint_r>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f040 84c1 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 8007e76:	ac29      	add	r4, sp, #164	; 0xa4
 8007e78:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8007e7c:	b173      	cbz	r3, 8007e9c <_svfprintf_r+0xa7c>
 8007e7e:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	2301      	movs	r3, #1
 8007e86:	6063      	str	r3, [r4, #4]
 8007e88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	9328      	str	r3, [sp, #160]	; 0xa0
 8007e8e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007e90:	3301      	adds	r3, #1
 8007e92:	2b07      	cmp	r3, #7
 8007e94:	9327      	str	r3, [sp, #156]	; 0x9c
 8007e96:	f300 817d 	bgt.w	8008194 <_svfprintf_r+0xd74>
 8007e9a:	3408      	adds	r4, #8
 8007e9c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007e9e:	b16b      	cbz	r3, 8007ebc <_svfprintf_r+0xa9c>
 8007ea0:	ab1f      	add	r3, sp, #124	; 0x7c
 8007ea2:	6023      	str	r3, [r4, #0]
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	6063      	str	r3, [r4, #4]
 8007ea8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007eaa:	3302      	adds	r3, #2
 8007eac:	9328      	str	r3, [sp, #160]	; 0xa0
 8007eae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	2b07      	cmp	r3, #7
 8007eb4:	9327      	str	r3, [sp, #156]	; 0x9c
 8007eb6:	f300 8177 	bgt.w	80081a8 <_svfprintf_r+0xd88>
 8007eba:	3408      	adds	r4, #8
 8007ebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ebe:	2b80      	cmp	r3, #128	; 0x80
 8007ec0:	d122      	bne.n	8007f08 <_svfprintf_r+0xae8>
 8007ec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ec4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007ec6:	1a9b      	subs	r3, r3, r2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ecc:	dd1c      	ble.n	8007f08 <_svfprintf_r+0xae8>
 8007ece:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007ed0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8007ed4:	2810      	cmp	r0, #16
 8007ed6:	486d      	ldr	r0, [pc, #436]	; (800808c <_svfprintf_r+0xc6c>)
 8007ed8:	6020      	str	r0, [r4, #0]
 8007eda:	f102 0201 	add.w	r2, r2, #1
 8007ede:	f104 0108 	add.w	r1, r4, #8
 8007ee2:	f300 816b 	bgt.w	80081bc <_svfprintf_r+0xd9c>
 8007ee6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007ee8:	6060      	str	r0, [r4, #4]
 8007eea:	4403      	add	r3, r0
 8007eec:	2a07      	cmp	r2, #7
 8007eee:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8007ef2:	f340 8178 	ble.w	80081e6 <_svfprintf_r+0xdc6>
 8007ef6:	aa26      	add	r2, sp, #152	; 0x98
 8007ef8:	4641      	mov	r1, r8
 8007efa:	9803      	ldr	r0, [sp, #12]
 8007efc:	f002 f9af 	bl	800a25e <__ssprint_r>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f040 8479 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 8007f06:	ac29      	add	r4, sp, #164	; 0xa4
 8007f08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f0a:	1b5b      	subs	r3, r3, r5
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f10:	dd1c      	ble.n	8007f4c <_svfprintf_r+0xb2c>
 8007f12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007f14:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8007f18:	2810      	cmp	r0, #16
 8007f1a:	485c      	ldr	r0, [pc, #368]	; (800808c <_svfprintf_r+0xc6c>)
 8007f1c:	6020      	str	r0, [r4, #0]
 8007f1e:	f102 0201 	add.w	r2, r2, #1
 8007f22:	f104 0108 	add.w	r1, r4, #8
 8007f26:	f300 8160 	bgt.w	80081ea <_svfprintf_r+0xdca>
 8007f2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007f2c:	6060      	str	r0, [r4, #4]
 8007f2e:	4403      	add	r3, r0
 8007f30:	2a07      	cmp	r2, #7
 8007f32:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8007f36:	f340 816d 	ble.w	8008214 <_svfprintf_r+0xdf4>
 8007f3a:	aa26      	add	r2, sp, #152	; 0x98
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	9803      	ldr	r0, [sp, #12]
 8007f40:	f002 f98d 	bl	800a25e <__ssprint_r>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f040 8457 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 8007f4a:	ac29      	add	r4, sp, #164	; 0xa4
 8007f4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007f4e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f50:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007f54:	f040 8160 	bne.w	8008218 <_svfprintf_r+0xdf8>
 8007f58:	e9c4 b500 	strd	fp, r5, [r4]
 8007f5c:	441d      	add	r5, r3
 8007f5e:	9528      	str	r5, [sp, #160]	; 0xa0
 8007f60:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007f62:	3301      	adds	r3, #1
 8007f64:	2b07      	cmp	r3, #7
 8007f66:	9327      	str	r3, [sp, #156]	; 0x9c
 8007f68:	f300 819c 	bgt.w	80082a4 <_svfprintf_r+0xe84>
 8007f6c:	3408      	adds	r4, #8
 8007f6e:	f01a 0f04 	tst.w	sl, #4
 8007f72:	f040 8423 	bne.w	80087bc <_svfprintf_r+0x139c>
 8007f76:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8007f7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f7c:	428a      	cmp	r2, r1
 8007f7e:	bfac      	ite	ge
 8007f80:	189b      	addge	r3, r3, r2
 8007f82:	185b      	addlt	r3, r3, r1
 8007f84:	930e      	str	r3, [sp, #56]	; 0x38
 8007f86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007f88:	b13b      	cbz	r3, 8007f9a <_svfprintf_r+0xb7a>
 8007f8a:	aa26      	add	r2, sp, #152	; 0x98
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	9803      	ldr	r0, [sp, #12]
 8007f90:	f002 f965 	bl	800a25e <__ssprint_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	f040 842f 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9327      	str	r3, [sp, #156]	; 0x9c
 8007f9e:	f1b9 0f00 	cmp.w	r9, #0
 8007fa2:	f040 8445 	bne.w	8008830 <_svfprintf_r+0x1410>
 8007fa6:	ac29      	add	r4, sp, #164	; 0xa4
 8007fa8:	e6b7      	b.n	8007d1a <_svfprintf_r+0x8fa>
 8007faa:	4658      	mov	r0, fp
 8007fac:	f7f8 f930 	bl	8000210 <strlen>
 8007fb0:	46b1      	mov	r9, r6
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	e495      	b.n	80078e2 <_svfprintf_r+0x4c2>
 8007fb6:	f04a 0a10 	orr.w	sl, sl, #16
 8007fba:	f01a 0f20 	tst.w	sl, #32
 8007fbe:	d009      	beq.n	8007fd4 <_svfprintf_r+0xbb4>
 8007fc0:	3607      	adds	r6, #7
 8007fc2:	f026 0607 	bic.w	r6, r6, #7
 8007fc6:	f106 0308 	add.w	r3, r6, #8
 8007fca:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007fce:	9308      	str	r3, [sp, #32]
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e6c9      	b.n	8007d68 <_svfprintf_r+0x948>
 8007fd4:	1d33      	adds	r3, r6, #4
 8007fd6:	f01a 0f10 	tst.w	sl, #16
 8007fda:	9308      	str	r3, [sp, #32]
 8007fdc:	d001      	beq.n	8007fe2 <_svfprintf_r+0xbc2>
 8007fde:	6836      	ldr	r6, [r6, #0]
 8007fe0:	e003      	b.n	8007fea <_svfprintf_r+0xbca>
 8007fe2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007fe6:	d002      	beq.n	8007fee <_svfprintf_r+0xbce>
 8007fe8:	8836      	ldrh	r6, [r6, #0]
 8007fea:	2700      	movs	r7, #0
 8007fec:	e7f0      	b.n	8007fd0 <_svfprintf_r+0xbb0>
 8007fee:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007ff2:	d0f4      	beq.n	8007fde <_svfprintf_r+0xbbe>
 8007ff4:	7836      	ldrb	r6, [r6, #0]
 8007ff6:	e7f8      	b.n	8007fea <_svfprintf_r+0xbca>
 8007ff8:	4b22      	ldr	r3, [pc, #136]	; (8008084 <_svfprintf_r+0xc64>)
 8007ffa:	f7ff bb48 	b.w	800768e <_svfprintf_r+0x26e>
 8007ffe:	1d33      	adds	r3, r6, #4
 8008000:	f01a 0f10 	tst.w	sl, #16
 8008004:	9308      	str	r3, [sp, #32]
 8008006:	d001      	beq.n	800800c <_svfprintf_r+0xbec>
 8008008:	6836      	ldr	r6, [r6, #0]
 800800a:	e003      	b.n	8008014 <_svfprintf_r+0xbf4>
 800800c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008010:	d003      	beq.n	800801a <_svfprintf_r+0xbfa>
 8008012:	8836      	ldrh	r6, [r6, #0]
 8008014:	2700      	movs	r7, #0
 8008016:	f7ff bb47 	b.w	80076a8 <_svfprintf_r+0x288>
 800801a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800801e:	d0f3      	beq.n	8008008 <_svfprintf_r+0xbe8>
 8008020:	7836      	ldrb	r6, [r6, #0]
 8008022:	e7f7      	b.n	8008014 <_svfprintf_r+0xbf4>
 8008024:	4652      	mov	r2, sl
 8008026:	2301      	movs	r3, #1
 8008028:	e6a5      	b.n	8007d76 <_svfprintf_r+0x956>
 800802a:	2b01      	cmp	r3, #1
 800802c:	f43f ac04 	beq.w	8007838 <_svfprintf_r+0x418>
 8008030:	2b02      	cmp	r3, #2
 8008032:	d06c      	beq.n	800810e <_svfprintf_r+0xcee>
 8008034:	ab52      	add	r3, sp, #328	; 0x148
 8008036:	08f1      	lsrs	r1, r6, #3
 8008038:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800803c:	08f8      	lsrs	r0, r7, #3
 800803e:	f006 0207 	and.w	r2, r6, #7
 8008042:	4607      	mov	r7, r0
 8008044:	460e      	mov	r6, r1
 8008046:	3230      	adds	r2, #48	; 0x30
 8008048:	ea56 0107 	orrs.w	r1, r6, r7
 800804c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008050:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008054:	d114      	bne.n	8008080 <_svfprintf_r+0xc60>
 8008056:	f01a 0f01 	tst.w	sl, #1
 800805a:	d006      	beq.n	800806a <_svfprintf_r+0xc4a>
 800805c:	2a30      	cmp	r2, #48	; 0x30
 800805e:	d004      	beq.n	800806a <_svfprintf_r+0xc4a>
 8008060:	2230      	movs	r2, #48	; 0x30
 8008062:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8008066:	f1a3 0b02 	sub.w	fp, r3, #2
 800806a:	ab52      	add	r3, sp, #328	; 0x148
 800806c:	9510      	str	r5, [sp, #64]	; 0x40
 800806e:	f04f 0900 	mov.w	r9, #0
 8008072:	eba3 050b 	sub.w	r5, r3, fp
 8008076:	464f      	mov	r7, r9
 8008078:	f8cd 901c 	str.w	r9, [sp, #28]
 800807c:	464e      	mov	r6, r9
 800807e:	e6c2      	b.n	8007e06 <_svfprintf_r+0x9e6>
 8008080:	465b      	mov	r3, fp
 8008082:	e7d8      	b.n	8008036 <_svfprintf_r+0xc16>
 8008084:	0800a828 	.word	0x0800a828
 8008088:	0800a84c 	.word	0x0800a84c
 800808c:	0800a85c 	.word	0x0800a85c
 8008090:	2300      	movs	r3, #0
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8008098:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 800809c:	9307      	str	r3, [sp, #28]
 800809e:	220a      	movs	r2, #10
 80080a0:	2300      	movs	r3, #0
 80080a2:	4630      	mov	r0, r6
 80080a4:	4639      	mov	r1, r7
 80080a6:	f7f8 fdef 	bl	8000c88 <__aeabi_uldivmod>
 80080aa:	9b04      	ldr	r3, [sp, #16]
 80080ac:	3301      	adds	r3, #1
 80080ae:	9304      	str	r3, [sp, #16]
 80080b0:	9b07      	ldr	r3, [sp, #28]
 80080b2:	3230      	adds	r2, #48	; 0x30
 80080b4:	f109 3bff 	add.w	fp, r9, #4294967295
 80080b8:	f809 2c01 	strb.w	r2, [r9, #-1]
 80080bc:	b1d3      	cbz	r3, 80080f4 <_svfprintf_r+0xcd4>
 80080be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c0:	9a04      	ldr	r2, [sp, #16]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d115      	bne.n	80080f4 <_svfprintf_r+0xcd4>
 80080c8:	2aff      	cmp	r2, #255	; 0xff
 80080ca:	d013      	beq.n	80080f4 <_svfprintf_r+0xcd4>
 80080cc:	2f00      	cmp	r7, #0
 80080ce:	bf08      	it	eq
 80080d0:	2e0a      	cmpeq	r6, #10
 80080d2:	d30f      	bcc.n	80080f4 <_svfprintf_r+0xcd4>
 80080d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080d6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80080d8:	ebab 0b03 	sub.w	fp, fp, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	4658      	mov	r0, fp
 80080e0:	f002 f8a8 	bl	800a234 <strncpy>
 80080e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e6:	785b      	ldrb	r3, [r3, #1]
 80080e8:	b11b      	cbz	r3, 80080f2 <_svfprintf_r+0xcd2>
 80080ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ec:	3301      	adds	r3, #1
 80080ee:	9309      	str	r3, [sp, #36]	; 0x24
 80080f0:	2300      	movs	r3, #0
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	2300      	movs	r3, #0
 80080f6:	4630      	mov	r0, r6
 80080f8:	4639      	mov	r1, r7
 80080fa:	220a      	movs	r2, #10
 80080fc:	f7f8 fdc4 	bl	8000c88 <__aeabi_uldivmod>
 8008100:	4606      	mov	r6, r0
 8008102:	460f      	mov	r7, r1
 8008104:	ea56 0307 	orrs.w	r3, r6, r7
 8008108:	d0af      	beq.n	800806a <_svfprintf_r+0xc4a>
 800810a:	46d9      	mov	r9, fp
 800810c:	e7c7      	b.n	800809e <_svfprintf_r+0xc7e>
 800810e:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8008112:	f006 030f 	and.w	r3, r6, #15
 8008116:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008118:	5cd3      	ldrb	r3, [r2, r3]
 800811a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800811e:	0933      	lsrs	r3, r6, #4
 8008120:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008124:	093a      	lsrs	r2, r7, #4
 8008126:	461e      	mov	r6, r3
 8008128:	4617      	mov	r7, r2
 800812a:	ea56 0307 	orrs.w	r3, r6, r7
 800812e:	d1f0      	bne.n	8008112 <_svfprintf_r+0xcf2>
 8008130:	e79b      	b.n	800806a <_svfprintf_r+0xc4a>
 8008132:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8008136:	2b00      	cmp	r3, #0
 8008138:	d197      	bne.n	800806a <_svfprintf_r+0xc4a>
 800813a:	07d2      	lsls	r2, r2, #31
 800813c:	bf44      	itt	mi
 800813e:	2330      	movmi	r3, #48	; 0x30
 8008140:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8008144:	e791      	b.n	800806a <_svfprintf_r+0xc4a>
 8008146:	9b06      	ldr	r3, [sp, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 8377 	beq.w	800883c <_svfprintf_r+0x141c>
 800814e:	2000      	movs	r0, #0
 8008150:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8008154:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8008158:	9608      	str	r6, [sp, #32]
 800815a:	f7ff bb49 	b.w	80077f0 <_svfprintf_r+0x3d0>
 800815e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8008162:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008164:	e4ec      	b.n	8007b40 <_svfprintf_r+0x720>
 8008166:	2010      	movs	r0, #16
 8008168:	4403      	add	r3, r0
 800816a:	2a07      	cmp	r2, #7
 800816c:	6060      	str	r0, [r4, #4]
 800816e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8008172:	dd08      	ble.n	8008186 <_svfprintf_r+0xd66>
 8008174:	aa26      	add	r2, sp, #152	; 0x98
 8008176:	4641      	mov	r1, r8
 8008178:	9803      	ldr	r0, [sp, #12]
 800817a:	f002 f870 	bl	800a25e <__ssprint_r>
 800817e:	2800      	cmp	r0, #0
 8008180:	f040 833a 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 8008184:	a929      	add	r1, sp, #164	; 0xa4
 8008186:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008188:	3b10      	subs	r3, #16
 800818a:	9313      	str	r3, [sp, #76]	; 0x4c
 800818c:	460c      	mov	r4, r1
 800818e:	e656      	b.n	8007e3e <_svfprintf_r+0xa1e>
 8008190:	460c      	mov	r4, r1
 8008192:	e671      	b.n	8007e78 <_svfprintf_r+0xa58>
 8008194:	aa26      	add	r2, sp, #152	; 0x98
 8008196:	4641      	mov	r1, r8
 8008198:	9803      	ldr	r0, [sp, #12]
 800819a:	f002 f860 	bl	800a25e <__ssprint_r>
 800819e:	2800      	cmp	r0, #0
 80081a0:	f040 832a 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80081a4:	ac29      	add	r4, sp, #164	; 0xa4
 80081a6:	e679      	b.n	8007e9c <_svfprintf_r+0xa7c>
 80081a8:	aa26      	add	r2, sp, #152	; 0x98
 80081aa:	4641      	mov	r1, r8
 80081ac:	9803      	ldr	r0, [sp, #12]
 80081ae:	f002 f856 	bl	800a25e <__ssprint_r>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	f040 8320 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80081b8:	ac29      	add	r4, sp, #164	; 0xa4
 80081ba:	e67f      	b.n	8007ebc <_svfprintf_r+0xa9c>
 80081bc:	2010      	movs	r0, #16
 80081be:	4403      	add	r3, r0
 80081c0:	2a07      	cmp	r2, #7
 80081c2:	6060      	str	r0, [r4, #4]
 80081c4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80081c8:	dd08      	ble.n	80081dc <_svfprintf_r+0xdbc>
 80081ca:	aa26      	add	r2, sp, #152	; 0x98
 80081cc:	4641      	mov	r1, r8
 80081ce:	9803      	ldr	r0, [sp, #12]
 80081d0:	f002 f845 	bl	800a25e <__ssprint_r>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f040 830f 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80081da:	a929      	add	r1, sp, #164	; 0xa4
 80081dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081de:	3b10      	subs	r3, #16
 80081e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80081e2:	460c      	mov	r4, r1
 80081e4:	e673      	b.n	8007ece <_svfprintf_r+0xaae>
 80081e6:	460c      	mov	r4, r1
 80081e8:	e68e      	b.n	8007f08 <_svfprintf_r+0xae8>
 80081ea:	2010      	movs	r0, #16
 80081ec:	4403      	add	r3, r0
 80081ee:	2a07      	cmp	r2, #7
 80081f0:	6060      	str	r0, [r4, #4]
 80081f2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80081f6:	dd08      	ble.n	800820a <_svfprintf_r+0xdea>
 80081f8:	aa26      	add	r2, sp, #152	; 0x98
 80081fa:	4641      	mov	r1, r8
 80081fc:	9803      	ldr	r0, [sp, #12]
 80081fe:	f002 f82e 	bl	800a25e <__ssprint_r>
 8008202:	2800      	cmp	r0, #0
 8008204:	f040 82f8 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 8008208:	a929      	add	r1, sp, #164	; 0xa4
 800820a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800820c:	3b10      	subs	r3, #16
 800820e:	9310      	str	r3, [sp, #64]	; 0x40
 8008210:	460c      	mov	r4, r1
 8008212:	e67e      	b.n	8007f12 <_svfprintf_r+0xaf2>
 8008214:	460c      	mov	r4, r1
 8008216:	e699      	b.n	8007f4c <_svfprintf_r+0xb2c>
 8008218:	9b06      	ldr	r3, [sp, #24]
 800821a:	2b65      	cmp	r3, #101	; 0x65
 800821c:	f340 8234 	ble.w	8008688 <_svfprintf_r+0x1268>
 8008220:	2200      	movs	r2, #0
 8008222:	2300      	movs	r3, #0
 8008224:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008228:	f7f8 fc6e 	bl	8000b08 <__aeabi_dcmpeq>
 800822c:	2800      	cmp	r0, #0
 800822e:	d069      	beq.n	8008304 <_svfprintf_r+0xee4>
 8008230:	4b6e      	ldr	r3, [pc, #440]	; (80083ec <_svfprintf_r+0xfcc>)
 8008232:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	2301      	movs	r3, #1
 8008238:	441d      	add	r5, r3
 800823a:	6063      	str	r3, [r4, #4]
 800823c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800823e:	9528      	str	r5, [sp, #160]	; 0xa0
 8008240:	3301      	adds	r3, #1
 8008242:	2b07      	cmp	r3, #7
 8008244:	9327      	str	r3, [sp, #156]	; 0x9c
 8008246:	dc37      	bgt.n	80082b8 <_svfprintf_r+0xe98>
 8008248:	3408      	adds	r4, #8
 800824a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800824c:	9a04      	ldr	r2, [sp, #16]
 800824e:	4293      	cmp	r3, r2
 8008250:	db03      	blt.n	800825a <_svfprintf_r+0xe3a>
 8008252:	f01a 0f01 	tst.w	sl, #1
 8008256:	f43f ae8a 	beq.w	8007f6e <_svfprintf_r+0xb4e>
 800825a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008260:	6063      	str	r3, [r4, #4]
 8008262:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008264:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008266:	4413      	add	r3, r2
 8008268:	9328      	str	r3, [sp, #160]	; 0xa0
 800826a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800826c:	3301      	adds	r3, #1
 800826e:	2b07      	cmp	r3, #7
 8008270:	9327      	str	r3, [sp, #156]	; 0x9c
 8008272:	dc2b      	bgt.n	80082cc <_svfprintf_r+0xeac>
 8008274:	3408      	adds	r4, #8
 8008276:	9b04      	ldr	r3, [sp, #16]
 8008278:	1e5d      	subs	r5, r3, #1
 800827a:	2d00      	cmp	r5, #0
 800827c:	f77f ae77 	ble.w	8007f6e <_svfprintf_r+0xb4e>
 8008280:	4e5b      	ldr	r6, [pc, #364]	; (80083f0 <_svfprintf_r+0xfd0>)
 8008282:	2710      	movs	r7, #16
 8008284:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8008288:	2d10      	cmp	r5, #16
 800828a:	f103 0301 	add.w	r3, r3, #1
 800828e:	f104 0108 	add.w	r1, r4, #8
 8008292:	6026      	str	r6, [r4, #0]
 8008294:	dc24      	bgt.n	80082e0 <_svfprintf_r+0xec0>
 8008296:	6065      	str	r5, [r4, #4]
 8008298:	2b07      	cmp	r3, #7
 800829a:	4415      	add	r5, r2
 800829c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80082a0:	f340 8289 	ble.w	80087b6 <_svfprintf_r+0x1396>
 80082a4:	aa26      	add	r2, sp, #152	; 0x98
 80082a6:	4641      	mov	r1, r8
 80082a8:	9803      	ldr	r0, [sp, #12]
 80082aa:	f001 ffd8 	bl	800a25e <__ssprint_r>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f040 82a2 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80082b4:	ac29      	add	r4, sp, #164	; 0xa4
 80082b6:	e65a      	b.n	8007f6e <_svfprintf_r+0xb4e>
 80082b8:	aa26      	add	r2, sp, #152	; 0x98
 80082ba:	4641      	mov	r1, r8
 80082bc:	9803      	ldr	r0, [sp, #12]
 80082be:	f001 ffce 	bl	800a25e <__ssprint_r>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f040 8298 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80082c8:	ac29      	add	r4, sp, #164	; 0xa4
 80082ca:	e7be      	b.n	800824a <_svfprintf_r+0xe2a>
 80082cc:	aa26      	add	r2, sp, #152	; 0x98
 80082ce:	4641      	mov	r1, r8
 80082d0:	9803      	ldr	r0, [sp, #12]
 80082d2:	f001 ffc4 	bl	800a25e <__ssprint_r>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f040 828e 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80082dc:	ac29      	add	r4, sp, #164	; 0xa4
 80082de:	e7ca      	b.n	8008276 <_svfprintf_r+0xe56>
 80082e0:	3210      	adds	r2, #16
 80082e2:	2b07      	cmp	r3, #7
 80082e4:	6067      	str	r7, [r4, #4]
 80082e6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80082ea:	dd08      	ble.n	80082fe <_svfprintf_r+0xede>
 80082ec:	aa26      	add	r2, sp, #152	; 0x98
 80082ee:	4641      	mov	r1, r8
 80082f0:	9803      	ldr	r0, [sp, #12]
 80082f2:	f001 ffb4 	bl	800a25e <__ssprint_r>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f040 827e 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80082fc:	a929      	add	r1, sp, #164	; 0xa4
 80082fe:	3d10      	subs	r5, #16
 8008300:	460c      	mov	r4, r1
 8008302:	e7bf      	b.n	8008284 <_svfprintf_r+0xe64>
 8008304:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008306:	2b00      	cmp	r3, #0
 8008308:	dc74      	bgt.n	80083f4 <_svfprintf_r+0xfd4>
 800830a:	4b38      	ldr	r3, [pc, #224]	; (80083ec <_svfprintf_r+0xfcc>)
 800830c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	2301      	movs	r3, #1
 8008312:	441d      	add	r5, r3
 8008314:	6063      	str	r3, [r4, #4]
 8008316:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008318:	9528      	str	r5, [sp, #160]	; 0xa0
 800831a:	3301      	adds	r3, #1
 800831c:	2b07      	cmp	r3, #7
 800831e:	9327      	str	r3, [sp, #156]	; 0x9c
 8008320:	dc3e      	bgt.n	80083a0 <_svfprintf_r+0xf80>
 8008322:	3408      	adds	r4, #8
 8008324:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008326:	b92b      	cbnz	r3, 8008334 <_svfprintf_r+0xf14>
 8008328:	9b04      	ldr	r3, [sp, #16]
 800832a:	b91b      	cbnz	r3, 8008334 <_svfprintf_r+0xf14>
 800832c:	f01a 0f01 	tst.w	sl, #1
 8008330:	f43f ae1d 	beq.w	8007f6e <_svfprintf_r+0xb4e>
 8008334:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008336:	6023      	str	r3, [r4, #0]
 8008338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800833a:	6063      	str	r3, [r4, #4]
 800833c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800833e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008340:	4413      	add	r3, r2
 8008342:	9328      	str	r3, [sp, #160]	; 0xa0
 8008344:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008346:	3301      	adds	r3, #1
 8008348:	2b07      	cmp	r3, #7
 800834a:	9327      	str	r3, [sp, #156]	; 0x9c
 800834c:	dc32      	bgt.n	80083b4 <_svfprintf_r+0xf94>
 800834e:	3408      	adds	r4, #8
 8008350:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008352:	2d00      	cmp	r5, #0
 8008354:	da1b      	bge.n	800838e <_svfprintf_r+0xf6e>
 8008356:	4e26      	ldr	r6, [pc, #152]	; (80083f0 <_svfprintf_r+0xfd0>)
 8008358:	426d      	negs	r5, r5
 800835a:	4623      	mov	r3, r4
 800835c:	2710      	movs	r7, #16
 800835e:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8008362:	2d10      	cmp	r5, #16
 8008364:	f102 0201 	add.w	r2, r2, #1
 8008368:	f104 0408 	add.w	r4, r4, #8
 800836c:	601e      	str	r6, [r3, #0]
 800836e:	dc2b      	bgt.n	80083c8 <_svfprintf_r+0xfa8>
 8008370:	605d      	str	r5, [r3, #4]
 8008372:	2a07      	cmp	r2, #7
 8008374:	440d      	add	r5, r1
 8008376:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800837a:	dd08      	ble.n	800838e <_svfprintf_r+0xf6e>
 800837c:	aa26      	add	r2, sp, #152	; 0x98
 800837e:	4641      	mov	r1, r8
 8008380:	9803      	ldr	r0, [sp, #12]
 8008382:	f001 ff6c 	bl	800a25e <__ssprint_r>
 8008386:	2800      	cmp	r0, #0
 8008388:	f040 8236 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 800838c:	ac29      	add	r4, sp, #164	; 0xa4
 800838e:	9b04      	ldr	r3, [sp, #16]
 8008390:	6063      	str	r3, [r4, #4]
 8008392:	9a04      	ldr	r2, [sp, #16]
 8008394:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008396:	f8c4 b000 	str.w	fp, [r4]
 800839a:	4413      	add	r3, r2
 800839c:	9328      	str	r3, [sp, #160]	; 0xa0
 800839e:	e5df      	b.n	8007f60 <_svfprintf_r+0xb40>
 80083a0:	aa26      	add	r2, sp, #152	; 0x98
 80083a2:	4641      	mov	r1, r8
 80083a4:	9803      	ldr	r0, [sp, #12]
 80083a6:	f001 ff5a 	bl	800a25e <__ssprint_r>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	f040 8224 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80083b0:	ac29      	add	r4, sp, #164	; 0xa4
 80083b2:	e7b7      	b.n	8008324 <_svfprintf_r+0xf04>
 80083b4:	aa26      	add	r2, sp, #152	; 0x98
 80083b6:	4641      	mov	r1, r8
 80083b8:	9803      	ldr	r0, [sp, #12]
 80083ba:	f001 ff50 	bl	800a25e <__ssprint_r>
 80083be:	2800      	cmp	r0, #0
 80083c0:	f040 821a 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80083c4:	ac29      	add	r4, sp, #164	; 0xa4
 80083c6:	e7c3      	b.n	8008350 <_svfprintf_r+0xf30>
 80083c8:	3110      	adds	r1, #16
 80083ca:	2a07      	cmp	r2, #7
 80083cc:	605f      	str	r7, [r3, #4]
 80083ce:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 80083d2:	dd08      	ble.n	80083e6 <_svfprintf_r+0xfc6>
 80083d4:	aa26      	add	r2, sp, #152	; 0x98
 80083d6:	4641      	mov	r1, r8
 80083d8:	9803      	ldr	r0, [sp, #12]
 80083da:	f001 ff40 	bl	800a25e <__ssprint_r>
 80083de:	2800      	cmp	r0, #0
 80083e0:	f040 820a 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80083e4:	ac29      	add	r4, sp, #164	; 0xa4
 80083e6:	3d10      	subs	r5, #16
 80083e8:	4623      	mov	r3, r4
 80083ea:	e7b8      	b.n	800835e <_svfprintf_r+0xf3e>
 80083ec:	0800a84a 	.word	0x0800a84a
 80083f0:	0800a85c 	.word	0x0800a85c
 80083f4:	9b04      	ldr	r3, [sp, #16]
 80083f6:	42b3      	cmp	r3, r6
 80083f8:	bfa8      	it	ge
 80083fa:	4633      	movge	r3, r6
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	461d      	mov	r5, r3
 8008400:	dd0b      	ble.n	800841a <_svfprintf_r+0xffa>
 8008402:	e9c4 b300 	strd	fp, r3, [r4]
 8008406:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008408:	442b      	add	r3, r5
 800840a:	9328      	str	r3, [sp, #160]	; 0xa0
 800840c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800840e:	3301      	adds	r3, #1
 8008410:	2b07      	cmp	r3, #7
 8008412:	9327      	str	r3, [sp, #156]	; 0x9c
 8008414:	f300 8086 	bgt.w	8008524 <_svfprintf_r+0x1104>
 8008418:	3408      	adds	r4, #8
 800841a:	2d00      	cmp	r5, #0
 800841c:	bfac      	ite	ge
 800841e:	1b75      	subge	r5, r6, r5
 8008420:	4635      	movlt	r5, r6
 8008422:	2d00      	cmp	r5, #0
 8008424:	dd19      	ble.n	800845a <_svfprintf_r+0x103a>
 8008426:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800842a:	4896      	ldr	r0, [pc, #600]	; (8008684 <_svfprintf_r+0x1264>)
 800842c:	6020      	str	r0, [r4, #0]
 800842e:	2d10      	cmp	r5, #16
 8008430:	f103 0301 	add.w	r3, r3, #1
 8008434:	f104 0108 	add.w	r1, r4, #8
 8008438:	dc7e      	bgt.n	8008538 <_svfprintf_r+0x1118>
 800843a:	6065      	str	r5, [r4, #4]
 800843c:	2b07      	cmp	r3, #7
 800843e:	4415      	add	r5, r2
 8008440:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8008444:	f340 808b 	ble.w	800855e <_svfprintf_r+0x113e>
 8008448:	aa26      	add	r2, sp, #152	; 0x98
 800844a:	4641      	mov	r1, r8
 800844c:	9803      	ldr	r0, [sp, #12]
 800844e:	f001 ff06 	bl	800a25e <__ssprint_r>
 8008452:	2800      	cmp	r0, #0
 8008454:	f040 81d0 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 8008458:	ac29      	add	r4, sp, #164	; 0xa4
 800845a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800845e:	445e      	add	r6, fp
 8008460:	d009      	beq.n	8008476 <_svfprintf_r+0x1056>
 8008462:	9b07      	ldr	r3, [sp, #28]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d17c      	bne.n	8008562 <_svfprintf_r+0x1142>
 8008468:	2f00      	cmp	r7, #0
 800846a:	d17c      	bne.n	8008566 <_svfprintf_r+0x1146>
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	445b      	add	r3, fp
 8008470:	429e      	cmp	r6, r3
 8008472:	bf28      	it	cs
 8008474:	461e      	movcs	r6, r3
 8008476:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008478:	9a04      	ldr	r2, [sp, #16]
 800847a:	4293      	cmp	r3, r2
 800847c:	db02      	blt.n	8008484 <_svfprintf_r+0x1064>
 800847e:	f01a 0f01 	tst.w	sl, #1
 8008482:	d00e      	beq.n	80084a2 <_svfprintf_r+0x1082>
 8008484:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800848a:	6063      	str	r3, [r4, #4]
 800848c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800848e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008490:	4413      	add	r3, r2
 8008492:	9328      	str	r3, [sp, #160]	; 0xa0
 8008494:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008496:	3301      	adds	r3, #1
 8008498:	2b07      	cmp	r3, #7
 800849a:	9327      	str	r3, [sp, #156]	; 0x9c
 800849c:	f300 80dd 	bgt.w	800865a <_svfprintf_r+0x123a>
 80084a0:	3408      	adds	r4, #8
 80084a2:	9b04      	ldr	r3, [sp, #16]
 80084a4:	9a04      	ldr	r2, [sp, #16]
 80084a6:	eb0b 0503 	add.w	r5, fp, r3
 80084aa:	1bab      	subs	r3, r5, r6
 80084ac:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80084ae:	1b55      	subs	r5, r2, r5
 80084b0:	429d      	cmp	r5, r3
 80084b2:	bfa8      	it	ge
 80084b4:	461d      	movge	r5, r3
 80084b6:	2d00      	cmp	r5, #0
 80084b8:	dd0b      	ble.n	80084d2 <_svfprintf_r+0x10b2>
 80084ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80084bc:	442b      	add	r3, r5
 80084be:	9328      	str	r3, [sp, #160]	; 0xa0
 80084c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80084c2:	3301      	adds	r3, #1
 80084c4:	2b07      	cmp	r3, #7
 80084c6:	e9c4 6500 	strd	r6, r5, [r4]
 80084ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80084cc:	f300 80cf 	bgt.w	800866e <_svfprintf_r+0x124e>
 80084d0:	3408      	adds	r4, #8
 80084d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80084d4:	9a04      	ldr	r2, [sp, #16]
 80084d6:	2d00      	cmp	r5, #0
 80084d8:	eba2 0303 	sub.w	r3, r2, r3
 80084dc:	bfac      	ite	ge
 80084de:	1b5d      	subge	r5, r3, r5
 80084e0:	461d      	movlt	r5, r3
 80084e2:	2d00      	cmp	r5, #0
 80084e4:	f77f ad43 	ble.w	8007f6e <_svfprintf_r+0xb4e>
 80084e8:	4e66      	ldr	r6, [pc, #408]	; (8008684 <_svfprintf_r+0x1264>)
 80084ea:	2710      	movs	r7, #16
 80084ec:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80084f0:	2d10      	cmp	r5, #16
 80084f2:	f103 0301 	add.w	r3, r3, #1
 80084f6:	f104 0108 	add.w	r1, r4, #8
 80084fa:	6026      	str	r6, [r4, #0]
 80084fc:	f77f aecb 	ble.w	8008296 <_svfprintf_r+0xe76>
 8008500:	3210      	adds	r2, #16
 8008502:	2b07      	cmp	r3, #7
 8008504:	6067      	str	r7, [r4, #4]
 8008506:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800850a:	dd08      	ble.n	800851e <_svfprintf_r+0x10fe>
 800850c:	aa26      	add	r2, sp, #152	; 0x98
 800850e:	4641      	mov	r1, r8
 8008510:	9803      	ldr	r0, [sp, #12]
 8008512:	f001 fea4 	bl	800a25e <__ssprint_r>
 8008516:	2800      	cmp	r0, #0
 8008518:	f040 816e 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 800851c:	a929      	add	r1, sp, #164	; 0xa4
 800851e:	3d10      	subs	r5, #16
 8008520:	460c      	mov	r4, r1
 8008522:	e7e3      	b.n	80084ec <_svfprintf_r+0x10cc>
 8008524:	aa26      	add	r2, sp, #152	; 0x98
 8008526:	4641      	mov	r1, r8
 8008528:	9803      	ldr	r0, [sp, #12]
 800852a:	f001 fe98 	bl	800a25e <__ssprint_r>
 800852e:	2800      	cmp	r0, #0
 8008530:	f040 8162 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 8008534:	ac29      	add	r4, sp, #164	; 0xa4
 8008536:	e770      	b.n	800841a <_svfprintf_r+0xffa>
 8008538:	2010      	movs	r0, #16
 800853a:	4402      	add	r2, r0
 800853c:	2b07      	cmp	r3, #7
 800853e:	6060      	str	r0, [r4, #4]
 8008540:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8008544:	dd08      	ble.n	8008558 <_svfprintf_r+0x1138>
 8008546:	aa26      	add	r2, sp, #152	; 0x98
 8008548:	4641      	mov	r1, r8
 800854a:	9803      	ldr	r0, [sp, #12]
 800854c:	f001 fe87 	bl	800a25e <__ssprint_r>
 8008550:	2800      	cmp	r0, #0
 8008552:	f040 8151 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 8008556:	a929      	add	r1, sp, #164	; 0xa4
 8008558:	3d10      	subs	r5, #16
 800855a:	460c      	mov	r4, r1
 800855c:	e763      	b.n	8008426 <_svfprintf_r+0x1006>
 800855e:	460c      	mov	r4, r1
 8008560:	e77b      	b.n	800845a <_svfprintf_r+0x103a>
 8008562:	2f00      	cmp	r7, #0
 8008564:	d049      	beq.n	80085fa <_svfprintf_r+0x11da>
 8008566:	3f01      	subs	r7, #1
 8008568:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800856e:	6063      	str	r3, [r4, #4]
 8008570:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008572:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008574:	4413      	add	r3, r2
 8008576:	9328      	str	r3, [sp, #160]	; 0xa0
 8008578:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800857a:	3301      	adds	r3, #1
 800857c:	2b07      	cmp	r3, #7
 800857e:	9327      	str	r3, [sp, #156]	; 0x9c
 8008580:	dc42      	bgt.n	8008608 <_svfprintf_r+0x11e8>
 8008582:	3408      	adds	r4, #8
 8008584:	9b04      	ldr	r3, [sp, #16]
 8008586:	445b      	add	r3, fp
 8008588:	1b9a      	subs	r2, r3, r6
 800858a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	4293      	cmp	r3, r2
 8008590:	bfa8      	it	ge
 8008592:	4613      	movge	r3, r2
 8008594:	2b00      	cmp	r3, #0
 8008596:	461d      	mov	r5, r3
 8008598:	dd0a      	ble.n	80085b0 <_svfprintf_r+0x1190>
 800859a:	e9c4 6300 	strd	r6, r3, [r4]
 800859e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80085a0:	442b      	add	r3, r5
 80085a2:	9328      	str	r3, [sp, #160]	; 0xa0
 80085a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80085a6:	3301      	adds	r3, #1
 80085a8:	2b07      	cmp	r3, #7
 80085aa:	9327      	str	r3, [sp, #156]	; 0x9c
 80085ac:	dc36      	bgt.n	800861c <_svfprintf_r+0x11fc>
 80085ae:	3408      	adds	r4, #8
 80085b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2d00      	cmp	r5, #0
 80085b6:	bfac      	ite	ge
 80085b8:	1b5d      	subge	r5, r3, r5
 80085ba:	461d      	movlt	r5, r3
 80085bc:	2d00      	cmp	r5, #0
 80085be:	dd18      	ble.n	80085f2 <_svfprintf_r+0x11d2>
 80085c0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80085c4:	482f      	ldr	r0, [pc, #188]	; (8008684 <_svfprintf_r+0x1264>)
 80085c6:	6020      	str	r0, [r4, #0]
 80085c8:	2d10      	cmp	r5, #16
 80085ca:	f102 0201 	add.w	r2, r2, #1
 80085ce:	f104 0108 	add.w	r1, r4, #8
 80085d2:	dc2d      	bgt.n	8008630 <_svfprintf_r+0x1210>
 80085d4:	442b      	add	r3, r5
 80085d6:	2a07      	cmp	r2, #7
 80085d8:	6065      	str	r5, [r4, #4]
 80085da:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80085de:	dd3a      	ble.n	8008656 <_svfprintf_r+0x1236>
 80085e0:	aa26      	add	r2, sp, #152	; 0x98
 80085e2:	4641      	mov	r1, r8
 80085e4:	9803      	ldr	r0, [sp, #12]
 80085e6:	f001 fe3a 	bl	800a25e <__ssprint_r>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	f040 8104 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80085f0:	ac29      	add	r4, sp, #164	; 0xa4
 80085f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	441e      	add	r6, r3
 80085f8:	e733      	b.n	8008462 <_svfprintf_r+0x1042>
 80085fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fc:	3b01      	subs	r3, #1
 80085fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008600:	9b07      	ldr	r3, [sp, #28]
 8008602:	3b01      	subs	r3, #1
 8008604:	9307      	str	r3, [sp, #28]
 8008606:	e7af      	b.n	8008568 <_svfprintf_r+0x1148>
 8008608:	aa26      	add	r2, sp, #152	; 0x98
 800860a:	4641      	mov	r1, r8
 800860c:	9803      	ldr	r0, [sp, #12]
 800860e:	f001 fe26 	bl	800a25e <__ssprint_r>
 8008612:	2800      	cmp	r0, #0
 8008614:	f040 80f0 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 8008618:	ac29      	add	r4, sp, #164	; 0xa4
 800861a:	e7b3      	b.n	8008584 <_svfprintf_r+0x1164>
 800861c:	aa26      	add	r2, sp, #152	; 0x98
 800861e:	4641      	mov	r1, r8
 8008620:	9803      	ldr	r0, [sp, #12]
 8008622:	f001 fe1c 	bl	800a25e <__ssprint_r>
 8008626:	2800      	cmp	r0, #0
 8008628:	f040 80e6 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 800862c:	ac29      	add	r4, sp, #164	; 0xa4
 800862e:	e7bf      	b.n	80085b0 <_svfprintf_r+0x1190>
 8008630:	2010      	movs	r0, #16
 8008632:	4403      	add	r3, r0
 8008634:	2a07      	cmp	r2, #7
 8008636:	6060      	str	r0, [r4, #4]
 8008638:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800863c:	dd08      	ble.n	8008650 <_svfprintf_r+0x1230>
 800863e:	aa26      	add	r2, sp, #152	; 0x98
 8008640:	4641      	mov	r1, r8
 8008642:	9803      	ldr	r0, [sp, #12]
 8008644:	f001 fe0b 	bl	800a25e <__ssprint_r>
 8008648:	2800      	cmp	r0, #0
 800864a:	f040 80d5 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 800864e:	a929      	add	r1, sp, #164	; 0xa4
 8008650:	3d10      	subs	r5, #16
 8008652:	460c      	mov	r4, r1
 8008654:	e7b4      	b.n	80085c0 <_svfprintf_r+0x11a0>
 8008656:	460c      	mov	r4, r1
 8008658:	e7cb      	b.n	80085f2 <_svfprintf_r+0x11d2>
 800865a:	aa26      	add	r2, sp, #152	; 0x98
 800865c:	4641      	mov	r1, r8
 800865e:	9803      	ldr	r0, [sp, #12]
 8008660:	f001 fdfd 	bl	800a25e <__ssprint_r>
 8008664:	2800      	cmp	r0, #0
 8008666:	f040 80c7 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 800866a:	ac29      	add	r4, sp, #164	; 0xa4
 800866c:	e719      	b.n	80084a2 <_svfprintf_r+0x1082>
 800866e:	aa26      	add	r2, sp, #152	; 0x98
 8008670:	4641      	mov	r1, r8
 8008672:	9803      	ldr	r0, [sp, #12]
 8008674:	f001 fdf3 	bl	800a25e <__ssprint_r>
 8008678:	2800      	cmp	r0, #0
 800867a:	f040 80bd 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 800867e:	ac29      	add	r4, sp, #164	; 0xa4
 8008680:	e727      	b.n	80084d2 <_svfprintf_r+0x10b2>
 8008682:	bf00      	nop
 8008684:	0800a85c 	.word	0x0800a85c
 8008688:	9a04      	ldr	r2, [sp, #16]
 800868a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800868c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800868e:	2a01      	cmp	r2, #1
 8008690:	f105 0501 	add.w	r5, r5, #1
 8008694:	f103 0301 	add.w	r3, r3, #1
 8008698:	f104 0608 	add.w	r6, r4, #8
 800869c:	dc02      	bgt.n	80086a4 <_svfprintf_r+0x1284>
 800869e:	f01a 0f01 	tst.w	sl, #1
 80086a2:	d07d      	beq.n	80087a0 <_svfprintf_r+0x1380>
 80086a4:	2201      	movs	r2, #1
 80086a6:	2b07      	cmp	r3, #7
 80086a8:	f8c4 b000 	str.w	fp, [r4]
 80086ac:	6062      	str	r2, [r4, #4]
 80086ae:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80086b2:	dd08      	ble.n	80086c6 <_svfprintf_r+0x12a6>
 80086b4:	aa26      	add	r2, sp, #152	; 0x98
 80086b6:	4641      	mov	r1, r8
 80086b8:	9803      	ldr	r0, [sp, #12]
 80086ba:	f001 fdd0 	bl	800a25e <__ssprint_r>
 80086be:	2800      	cmp	r0, #0
 80086c0:	f040 809a 	bne.w	80087f8 <_svfprintf_r+0x13d8>
 80086c4:	ae29      	add	r6, sp, #164	; 0xa4
 80086c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086cc:	6073      	str	r3, [r6, #4]
 80086ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80086d2:	4413      	add	r3, r2
 80086d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80086d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80086d8:	3301      	adds	r3, #1
 80086da:	2b07      	cmp	r3, #7
 80086dc:	9327      	str	r3, [sp, #156]	; 0x9c
 80086de:	dc31      	bgt.n	8008744 <_svfprintf_r+0x1324>
 80086e0:	3608      	adds	r6, #8
 80086e2:	9b04      	ldr	r3, [sp, #16]
 80086e4:	2200      	movs	r2, #0
 80086e6:	1e5c      	subs	r4, r3, #1
 80086e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086ec:	2300      	movs	r3, #0
 80086ee:	f7f8 fa0b 	bl	8000b08 <__aeabi_dcmpeq>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d12f      	bne.n	8008756 <_svfprintf_r+0x1336>
 80086f6:	f10b 0301 	add.w	r3, fp, #1
 80086fa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80086fc:	9904      	ldr	r1, [sp, #16]
 80086fe:	e9c6 3400 	strd	r3, r4, [r6]
 8008702:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008704:	3201      	adds	r2, #1
 8008706:	3b01      	subs	r3, #1
 8008708:	440b      	add	r3, r1
 800870a:	2a07      	cmp	r2, #7
 800870c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8008710:	dd4f      	ble.n	80087b2 <_svfprintf_r+0x1392>
 8008712:	aa26      	add	r2, sp, #152	; 0x98
 8008714:	4641      	mov	r1, r8
 8008716:	9803      	ldr	r0, [sp, #12]
 8008718:	f001 fda1 	bl	800a25e <__ssprint_r>
 800871c:	2800      	cmp	r0, #0
 800871e:	d16b      	bne.n	80087f8 <_svfprintf_r+0x13d8>
 8008720:	ae29      	add	r6, sp, #164	; 0xa4
 8008722:	ab22      	add	r3, sp, #136	; 0x88
 8008724:	6033      	str	r3, [r6, #0]
 8008726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008728:	6073      	str	r3, [r6, #4]
 800872a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800872c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800872e:	4413      	add	r3, r2
 8008730:	9328      	str	r3, [sp, #160]	; 0xa0
 8008732:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008734:	3301      	adds	r3, #1
 8008736:	2b07      	cmp	r3, #7
 8008738:	9327      	str	r3, [sp, #156]	; 0x9c
 800873a:	f73f adb3 	bgt.w	80082a4 <_svfprintf_r+0xe84>
 800873e:	f106 0408 	add.w	r4, r6, #8
 8008742:	e414      	b.n	8007f6e <_svfprintf_r+0xb4e>
 8008744:	aa26      	add	r2, sp, #152	; 0x98
 8008746:	4641      	mov	r1, r8
 8008748:	9803      	ldr	r0, [sp, #12]
 800874a:	f001 fd88 	bl	800a25e <__ssprint_r>
 800874e:	2800      	cmp	r0, #0
 8008750:	d152      	bne.n	80087f8 <_svfprintf_r+0x13d8>
 8008752:	ae29      	add	r6, sp, #164	; 0xa4
 8008754:	e7c5      	b.n	80086e2 <_svfprintf_r+0x12c2>
 8008756:	2c00      	cmp	r4, #0
 8008758:	dde3      	ble.n	8008722 <_svfprintf_r+0x1302>
 800875a:	4d3e      	ldr	r5, [pc, #248]	; (8008854 <_svfprintf_r+0x1434>)
 800875c:	2710      	movs	r7, #16
 800875e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8008762:	2c10      	cmp	r4, #16
 8008764:	f103 0301 	add.w	r3, r3, #1
 8008768:	f106 0108 	add.w	r1, r6, #8
 800876c:	6035      	str	r5, [r6, #0]
 800876e:	dc07      	bgt.n	8008780 <_svfprintf_r+0x1360>
 8008770:	6074      	str	r4, [r6, #4]
 8008772:	2b07      	cmp	r3, #7
 8008774:	4414      	add	r4, r2
 8008776:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800877a:	dcca      	bgt.n	8008712 <_svfprintf_r+0x12f2>
 800877c:	460e      	mov	r6, r1
 800877e:	e7d0      	b.n	8008722 <_svfprintf_r+0x1302>
 8008780:	3210      	adds	r2, #16
 8008782:	2b07      	cmp	r3, #7
 8008784:	6077      	str	r7, [r6, #4]
 8008786:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800878a:	dd06      	ble.n	800879a <_svfprintf_r+0x137a>
 800878c:	aa26      	add	r2, sp, #152	; 0x98
 800878e:	4641      	mov	r1, r8
 8008790:	9803      	ldr	r0, [sp, #12]
 8008792:	f001 fd64 	bl	800a25e <__ssprint_r>
 8008796:	bb78      	cbnz	r0, 80087f8 <_svfprintf_r+0x13d8>
 8008798:	a929      	add	r1, sp, #164	; 0xa4
 800879a:	3c10      	subs	r4, #16
 800879c:	460e      	mov	r6, r1
 800879e:	e7de      	b.n	800875e <_svfprintf_r+0x133e>
 80087a0:	2201      	movs	r2, #1
 80087a2:	2b07      	cmp	r3, #7
 80087a4:	f8c4 b000 	str.w	fp, [r4]
 80087a8:	6062      	str	r2, [r4, #4]
 80087aa:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80087ae:	ddb8      	ble.n	8008722 <_svfprintf_r+0x1302>
 80087b0:	e7af      	b.n	8008712 <_svfprintf_r+0x12f2>
 80087b2:	3608      	adds	r6, #8
 80087b4:	e7b5      	b.n	8008722 <_svfprintf_r+0x1302>
 80087b6:	460c      	mov	r4, r1
 80087b8:	f7ff bbd9 	b.w	8007f6e <_svfprintf_r+0xb4e>
 80087bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087c0:	1a9d      	subs	r5, r3, r2
 80087c2:	2d00      	cmp	r5, #0
 80087c4:	f77f abd7 	ble.w	8007f76 <_svfprintf_r+0xb56>
 80087c8:	4e23      	ldr	r6, [pc, #140]	; (8008858 <_svfprintf_r+0x1438>)
 80087ca:	2710      	movs	r7, #16
 80087cc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80087d0:	2d10      	cmp	r5, #16
 80087d2:	f103 0301 	add.w	r3, r3, #1
 80087d6:	6026      	str	r6, [r4, #0]
 80087d8:	dc18      	bgt.n	800880c <_svfprintf_r+0x13ec>
 80087da:	6065      	str	r5, [r4, #4]
 80087dc:	2b07      	cmp	r3, #7
 80087de:	4415      	add	r5, r2
 80087e0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80087e4:	f77f abc7 	ble.w	8007f76 <_svfprintf_r+0xb56>
 80087e8:	aa26      	add	r2, sp, #152	; 0x98
 80087ea:	4641      	mov	r1, r8
 80087ec:	9803      	ldr	r0, [sp, #12]
 80087ee:	f001 fd36 	bl	800a25e <__ssprint_r>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f43f abbf 	beq.w	8007f76 <_svfprintf_r+0xb56>
 80087f8:	f1b9 0f00 	cmp.w	r9, #0
 80087fc:	f43f a8a8 	beq.w	8007950 <_svfprintf_r+0x530>
 8008800:	4649      	mov	r1, r9
 8008802:	9803      	ldr	r0, [sp, #12]
 8008804:	f000 ff08 	bl	8009618 <_free_r>
 8008808:	f7ff b8a2 	b.w	8007950 <_svfprintf_r+0x530>
 800880c:	3210      	adds	r2, #16
 800880e:	2b07      	cmp	r3, #7
 8008810:	6067      	str	r7, [r4, #4]
 8008812:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8008816:	dc02      	bgt.n	800881e <_svfprintf_r+0x13fe>
 8008818:	3408      	adds	r4, #8
 800881a:	3d10      	subs	r5, #16
 800881c:	e7d6      	b.n	80087cc <_svfprintf_r+0x13ac>
 800881e:	aa26      	add	r2, sp, #152	; 0x98
 8008820:	4641      	mov	r1, r8
 8008822:	9803      	ldr	r0, [sp, #12]
 8008824:	f001 fd1b 	bl	800a25e <__ssprint_r>
 8008828:	2800      	cmp	r0, #0
 800882a:	d1e5      	bne.n	80087f8 <_svfprintf_r+0x13d8>
 800882c:	ac29      	add	r4, sp, #164	; 0xa4
 800882e:	e7f4      	b.n	800881a <_svfprintf_r+0x13fa>
 8008830:	4649      	mov	r1, r9
 8008832:	9803      	ldr	r0, [sp, #12]
 8008834:	f000 fef0 	bl	8009618 <_free_r>
 8008838:	f7ff bbb5 	b.w	8007fa6 <_svfprintf_r+0xb86>
 800883c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800883e:	2b00      	cmp	r3, #0
 8008840:	f43f a886 	beq.w	8007950 <_svfprintf_r+0x530>
 8008844:	aa26      	add	r2, sp, #152	; 0x98
 8008846:	4641      	mov	r1, r8
 8008848:	9803      	ldr	r0, [sp, #12]
 800884a:	f001 fd08 	bl	800a25e <__ssprint_r>
 800884e:	f7ff b87f 	b.w	8007950 <_svfprintf_r+0x530>
 8008852:	bf00      	nop
 8008854:	0800a85c 	.word	0x0800a85c
 8008858:	0800a84c 	.word	0x0800a84c

0800885c <__register_exitproc>:
 800885c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008860:	4c26      	ldr	r4, [pc, #152]	; (80088fc <__register_exitproc+0xa0>)
 8008862:	4606      	mov	r6, r0
 8008864:	6820      	ldr	r0, [r4, #0]
 8008866:	4698      	mov	r8, r3
 8008868:	460f      	mov	r7, r1
 800886a:	4691      	mov	r9, r2
 800886c:	f7fe fdd4 	bl	8007418 <__retarget_lock_acquire_recursive>
 8008870:	4b23      	ldr	r3, [pc, #140]	; (8008900 <__register_exitproc+0xa4>)
 8008872:	681d      	ldr	r5, [r3, #0]
 8008874:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8008878:	b918      	cbnz	r0, 8008882 <__register_exitproc+0x26>
 800887a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800887e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8008882:	6843      	ldr	r3, [r0, #4]
 8008884:	2b1f      	cmp	r3, #31
 8008886:	dd19      	ble.n	80088bc <__register_exitproc+0x60>
 8008888:	4b1e      	ldr	r3, [pc, #120]	; (8008904 <__register_exitproc+0xa8>)
 800888a:	b933      	cbnz	r3, 800889a <__register_exitproc+0x3e>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	f7fe fdc4 	bl	800741a <__retarget_lock_release_recursive>
 8008892:	f04f 30ff 	mov.w	r0, #4294967295
 8008896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800889a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800889e:	f3af 8000 	nop.w
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d0f2      	beq.n	800888c <__register_exitproc+0x30>
 80088a6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80088aa:	6003      	str	r3, [r0, #0]
 80088ac:	2200      	movs	r2, #0
 80088ae:	6042      	str	r2, [r0, #4]
 80088b0:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80088b4:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 80088b8:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 80088bc:	6843      	ldr	r3, [r0, #4]
 80088be:	b19e      	cbz	r6, 80088e8 <__register_exitproc+0x8c>
 80088c0:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 80088c4:	2201      	movs	r2, #1
 80088c6:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 80088ca:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 80088ce:	409a      	lsls	r2, r3
 80088d0:	4311      	orrs	r1, r2
 80088d2:	2e02      	cmp	r6, #2
 80088d4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 80088d8:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 80088dc:	bf02      	ittt	eq
 80088de:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 80088e2:	430a      	orreq	r2, r1
 80088e4:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	3302      	adds	r3, #2
 80088ec:	6042      	str	r2, [r0, #4]
 80088ee:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 80088f2:	6820      	ldr	r0, [r4, #0]
 80088f4:	f7fe fd91 	bl	800741a <__retarget_lock_release_recursive>
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7cc      	b.n	8008896 <__register_exitproc+0x3a>
 80088fc:	20000468 	.word	0x20000468
 8008900:	0800a814 	.word	0x0800a814
 8008904:	00000000 	.word	0x00000000

08008908 <quorem>:
 8008908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	6903      	ldr	r3, [r0, #16]
 800890e:	690c      	ldr	r4, [r1, #16]
 8008910:	42a3      	cmp	r3, r4
 8008912:	4680      	mov	r8, r0
 8008914:	f2c0 8082 	blt.w	8008a1c <quorem+0x114>
 8008918:	3c01      	subs	r4, #1
 800891a:	f101 0714 	add.w	r7, r1, #20
 800891e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008922:	f100 0614 	add.w	r6, r0, #20
 8008926:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800892a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800892e:	eb06 030c 	add.w	r3, r6, ip
 8008932:	3501      	adds	r5, #1
 8008934:	eb07 090c 	add.w	r9, r7, ip
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	fbb0 f5f5 	udiv	r5, r0, r5
 800893e:	b395      	cbz	r5, 80089a6 <quorem+0x9e>
 8008940:	f04f 0a00 	mov.w	sl, #0
 8008944:	4638      	mov	r0, r7
 8008946:	46b6      	mov	lr, r6
 8008948:	46d3      	mov	fp, sl
 800894a:	f850 2b04 	ldr.w	r2, [r0], #4
 800894e:	b293      	uxth	r3, r2
 8008950:	fb05 a303 	mla	r3, r5, r3, sl
 8008954:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008958:	b29b      	uxth	r3, r3
 800895a:	ebab 0303 	sub.w	r3, fp, r3
 800895e:	0c12      	lsrs	r2, r2, #16
 8008960:	f8de b000 	ldr.w	fp, [lr]
 8008964:	fb05 a202 	mla	r2, r5, r2, sl
 8008968:	fa13 f38b 	uxtah	r3, r3, fp
 800896c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008970:	fa1f fb82 	uxth.w	fp, r2
 8008974:	f8de 2000 	ldr.w	r2, [lr]
 8008978:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800897c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008980:	b29b      	uxth	r3, r3
 8008982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008986:	4581      	cmp	r9, r0
 8008988:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800898c:	f84e 3b04 	str.w	r3, [lr], #4
 8008990:	d2db      	bcs.n	800894a <quorem+0x42>
 8008992:	f856 300c 	ldr.w	r3, [r6, ip]
 8008996:	b933      	cbnz	r3, 80089a6 <quorem+0x9e>
 8008998:	9b01      	ldr	r3, [sp, #4]
 800899a:	3b04      	subs	r3, #4
 800899c:	429e      	cmp	r6, r3
 800899e:	461a      	mov	r2, r3
 80089a0:	d330      	bcc.n	8008a04 <quorem+0xfc>
 80089a2:	f8c8 4010 	str.w	r4, [r8, #16]
 80089a6:	4640      	mov	r0, r8
 80089a8:	f001 fb38 	bl	800a01c <__mcmp>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	db25      	blt.n	80089fc <quorem+0xf4>
 80089b0:	3501      	adds	r5, #1
 80089b2:	4630      	mov	r0, r6
 80089b4:	f04f 0c00 	mov.w	ip, #0
 80089b8:	f857 2b04 	ldr.w	r2, [r7], #4
 80089bc:	f8d0 e000 	ldr.w	lr, [r0]
 80089c0:	b293      	uxth	r3, r2
 80089c2:	ebac 0303 	sub.w	r3, ip, r3
 80089c6:	0c12      	lsrs	r2, r2, #16
 80089c8:	fa13 f38e 	uxtah	r3, r3, lr
 80089cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089da:	45b9      	cmp	r9, r7
 80089dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089e0:	f840 3b04 	str.w	r3, [r0], #4
 80089e4:	d2e8      	bcs.n	80089b8 <quorem+0xb0>
 80089e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80089ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80089ee:	b92a      	cbnz	r2, 80089fc <quorem+0xf4>
 80089f0:	3b04      	subs	r3, #4
 80089f2:	429e      	cmp	r6, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	d30b      	bcc.n	8008a10 <quorem+0x108>
 80089f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80089fc:	4628      	mov	r0, r5
 80089fe:	b003      	add	sp, #12
 8008a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	3b04      	subs	r3, #4
 8008a08:	2a00      	cmp	r2, #0
 8008a0a:	d1ca      	bne.n	80089a2 <quorem+0x9a>
 8008a0c:	3c01      	subs	r4, #1
 8008a0e:	e7c5      	b.n	800899c <quorem+0x94>
 8008a10:	6812      	ldr	r2, [r2, #0]
 8008a12:	3b04      	subs	r3, #4
 8008a14:	2a00      	cmp	r2, #0
 8008a16:	d1ef      	bne.n	80089f8 <quorem+0xf0>
 8008a18:	3c01      	subs	r4, #1
 8008a1a:	e7ea      	b.n	80089f2 <quorem+0xea>
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	e7ee      	b.n	80089fe <quorem+0xf6>

08008a20 <_dtoa_r>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	b097      	sub	sp, #92	; 0x5c
 8008a26:	ec57 6b10 	vmov	r6, r7, d0
 8008a2a:	9106      	str	r1, [sp, #24]
 8008a2c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008a2e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a30:	4604      	mov	r4, r0
 8008a32:	9312      	str	r3, [sp, #72]	; 0x48
 8008a34:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008a36:	e9cd 6700 	strd	r6, r7, [sp]
 8008a3a:	b141      	cbz	r1, 8008a4e <_dtoa_r+0x2e>
 8008a3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a3e:	604a      	str	r2, [r1, #4]
 8008a40:	2301      	movs	r3, #1
 8008a42:	4093      	lsls	r3, r2
 8008a44:	608b      	str	r3, [r1, #8]
 8008a46:	f001 f924 	bl	8009c92 <_Bfree>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6423      	str	r3, [r4, #64]	; 0x40
 8008a4e:	1e3b      	subs	r3, r7, #0
 8008a50:	bfb9      	ittee	lt
 8008a52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a56:	9301      	strlt	r3, [sp, #4]
 8008a58:	2300      	movge	r3, #0
 8008a5a:	602b      	strge	r3, [r5, #0]
 8008a5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a60:	4baf      	ldr	r3, [pc, #700]	; (8008d20 <_dtoa_r+0x300>)
 8008a62:	bfbc      	itt	lt
 8008a64:	2201      	movlt	r2, #1
 8008a66:	602a      	strlt	r2, [r5, #0]
 8008a68:	ea33 0308 	bics.w	r3, r3, r8
 8008a6c:	d116      	bne.n	8008a9c <_dtoa_r+0x7c>
 8008a6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a70:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	9b00      	ldr	r3, [sp, #0]
 8008a78:	b923      	cbnz	r3, 8008a84 <_dtoa_r+0x64>
 8008a7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f000 8543 	beq.w	800950a <_dtoa_r+0xaea>
 8008a84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a86:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008d34 <_dtoa_r+0x314>
 8008a8a:	b11b      	cbz	r3, 8008a94 <_dtoa_r+0x74>
 8008a8c:	f10b 0303 	add.w	r3, fp, #3
 8008a90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	4658      	mov	r0, fp
 8008a96:	b017      	add	sp, #92	; 0x5c
 8008a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	f7f8 f82e 	bl	8000b08 <__aeabi_dcmpeq>
 8008aac:	4681      	mov	r9, r0
 8008aae:	b160      	cbz	r0, 8008aca <_dtoa_r+0xaa>
 8008ab0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 8522 	beq.w	8009502 <_dtoa_r+0xae2>
 8008abe:	4b99      	ldr	r3, [pc, #612]	; (8008d24 <_dtoa_r+0x304>)
 8008ac0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ac2:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	e7e4      	b.n	8008a94 <_dtoa_r+0x74>
 8008aca:	aa14      	add	r2, sp, #80	; 0x50
 8008acc:	a915      	add	r1, sp, #84	; 0x54
 8008ace:	ec47 6b10 	vmov	d0, r6, r7
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f001 fb19 	bl	800a10a <__d2b>
 8008ad8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008adc:	9004      	str	r0, [sp, #16]
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	d07c      	beq.n	8008bdc <_dtoa_r+0x1bc>
 8008ae2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ae6:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008aea:	46b2      	mov	sl, r6
 8008aec:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008af0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008af4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008af8:	2200      	movs	r2, #0
 8008afa:	4b8b      	ldr	r3, [pc, #556]	; (8008d28 <_dtoa_r+0x308>)
 8008afc:	4650      	mov	r0, sl
 8008afe:	4659      	mov	r1, fp
 8008b00:	f7f7 fbe2 	bl	80002c8 <__aeabi_dsub>
 8008b04:	a380      	add	r3, pc, #512	; (adr r3, 8008d08 <_dtoa_r+0x2e8>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7f7 fd95 	bl	8000638 <__aeabi_dmul>
 8008b0e:	a380      	add	r3, pc, #512	; (adr r3, 8008d10 <_dtoa_r+0x2f0>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	f7f7 fbda 	bl	80002cc <__adddf3>
 8008b18:	4606      	mov	r6, r0
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	460f      	mov	r7, r1
 8008b1e:	f7f7 fd21 	bl	8000564 <__aeabi_i2d>
 8008b22:	a37d      	add	r3, pc, #500	; (adr r3, 8008d18 <_dtoa_r+0x2f8>)
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f7f7 fd86 	bl	8000638 <__aeabi_dmul>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4630      	mov	r0, r6
 8008b32:	4639      	mov	r1, r7
 8008b34:	f7f7 fbca 	bl	80002cc <__adddf3>
 8008b38:	4606      	mov	r6, r0
 8008b3a:	460f      	mov	r7, r1
 8008b3c:	f7f8 f82c 	bl	8000b98 <__aeabi_d2iz>
 8008b40:	2200      	movs	r2, #0
 8008b42:	4682      	mov	sl, r0
 8008b44:	2300      	movs	r3, #0
 8008b46:	4630      	mov	r0, r6
 8008b48:	4639      	mov	r1, r7
 8008b4a:	f7f7 ffe7 	bl	8000b1c <__aeabi_dcmplt>
 8008b4e:	b148      	cbz	r0, 8008b64 <_dtoa_r+0x144>
 8008b50:	4650      	mov	r0, sl
 8008b52:	f7f7 fd07 	bl	8000564 <__aeabi_i2d>
 8008b56:	4632      	mov	r2, r6
 8008b58:	463b      	mov	r3, r7
 8008b5a:	f7f7 ffd5 	bl	8000b08 <__aeabi_dcmpeq>
 8008b5e:	b908      	cbnz	r0, 8008b64 <_dtoa_r+0x144>
 8008b60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b64:	f1ba 0f16 	cmp.w	sl, #22
 8008b68:	d859      	bhi.n	8008c1e <_dtoa_r+0x1fe>
 8008b6a:	4970      	ldr	r1, [pc, #448]	; (8008d2c <_dtoa_r+0x30c>)
 8008b6c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008b70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b78:	f7f7 ffee 	bl	8000b58 <__aeabi_dcmpgt>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d050      	beq.n	8008c22 <_dtoa_r+0x202>
 8008b80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b84:	2300      	movs	r3, #0
 8008b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b8a:	1b5d      	subs	r5, r3, r5
 8008b8c:	f1b5 0801 	subs.w	r8, r5, #1
 8008b90:	bf49      	itett	mi
 8008b92:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b96:	2300      	movpl	r3, #0
 8008b98:	9305      	strmi	r3, [sp, #20]
 8008b9a:	f04f 0800 	movmi.w	r8, #0
 8008b9e:	bf58      	it	pl
 8008ba0:	9305      	strpl	r3, [sp, #20]
 8008ba2:	f1ba 0f00 	cmp.w	sl, #0
 8008ba6:	db3e      	blt.n	8008c26 <_dtoa_r+0x206>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	44d0      	add	r8, sl
 8008bac:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008bb0:	9307      	str	r3, [sp, #28]
 8008bb2:	9b06      	ldr	r3, [sp, #24]
 8008bb4:	2b09      	cmp	r3, #9
 8008bb6:	f200 808d 	bhi.w	8008cd4 <_dtoa_r+0x2b4>
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	bfc4      	itt	gt
 8008bbe:	3b04      	subgt	r3, #4
 8008bc0:	9306      	strgt	r3, [sp, #24]
 8008bc2:	9b06      	ldr	r3, [sp, #24]
 8008bc4:	f1a3 0302 	sub.w	r3, r3, #2
 8008bc8:	bfcc      	ite	gt
 8008bca:	2500      	movgt	r5, #0
 8008bcc:	2501      	movle	r5, #1
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	f200 808c 	bhi.w	8008cec <_dtoa_r+0x2cc>
 8008bd4:	e8df f003 	tbb	[pc, r3]
 8008bd8:	6e317c7a 	.word	0x6e317c7a
 8008bdc:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008be0:	441d      	add	r5, r3
 8008be2:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008be6:	2820      	cmp	r0, #32
 8008be8:	dd13      	ble.n	8008c12 <_dtoa_r+0x1f2>
 8008bea:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008bee:	9b00      	ldr	r3, [sp, #0]
 8008bf0:	fa08 f800 	lsl.w	r8, r8, r0
 8008bf4:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008bf8:	fa23 f000 	lsr.w	r0, r3, r0
 8008bfc:	ea48 0000 	orr.w	r0, r8, r0
 8008c00:	f7f7 fca0 	bl	8000544 <__aeabi_ui2d>
 8008c04:	2301      	movs	r3, #1
 8008c06:	4682      	mov	sl, r0
 8008c08:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008c0c:	3d01      	subs	r5, #1
 8008c0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c10:	e772      	b.n	8008af8 <_dtoa_r+0xd8>
 8008c12:	9b00      	ldr	r3, [sp, #0]
 8008c14:	f1c0 0020 	rsb	r0, r0, #32
 8008c18:	fa03 f000 	lsl.w	r0, r3, r0
 8008c1c:	e7f0      	b.n	8008c00 <_dtoa_r+0x1e0>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e7b1      	b.n	8008b86 <_dtoa_r+0x166>
 8008c22:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c24:	e7b0      	b.n	8008b88 <_dtoa_r+0x168>
 8008c26:	9b05      	ldr	r3, [sp, #20]
 8008c28:	eba3 030a 	sub.w	r3, r3, sl
 8008c2c:	9305      	str	r3, [sp, #20]
 8008c2e:	f1ca 0300 	rsb	r3, sl, #0
 8008c32:	9307      	str	r3, [sp, #28]
 8008c34:	2300      	movs	r3, #0
 8008c36:	930e      	str	r3, [sp, #56]	; 0x38
 8008c38:	e7bb      	b.n	8008bb2 <_dtoa_r+0x192>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8008c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	dd56      	ble.n	8008cf2 <_dtoa_r+0x2d2>
 8008c44:	9302      	str	r3, [sp, #8]
 8008c46:	4699      	mov	r9, r3
 8008c48:	2200      	movs	r2, #0
 8008c4a:	6462      	str	r2, [r4, #68]	; 0x44
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	f102 0014 	add.w	r0, r2, #20
 8008c52:	4298      	cmp	r0, r3
 8008c54:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008c56:	d951      	bls.n	8008cfc <_dtoa_r+0x2dc>
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f000 fff5 	bl	8009c48 <_Balloc>
 8008c5e:	f1b9 0f0e 	cmp.w	r9, #14
 8008c62:	4683      	mov	fp, r0
 8008c64:	6420      	str	r0, [r4, #64]	; 0x40
 8008c66:	f200 80e8 	bhi.w	8008e3a <_dtoa_r+0x41a>
 8008c6a:	2d00      	cmp	r5, #0
 8008c6c:	f000 80e5 	beq.w	8008e3a <_dtoa_r+0x41a>
 8008c70:	ed9d 7b00 	vldr	d7, [sp]
 8008c74:	f1ba 0f00 	cmp.w	sl, #0
 8008c78:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008c7c:	dd76      	ble.n	8008d6c <_dtoa_r+0x34c>
 8008c7e:	4a2b      	ldr	r2, [pc, #172]	; (8008d2c <_dtoa_r+0x30c>)
 8008c80:	f00a 030f 	and.w	r3, sl, #15
 8008c84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c88:	ed93 7b00 	vldr	d7, [r3]
 8008c8c:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008c90:	06f0      	lsls	r0, r6, #27
 8008c92:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008c96:	d567      	bpl.n	8008d68 <_dtoa_r+0x348>
 8008c98:	4b25      	ldr	r3, [pc, #148]	; (8008d30 <_dtoa_r+0x310>)
 8008c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ca2:	f7f7 fdf3 	bl	800088c <__aeabi_ddiv>
 8008ca6:	e9cd 0100 	strd	r0, r1, [sp]
 8008caa:	f006 060f 	and.w	r6, r6, #15
 8008cae:	2503      	movs	r5, #3
 8008cb0:	4f1f      	ldr	r7, [pc, #124]	; (8008d30 <_dtoa_r+0x310>)
 8008cb2:	e04e      	b.n	8008d52 <_dtoa_r+0x332>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8008cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cba:	4453      	add	r3, sl
 8008cbc:	f103 0901 	add.w	r9, r3, #1
 8008cc0:	9302      	str	r3, [sp, #8]
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	bfb8      	it	lt
 8008cc8:	2301      	movlt	r3, #1
 8008cca:	e7bd      	b.n	8008c48 <_dtoa_r+0x228>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	e7b5      	b.n	8008c3c <_dtoa_r+0x21c>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	e7f0      	b.n	8008cb6 <_dtoa_r+0x296>
 8008cd4:	2501      	movs	r5, #1
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	9306      	str	r3, [sp, #24]
 8008cda:	950a      	str	r5, [sp, #40]	; 0x28
 8008cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce0:	9302      	str	r3, [sp, #8]
 8008ce2:	4699      	mov	r9, r3
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2312      	movs	r3, #18
 8008ce8:	920b      	str	r2, [sp, #44]	; 0x2c
 8008cea:	e7ad      	b.n	8008c48 <_dtoa_r+0x228>
 8008cec:	2301      	movs	r3, #1
 8008cee:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf0:	e7f4      	b.n	8008cdc <_dtoa_r+0x2bc>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	9302      	str	r3, [sp, #8]
 8008cf6:	4699      	mov	r9, r3
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	e7f5      	b.n	8008ce8 <_dtoa_r+0x2c8>
 8008cfc:	3101      	adds	r1, #1
 8008cfe:	6461      	str	r1, [r4, #68]	; 0x44
 8008d00:	0052      	lsls	r2, r2, #1
 8008d02:	e7a4      	b.n	8008c4e <_dtoa_r+0x22e>
 8008d04:	f3af 8000 	nop.w
 8008d08:	636f4361 	.word	0x636f4361
 8008d0c:	3fd287a7 	.word	0x3fd287a7
 8008d10:	8b60c8b3 	.word	0x8b60c8b3
 8008d14:	3fc68a28 	.word	0x3fc68a28
 8008d18:	509f79fb 	.word	0x509f79fb
 8008d1c:	3fd34413 	.word	0x3fd34413
 8008d20:	7ff00000 	.word	0x7ff00000
 8008d24:	0800a84b 	.word	0x0800a84b
 8008d28:	3ff80000 	.word	0x3ff80000
 8008d2c:	0800a8a8 	.word	0x0800a8a8
 8008d30:	0800a880 	.word	0x0800a880
 8008d34:	0800a875 	.word	0x0800a875
 8008d38:	07f1      	lsls	r1, r6, #31
 8008d3a:	d508      	bpl.n	8008d4e <_dtoa_r+0x32e>
 8008d3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d44:	f7f7 fc78 	bl	8000638 <__aeabi_dmul>
 8008d48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	1076      	asrs	r6, r6, #1
 8008d50:	3708      	adds	r7, #8
 8008d52:	2e00      	cmp	r6, #0
 8008d54:	d1f0      	bne.n	8008d38 <_dtoa_r+0x318>
 8008d56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d5e:	f7f7 fd95 	bl	800088c <__aeabi_ddiv>
 8008d62:	e9cd 0100 	strd	r0, r1, [sp]
 8008d66:	e01a      	b.n	8008d9e <_dtoa_r+0x37e>
 8008d68:	2502      	movs	r5, #2
 8008d6a:	e7a1      	b.n	8008cb0 <_dtoa_r+0x290>
 8008d6c:	f000 80a0 	beq.w	8008eb0 <_dtoa_r+0x490>
 8008d70:	f1ca 0600 	rsb	r6, sl, #0
 8008d74:	4b9f      	ldr	r3, [pc, #636]	; (8008ff4 <_dtoa_r+0x5d4>)
 8008d76:	4fa0      	ldr	r7, [pc, #640]	; (8008ff8 <_dtoa_r+0x5d8>)
 8008d78:	f006 020f 	and.w	r2, r6, #15
 8008d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d88:	f7f7 fc56 	bl	8000638 <__aeabi_dmul>
 8008d8c:	e9cd 0100 	strd	r0, r1, [sp]
 8008d90:	1136      	asrs	r6, r6, #4
 8008d92:	2300      	movs	r3, #0
 8008d94:	2502      	movs	r5, #2
 8008d96:	2e00      	cmp	r6, #0
 8008d98:	d17f      	bne.n	8008e9a <_dtoa_r+0x47a>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e1      	bne.n	8008d62 <_dtoa_r+0x342>
 8008d9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 8087 	beq.w	8008eb4 <_dtoa_r+0x494>
 8008da6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008daa:	2200      	movs	r2, #0
 8008dac:	4b93      	ldr	r3, [pc, #588]	; (8008ffc <_dtoa_r+0x5dc>)
 8008dae:	4630      	mov	r0, r6
 8008db0:	4639      	mov	r1, r7
 8008db2:	f7f7 feb3 	bl	8000b1c <__aeabi_dcmplt>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d07c      	beq.n	8008eb4 <_dtoa_r+0x494>
 8008dba:	f1b9 0f00 	cmp.w	r9, #0
 8008dbe:	d079      	beq.n	8008eb4 <_dtoa_r+0x494>
 8008dc0:	9b02      	ldr	r3, [sp, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	dd35      	ble.n	8008e32 <_dtoa_r+0x412>
 8008dc6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008dca:	9308      	str	r3, [sp, #32]
 8008dcc:	4639      	mov	r1, r7
 8008dce:	2200      	movs	r2, #0
 8008dd0:	4b8b      	ldr	r3, [pc, #556]	; (8009000 <_dtoa_r+0x5e0>)
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7f7 fc30 	bl	8000638 <__aeabi_dmul>
 8008dd8:	e9cd 0100 	strd	r0, r1, [sp]
 8008ddc:	9f02      	ldr	r7, [sp, #8]
 8008dde:	3501      	adds	r5, #1
 8008de0:	4628      	mov	r0, r5
 8008de2:	f7f7 fbbf 	bl	8000564 <__aeabi_i2d>
 8008de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dea:	f7f7 fc25 	bl	8000638 <__aeabi_dmul>
 8008dee:	2200      	movs	r2, #0
 8008df0:	4b84      	ldr	r3, [pc, #528]	; (8009004 <_dtoa_r+0x5e4>)
 8008df2:	f7f7 fa6b 	bl	80002cc <__adddf3>
 8008df6:	4605      	mov	r5, r0
 8008df8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	d15d      	bne.n	8008ebc <_dtoa_r+0x49c>
 8008e00:	2200      	movs	r2, #0
 8008e02:	4b81      	ldr	r3, [pc, #516]	; (8009008 <_dtoa_r+0x5e8>)
 8008e04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e08:	f7f7 fa5e 	bl	80002c8 <__aeabi_dsub>
 8008e0c:	462a      	mov	r2, r5
 8008e0e:	4633      	mov	r3, r6
 8008e10:	e9cd 0100 	strd	r0, r1, [sp]
 8008e14:	f7f7 fea0 	bl	8000b58 <__aeabi_dcmpgt>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	f040 8288 	bne.w	800932e <_dtoa_r+0x90e>
 8008e1e:	462a      	mov	r2, r5
 8008e20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e28:	f7f7 fe78 	bl	8000b1c <__aeabi_dcmplt>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	f040 827c 	bne.w	800932a <_dtoa_r+0x90a>
 8008e32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e36:	e9cd 2300 	strd	r2, r3, [sp]
 8008e3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f2c0 8150 	blt.w	80090e2 <_dtoa_r+0x6c2>
 8008e42:	f1ba 0f0e 	cmp.w	sl, #14
 8008e46:	f300 814c 	bgt.w	80090e2 <_dtoa_r+0x6c2>
 8008e4a:	4b6a      	ldr	r3, [pc, #424]	; (8008ff4 <_dtoa_r+0x5d4>)
 8008e4c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e50:	ed93 7b00 	vldr	d7, [r3]
 8008e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e5c:	f280 80d8 	bge.w	8009010 <_dtoa_r+0x5f0>
 8008e60:	f1b9 0f00 	cmp.w	r9, #0
 8008e64:	f300 80d4 	bgt.w	8009010 <_dtoa_r+0x5f0>
 8008e68:	f040 825e 	bne.w	8009328 <_dtoa_r+0x908>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4b66      	ldr	r3, [pc, #408]	; (8009008 <_dtoa_r+0x5e8>)
 8008e70:	ec51 0b17 	vmov	r0, r1, d7
 8008e74:	f7f7 fbe0 	bl	8000638 <__aeabi_dmul>
 8008e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e7c:	f7f7 fe62 	bl	8000b44 <__aeabi_dcmpge>
 8008e80:	464f      	mov	r7, r9
 8008e82:	464e      	mov	r6, r9
 8008e84:	2800      	cmp	r0, #0
 8008e86:	f040 8234 	bne.w	80092f2 <_dtoa_r+0x8d2>
 8008e8a:	2331      	movs	r3, #49	; 0x31
 8008e8c:	f10b 0501 	add.w	r5, fp, #1
 8008e90:	f88b 3000 	strb.w	r3, [fp]
 8008e94:	f10a 0a01 	add.w	sl, sl, #1
 8008e98:	e22f      	b.n	80092fa <_dtoa_r+0x8da>
 8008e9a:	07f2      	lsls	r2, r6, #31
 8008e9c:	d505      	bpl.n	8008eaa <_dtoa_r+0x48a>
 8008e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ea2:	f7f7 fbc9 	bl	8000638 <__aeabi_dmul>
 8008ea6:	3501      	adds	r5, #1
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	1076      	asrs	r6, r6, #1
 8008eac:	3708      	adds	r7, #8
 8008eae:	e772      	b.n	8008d96 <_dtoa_r+0x376>
 8008eb0:	2502      	movs	r5, #2
 8008eb2:	e774      	b.n	8008d9e <_dtoa_r+0x37e>
 8008eb4:	f8cd a020 	str.w	sl, [sp, #32]
 8008eb8:	464f      	mov	r7, r9
 8008eba:	e791      	b.n	8008de0 <_dtoa_r+0x3c0>
 8008ebc:	4b4d      	ldr	r3, [pc, #308]	; (8008ff4 <_dtoa_r+0x5d4>)
 8008ebe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ec2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d047      	beq.n	8008f5c <_dtoa_r+0x53c>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	494e      	ldr	r1, [pc, #312]	; (800900c <_dtoa_r+0x5ec>)
 8008ed4:	f7f7 fcda 	bl	800088c <__aeabi_ddiv>
 8008ed8:	462a      	mov	r2, r5
 8008eda:	4633      	mov	r3, r6
 8008edc:	f7f7 f9f4 	bl	80002c8 <__aeabi_dsub>
 8008ee0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ee4:	465d      	mov	r5, fp
 8008ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eea:	f7f7 fe55 	bl	8000b98 <__aeabi_d2iz>
 8008eee:	4606      	mov	r6, r0
 8008ef0:	f7f7 fb38 	bl	8000564 <__aeabi_i2d>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008efc:	f7f7 f9e4 	bl	80002c8 <__aeabi_dsub>
 8008f00:	3630      	adds	r6, #48	; 0x30
 8008f02:	f805 6b01 	strb.w	r6, [r5], #1
 8008f06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f0a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f0e:	f7f7 fe05 	bl	8000b1c <__aeabi_dcmplt>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d163      	bne.n	8008fde <_dtoa_r+0x5be>
 8008f16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	4937      	ldr	r1, [pc, #220]	; (8008ffc <_dtoa_r+0x5dc>)
 8008f1e:	f7f7 f9d3 	bl	80002c8 <__aeabi_dsub>
 8008f22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f26:	f7f7 fdf9 	bl	8000b1c <__aeabi_dcmplt>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	f040 80b7 	bne.w	800909e <_dtoa_r+0x67e>
 8008f30:	eba5 030b 	sub.w	r3, r5, fp
 8008f34:	429f      	cmp	r7, r3
 8008f36:	f77f af7c 	ble.w	8008e32 <_dtoa_r+0x412>
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4b30      	ldr	r3, [pc, #192]	; (8009000 <_dtoa_r+0x5e0>)
 8008f3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f42:	f7f7 fb79 	bl	8000638 <__aeabi_dmul>
 8008f46:	2200      	movs	r2, #0
 8008f48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f4c:	4b2c      	ldr	r3, [pc, #176]	; (8009000 <_dtoa_r+0x5e0>)
 8008f4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f52:	f7f7 fb71 	bl	8000638 <__aeabi_dmul>
 8008f56:	e9cd 0100 	strd	r0, r1, [sp]
 8008f5a:	e7c4      	b.n	8008ee6 <_dtoa_r+0x4c6>
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4633      	mov	r3, r6
 8008f60:	f7f7 fb6a 	bl	8000638 <__aeabi_dmul>
 8008f64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f68:	eb0b 0507 	add.w	r5, fp, r7
 8008f6c:	465e      	mov	r6, fp
 8008f6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f72:	f7f7 fe11 	bl	8000b98 <__aeabi_d2iz>
 8008f76:	4607      	mov	r7, r0
 8008f78:	f7f7 faf4 	bl	8000564 <__aeabi_i2d>
 8008f7c:	3730      	adds	r7, #48	; 0x30
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f86:	f7f7 f99f 	bl	80002c8 <__aeabi_dsub>
 8008f8a:	f806 7b01 	strb.w	r7, [r6], #1
 8008f8e:	42ae      	cmp	r6, r5
 8008f90:	e9cd 0100 	strd	r0, r1, [sp]
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	d126      	bne.n	8008fe8 <_dtoa_r+0x5c8>
 8008f9a:	4b1c      	ldr	r3, [pc, #112]	; (800900c <_dtoa_r+0x5ec>)
 8008f9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fa0:	f7f7 f994 	bl	80002cc <__adddf3>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fac:	f7f7 fdd4 	bl	8000b58 <__aeabi_dcmpgt>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d174      	bne.n	800909e <_dtoa_r+0x67e>
 8008fb4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008fb8:	2000      	movs	r0, #0
 8008fba:	4914      	ldr	r1, [pc, #80]	; (800900c <_dtoa_r+0x5ec>)
 8008fbc:	f7f7 f984 	bl	80002c8 <__aeabi_dsub>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fc8:	f7f7 fda8 	bl	8000b1c <__aeabi_dcmplt>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f43f af30 	beq.w	8008e32 <_dtoa_r+0x412>
 8008fd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fd6:	2b30      	cmp	r3, #48	; 0x30
 8008fd8:	f105 32ff 	add.w	r2, r5, #4294967295
 8008fdc:	d002      	beq.n	8008fe4 <_dtoa_r+0x5c4>
 8008fde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008fe2:	e04a      	b.n	800907a <_dtoa_r+0x65a>
 8008fe4:	4615      	mov	r5, r2
 8008fe6:	e7f4      	b.n	8008fd2 <_dtoa_r+0x5b2>
 8008fe8:	4b05      	ldr	r3, [pc, #20]	; (8009000 <_dtoa_r+0x5e0>)
 8008fea:	f7f7 fb25 	bl	8000638 <__aeabi_dmul>
 8008fee:	e9cd 0100 	strd	r0, r1, [sp]
 8008ff2:	e7bc      	b.n	8008f6e <_dtoa_r+0x54e>
 8008ff4:	0800a8a8 	.word	0x0800a8a8
 8008ff8:	0800a880 	.word	0x0800a880
 8008ffc:	3ff00000 	.word	0x3ff00000
 8009000:	40240000 	.word	0x40240000
 8009004:	401c0000 	.word	0x401c0000
 8009008:	40140000 	.word	0x40140000
 800900c:	3fe00000 	.word	0x3fe00000
 8009010:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009014:	465d      	mov	r5, fp
 8009016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800901a:	4630      	mov	r0, r6
 800901c:	4639      	mov	r1, r7
 800901e:	f7f7 fc35 	bl	800088c <__aeabi_ddiv>
 8009022:	f7f7 fdb9 	bl	8000b98 <__aeabi_d2iz>
 8009026:	4680      	mov	r8, r0
 8009028:	f7f7 fa9c 	bl	8000564 <__aeabi_i2d>
 800902c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009030:	f7f7 fb02 	bl	8000638 <__aeabi_dmul>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009040:	f7f7 f942 	bl	80002c8 <__aeabi_dsub>
 8009044:	f805 6b01 	strb.w	r6, [r5], #1
 8009048:	eba5 060b 	sub.w	r6, r5, fp
 800904c:	45b1      	cmp	r9, r6
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	d139      	bne.n	80090c8 <_dtoa_r+0x6a8>
 8009054:	f7f7 f93a 	bl	80002cc <__adddf3>
 8009058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800905c:	4606      	mov	r6, r0
 800905e:	460f      	mov	r7, r1
 8009060:	f7f7 fd7a 	bl	8000b58 <__aeabi_dcmpgt>
 8009064:	b9c8      	cbnz	r0, 800909a <_dtoa_r+0x67a>
 8009066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800906a:	4630      	mov	r0, r6
 800906c:	4639      	mov	r1, r7
 800906e:	f7f7 fd4b 	bl	8000b08 <__aeabi_dcmpeq>
 8009072:	b110      	cbz	r0, 800907a <_dtoa_r+0x65a>
 8009074:	f018 0f01 	tst.w	r8, #1
 8009078:	d10f      	bne.n	800909a <_dtoa_r+0x67a>
 800907a:	9904      	ldr	r1, [sp, #16]
 800907c:	4620      	mov	r0, r4
 800907e:	f000 fe08 	bl	8009c92 <_Bfree>
 8009082:	2300      	movs	r3, #0
 8009084:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009086:	702b      	strb	r3, [r5, #0]
 8009088:	f10a 0301 	add.w	r3, sl, #1
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009090:	2b00      	cmp	r3, #0
 8009092:	f43f acff 	beq.w	8008a94 <_dtoa_r+0x74>
 8009096:	601d      	str	r5, [r3, #0]
 8009098:	e4fc      	b.n	8008a94 <_dtoa_r+0x74>
 800909a:	f8cd a020 	str.w	sl, [sp, #32]
 800909e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090a2:	2a39      	cmp	r2, #57	; 0x39
 80090a4:	f105 33ff 	add.w	r3, r5, #4294967295
 80090a8:	d108      	bne.n	80090bc <_dtoa_r+0x69c>
 80090aa:	459b      	cmp	fp, r3
 80090ac:	d10a      	bne.n	80090c4 <_dtoa_r+0x6a4>
 80090ae:	9b08      	ldr	r3, [sp, #32]
 80090b0:	3301      	adds	r3, #1
 80090b2:	9308      	str	r3, [sp, #32]
 80090b4:	2330      	movs	r3, #48	; 0x30
 80090b6:	f88b 3000 	strb.w	r3, [fp]
 80090ba:	465b      	mov	r3, fp
 80090bc:	781a      	ldrb	r2, [r3, #0]
 80090be:	3201      	adds	r2, #1
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	e78c      	b.n	8008fde <_dtoa_r+0x5be>
 80090c4:	461d      	mov	r5, r3
 80090c6:	e7ea      	b.n	800909e <_dtoa_r+0x67e>
 80090c8:	2200      	movs	r2, #0
 80090ca:	4b9b      	ldr	r3, [pc, #620]	; (8009338 <_dtoa_r+0x918>)
 80090cc:	f7f7 fab4 	bl	8000638 <__aeabi_dmul>
 80090d0:	2200      	movs	r2, #0
 80090d2:	2300      	movs	r3, #0
 80090d4:	4606      	mov	r6, r0
 80090d6:	460f      	mov	r7, r1
 80090d8:	f7f7 fd16 	bl	8000b08 <__aeabi_dcmpeq>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d09a      	beq.n	8009016 <_dtoa_r+0x5f6>
 80090e0:	e7cb      	b.n	800907a <_dtoa_r+0x65a>
 80090e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	f000 808b 	beq.w	8009200 <_dtoa_r+0x7e0>
 80090ea:	9a06      	ldr	r2, [sp, #24]
 80090ec:	2a01      	cmp	r2, #1
 80090ee:	dc6e      	bgt.n	80091ce <_dtoa_r+0x7ae>
 80090f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090f2:	2a00      	cmp	r2, #0
 80090f4:	d067      	beq.n	80091c6 <_dtoa_r+0x7a6>
 80090f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090fa:	9f07      	ldr	r7, [sp, #28]
 80090fc:	9d05      	ldr	r5, [sp, #20]
 80090fe:	9a05      	ldr	r2, [sp, #20]
 8009100:	2101      	movs	r1, #1
 8009102:	441a      	add	r2, r3
 8009104:	4620      	mov	r0, r4
 8009106:	9205      	str	r2, [sp, #20]
 8009108:	4498      	add	r8, r3
 800910a:	f000 fe54 	bl	8009db6 <__i2b>
 800910e:	4606      	mov	r6, r0
 8009110:	2d00      	cmp	r5, #0
 8009112:	dd0c      	ble.n	800912e <_dtoa_r+0x70e>
 8009114:	f1b8 0f00 	cmp.w	r8, #0
 8009118:	dd09      	ble.n	800912e <_dtoa_r+0x70e>
 800911a:	4545      	cmp	r5, r8
 800911c:	9a05      	ldr	r2, [sp, #20]
 800911e:	462b      	mov	r3, r5
 8009120:	bfa8      	it	ge
 8009122:	4643      	movge	r3, r8
 8009124:	1ad2      	subs	r2, r2, r3
 8009126:	9205      	str	r2, [sp, #20]
 8009128:	1aed      	subs	r5, r5, r3
 800912a:	eba8 0803 	sub.w	r8, r8, r3
 800912e:	9b07      	ldr	r3, [sp, #28]
 8009130:	b1eb      	cbz	r3, 800916e <_dtoa_r+0x74e>
 8009132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009134:	2b00      	cmp	r3, #0
 8009136:	d067      	beq.n	8009208 <_dtoa_r+0x7e8>
 8009138:	b18f      	cbz	r7, 800915e <_dtoa_r+0x73e>
 800913a:	4631      	mov	r1, r6
 800913c:	463a      	mov	r2, r7
 800913e:	4620      	mov	r0, r4
 8009140:	f000 fed8 	bl	8009ef4 <__pow5mult>
 8009144:	9a04      	ldr	r2, [sp, #16]
 8009146:	4601      	mov	r1, r0
 8009148:	4606      	mov	r6, r0
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fe3c 	bl	8009dc8 <__multiply>
 8009150:	9904      	ldr	r1, [sp, #16]
 8009152:	9008      	str	r0, [sp, #32]
 8009154:	4620      	mov	r0, r4
 8009156:	f000 fd9c 	bl	8009c92 <_Bfree>
 800915a:	9b08      	ldr	r3, [sp, #32]
 800915c:	9304      	str	r3, [sp, #16]
 800915e:	9b07      	ldr	r3, [sp, #28]
 8009160:	1bda      	subs	r2, r3, r7
 8009162:	d004      	beq.n	800916e <_dtoa_r+0x74e>
 8009164:	9904      	ldr	r1, [sp, #16]
 8009166:	4620      	mov	r0, r4
 8009168:	f000 fec4 	bl	8009ef4 <__pow5mult>
 800916c:	9004      	str	r0, [sp, #16]
 800916e:	2101      	movs	r1, #1
 8009170:	4620      	mov	r0, r4
 8009172:	f000 fe20 	bl	8009db6 <__i2b>
 8009176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009178:	4607      	mov	r7, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 81cf 	beq.w	800951e <_dtoa_r+0xafe>
 8009180:	461a      	mov	r2, r3
 8009182:	4601      	mov	r1, r0
 8009184:	4620      	mov	r0, r4
 8009186:	f000 feb5 	bl	8009ef4 <__pow5mult>
 800918a:	9b06      	ldr	r3, [sp, #24]
 800918c:	2b01      	cmp	r3, #1
 800918e:	4607      	mov	r7, r0
 8009190:	dc40      	bgt.n	8009214 <_dtoa_r+0x7f4>
 8009192:	9b00      	ldr	r3, [sp, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d139      	bne.n	800920c <_dtoa_r+0x7ec>
 8009198:	9b01      	ldr	r3, [sp, #4]
 800919a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d136      	bne.n	8009210 <_dtoa_r+0x7f0>
 80091a2:	9b01      	ldr	r3, [sp, #4]
 80091a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091a8:	0d1b      	lsrs	r3, r3, #20
 80091aa:	051b      	lsls	r3, r3, #20
 80091ac:	b12b      	cbz	r3, 80091ba <_dtoa_r+0x79a>
 80091ae:	9b05      	ldr	r3, [sp, #20]
 80091b0:	3301      	adds	r3, #1
 80091b2:	9305      	str	r3, [sp, #20]
 80091b4:	f108 0801 	add.w	r8, r8, #1
 80091b8:	2301      	movs	r3, #1
 80091ba:	9307      	str	r3, [sp, #28]
 80091bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d12a      	bne.n	8009218 <_dtoa_r+0x7f8>
 80091c2:	2001      	movs	r0, #1
 80091c4:	e030      	b.n	8009228 <_dtoa_r+0x808>
 80091c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091cc:	e795      	b.n	80090fa <_dtoa_r+0x6da>
 80091ce:	9b07      	ldr	r3, [sp, #28]
 80091d0:	f109 37ff 	add.w	r7, r9, #4294967295
 80091d4:	42bb      	cmp	r3, r7
 80091d6:	bfbf      	itttt	lt
 80091d8:	9b07      	ldrlt	r3, [sp, #28]
 80091da:	9707      	strlt	r7, [sp, #28]
 80091dc:	1afa      	sublt	r2, r7, r3
 80091de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80091e0:	bfbb      	ittet	lt
 80091e2:	189b      	addlt	r3, r3, r2
 80091e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80091e6:	1bdf      	subge	r7, r3, r7
 80091e8:	2700      	movlt	r7, #0
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	bfb5      	itete	lt
 80091f0:	9b05      	ldrlt	r3, [sp, #20]
 80091f2:	9d05      	ldrge	r5, [sp, #20]
 80091f4:	eba3 0509 	sublt.w	r5, r3, r9
 80091f8:	464b      	movge	r3, r9
 80091fa:	bfb8      	it	lt
 80091fc:	2300      	movlt	r3, #0
 80091fe:	e77e      	b.n	80090fe <_dtoa_r+0x6de>
 8009200:	9f07      	ldr	r7, [sp, #28]
 8009202:	9d05      	ldr	r5, [sp, #20]
 8009204:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009206:	e783      	b.n	8009110 <_dtoa_r+0x6f0>
 8009208:	9a07      	ldr	r2, [sp, #28]
 800920a:	e7ab      	b.n	8009164 <_dtoa_r+0x744>
 800920c:	2300      	movs	r3, #0
 800920e:	e7d4      	b.n	80091ba <_dtoa_r+0x79a>
 8009210:	9b00      	ldr	r3, [sp, #0]
 8009212:	e7d2      	b.n	80091ba <_dtoa_r+0x79a>
 8009214:	2300      	movs	r3, #0
 8009216:	9307      	str	r3, [sp, #28]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800921e:	6918      	ldr	r0, [r3, #16]
 8009220:	f000 fd7b 	bl	8009d1a <__hi0bits>
 8009224:	f1c0 0020 	rsb	r0, r0, #32
 8009228:	4440      	add	r0, r8
 800922a:	f010 001f 	ands.w	r0, r0, #31
 800922e:	d047      	beq.n	80092c0 <_dtoa_r+0x8a0>
 8009230:	f1c0 0320 	rsb	r3, r0, #32
 8009234:	2b04      	cmp	r3, #4
 8009236:	dd3b      	ble.n	80092b0 <_dtoa_r+0x890>
 8009238:	9b05      	ldr	r3, [sp, #20]
 800923a:	f1c0 001c 	rsb	r0, r0, #28
 800923e:	4403      	add	r3, r0
 8009240:	9305      	str	r3, [sp, #20]
 8009242:	4405      	add	r5, r0
 8009244:	4480      	add	r8, r0
 8009246:	9b05      	ldr	r3, [sp, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	dd05      	ble.n	8009258 <_dtoa_r+0x838>
 800924c:	461a      	mov	r2, r3
 800924e:	9904      	ldr	r1, [sp, #16]
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fe8f 	bl	8009f74 <__lshift>
 8009256:	9004      	str	r0, [sp, #16]
 8009258:	f1b8 0f00 	cmp.w	r8, #0
 800925c:	dd05      	ble.n	800926a <_dtoa_r+0x84a>
 800925e:	4639      	mov	r1, r7
 8009260:	4642      	mov	r2, r8
 8009262:	4620      	mov	r0, r4
 8009264:	f000 fe86 	bl	8009f74 <__lshift>
 8009268:	4607      	mov	r7, r0
 800926a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800926c:	b353      	cbz	r3, 80092c4 <_dtoa_r+0x8a4>
 800926e:	4639      	mov	r1, r7
 8009270:	9804      	ldr	r0, [sp, #16]
 8009272:	f000 fed3 	bl	800a01c <__mcmp>
 8009276:	2800      	cmp	r0, #0
 8009278:	da24      	bge.n	80092c4 <_dtoa_r+0x8a4>
 800927a:	2300      	movs	r3, #0
 800927c:	220a      	movs	r2, #10
 800927e:	9904      	ldr	r1, [sp, #16]
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fd0f 	bl	8009ca4 <__multadd>
 8009286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009288:	9004      	str	r0, [sp, #16]
 800928a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 814c 	beq.w	800952c <_dtoa_r+0xb0c>
 8009294:	2300      	movs	r3, #0
 8009296:	4631      	mov	r1, r6
 8009298:	220a      	movs	r2, #10
 800929a:	4620      	mov	r0, r4
 800929c:	f000 fd02 	bl	8009ca4 <__multadd>
 80092a0:	9b02      	ldr	r3, [sp, #8]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	4606      	mov	r6, r0
 80092a6:	dc4f      	bgt.n	8009348 <_dtoa_r+0x928>
 80092a8:	9b06      	ldr	r3, [sp, #24]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	dd4c      	ble.n	8009348 <_dtoa_r+0x928>
 80092ae:	e011      	b.n	80092d4 <_dtoa_r+0x8b4>
 80092b0:	d0c9      	beq.n	8009246 <_dtoa_r+0x826>
 80092b2:	9a05      	ldr	r2, [sp, #20]
 80092b4:	331c      	adds	r3, #28
 80092b6:	441a      	add	r2, r3
 80092b8:	9205      	str	r2, [sp, #20]
 80092ba:	441d      	add	r5, r3
 80092bc:	4498      	add	r8, r3
 80092be:	e7c2      	b.n	8009246 <_dtoa_r+0x826>
 80092c0:	4603      	mov	r3, r0
 80092c2:	e7f6      	b.n	80092b2 <_dtoa_r+0x892>
 80092c4:	f1b9 0f00 	cmp.w	r9, #0
 80092c8:	dc38      	bgt.n	800933c <_dtoa_r+0x91c>
 80092ca:	9b06      	ldr	r3, [sp, #24]
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	dd35      	ble.n	800933c <_dtoa_r+0x91c>
 80092d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80092d4:	9b02      	ldr	r3, [sp, #8]
 80092d6:	b963      	cbnz	r3, 80092f2 <_dtoa_r+0x8d2>
 80092d8:	4639      	mov	r1, r7
 80092da:	2205      	movs	r2, #5
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 fce1 	bl	8009ca4 <__multadd>
 80092e2:	4601      	mov	r1, r0
 80092e4:	4607      	mov	r7, r0
 80092e6:	9804      	ldr	r0, [sp, #16]
 80092e8:	f000 fe98 	bl	800a01c <__mcmp>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	f73f adcc 	bgt.w	8008e8a <_dtoa_r+0x46a>
 80092f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f4:	465d      	mov	r5, fp
 80092f6:	ea6f 0a03 	mvn.w	sl, r3
 80092fa:	f04f 0900 	mov.w	r9, #0
 80092fe:	4639      	mov	r1, r7
 8009300:	4620      	mov	r0, r4
 8009302:	f000 fcc6 	bl	8009c92 <_Bfree>
 8009306:	2e00      	cmp	r6, #0
 8009308:	f43f aeb7 	beq.w	800907a <_dtoa_r+0x65a>
 800930c:	f1b9 0f00 	cmp.w	r9, #0
 8009310:	d005      	beq.n	800931e <_dtoa_r+0x8fe>
 8009312:	45b1      	cmp	r9, r6
 8009314:	d003      	beq.n	800931e <_dtoa_r+0x8fe>
 8009316:	4649      	mov	r1, r9
 8009318:	4620      	mov	r0, r4
 800931a:	f000 fcba 	bl	8009c92 <_Bfree>
 800931e:	4631      	mov	r1, r6
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fcb6 	bl	8009c92 <_Bfree>
 8009326:	e6a8      	b.n	800907a <_dtoa_r+0x65a>
 8009328:	2700      	movs	r7, #0
 800932a:	463e      	mov	r6, r7
 800932c:	e7e1      	b.n	80092f2 <_dtoa_r+0x8d2>
 800932e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009332:	463e      	mov	r6, r7
 8009334:	e5a9      	b.n	8008e8a <_dtoa_r+0x46a>
 8009336:	bf00      	nop
 8009338:	40240000 	.word	0x40240000
 800933c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800933e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 80f9 	beq.w	800953a <_dtoa_r+0xb1a>
 8009348:	2d00      	cmp	r5, #0
 800934a:	dd05      	ble.n	8009358 <_dtoa_r+0x938>
 800934c:	4631      	mov	r1, r6
 800934e:	462a      	mov	r2, r5
 8009350:	4620      	mov	r0, r4
 8009352:	f000 fe0f 	bl	8009f74 <__lshift>
 8009356:	4606      	mov	r6, r0
 8009358:	9b07      	ldr	r3, [sp, #28]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d04c      	beq.n	80093f8 <_dtoa_r+0x9d8>
 800935e:	6871      	ldr	r1, [r6, #4]
 8009360:	4620      	mov	r0, r4
 8009362:	f000 fc71 	bl	8009c48 <_Balloc>
 8009366:	6932      	ldr	r2, [r6, #16]
 8009368:	3202      	adds	r2, #2
 800936a:	4605      	mov	r5, r0
 800936c:	0092      	lsls	r2, r2, #2
 800936e:	f106 010c 	add.w	r1, r6, #12
 8009372:	300c      	adds	r0, #12
 8009374:	f000 fc50 	bl	8009c18 <memcpy>
 8009378:	2201      	movs	r2, #1
 800937a:	4629      	mov	r1, r5
 800937c:	4620      	mov	r0, r4
 800937e:	f000 fdf9 	bl	8009f74 <__lshift>
 8009382:	9b00      	ldr	r3, [sp, #0]
 8009384:	f8cd b014 	str.w	fp, [sp, #20]
 8009388:	f003 0301 	and.w	r3, r3, #1
 800938c:	46b1      	mov	r9, r6
 800938e:	9307      	str	r3, [sp, #28]
 8009390:	4606      	mov	r6, r0
 8009392:	4639      	mov	r1, r7
 8009394:	9804      	ldr	r0, [sp, #16]
 8009396:	f7ff fab7 	bl	8008908 <quorem>
 800939a:	4649      	mov	r1, r9
 800939c:	4605      	mov	r5, r0
 800939e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80093a2:	9804      	ldr	r0, [sp, #16]
 80093a4:	f000 fe3a 	bl	800a01c <__mcmp>
 80093a8:	4632      	mov	r2, r6
 80093aa:	9000      	str	r0, [sp, #0]
 80093ac:	4639      	mov	r1, r7
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 fe4e 	bl	800a050 <__mdiff>
 80093b4:	68c3      	ldr	r3, [r0, #12]
 80093b6:	4602      	mov	r2, r0
 80093b8:	bb03      	cbnz	r3, 80093fc <_dtoa_r+0x9dc>
 80093ba:	4601      	mov	r1, r0
 80093bc:	9008      	str	r0, [sp, #32]
 80093be:	9804      	ldr	r0, [sp, #16]
 80093c0:	f000 fe2c 	bl	800a01c <__mcmp>
 80093c4:	9a08      	ldr	r2, [sp, #32]
 80093c6:	4603      	mov	r3, r0
 80093c8:	4611      	mov	r1, r2
 80093ca:	4620      	mov	r0, r4
 80093cc:	9308      	str	r3, [sp, #32]
 80093ce:	f000 fc60 	bl	8009c92 <_Bfree>
 80093d2:	9b08      	ldr	r3, [sp, #32]
 80093d4:	b9a3      	cbnz	r3, 8009400 <_dtoa_r+0x9e0>
 80093d6:	9a06      	ldr	r2, [sp, #24]
 80093d8:	b992      	cbnz	r2, 8009400 <_dtoa_r+0x9e0>
 80093da:	9a07      	ldr	r2, [sp, #28]
 80093dc:	b982      	cbnz	r2, 8009400 <_dtoa_r+0x9e0>
 80093de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80093e2:	d029      	beq.n	8009438 <_dtoa_r+0xa18>
 80093e4:	9b00      	ldr	r3, [sp, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	dd01      	ble.n	80093ee <_dtoa_r+0x9ce>
 80093ea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80093ee:	9b05      	ldr	r3, [sp, #20]
 80093f0:	1c5d      	adds	r5, r3, #1
 80093f2:	f883 8000 	strb.w	r8, [r3]
 80093f6:	e782      	b.n	80092fe <_dtoa_r+0x8de>
 80093f8:	4630      	mov	r0, r6
 80093fa:	e7c2      	b.n	8009382 <_dtoa_r+0x962>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e7e3      	b.n	80093c8 <_dtoa_r+0x9a8>
 8009400:	9a00      	ldr	r2, [sp, #0]
 8009402:	2a00      	cmp	r2, #0
 8009404:	db04      	blt.n	8009410 <_dtoa_r+0x9f0>
 8009406:	d125      	bne.n	8009454 <_dtoa_r+0xa34>
 8009408:	9a06      	ldr	r2, [sp, #24]
 800940a:	bb1a      	cbnz	r2, 8009454 <_dtoa_r+0xa34>
 800940c:	9a07      	ldr	r2, [sp, #28]
 800940e:	bb0a      	cbnz	r2, 8009454 <_dtoa_r+0xa34>
 8009410:	2b00      	cmp	r3, #0
 8009412:	ddec      	ble.n	80093ee <_dtoa_r+0x9ce>
 8009414:	2201      	movs	r2, #1
 8009416:	9904      	ldr	r1, [sp, #16]
 8009418:	4620      	mov	r0, r4
 800941a:	f000 fdab 	bl	8009f74 <__lshift>
 800941e:	4639      	mov	r1, r7
 8009420:	9004      	str	r0, [sp, #16]
 8009422:	f000 fdfb 	bl	800a01c <__mcmp>
 8009426:	2800      	cmp	r0, #0
 8009428:	dc03      	bgt.n	8009432 <_dtoa_r+0xa12>
 800942a:	d1e0      	bne.n	80093ee <_dtoa_r+0x9ce>
 800942c:	f018 0f01 	tst.w	r8, #1
 8009430:	d0dd      	beq.n	80093ee <_dtoa_r+0x9ce>
 8009432:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009436:	d1d8      	bne.n	80093ea <_dtoa_r+0x9ca>
 8009438:	9b05      	ldr	r3, [sp, #20]
 800943a:	9a05      	ldr	r2, [sp, #20]
 800943c:	1c5d      	adds	r5, r3, #1
 800943e:	2339      	movs	r3, #57	; 0x39
 8009440:	7013      	strb	r3, [r2, #0]
 8009442:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009446:	2b39      	cmp	r3, #57	; 0x39
 8009448:	f105 32ff 	add.w	r2, r5, #4294967295
 800944c:	d04f      	beq.n	80094ee <_dtoa_r+0xace>
 800944e:	3301      	adds	r3, #1
 8009450:	7013      	strb	r3, [r2, #0]
 8009452:	e754      	b.n	80092fe <_dtoa_r+0x8de>
 8009454:	9a05      	ldr	r2, [sp, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f102 0501 	add.w	r5, r2, #1
 800945c:	dd06      	ble.n	800946c <_dtoa_r+0xa4c>
 800945e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009462:	d0e9      	beq.n	8009438 <_dtoa_r+0xa18>
 8009464:	f108 0801 	add.w	r8, r8, #1
 8009468:	9b05      	ldr	r3, [sp, #20]
 800946a:	e7c2      	b.n	80093f2 <_dtoa_r+0x9d2>
 800946c:	9a02      	ldr	r2, [sp, #8]
 800946e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009472:	eba5 030b 	sub.w	r3, r5, fp
 8009476:	4293      	cmp	r3, r2
 8009478:	d021      	beq.n	80094be <_dtoa_r+0xa9e>
 800947a:	2300      	movs	r3, #0
 800947c:	220a      	movs	r2, #10
 800947e:	9904      	ldr	r1, [sp, #16]
 8009480:	4620      	mov	r0, r4
 8009482:	f000 fc0f 	bl	8009ca4 <__multadd>
 8009486:	45b1      	cmp	r9, r6
 8009488:	9004      	str	r0, [sp, #16]
 800948a:	f04f 0300 	mov.w	r3, #0
 800948e:	f04f 020a 	mov.w	r2, #10
 8009492:	4649      	mov	r1, r9
 8009494:	4620      	mov	r0, r4
 8009496:	d105      	bne.n	80094a4 <_dtoa_r+0xa84>
 8009498:	f000 fc04 	bl	8009ca4 <__multadd>
 800949c:	4681      	mov	r9, r0
 800949e:	4606      	mov	r6, r0
 80094a0:	9505      	str	r5, [sp, #20]
 80094a2:	e776      	b.n	8009392 <_dtoa_r+0x972>
 80094a4:	f000 fbfe 	bl	8009ca4 <__multadd>
 80094a8:	4631      	mov	r1, r6
 80094aa:	4681      	mov	r9, r0
 80094ac:	2300      	movs	r3, #0
 80094ae:	220a      	movs	r2, #10
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 fbf7 	bl	8009ca4 <__multadd>
 80094b6:	4606      	mov	r6, r0
 80094b8:	e7f2      	b.n	80094a0 <_dtoa_r+0xa80>
 80094ba:	f04f 0900 	mov.w	r9, #0
 80094be:	2201      	movs	r2, #1
 80094c0:	9904      	ldr	r1, [sp, #16]
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 fd56 	bl	8009f74 <__lshift>
 80094c8:	4639      	mov	r1, r7
 80094ca:	9004      	str	r0, [sp, #16]
 80094cc:	f000 fda6 	bl	800a01c <__mcmp>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	dcb6      	bgt.n	8009442 <_dtoa_r+0xa22>
 80094d4:	d102      	bne.n	80094dc <_dtoa_r+0xabc>
 80094d6:	f018 0f01 	tst.w	r8, #1
 80094da:	d1b2      	bne.n	8009442 <_dtoa_r+0xa22>
 80094dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094e0:	2b30      	cmp	r3, #48	; 0x30
 80094e2:	f105 32ff 	add.w	r2, r5, #4294967295
 80094e6:	f47f af0a 	bne.w	80092fe <_dtoa_r+0x8de>
 80094ea:	4615      	mov	r5, r2
 80094ec:	e7f6      	b.n	80094dc <_dtoa_r+0xabc>
 80094ee:	4593      	cmp	fp, r2
 80094f0:	d105      	bne.n	80094fe <_dtoa_r+0xade>
 80094f2:	2331      	movs	r3, #49	; 0x31
 80094f4:	f10a 0a01 	add.w	sl, sl, #1
 80094f8:	f88b 3000 	strb.w	r3, [fp]
 80094fc:	e6ff      	b.n	80092fe <_dtoa_r+0x8de>
 80094fe:	4615      	mov	r5, r2
 8009500:	e79f      	b.n	8009442 <_dtoa_r+0xa22>
 8009502:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009568 <_dtoa_r+0xb48>
 8009506:	f7ff bac5 	b.w	8008a94 <_dtoa_r+0x74>
 800950a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800950c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800956c <_dtoa_r+0xb4c>
 8009510:	2b00      	cmp	r3, #0
 8009512:	f43f aabf 	beq.w	8008a94 <_dtoa_r+0x74>
 8009516:	f10b 0308 	add.w	r3, fp, #8
 800951a:	f7ff bab9 	b.w	8008a90 <_dtoa_r+0x70>
 800951e:	9b06      	ldr	r3, [sp, #24]
 8009520:	2b01      	cmp	r3, #1
 8009522:	f77f ae36 	ble.w	8009192 <_dtoa_r+0x772>
 8009526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009528:	9307      	str	r3, [sp, #28]
 800952a:	e64a      	b.n	80091c2 <_dtoa_r+0x7a2>
 800952c:	9b02      	ldr	r3, [sp, #8]
 800952e:	2b00      	cmp	r3, #0
 8009530:	dc03      	bgt.n	800953a <_dtoa_r+0xb1a>
 8009532:	9b06      	ldr	r3, [sp, #24]
 8009534:	2b02      	cmp	r3, #2
 8009536:	f73f aecd 	bgt.w	80092d4 <_dtoa_r+0x8b4>
 800953a:	465d      	mov	r5, fp
 800953c:	4639      	mov	r1, r7
 800953e:	9804      	ldr	r0, [sp, #16]
 8009540:	f7ff f9e2 	bl	8008908 <quorem>
 8009544:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009548:	f805 8b01 	strb.w	r8, [r5], #1
 800954c:	9a02      	ldr	r2, [sp, #8]
 800954e:	eba5 030b 	sub.w	r3, r5, fp
 8009552:	429a      	cmp	r2, r3
 8009554:	ddb1      	ble.n	80094ba <_dtoa_r+0xa9a>
 8009556:	2300      	movs	r3, #0
 8009558:	220a      	movs	r2, #10
 800955a:	9904      	ldr	r1, [sp, #16]
 800955c:	4620      	mov	r0, r4
 800955e:	f000 fba1 	bl	8009ca4 <__multadd>
 8009562:	9004      	str	r0, [sp, #16]
 8009564:	e7ea      	b.n	800953c <_dtoa_r+0xb1c>
 8009566:	bf00      	nop
 8009568:	0800a84a 	.word	0x0800a84a
 800956c:	0800a86c 	.word	0x0800a86c

08009570 <_malloc_trim_r>:
 8009570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	4605      	mov	r5, r0
 8009576:	2008      	movs	r0, #8
 8009578:	460c      	mov	r4, r1
 800957a:	f000 fee8 	bl	800a34e <sysconf>
 800957e:	4f23      	ldr	r7, [pc, #140]	; (800960c <_malloc_trim_r+0x9c>)
 8009580:	4680      	mov	r8, r0
 8009582:	4628      	mov	r0, r5
 8009584:	f000 fb54 	bl	8009c30 <__malloc_lock>
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	685e      	ldr	r6, [r3, #4]
 800958c:	f026 0603 	bic.w	r6, r6, #3
 8009590:	1b34      	subs	r4, r6, r4
 8009592:	3c11      	subs	r4, #17
 8009594:	4444      	add	r4, r8
 8009596:	fbb4 f4f8 	udiv	r4, r4, r8
 800959a:	3c01      	subs	r4, #1
 800959c:	fb08 f404 	mul.w	r4, r8, r4
 80095a0:	45a0      	cmp	r8, r4
 80095a2:	dd05      	ble.n	80095b0 <_malloc_trim_r+0x40>
 80095a4:	4628      	mov	r0, r5
 80095a6:	f000 fb49 	bl	8009c3c <__malloc_unlock>
 80095aa:	2000      	movs	r0, #0
 80095ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b0:	2100      	movs	r1, #0
 80095b2:	4628      	mov	r0, r5
 80095b4:	f000 fe2e 	bl	800a214 <_sbrk_r>
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4433      	add	r3, r6
 80095bc:	4298      	cmp	r0, r3
 80095be:	d1f1      	bne.n	80095a4 <_malloc_trim_r+0x34>
 80095c0:	4261      	negs	r1, r4
 80095c2:	4628      	mov	r0, r5
 80095c4:	f000 fe26 	bl	800a214 <_sbrk_r>
 80095c8:	3001      	adds	r0, #1
 80095ca:	d110      	bne.n	80095ee <_malloc_trim_r+0x7e>
 80095cc:	2100      	movs	r1, #0
 80095ce:	4628      	mov	r0, r5
 80095d0:	f000 fe20 	bl	800a214 <_sbrk_r>
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	1a83      	subs	r3, r0, r2
 80095d8:	2b0f      	cmp	r3, #15
 80095da:	dde3      	ble.n	80095a4 <_malloc_trim_r+0x34>
 80095dc:	490c      	ldr	r1, [pc, #48]	; (8009610 <_malloc_trim_r+0xa0>)
 80095de:	6809      	ldr	r1, [r1, #0]
 80095e0:	1a40      	subs	r0, r0, r1
 80095e2:	490c      	ldr	r1, [pc, #48]	; (8009614 <_malloc_trim_r+0xa4>)
 80095e4:	f043 0301 	orr.w	r3, r3, #1
 80095e8:	6008      	str	r0, [r1, #0]
 80095ea:	6053      	str	r3, [r2, #4]
 80095ec:	e7da      	b.n	80095a4 <_malloc_trim_r+0x34>
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	4a08      	ldr	r2, [pc, #32]	; (8009614 <_malloc_trim_r+0xa4>)
 80095f2:	1b36      	subs	r6, r6, r4
 80095f4:	f046 0601 	orr.w	r6, r6, #1
 80095f8:	605e      	str	r6, [r3, #4]
 80095fa:	6813      	ldr	r3, [r2, #0]
 80095fc:	4628      	mov	r0, r5
 80095fe:	1b1c      	subs	r4, r3, r4
 8009600:	6014      	str	r4, [r2, #0]
 8009602:	f000 fb1b 	bl	8009c3c <__malloc_unlock>
 8009606:	2001      	movs	r0, #1
 8009608:	e7d0      	b.n	80095ac <_malloc_trim_r+0x3c>
 800960a:	bf00      	nop
 800960c:	2000046c 	.word	0x2000046c
 8009610:	20000874 	.word	0x20000874
 8009614:	20000b5c 	.word	0x20000b5c

08009618 <_free_r>:
 8009618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961c:	4604      	mov	r4, r0
 800961e:	4688      	mov	r8, r1
 8009620:	2900      	cmp	r1, #0
 8009622:	f000 80ab 	beq.w	800977c <_free_r+0x164>
 8009626:	f000 fb03 	bl	8009c30 <__malloc_lock>
 800962a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800962e:	4d54      	ldr	r5, [pc, #336]	; (8009780 <_free_r+0x168>)
 8009630:	f022 0001 	bic.w	r0, r2, #1
 8009634:	f1a8 0308 	sub.w	r3, r8, #8
 8009638:	181f      	adds	r7, r3, r0
 800963a:	68a9      	ldr	r1, [r5, #8]
 800963c:	687e      	ldr	r6, [r7, #4]
 800963e:	42b9      	cmp	r1, r7
 8009640:	f026 0603 	bic.w	r6, r6, #3
 8009644:	f002 0201 	and.w	r2, r2, #1
 8009648:	d11b      	bne.n	8009682 <_free_r+0x6a>
 800964a:	4430      	add	r0, r6
 800964c:	b93a      	cbnz	r2, 800965e <_free_r+0x46>
 800964e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8009652:	1a9b      	subs	r3, r3, r2
 8009654:	4410      	add	r0, r2
 8009656:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800965a:	60ca      	str	r2, [r1, #12]
 800965c:	6091      	str	r1, [r2, #8]
 800965e:	f040 0201 	orr.w	r2, r0, #1
 8009662:	605a      	str	r2, [r3, #4]
 8009664:	60ab      	str	r3, [r5, #8]
 8009666:	4b47      	ldr	r3, [pc, #284]	; (8009784 <_free_r+0x16c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4283      	cmp	r3, r0
 800966c:	d804      	bhi.n	8009678 <_free_r+0x60>
 800966e:	4b46      	ldr	r3, [pc, #280]	; (8009788 <_free_r+0x170>)
 8009670:	4620      	mov	r0, r4
 8009672:	6819      	ldr	r1, [r3, #0]
 8009674:	f7ff ff7c 	bl	8009570 <_malloc_trim_r>
 8009678:	4620      	mov	r0, r4
 800967a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800967e:	f000 badd 	b.w	8009c3c <__malloc_unlock>
 8009682:	607e      	str	r6, [r7, #4]
 8009684:	2a00      	cmp	r2, #0
 8009686:	d139      	bne.n	80096fc <_free_r+0xe4>
 8009688:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800968c:	1a5b      	subs	r3, r3, r1
 800968e:	4408      	add	r0, r1
 8009690:	6899      	ldr	r1, [r3, #8]
 8009692:	f105 0c08 	add.w	ip, r5, #8
 8009696:	4561      	cmp	r1, ip
 8009698:	d032      	beq.n	8009700 <_free_r+0xe8>
 800969a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800969e:	f8c1 c00c 	str.w	ip, [r1, #12]
 80096a2:	f8cc 1008 	str.w	r1, [ip, #8]
 80096a6:	19b9      	adds	r1, r7, r6
 80096a8:	6849      	ldr	r1, [r1, #4]
 80096aa:	07c9      	lsls	r1, r1, #31
 80096ac:	d40a      	bmi.n	80096c4 <_free_r+0xac>
 80096ae:	4430      	add	r0, r6
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	bb3a      	cbnz	r2, 8009704 <_free_r+0xec>
 80096b4:	4e35      	ldr	r6, [pc, #212]	; (800978c <_free_r+0x174>)
 80096b6:	42b1      	cmp	r1, r6
 80096b8:	d124      	bne.n	8009704 <_free_r+0xec>
 80096ba:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80096be:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f040 0101 	orr.w	r1, r0, #1
 80096c8:	6059      	str	r1, [r3, #4]
 80096ca:	5018      	str	r0, [r3, r0]
 80096cc:	2a00      	cmp	r2, #0
 80096ce:	d1d3      	bne.n	8009678 <_free_r+0x60>
 80096d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80096d4:	d21a      	bcs.n	800970c <_free_r+0xf4>
 80096d6:	08c0      	lsrs	r0, r0, #3
 80096d8:	1081      	asrs	r1, r0, #2
 80096da:	2201      	movs	r2, #1
 80096dc:	408a      	lsls	r2, r1
 80096de:	6869      	ldr	r1, [r5, #4]
 80096e0:	3001      	adds	r0, #1
 80096e2:	430a      	orrs	r2, r1
 80096e4:	606a      	str	r2, [r5, #4]
 80096e6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80096ea:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80096ee:	3a08      	subs	r2, #8
 80096f0:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80096f4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80096f8:	60cb      	str	r3, [r1, #12]
 80096fa:	e7bd      	b.n	8009678 <_free_r+0x60>
 80096fc:	2200      	movs	r2, #0
 80096fe:	e7d2      	b.n	80096a6 <_free_r+0x8e>
 8009700:	2201      	movs	r2, #1
 8009702:	e7d0      	b.n	80096a6 <_free_r+0x8e>
 8009704:	68fe      	ldr	r6, [r7, #12]
 8009706:	60ce      	str	r6, [r1, #12]
 8009708:	60b1      	str	r1, [r6, #8]
 800970a:	e7db      	b.n	80096c4 <_free_r+0xac>
 800970c:	0a42      	lsrs	r2, r0, #9
 800970e:	2a04      	cmp	r2, #4
 8009710:	d813      	bhi.n	800973a <_free_r+0x122>
 8009712:	0982      	lsrs	r2, r0, #6
 8009714:	3238      	adds	r2, #56	; 0x38
 8009716:	1c51      	adds	r1, r2, #1
 8009718:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800971c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8009720:	428e      	cmp	r6, r1
 8009722:	d124      	bne.n	800976e <_free_r+0x156>
 8009724:	2001      	movs	r0, #1
 8009726:	1092      	asrs	r2, r2, #2
 8009728:	fa00 f202 	lsl.w	r2, r0, r2
 800972c:	6868      	ldr	r0, [r5, #4]
 800972e:	4302      	orrs	r2, r0
 8009730:	606a      	str	r2, [r5, #4]
 8009732:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8009736:	60b3      	str	r3, [r6, #8]
 8009738:	e7de      	b.n	80096f8 <_free_r+0xe0>
 800973a:	2a14      	cmp	r2, #20
 800973c:	d801      	bhi.n	8009742 <_free_r+0x12a>
 800973e:	325b      	adds	r2, #91	; 0x5b
 8009740:	e7e9      	b.n	8009716 <_free_r+0xfe>
 8009742:	2a54      	cmp	r2, #84	; 0x54
 8009744:	d802      	bhi.n	800974c <_free_r+0x134>
 8009746:	0b02      	lsrs	r2, r0, #12
 8009748:	326e      	adds	r2, #110	; 0x6e
 800974a:	e7e4      	b.n	8009716 <_free_r+0xfe>
 800974c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009750:	d802      	bhi.n	8009758 <_free_r+0x140>
 8009752:	0bc2      	lsrs	r2, r0, #15
 8009754:	3277      	adds	r2, #119	; 0x77
 8009756:	e7de      	b.n	8009716 <_free_r+0xfe>
 8009758:	f240 5154 	movw	r1, #1364	; 0x554
 800975c:	428a      	cmp	r2, r1
 800975e:	bf9a      	itte	ls
 8009760:	0c82      	lsrls	r2, r0, #18
 8009762:	327c      	addls	r2, #124	; 0x7c
 8009764:	227e      	movhi	r2, #126	; 0x7e
 8009766:	e7d6      	b.n	8009716 <_free_r+0xfe>
 8009768:	6889      	ldr	r1, [r1, #8]
 800976a:	428e      	cmp	r6, r1
 800976c:	d004      	beq.n	8009778 <_free_r+0x160>
 800976e:	684a      	ldr	r2, [r1, #4]
 8009770:	f022 0203 	bic.w	r2, r2, #3
 8009774:	4282      	cmp	r2, r0
 8009776:	d8f7      	bhi.n	8009768 <_free_r+0x150>
 8009778:	68ce      	ldr	r6, [r1, #12]
 800977a:	e7da      	b.n	8009732 <_free_r+0x11a>
 800977c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009780:	2000046c 	.word	0x2000046c
 8009784:	20000878 	.word	0x20000878
 8009788:	20000b8c 	.word	0x20000b8c
 800978c:	20000474 	.word	0x20000474

08009790 <_localeconv_r>:
 8009790:	4b04      	ldr	r3, [pc, #16]	; (80097a4 <_localeconv_r+0x14>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009796:	4b04      	ldr	r3, [pc, #16]	; (80097a8 <_localeconv_r+0x18>)
 8009798:	2800      	cmp	r0, #0
 800979a:	bf08      	it	eq
 800979c:	4618      	moveq	r0, r3
 800979e:	30f0      	adds	r0, #240	; 0xf0
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20000038 	.word	0x20000038
 80097a8:	2000087c 	.word	0x2000087c

080097ac <_malloc_r>:
 80097ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	f101 050b 	add.w	r5, r1, #11
 80097b4:	2d16      	cmp	r5, #22
 80097b6:	4606      	mov	r6, r0
 80097b8:	d906      	bls.n	80097c8 <_malloc_r+0x1c>
 80097ba:	f035 0507 	bics.w	r5, r5, #7
 80097be:	d504      	bpl.n	80097ca <_malloc_r+0x1e>
 80097c0:	230c      	movs	r3, #12
 80097c2:	6033      	str	r3, [r6, #0]
 80097c4:	2400      	movs	r4, #0
 80097c6:	e1a8      	b.n	8009b1a <_malloc_r+0x36e>
 80097c8:	2510      	movs	r5, #16
 80097ca:	428d      	cmp	r5, r1
 80097cc:	d3f8      	bcc.n	80097c0 <_malloc_r+0x14>
 80097ce:	4630      	mov	r0, r6
 80097d0:	f000 fa2e 	bl	8009c30 <__malloc_lock>
 80097d4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80097d8:	4fc0      	ldr	r7, [pc, #768]	; (8009adc <_malloc_r+0x330>)
 80097da:	d238      	bcs.n	800984e <_malloc_r+0xa2>
 80097dc:	f105 0208 	add.w	r2, r5, #8
 80097e0:	443a      	add	r2, r7
 80097e2:	f1a2 0108 	sub.w	r1, r2, #8
 80097e6:	6854      	ldr	r4, [r2, #4]
 80097e8:	428c      	cmp	r4, r1
 80097ea:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 80097ee:	d102      	bne.n	80097f6 <_malloc_r+0x4a>
 80097f0:	68d4      	ldr	r4, [r2, #12]
 80097f2:	42a2      	cmp	r2, r4
 80097f4:	d010      	beq.n	8009818 <_malloc_r+0x6c>
 80097f6:	6863      	ldr	r3, [r4, #4]
 80097f8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80097fc:	f023 0303 	bic.w	r3, r3, #3
 8009800:	60ca      	str	r2, [r1, #12]
 8009802:	4423      	add	r3, r4
 8009804:	6091      	str	r1, [r2, #8]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	f042 0201 	orr.w	r2, r2, #1
 800980c:	605a      	str	r2, [r3, #4]
 800980e:	4630      	mov	r0, r6
 8009810:	f000 fa14 	bl	8009c3c <__malloc_unlock>
 8009814:	3408      	adds	r4, #8
 8009816:	e180      	b.n	8009b1a <_malloc_r+0x36e>
 8009818:	3302      	adds	r3, #2
 800981a:	4ab1      	ldr	r2, [pc, #708]	; (8009ae0 <_malloc_r+0x334>)
 800981c:	693c      	ldr	r4, [r7, #16]
 800981e:	4294      	cmp	r4, r2
 8009820:	4611      	mov	r1, r2
 8009822:	d075      	beq.n	8009910 <_malloc_r+0x164>
 8009824:	6860      	ldr	r0, [r4, #4]
 8009826:	f020 0c03 	bic.w	ip, r0, #3
 800982a:	ebac 0005 	sub.w	r0, ip, r5
 800982e:	280f      	cmp	r0, #15
 8009830:	dd48      	ble.n	80098c4 <_malloc_r+0x118>
 8009832:	1963      	adds	r3, r4, r5
 8009834:	f045 0501 	orr.w	r5, r5, #1
 8009838:	6065      	str	r5, [r4, #4]
 800983a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800983e:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8009842:	f040 0201 	orr.w	r2, r0, #1
 8009846:	605a      	str	r2, [r3, #4]
 8009848:	f844 000c 	str.w	r0, [r4, ip]
 800984c:	e7df      	b.n	800980e <_malloc_r+0x62>
 800984e:	0a6b      	lsrs	r3, r5, #9
 8009850:	d02a      	beq.n	80098a8 <_malloc_r+0xfc>
 8009852:	2b04      	cmp	r3, #4
 8009854:	d812      	bhi.n	800987c <_malloc_r+0xd0>
 8009856:	09ab      	lsrs	r3, r5, #6
 8009858:	3338      	adds	r3, #56	; 0x38
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8009860:	f1a2 0c08 	sub.w	ip, r2, #8
 8009864:	6854      	ldr	r4, [r2, #4]
 8009866:	4564      	cmp	r4, ip
 8009868:	d006      	beq.n	8009878 <_malloc_r+0xcc>
 800986a:	6862      	ldr	r2, [r4, #4]
 800986c:	f022 0203 	bic.w	r2, r2, #3
 8009870:	1b50      	subs	r0, r2, r5
 8009872:	280f      	cmp	r0, #15
 8009874:	dd1c      	ble.n	80098b0 <_malloc_r+0x104>
 8009876:	3b01      	subs	r3, #1
 8009878:	3301      	adds	r3, #1
 800987a:	e7ce      	b.n	800981a <_malloc_r+0x6e>
 800987c:	2b14      	cmp	r3, #20
 800987e:	d801      	bhi.n	8009884 <_malloc_r+0xd8>
 8009880:	335b      	adds	r3, #91	; 0x5b
 8009882:	e7ea      	b.n	800985a <_malloc_r+0xae>
 8009884:	2b54      	cmp	r3, #84	; 0x54
 8009886:	d802      	bhi.n	800988e <_malloc_r+0xe2>
 8009888:	0b2b      	lsrs	r3, r5, #12
 800988a:	336e      	adds	r3, #110	; 0x6e
 800988c:	e7e5      	b.n	800985a <_malloc_r+0xae>
 800988e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009892:	d802      	bhi.n	800989a <_malloc_r+0xee>
 8009894:	0beb      	lsrs	r3, r5, #15
 8009896:	3377      	adds	r3, #119	; 0x77
 8009898:	e7df      	b.n	800985a <_malloc_r+0xae>
 800989a:	f240 5254 	movw	r2, #1364	; 0x554
 800989e:	4293      	cmp	r3, r2
 80098a0:	d804      	bhi.n	80098ac <_malloc_r+0x100>
 80098a2:	0cab      	lsrs	r3, r5, #18
 80098a4:	337c      	adds	r3, #124	; 0x7c
 80098a6:	e7d8      	b.n	800985a <_malloc_r+0xae>
 80098a8:	233f      	movs	r3, #63	; 0x3f
 80098aa:	e7d6      	b.n	800985a <_malloc_r+0xae>
 80098ac:	237e      	movs	r3, #126	; 0x7e
 80098ae:	e7d4      	b.n	800985a <_malloc_r+0xae>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	68e1      	ldr	r1, [r4, #12]
 80098b4:	db04      	blt.n	80098c0 <_malloc_r+0x114>
 80098b6:	68a3      	ldr	r3, [r4, #8]
 80098b8:	60d9      	str	r1, [r3, #12]
 80098ba:	608b      	str	r3, [r1, #8]
 80098bc:	18a3      	adds	r3, r4, r2
 80098be:	e7a2      	b.n	8009806 <_malloc_r+0x5a>
 80098c0:	460c      	mov	r4, r1
 80098c2:	e7d0      	b.n	8009866 <_malloc_r+0xba>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80098ca:	db07      	blt.n	80098dc <_malloc_r+0x130>
 80098cc:	44a4      	add	ip, r4
 80098ce:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80098d2:	f043 0301 	orr.w	r3, r3, #1
 80098d6:	f8cc 3004 	str.w	r3, [ip, #4]
 80098da:	e798      	b.n	800980e <_malloc_r+0x62>
 80098dc:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f080 8099 	bcs.w	8009a18 <_malloc_r+0x26c>
 80098e6:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80098ea:	ea4f 0eac 	mov.w	lr, ip, asr #2
 80098ee:	2201      	movs	r2, #1
 80098f0:	f10c 0c01 	add.w	ip, ip, #1
 80098f4:	fa02 f20e 	lsl.w	r2, r2, lr
 80098f8:	4310      	orrs	r0, r2
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8009900:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8009904:	3a08      	subs	r2, #8
 8009906:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800990a:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800990e:	60c4      	str	r4, [r0, #12]
 8009910:	2001      	movs	r0, #1
 8009912:	109a      	asrs	r2, r3, #2
 8009914:	fa00 f202 	lsl.w	r2, r0, r2
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	4290      	cmp	r0, r2
 800991c:	d326      	bcc.n	800996c <_malloc_r+0x1c0>
 800991e:	4210      	tst	r0, r2
 8009920:	d106      	bne.n	8009930 <_malloc_r+0x184>
 8009922:	f023 0303 	bic.w	r3, r3, #3
 8009926:	0052      	lsls	r2, r2, #1
 8009928:	4210      	tst	r0, r2
 800992a:	f103 0304 	add.w	r3, r3, #4
 800992e:	d0fa      	beq.n	8009926 <_malloc_r+0x17a>
 8009930:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8009934:	46e1      	mov	r9, ip
 8009936:	4698      	mov	r8, r3
 8009938:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800993c:	454c      	cmp	r4, r9
 800993e:	f040 80af 	bne.w	8009aa0 <_malloc_r+0x2f4>
 8009942:	f108 0801 	add.w	r8, r8, #1
 8009946:	f018 0f03 	tst.w	r8, #3
 800994a:	f109 0908 	add.w	r9, r9, #8
 800994e:	d1f3      	bne.n	8009938 <_malloc_r+0x18c>
 8009950:	0798      	lsls	r0, r3, #30
 8009952:	f040 80e8 	bne.w	8009b26 <_malloc_r+0x37a>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	ea23 0302 	bic.w	r3, r3, r2
 800995c:	607b      	str	r3, [r7, #4]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	0052      	lsls	r2, r2, #1
 8009962:	4290      	cmp	r0, r2
 8009964:	d302      	bcc.n	800996c <_malloc_r+0x1c0>
 8009966:	2a00      	cmp	r2, #0
 8009968:	f040 80ec 	bne.w	8009b44 <_malloc_r+0x398>
 800996c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8009970:	f8da 4004 	ldr.w	r4, [sl, #4]
 8009974:	f024 0203 	bic.w	r2, r4, #3
 8009978:	42aa      	cmp	r2, r5
 800997a:	d303      	bcc.n	8009984 <_malloc_r+0x1d8>
 800997c:	1b53      	subs	r3, r2, r5
 800997e:	2b0f      	cmp	r3, #15
 8009980:	f300 8140 	bgt.w	8009c04 <_malloc_r+0x458>
 8009984:	4b57      	ldr	r3, [pc, #348]	; (8009ae4 <_malloc_r+0x338>)
 8009986:	9200      	str	r2, [sp, #0]
 8009988:	2008      	movs	r0, #8
 800998a:	681c      	ldr	r4, [r3, #0]
 800998c:	f000 fcdf 	bl	800a34e <sysconf>
 8009990:	4b55      	ldr	r3, [pc, #340]	; (8009ae8 <_malloc_r+0x33c>)
 8009992:	9a00      	ldr	r2, [sp, #0]
 8009994:	6819      	ldr	r1, [r3, #0]
 8009996:	3410      	adds	r4, #16
 8009998:	3101      	adds	r1, #1
 800999a:	442c      	add	r4, r5
 800999c:	bf1f      	itttt	ne
 800999e:	f104 34ff 	addne.w	r4, r4, #4294967295
 80099a2:	1824      	addne	r4, r4, r0
 80099a4:	4241      	negne	r1, r0
 80099a6:	400c      	andne	r4, r1
 80099a8:	4680      	mov	r8, r0
 80099aa:	4621      	mov	r1, r4
 80099ac:	4630      	mov	r0, r6
 80099ae:	e9cd 2300 	strd	r2, r3, [sp]
 80099b2:	f000 fc2f 	bl	800a214 <_sbrk_r>
 80099b6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80099ba:	4683      	mov	fp, r0
 80099bc:	f000 80fb 	beq.w	8009bb6 <_malloc_r+0x40a>
 80099c0:	9a00      	ldr	r2, [sp, #0]
 80099c2:	9b01      	ldr	r3, [sp, #4]
 80099c4:	eb0a 0102 	add.w	r1, sl, r2
 80099c8:	4281      	cmp	r1, r0
 80099ca:	d902      	bls.n	80099d2 <_malloc_r+0x226>
 80099cc:	45ba      	cmp	sl, r7
 80099ce:	f040 80f2 	bne.w	8009bb6 <_malloc_r+0x40a>
 80099d2:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8009af4 <_malloc_r+0x348>
 80099d6:	f8d9 0000 	ldr.w	r0, [r9]
 80099da:	4559      	cmp	r1, fp
 80099dc:	eb00 0e04 	add.w	lr, r0, r4
 80099e0:	f8c9 e000 	str.w	lr, [r9]
 80099e4:	f108 3cff 	add.w	ip, r8, #4294967295
 80099e8:	f040 80ae 	bne.w	8009b48 <_malloc_r+0x39c>
 80099ec:	ea11 0f0c 	tst.w	r1, ip
 80099f0:	f040 80aa 	bne.w	8009b48 <_malloc_r+0x39c>
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4414      	add	r4, r2
 80099f8:	f044 0401 	orr.w	r4, r4, #1
 80099fc:	605c      	str	r4, [r3, #4]
 80099fe:	4a3b      	ldr	r2, [pc, #236]	; (8009aec <_malloc_r+0x340>)
 8009a00:	f8d9 3000 	ldr.w	r3, [r9]
 8009a04:	6811      	ldr	r1, [r2, #0]
 8009a06:	428b      	cmp	r3, r1
 8009a08:	bf88      	it	hi
 8009a0a:	6013      	strhi	r3, [r2, #0]
 8009a0c:	4a38      	ldr	r2, [pc, #224]	; (8009af0 <_malloc_r+0x344>)
 8009a0e:	6811      	ldr	r1, [r2, #0]
 8009a10:	428b      	cmp	r3, r1
 8009a12:	bf88      	it	hi
 8009a14:	6013      	strhi	r3, [r2, #0]
 8009a16:	e0ce      	b.n	8009bb6 <_malloc_r+0x40a>
 8009a18:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009a1c:	2a04      	cmp	r2, #4
 8009a1e:	d818      	bhi.n	8009a52 <_malloc_r+0x2a6>
 8009a20:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009a24:	3238      	adds	r2, #56	; 0x38
 8009a26:	f102 0e01 	add.w	lr, r2, #1
 8009a2a:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8009a2e:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8009a32:	45f0      	cmp	r8, lr
 8009a34:	d12b      	bne.n	8009a8e <_malloc_r+0x2e2>
 8009a36:	1092      	asrs	r2, r2, #2
 8009a38:	f04f 0c01 	mov.w	ip, #1
 8009a3c:	fa0c f202 	lsl.w	r2, ip, r2
 8009a40:	4310      	orrs	r0, r2
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8009a48:	f8c8 4008 	str.w	r4, [r8, #8]
 8009a4c:	f8ce 400c 	str.w	r4, [lr, #12]
 8009a50:	e75e      	b.n	8009910 <_malloc_r+0x164>
 8009a52:	2a14      	cmp	r2, #20
 8009a54:	d801      	bhi.n	8009a5a <_malloc_r+0x2ae>
 8009a56:	325b      	adds	r2, #91	; 0x5b
 8009a58:	e7e5      	b.n	8009a26 <_malloc_r+0x27a>
 8009a5a:	2a54      	cmp	r2, #84	; 0x54
 8009a5c:	d803      	bhi.n	8009a66 <_malloc_r+0x2ba>
 8009a5e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009a62:	326e      	adds	r2, #110	; 0x6e
 8009a64:	e7df      	b.n	8009a26 <_malloc_r+0x27a>
 8009a66:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009a6a:	d803      	bhi.n	8009a74 <_malloc_r+0x2c8>
 8009a6c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009a70:	3277      	adds	r2, #119	; 0x77
 8009a72:	e7d8      	b.n	8009a26 <_malloc_r+0x27a>
 8009a74:	f240 5e54 	movw	lr, #1364	; 0x554
 8009a78:	4572      	cmp	r2, lr
 8009a7a:	bf9a      	itte	ls
 8009a7c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8009a80:	327c      	addls	r2, #124	; 0x7c
 8009a82:	227e      	movhi	r2, #126	; 0x7e
 8009a84:	e7cf      	b.n	8009a26 <_malloc_r+0x27a>
 8009a86:	f8de e008 	ldr.w	lr, [lr, #8]
 8009a8a:	45f0      	cmp	r8, lr
 8009a8c:	d005      	beq.n	8009a9a <_malloc_r+0x2ee>
 8009a8e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009a92:	f022 0203 	bic.w	r2, r2, #3
 8009a96:	4562      	cmp	r2, ip
 8009a98:	d8f5      	bhi.n	8009a86 <_malloc_r+0x2da>
 8009a9a:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009a9e:	e7d1      	b.n	8009a44 <_malloc_r+0x298>
 8009aa0:	6860      	ldr	r0, [r4, #4]
 8009aa2:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8009aa6:	f020 0003 	bic.w	r0, r0, #3
 8009aaa:	eba0 0a05 	sub.w	sl, r0, r5
 8009aae:	f1ba 0f0f 	cmp.w	sl, #15
 8009ab2:	dd21      	ble.n	8009af8 <_malloc_r+0x34c>
 8009ab4:	68a2      	ldr	r2, [r4, #8]
 8009ab6:	1963      	adds	r3, r4, r5
 8009ab8:	f045 0501 	orr.w	r5, r5, #1
 8009abc:	6065      	str	r5, [r4, #4]
 8009abe:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009ac2:	f8ce 2008 	str.w	r2, [lr, #8]
 8009ac6:	f04a 0201 	orr.w	r2, sl, #1
 8009aca:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8009ace:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009ad2:	605a      	str	r2, [r3, #4]
 8009ad4:	f844 a000 	str.w	sl, [r4, r0]
 8009ad8:	e699      	b.n	800980e <_malloc_r+0x62>
 8009ada:	bf00      	nop
 8009adc:	2000046c 	.word	0x2000046c
 8009ae0:	20000474 	.word	0x20000474
 8009ae4:	20000b8c 	.word	0x20000b8c
 8009ae8:	20000874 	.word	0x20000874
 8009aec:	20000b84 	.word	0x20000b84
 8009af0:	20000b88 	.word	0x20000b88
 8009af4:	20000b5c 	.word	0x20000b5c
 8009af8:	f1ba 0f00 	cmp.w	sl, #0
 8009afc:	db11      	blt.n	8009b22 <_malloc_r+0x376>
 8009afe:	4420      	add	r0, r4
 8009b00:	6843      	ldr	r3, [r0, #4]
 8009b02:	f043 0301 	orr.w	r3, r3, #1
 8009b06:	6043      	str	r3, [r0, #4]
 8009b08:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8009b12:	f8ce 3008 	str.w	r3, [lr, #8]
 8009b16:	f000 f891 	bl	8009c3c <__malloc_unlock>
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	b003      	add	sp, #12
 8009b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b22:	4674      	mov	r4, lr
 8009b24:	e70a      	b.n	800993c <_malloc_r+0x190>
 8009b26:	f1ac 0008 	sub.w	r0, ip, #8
 8009b2a:	f8dc c000 	ldr.w	ip, [ip]
 8009b2e:	4584      	cmp	ip, r0
 8009b30:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b34:	f43f af0c 	beq.w	8009950 <_malloc_r+0x1a4>
 8009b38:	e711      	b.n	800995e <_malloc_r+0x1b2>
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	0052      	lsls	r2, r2, #1
 8009b3e:	4210      	tst	r0, r2
 8009b40:	d0fb      	beq.n	8009b3a <_malloc_r+0x38e>
 8009b42:	e6f5      	b.n	8009930 <_malloc_r+0x184>
 8009b44:	4643      	mov	r3, r8
 8009b46:	e7fa      	b.n	8009b3e <_malloc_r+0x392>
 8009b48:	6818      	ldr	r0, [r3, #0]
 8009b4a:	9200      	str	r2, [sp, #0]
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	bf1b      	ittet	ne
 8009b50:	ebab 0101 	subne.w	r1, fp, r1
 8009b54:	4471      	addne	r1, lr
 8009b56:	f8c3 b000 	streq.w	fp, [r3]
 8009b5a:	f8c9 1000 	strne.w	r1, [r9]
 8009b5e:	f01b 0307 	ands.w	r3, fp, #7
 8009b62:	bf1c      	itt	ne
 8009b64:	f1c3 0308 	rsbne	r3, r3, #8
 8009b68:	449b      	addne	fp, r3
 8009b6a:	445c      	add	r4, fp
 8009b6c:	4498      	add	r8, r3
 8009b6e:	ea04 030c 	and.w	r3, r4, ip
 8009b72:	eba8 0803 	sub.w	r8, r8, r3
 8009b76:	4641      	mov	r1, r8
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f000 fb4b 	bl	800a214 <_sbrk_r>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	bf04      	itt	eq
 8009b82:	4658      	moveq	r0, fp
 8009b84:	f04f 0800 	moveq.w	r8, #0
 8009b88:	f8d9 3000 	ldr.w	r3, [r9]
 8009b8c:	f8c7 b008 	str.w	fp, [r7, #8]
 8009b90:	eba0 000b 	sub.w	r0, r0, fp
 8009b94:	4440      	add	r0, r8
 8009b96:	4443      	add	r3, r8
 8009b98:	f040 0001 	orr.w	r0, r0, #1
 8009b9c:	45ba      	cmp	sl, r7
 8009b9e:	9a00      	ldr	r2, [sp, #0]
 8009ba0:	f8c9 3000 	str.w	r3, [r9]
 8009ba4:	f8cb 0004 	str.w	r0, [fp, #4]
 8009ba8:	f43f af29 	beq.w	80099fe <_malloc_r+0x252>
 8009bac:	2a0f      	cmp	r2, #15
 8009bae:	d810      	bhi.n	8009bd2 <_malloc_r+0x426>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	f8cb 3004 	str.w	r3, [fp, #4]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	f022 0203 	bic.w	r2, r2, #3
 8009bbe:	42aa      	cmp	r2, r5
 8009bc0:	eba2 0305 	sub.w	r3, r2, r5
 8009bc4:	d301      	bcc.n	8009bca <_malloc_r+0x41e>
 8009bc6:	2b0f      	cmp	r3, #15
 8009bc8:	dc1c      	bgt.n	8009c04 <_malloc_r+0x458>
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f000 f836 	bl	8009c3c <__malloc_unlock>
 8009bd0:	e5f8      	b.n	80097c4 <_malloc_r+0x18>
 8009bd2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009bd6:	f1a2 040c 	sub.w	r4, r2, #12
 8009bda:	f024 0407 	bic.w	r4, r4, #7
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	4323      	orrs	r3, r4
 8009be4:	f8ca 3004 	str.w	r3, [sl, #4]
 8009be8:	2205      	movs	r2, #5
 8009bea:	eb0a 0304 	add.w	r3, sl, r4
 8009bee:	2c0f      	cmp	r4, #15
 8009bf0:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8009bf4:	f67f af03 	bls.w	80099fe <_malloc_r+0x252>
 8009bf8:	f10a 0108 	add.w	r1, sl, #8
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f7ff fd0b 	bl	8009618 <_free_r>
 8009c02:	e6fc      	b.n	80099fe <_malloc_r+0x252>
 8009c04:	68bc      	ldr	r4, [r7, #8]
 8009c06:	f045 0201 	orr.w	r2, r5, #1
 8009c0a:	4425      	add	r5, r4
 8009c0c:	f043 0301 	orr.w	r3, r3, #1
 8009c10:	6062      	str	r2, [r4, #4]
 8009c12:	60bd      	str	r5, [r7, #8]
 8009c14:	606b      	str	r3, [r5, #4]
 8009c16:	e5fa      	b.n	800980e <_malloc_r+0x62>

08009c18 <memcpy>:
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	1e43      	subs	r3, r0, #1
 8009c1c:	440a      	add	r2, r1
 8009c1e:	4291      	cmp	r1, r2
 8009c20:	d100      	bne.n	8009c24 <memcpy+0xc>
 8009c22:	bd10      	pop	{r4, pc}
 8009c24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c2c:	e7f7      	b.n	8009c1e <memcpy+0x6>
	...

08009c30 <__malloc_lock>:
 8009c30:	4801      	ldr	r0, [pc, #4]	; (8009c38 <__malloc_lock+0x8>)
 8009c32:	f7fd bbf1 	b.w	8007418 <__retarget_lock_acquire_recursive>
 8009c36:	bf00      	nop
 8009c38:	20000d2c 	.word	0x20000d2c

08009c3c <__malloc_unlock>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	; (8009c44 <__malloc_unlock+0x8>)
 8009c3e:	f7fd bbec 	b.w	800741a <__retarget_lock_release_recursive>
 8009c42:	bf00      	nop
 8009c44:	20000d2c 	.word	0x20000d2c

08009c48 <_Balloc>:
 8009c48:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009c4a:	b570      	push	{r4, r5, r6, lr}
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	460c      	mov	r4, r1
 8009c50:	b17b      	cbz	r3, 8009c72 <_Balloc+0x2a>
 8009c52:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009c54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009c58:	b9a0      	cbnz	r0, 8009c84 <_Balloc+0x3c>
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	fa01 f604 	lsl.w	r6, r1, r4
 8009c60:	1d72      	adds	r2, r6, #5
 8009c62:	0092      	lsls	r2, r2, #2
 8009c64:	4628      	mov	r0, r5
 8009c66:	f000 fb7f 	bl	800a368 <_calloc_r>
 8009c6a:	b148      	cbz	r0, 8009c80 <_Balloc+0x38>
 8009c6c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8009c70:	e00b      	b.n	8009c8a <_Balloc+0x42>
 8009c72:	2221      	movs	r2, #33	; 0x21
 8009c74:	2104      	movs	r1, #4
 8009c76:	f000 fb77 	bl	800a368 <_calloc_r>
 8009c7a:	64e8      	str	r0, [r5, #76]	; 0x4c
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d1e8      	bne.n	8009c52 <_Balloc+0xa>
 8009c80:	2000      	movs	r0, #0
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	6802      	ldr	r2, [r0, #0]
 8009c86:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c90:	e7f7      	b.n	8009c82 <_Balloc+0x3a>

08009c92 <_Bfree>:
 8009c92:	b131      	cbz	r1, 8009ca2 <_Bfree+0x10>
 8009c94:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009c96:	684a      	ldr	r2, [r1, #4]
 8009c98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009c9c:	6008      	str	r0, [r1, #0]
 8009c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009ca2:	4770      	bx	lr

08009ca4 <__multadd>:
 8009ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca8:	690d      	ldr	r5, [r1, #16]
 8009caa:	461f      	mov	r7, r3
 8009cac:	4606      	mov	r6, r0
 8009cae:	460c      	mov	r4, r1
 8009cb0:	f101 0c14 	add.w	ip, r1, #20
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f8dc 0000 	ldr.w	r0, [ip]
 8009cba:	b281      	uxth	r1, r0
 8009cbc:	fb02 7101 	mla	r1, r2, r1, r7
 8009cc0:	0c0f      	lsrs	r7, r1, #16
 8009cc2:	0c00      	lsrs	r0, r0, #16
 8009cc4:	fb02 7000 	mla	r0, r2, r0, r7
 8009cc8:	b289      	uxth	r1, r1
 8009cca:	3301      	adds	r3, #1
 8009ccc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009cd0:	429d      	cmp	r5, r3
 8009cd2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009cd6:	f84c 1b04 	str.w	r1, [ip], #4
 8009cda:	dcec      	bgt.n	8009cb6 <__multadd+0x12>
 8009cdc:	b1d7      	cbz	r7, 8009d14 <__multadd+0x70>
 8009cde:	68a3      	ldr	r3, [r4, #8]
 8009ce0:	42ab      	cmp	r3, r5
 8009ce2:	dc12      	bgt.n	8009d0a <__multadd+0x66>
 8009ce4:	6861      	ldr	r1, [r4, #4]
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	3101      	adds	r1, #1
 8009cea:	f7ff ffad 	bl	8009c48 <_Balloc>
 8009cee:	6922      	ldr	r2, [r4, #16]
 8009cf0:	3202      	adds	r2, #2
 8009cf2:	f104 010c 	add.w	r1, r4, #12
 8009cf6:	4680      	mov	r8, r0
 8009cf8:	0092      	lsls	r2, r2, #2
 8009cfa:	300c      	adds	r0, #12
 8009cfc:	f7ff ff8c 	bl	8009c18 <memcpy>
 8009d00:	4621      	mov	r1, r4
 8009d02:	4630      	mov	r0, r6
 8009d04:	f7ff ffc5 	bl	8009c92 <_Bfree>
 8009d08:	4644      	mov	r4, r8
 8009d0a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d0e:	3501      	adds	r5, #1
 8009d10:	615f      	str	r7, [r3, #20]
 8009d12:	6125      	str	r5, [r4, #16]
 8009d14:	4620      	mov	r0, r4
 8009d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d1a <__hi0bits>:
 8009d1a:	0c02      	lsrs	r2, r0, #16
 8009d1c:	0412      	lsls	r2, r2, #16
 8009d1e:	4603      	mov	r3, r0
 8009d20:	b9b2      	cbnz	r2, 8009d50 <__hi0bits+0x36>
 8009d22:	0403      	lsls	r3, r0, #16
 8009d24:	2010      	movs	r0, #16
 8009d26:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009d2a:	bf04      	itt	eq
 8009d2c:	021b      	lsleq	r3, r3, #8
 8009d2e:	3008      	addeq	r0, #8
 8009d30:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d34:	bf04      	itt	eq
 8009d36:	011b      	lsleq	r3, r3, #4
 8009d38:	3004      	addeq	r0, #4
 8009d3a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d3e:	bf04      	itt	eq
 8009d40:	009b      	lsleq	r3, r3, #2
 8009d42:	3002      	addeq	r0, #2
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	db06      	blt.n	8009d56 <__hi0bits+0x3c>
 8009d48:	005b      	lsls	r3, r3, #1
 8009d4a:	d503      	bpl.n	8009d54 <__hi0bits+0x3a>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	4770      	bx	lr
 8009d50:	2000      	movs	r0, #0
 8009d52:	e7e8      	b.n	8009d26 <__hi0bits+0xc>
 8009d54:	2020      	movs	r0, #32
 8009d56:	4770      	bx	lr

08009d58 <__lo0bits>:
 8009d58:	6803      	ldr	r3, [r0, #0]
 8009d5a:	f013 0207 	ands.w	r2, r3, #7
 8009d5e:	4601      	mov	r1, r0
 8009d60:	d00b      	beq.n	8009d7a <__lo0bits+0x22>
 8009d62:	07da      	lsls	r2, r3, #31
 8009d64:	d423      	bmi.n	8009dae <__lo0bits+0x56>
 8009d66:	0798      	lsls	r0, r3, #30
 8009d68:	bf49      	itett	mi
 8009d6a:	085b      	lsrmi	r3, r3, #1
 8009d6c:	089b      	lsrpl	r3, r3, #2
 8009d6e:	2001      	movmi	r0, #1
 8009d70:	600b      	strmi	r3, [r1, #0]
 8009d72:	bf5c      	itt	pl
 8009d74:	600b      	strpl	r3, [r1, #0]
 8009d76:	2002      	movpl	r0, #2
 8009d78:	4770      	bx	lr
 8009d7a:	b298      	uxth	r0, r3
 8009d7c:	b9a8      	cbnz	r0, 8009daa <__lo0bits+0x52>
 8009d7e:	0c1b      	lsrs	r3, r3, #16
 8009d80:	2010      	movs	r0, #16
 8009d82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d86:	bf04      	itt	eq
 8009d88:	0a1b      	lsreq	r3, r3, #8
 8009d8a:	3008      	addeq	r0, #8
 8009d8c:	071a      	lsls	r2, r3, #28
 8009d8e:	bf04      	itt	eq
 8009d90:	091b      	lsreq	r3, r3, #4
 8009d92:	3004      	addeq	r0, #4
 8009d94:	079a      	lsls	r2, r3, #30
 8009d96:	bf04      	itt	eq
 8009d98:	089b      	lsreq	r3, r3, #2
 8009d9a:	3002      	addeq	r0, #2
 8009d9c:	07da      	lsls	r2, r3, #31
 8009d9e:	d402      	bmi.n	8009da6 <__lo0bits+0x4e>
 8009da0:	085b      	lsrs	r3, r3, #1
 8009da2:	d006      	beq.n	8009db2 <__lo0bits+0x5a>
 8009da4:	3001      	adds	r0, #1
 8009da6:	600b      	str	r3, [r1, #0]
 8009da8:	4770      	bx	lr
 8009daa:	4610      	mov	r0, r2
 8009dac:	e7e9      	b.n	8009d82 <__lo0bits+0x2a>
 8009dae:	2000      	movs	r0, #0
 8009db0:	4770      	bx	lr
 8009db2:	2020      	movs	r0, #32
 8009db4:	4770      	bx	lr

08009db6 <__i2b>:
 8009db6:	b510      	push	{r4, lr}
 8009db8:	460c      	mov	r4, r1
 8009dba:	2101      	movs	r1, #1
 8009dbc:	f7ff ff44 	bl	8009c48 <_Balloc>
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	6144      	str	r4, [r0, #20]
 8009dc4:	6102      	str	r2, [r0, #16]
 8009dc6:	bd10      	pop	{r4, pc}

08009dc8 <__multiply>:
 8009dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dcc:	4614      	mov	r4, r2
 8009dce:	690a      	ldr	r2, [r1, #16]
 8009dd0:	6923      	ldr	r3, [r4, #16]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	bfb8      	it	lt
 8009dd6:	460b      	movlt	r3, r1
 8009dd8:	4688      	mov	r8, r1
 8009dda:	bfbc      	itt	lt
 8009ddc:	46a0      	movlt	r8, r4
 8009dde:	461c      	movlt	r4, r3
 8009de0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009de4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009de8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009dec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009df0:	eb07 0609 	add.w	r6, r7, r9
 8009df4:	42b3      	cmp	r3, r6
 8009df6:	bfb8      	it	lt
 8009df8:	3101      	addlt	r1, #1
 8009dfa:	f7ff ff25 	bl	8009c48 <_Balloc>
 8009dfe:	f100 0514 	add.w	r5, r0, #20
 8009e02:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009e06:	462b      	mov	r3, r5
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4573      	cmp	r3, lr
 8009e0c:	d316      	bcc.n	8009e3c <__multiply+0x74>
 8009e0e:	f104 0214 	add.w	r2, r4, #20
 8009e12:	f108 0114 	add.w	r1, r8, #20
 8009e16:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009e1a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	9b00      	ldr	r3, [sp, #0]
 8009e22:	9201      	str	r2, [sp, #4]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d80c      	bhi.n	8009e42 <__multiply+0x7a>
 8009e28:	2e00      	cmp	r6, #0
 8009e2a:	dd03      	ble.n	8009e34 <__multiply+0x6c>
 8009e2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d05d      	beq.n	8009ef0 <__multiply+0x128>
 8009e34:	6106      	str	r6, [r0, #16]
 8009e36:	b003      	add	sp, #12
 8009e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3c:	f843 2b04 	str.w	r2, [r3], #4
 8009e40:	e7e3      	b.n	8009e0a <__multiply+0x42>
 8009e42:	f8b2 b000 	ldrh.w	fp, [r2]
 8009e46:	f1bb 0f00 	cmp.w	fp, #0
 8009e4a:	d023      	beq.n	8009e94 <__multiply+0xcc>
 8009e4c:	4689      	mov	r9, r1
 8009e4e:	46ac      	mov	ip, r5
 8009e50:	f04f 0800 	mov.w	r8, #0
 8009e54:	f859 4b04 	ldr.w	r4, [r9], #4
 8009e58:	f8dc a000 	ldr.w	sl, [ip]
 8009e5c:	b2a3      	uxth	r3, r4
 8009e5e:	fa1f fa8a 	uxth.w	sl, sl
 8009e62:	fb0b a303 	mla	r3, fp, r3, sl
 8009e66:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009e6a:	f8dc 4000 	ldr.w	r4, [ip]
 8009e6e:	4443      	add	r3, r8
 8009e70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009e74:	fb0b 840a 	mla	r4, fp, sl, r8
 8009e78:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009e7c:	46e2      	mov	sl, ip
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e84:	454f      	cmp	r7, r9
 8009e86:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009e8a:	f84a 3b04 	str.w	r3, [sl], #4
 8009e8e:	d82b      	bhi.n	8009ee8 <__multiply+0x120>
 8009e90:	f8cc 8004 	str.w	r8, [ip, #4]
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009e9a:	3204      	adds	r2, #4
 8009e9c:	f1ba 0f00 	cmp.w	sl, #0
 8009ea0:	d020      	beq.n	8009ee4 <__multiply+0x11c>
 8009ea2:	682b      	ldr	r3, [r5, #0]
 8009ea4:	4689      	mov	r9, r1
 8009ea6:	46a8      	mov	r8, r5
 8009ea8:	f04f 0b00 	mov.w	fp, #0
 8009eac:	f8b9 c000 	ldrh.w	ip, [r9]
 8009eb0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009eb4:	fb0a 440c 	mla	r4, sl, ip, r4
 8009eb8:	445c      	add	r4, fp
 8009eba:	46c4      	mov	ip, r8
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ec2:	f84c 3b04 	str.w	r3, [ip], #4
 8009ec6:	f859 3b04 	ldr.w	r3, [r9], #4
 8009eca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009ece:	0c1b      	lsrs	r3, r3, #16
 8009ed0:	fb0a b303 	mla	r3, sl, r3, fp
 8009ed4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009ed8:	454f      	cmp	r7, r9
 8009eda:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009ede:	d805      	bhi.n	8009eec <__multiply+0x124>
 8009ee0:	f8c8 3004 	str.w	r3, [r8, #4]
 8009ee4:	3504      	adds	r5, #4
 8009ee6:	e79b      	b.n	8009e20 <__multiply+0x58>
 8009ee8:	46d4      	mov	ip, sl
 8009eea:	e7b3      	b.n	8009e54 <__multiply+0x8c>
 8009eec:	46e0      	mov	r8, ip
 8009eee:	e7dd      	b.n	8009eac <__multiply+0xe4>
 8009ef0:	3e01      	subs	r6, #1
 8009ef2:	e799      	b.n	8009e28 <__multiply+0x60>

08009ef4 <__pow5mult>:
 8009ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef8:	4615      	mov	r5, r2
 8009efa:	f012 0203 	ands.w	r2, r2, #3
 8009efe:	4606      	mov	r6, r0
 8009f00:	460f      	mov	r7, r1
 8009f02:	d007      	beq.n	8009f14 <__pow5mult+0x20>
 8009f04:	3a01      	subs	r2, #1
 8009f06:	4c1a      	ldr	r4, [pc, #104]	; (8009f70 <__pow5mult+0x7c>)
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f0e:	f7ff fec9 	bl	8009ca4 <__multadd>
 8009f12:	4607      	mov	r7, r0
 8009f14:	10ad      	asrs	r5, r5, #2
 8009f16:	d027      	beq.n	8009f68 <__pow5mult+0x74>
 8009f18:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8009f1a:	b944      	cbnz	r4, 8009f2e <__pow5mult+0x3a>
 8009f1c:	f240 2171 	movw	r1, #625	; 0x271
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7ff ff48 	bl	8009db6 <__i2b>
 8009f26:	2300      	movs	r3, #0
 8009f28:	64b0      	str	r0, [r6, #72]	; 0x48
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	6003      	str	r3, [r0, #0]
 8009f2e:	f04f 0800 	mov.w	r8, #0
 8009f32:	07eb      	lsls	r3, r5, #31
 8009f34:	d50a      	bpl.n	8009f4c <__pow5mult+0x58>
 8009f36:	4639      	mov	r1, r7
 8009f38:	4622      	mov	r2, r4
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f7ff ff44 	bl	8009dc8 <__multiply>
 8009f40:	4639      	mov	r1, r7
 8009f42:	4681      	mov	r9, r0
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7ff fea4 	bl	8009c92 <_Bfree>
 8009f4a:	464f      	mov	r7, r9
 8009f4c:	106d      	asrs	r5, r5, #1
 8009f4e:	d00b      	beq.n	8009f68 <__pow5mult+0x74>
 8009f50:	6820      	ldr	r0, [r4, #0]
 8009f52:	b938      	cbnz	r0, 8009f64 <__pow5mult+0x70>
 8009f54:	4622      	mov	r2, r4
 8009f56:	4621      	mov	r1, r4
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f7ff ff35 	bl	8009dc8 <__multiply>
 8009f5e:	6020      	str	r0, [r4, #0]
 8009f60:	f8c0 8000 	str.w	r8, [r0]
 8009f64:	4604      	mov	r4, r0
 8009f66:	e7e4      	b.n	8009f32 <__pow5mult+0x3e>
 8009f68:	4638      	mov	r0, r7
 8009f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f6e:	bf00      	nop
 8009f70:	0800a970 	.word	0x0800a970

08009f74 <__lshift>:
 8009f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	460c      	mov	r4, r1
 8009f7a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f7e:	6923      	ldr	r3, [r4, #16]
 8009f80:	6849      	ldr	r1, [r1, #4]
 8009f82:	eb0a 0903 	add.w	r9, sl, r3
 8009f86:	68a3      	ldr	r3, [r4, #8]
 8009f88:	4607      	mov	r7, r0
 8009f8a:	4616      	mov	r6, r2
 8009f8c:	f109 0501 	add.w	r5, r9, #1
 8009f90:	42ab      	cmp	r3, r5
 8009f92:	db32      	blt.n	8009ffa <__lshift+0x86>
 8009f94:	4638      	mov	r0, r7
 8009f96:	f7ff fe57 	bl	8009c48 <_Balloc>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	4680      	mov	r8, r0
 8009f9e:	f100 0114 	add.w	r1, r0, #20
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	4553      	cmp	r3, sl
 8009fa6:	db2b      	blt.n	800a000 <__lshift+0x8c>
 8009fa8:	6920      	ldr	r0, [r4, #16]
 8009faa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fae:	f104 0314 	add.w	r3, r4, #20
 8009fb2:	f016 021f 	ands.w	r2, r6, #31
 8009fb6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fbe:	d025      	beq.n	800a00c <__lshift+0x98>
 8009fc0:	f1c2 0e20 	rsb	lr, r2, #32
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	681e      	ldr	r6, [r3, #0]
 8009fc8:	468a      	mov	sl, r1
 8009fca:	4096      	lsls	r6, r2
 8009fcc:	4330      	orrs	r0, r6
 8009fce:	f84a 0b04 	str.w	r0, [sl], #4
 8009fd2:	f853 0b04 	ldr.w	r0, [r3], #4
 8009fd6:	459c      	cmp	ip, r3
 8009fd8:	fa20 f00e 	lsr.w	r0, r0, lr
 8009fdc:	d814      	bhi.n	800a008 <__lshift+0x94>
 8009fde:	6048      	str	r0, [r1, #4]
 8009fe0:	b108      	cbz	r0, 8009fe6 <__lshift+0x72>
 8009fe2:	f109 0502 	add.w	r5, r9, #2
 8009fe6:	3d01      	subs	r5, #1
 8009fe8:	4638      	mov	r0, r7
 8009fea:	f8c8 5010 	str.w	r5, [r8, #16]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	f7ff fe4f 	bl	8009c92 <_Bfree>
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffa:	3101      	adds	r1, #1
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	e7c7      	b.n	8009f90 <__lshift+0x1c>
 800a000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a004:	3301      	adds	r3, #1
 800a006:	e7cd      	b.n	8009fa4 <__lshift+0x30>
 800a008:	4651      	mov	r1, sl
 800a00a:	e7dc      	b.n	8009fc6 <__lshift+0x52>
 800a00c:	3904      	subs	r1, #4
 800a00e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a012:	f841 2f04 	str.w	r2, [r1, #4]!
 800a016:	459c      	cmp	ip, r3
 800a018:	d8f9      	bhi.n	800a00e <__lshift+0x9a>
 800a01a:	e7e4      	b.n	8009fe6 <__lshift+0x72>

0800a01c <__mcmp>:
 800a01c:	6903      	ldr	r3, [r0, #16]
 800a01e:	690a      	ldr	r2, [r1, #16]
 800a020:	1a9b      	subs	r3, r3, r2
 800a022:	b530      	push	{r4, r5, lr}
 800a024:	d10c      	bne.n	800a040 <__mcmp+0x24>
 800a026:	0092      	lsls	r2, r2, #2
 800a028:	3014      	adds	r0, #20
 800a02a:	3114      	adds	r1, #20
 800a02c:	1884      	adds	r4, r0, r2
 800a02e:	4411      	add	r1, r2
 800a030:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a034:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a038:	4295      	cmp	r5, r2
 800a03a:	d003      	beq.n	800a044 <__mcmp+0x28>
 800a03c:	d305      	bcc.n	800a04a <__mcmp+0x2e>
 800a03e:	2301      	movs	r3, #1
 800a040:	4618      	mov	r0, r3
 800a042:	bd30      	pop	{r4, r5, pc}
 800a044:	42a0      	cmp	r0, r4
 800a046:	d3f3      	bcc.n	800a030 <__mcmp+0x14>
 800a048:	e7fa      	b.n	800a040 <__mcmp+0x24>
 800a04a:	f04f 33ff 	mov.w	r3, #4294967295
 800a04e:	e7f7      	b.n	800a040 <__mcmp+0x24>

0800a050 <__mdiff>:
 800a050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a054:	460d      	mov	r5, r1
 800a056:	4607      	mov	r7, r0
 800a058:	4611      	mov	r1, r2
 800a05a:	4628      	mov	r0, r5
 800a05c:	4614      	mov	r4, r2
 800a05e:	f7ff ffdd 	bl	800a01c <__mcmp>
 800a062:	1e06      	subs	r6, r0, #0
 800a064:	d108      	bne.n	800a078 <__mdiff+0x28>
 800a066:	4631      	mov	r1, r6
 800a068:	4638      	mov	r0, r7
 800a06a:	f7ff fded 	bl	8009c48 <_Balloc>
 800a06e:	2301      	movs	r3, #1
 800a070:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a078:	bfa4      	itt	ge
 800a07a:	4623      	movge	r3, r4
 800a07c:	462c      	movge	r4, r5
 800a07e:	4638      	mov	r0, r7
 800a080:	6861      	ldr	r1, [r4, #4]
 800a082:	bfa6      	itte	ge
 800a084:	461d      	movge	r5, r3
 800a086:	2600      	movge	r6, #0
 800a088:	2601      	movlt	r6, #1
 800a08a:	f7ff fddd 	bl	8009c48 <_Balloc>
 800a08e:	692b      	ldr	r3, [r5, #16]
 800a090:	60c6      	str	r6, [r0, #12]
 800a092:	6926      	ldr	r6, [r4, #16]
 800a094:	f105 0914 	add.w	r9, r5, #20
 800a098:	f104 0214 	add.w	r2, r4, #20
 800a09c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a0a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a0a4:	f100 0514 	add.w	r5, r0, #20
 800a0a8:	f04f 0e00 	mov.w	lr, #0
 800a0ac:	f852 ab04 	ldr.w	sl, [r2], #4
 800a0b0:	f859 4b04 	ldr.w	r4, [r9], #4
 800a0b4:	fa1e f18a 	uxtah	r1, lr, sl
 800a0b8:	b2a3      	uxth	r3, r4
 800a0ba:	1ac9      	subs	r1, r1, r3
 800a0bc:	0c23      	lsrs	r3, r4, #16
 800a0be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a0c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a0c6:	b289      	uxth	r1, r1
 800a0c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a0cc:	45c8      	cmp	r8, r9
 800a0ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a0d2:	4694      	mov	ip, r2
 800a0d4:	f845 3b04 	str.w	r3, [r5], #4
 800a0d8:	d8e8      	bhi.n	800a0ac <__mdiff+0x5c>
 800a0da:	45bc      	cmp	ip, r7
 800a0dc:	d304      	bcc.n	800a0e8 <__mdiff+0x98>
 800a0de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a0e2:	b183      	cbz	r3, 800a106 <__mdiff+0xb6>
 800a0e4:	6106      	str	r6, [r0, #16]
 800a0e6:	e7c5      	b.n	800a074 <__mdiff+0x24>
 800a0e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a0ec:	fa1e f381 	uxtah	r3, lr, r1
 800a0f0:	141a      	asrs	r2, r3, #16
 800a0f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a100:	f845 3b04 	str.w	r3, [r5], #4
 800a104:	e7e9      	b.n	800a0da <__mdiff+0x8a>
 800a106:	3e01      	subs	r6, #1
 800a108:	e7e9      	b.n	800a0de <__mdiff+0x8e>

0800a10a <__d2b>:
 800a10a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a10e:	460e      	mov	r6, r1
 800a110:	2101      	movs	r1, #1
 800a112:	ec59 8b10 	vmov	r8, r9, d0
 800a116:	4615      	mov	r5, r2
 800a118:	f7ff fd96 	bl	8009c48 <_Balloc>
 800a11c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a120:	4607      	mov	r7, r0
 800a122:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a126:	bb34      	cbnz	r4, 800a176 <__d2b+0x6c>
 800a128:	9301      	str	r3, [sp, #4]
 800a12a:	f1b8 0300 	subs.w	r3, r8, #0
 800a12e:	d027      	beq.n	800a180 <__d2b+0x76>
 800a130:	a802      	add	r0, sp, #8
 800a132:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a136:	f7ff fe0f 	bl	8009d58 <__lo0bits>
 800a13a:	9900      	ldr	r1, [sp, #0]
 800a13c:	b1f0      	cbz	r0, 800a17c <__d2b+0x72>
 800a13e:	9a01      	ldr	r2, [sp, #4]
 800a140:	f1c0 0320 	rsb	r3, r0, #32
 800a144:	fa02 f303 	lsl.w	r3, r2, r3
 800a148:	430b      	orrs	r3, r1
 800a14a:	40c2      	lsrs	r2, r0
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	9201      	str	r2, [sp, #4]
 800a150:	9b01      	ldr	r3, [sp, #4]
 800a152:	61bb      	str	r3, [r7, #24]
 800a154:	2b00      	cmp	r3, #0
 800a156:	bf14      	ite	ne
 800a158:	2102      	movne	r1, #2
 800a15a:	2101      	moveq	r1, #1
 800a15c:	6139      	str	r1, [r7, #16]
 800a15e:	b1c4      	cbz	r4, 800a192 <__d2b+0x88>
 800a160:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a164:	4404      	add	r4, r0
 800a166:	6034      	str	r4, [r6, #0]
 800a168:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a16c:	6028      	str	r0, [r5, #0]
 800a16e:	4638      	mov	r0, r7
 800a170:	b003      	add	sp, #12
 800a172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a17a:	e7d5      	b.n	800a128 <__d2b+0x1e>
 800a17c:	6179      	str	r1, [r7, #20]
 800a17e:	e7e7      	b.n	800a150 <__d2b+0x46>
 800a180:	a801      	add	r0, sp, #4
 800a182:	f7ff fde9 	bl	8009d58 <__lo0bits>
 800a186:	9b01      	ldr	r3, [sp, #4]
 800a188:	617b      	str	r3, [r7, #20]
 800a18a:	2101      	movs	r1, #1
 800a18c:	6139      	str	r1, [r7, #16]
 800a18e:	3020      	adds	r0, #32
 800a190:	e7e5      	b.n	800a15e <__d2b+0x54>
 800a192:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a196:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a19a:	6030      	str	r0, [r6, #0]
 800a19c:	6918      	ldr	r0, [r3, #16]
 800a19e:	f7ff fdbc 	bl	8009d1a <__hi0bits>
 800a1a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a1a6:	e7e1      	b.n	800a16c <__d2b+0x62>

0800a1a8 <frexp>:
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	ec55 4b10 	vmov	r4, r5, d0
 800a1b0:	6001      	str	r1, [r0, #0]
 800a1b2:	4916      	ldr	r1, [pc, #88]	; (800a20c <frexp+0x64>)
 800a1b4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a1b8:	428b      	cmp	r3, r1
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	462a      	mov	r2, r5
 800a1be:	dc22      	bgt.n	800a206 <frexp+0x5e>
 800a1c0:	ee10 1a10 	vmov	r1, s0
 800a1c4:	4319      	orrs	r1, r3
 800a1c6:	d01e      	beq.n	800a206 <frexp+0x5e>
 800a1c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1cc:	da0d      	bge.n	800a1ea <frexp+0x42>
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4b0f      	ldr	r3, [pc, #60]	; (800a210 <frexp+0x68>)
 800a1d2:	ee10 0a10 	vmov	r0, s0
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	f7f6 fa2e 	bl	8000638 <__aeabi_dmul>
 800a1dc:	460a      	mov	r2, r1
 800a1de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1e2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	6031      	str	r1, [r6, #0]
 800a1ea:	6831      	ldr	r1, [r6, #0]
 800a1ec:	151b      	asrs	r3, r3, #20
 800a1ee:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a1f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a1f6:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800a1fa:	440b      	add	r3, r1
 800a1fc:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a200:	6033      	str	r3, [r6, #0]
 800a202:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800a206:	ec45 4b10 	vmov	d0, r4, r5
 800a20a:	bd70      	pop	{r4, r5, r6, pc}
 800a20c:	7fefffff 	.word	0x7fefffff
 800a210:	43500000 	.word	0x43500000

0800a214 <_sbrk_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4c06      	ldr	r4, [pc, #24]	; (800a230 <_sbrk_r+0x1c>)
 800a218:	2300      	movs	r3, #0
 800a21a:	4605      	mov	r5, r0
 800a21c:	4608      	mov	r0, r1
 800a21e:	6023      	str	r3, [r4, #0]
 800a220:	f7f7 fbea 	bl	80019f8 <_sbrk>
 800a224:	1c43      	adds	r3, r0, #1
 800a226:	d102      	bne.n	800a22e <_sbrk_r+0x1a>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	b103      	cbz	r3, 800a22e <_sbrk_r+0x1a>
 800a22c:	602b      	str	r3, [r5, #0]
 800a22e:	bd38      	pop	{r3, r4, r5, pc}
 800a230:	20000d34 	.word	0x20000d34

0800a234 <strncpy>:
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	3901      	subs	r1, #1
 800a238:	4604      	mov	r4, r0
 800a23a:	b902      	cbnz	r2, 800a23e <strncpy+0xa>
 800a23c:	bd70      	pop	{r4, r5, r6, pc}
 800a23e:	4623      	mov	r3, r4
 800a240:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a244:	f803 5b01 	strb.w	r5, [r3], #1
 800a248:	1e56      	subs	r6, r2, #1
 800a24a:	b92d      	cbnz	r5, 800a258 <strncpy+0x24>
 800a24c:	4414      	add	r4, r2
 800a24e:	42a3      	cmp	r3, r4
 800a250:	d0f4      	beq.n	800a23c <strncpy+0x8>
 800a252:	f803 5b01 	strb.w	r5, [r3], #1
 800a256:	e7fa      	b.n	800a24e <strncpy+0x1a>
 800a258:	461c      	mov	r4, r3
 800a25a:	4632      	mov	r2, r6
 800a25c:	e7ed      	b.n	800a23a <strncpy+0x6>

0800a25e <__ssprint_r>:
 800a25e:	6893      	ldr	r3, [r2, #8]
 800a260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	4681      	mov	r9, r0
 800a266:	460c      	mov	r4, r1
 800a268:	4616      	mov	r6, r2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d05e      	beq.n	800a32c <__ssprint_r+0xce>
 800a26e:	f04f 0b00 	mov.w	fp, #0
 800a272:	f8d2 a000 	ldr.w	sl, [r2]
 800a276:	465f      	mov	r7, fp
 800a278:	b357      	cbz	r7, 800a2d0 <__ssprint_r+0x72>
 800a27a:	68a3      	ldr	r3, [r4, #8]
 800a27c:	429f      	cmp	r7, r3
 800a27e:	d340      	bcc.n	800a302 <__ssprint_r+0xa4>
 800a280:	89a2      	ldrh	r2, [r4, #12]
 800a282:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a286:	d03c      	beq.n	800a302 <__ssprint_r+0xa4>
 800a288:	6825      	ldr	r5, [r4, #0]
 800a28a:	6921      	ldr	r1, [r4, #16]
 800a28c:	eba5 0801 	sub.w	r8, r5, r1
 800a290:	6965      	ldr	r5, [r4, #20]
 800a292:	2302      	movs	r3, #2
 800a294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a298:	fb95 f5f3 	sdiv	r5, r5, r3
 800a29c:	f108 0301 	add.w	r3, r8, #1
 800a2a0:	443b      	add	r3, r7
 800a2a2:	429d      	cmp	r5, r3
 800a2a4:	bf38      	it	cc
 800a2a6:	461d      	movcc	r5, r3
 800a2a8:	0553      	lsls	r3, r2, #21
 800a2aa:	d544      	bpl.n	800a336 <__ssprint_r+0xd8>
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4648      	mov	r0, r9
 800a2b0:	f7ff fa7c 	bl	80097ac <_malloc_r>
 800a2b4:	b988      	cbnz	r0, 800a2da <__ssprint_r+0x7c>
 800a2b6:	230c      	movs	r3, #12
 800a2b8:	f8c9 3000 	str.w	r3, [r9]
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2c2:	81a3      	strh	r3, [r4, #12]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800a2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ce:	e02f      	b.n	800a330 <__ssprint_r+0xd2>
 800a2d0:	e9da b700 	ldrd	fp, r7, [sl]
 800a2d4:	f10a 0a08 	add.w	sl, sl, #8
 800a2d8:	e7ce      	b.n	800a278 <__ssprint_r+0x1a>
 800a2da:	4642      	mov	r2, r8
 800a2dc:	6921      	ldr	r1, [r4, #16]
 800a2de:	9001      	str	r0, [sp, #4]
 800a2e0:	f7ff fc9a 	bl	8009c18 <memcpy>
 800a2e4:	89a2      	ldrh	r2, [r4, #12]
 800a2e6:	9b01      	ldr	r3, [sp, #4]
 800a2e8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a2ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2f0:	81a2      	strh	r2, [r4, #12]
 800a2f2:	6123      	str	r3, [r4, #16]
 800a2f4:	6165      	str	r5, [r4, #20]
 800a2f6:	4443      	add	r3, r8
 800a2f8:	eba5 0508 	sub.w	r5, r5, r8
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	60a5      	str	r5, [r4, #8]
 800a300:	463b      	mov	r3, r7
 800a302:	42bb      	cmp	r3, r7
 800a304:	bf28      	it	cs
 800a306:	463b      	movcs	r3, r7
 800a308:	461a      	mov	r2, r3
 800a30a:	4659      	mov	r1, fp
 800a30c:	6820      	ldr	r0, [r4, #0]
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	f000 f869 	bl	800a3e6 <memmove>
 800a314:	68a2      	ldr	r2, [r4, #8]
 800a316:	9b01      	ldr	r3, [sp, #4]
 800a318:	1ad2      	subs	r2, r2, r3
 800a31a:	60a2      	str	r2, [r4, #8]
 800a31c:	6822      	ldr	r2, [r4, #0]
 800a31e:	4413      	add	r3, r2
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	68b3      	ldr	r3, [r6, #8]
 800a324:	1bdf      	subs	r7, r3, r7
 800a326:	60b7      	str	r7, [r6, #8]
 800a328:	2f00      	cmp	r7, #0
 800a32a:	d1d1      	bne.n	800a2d0 <__ssprint_r+0x72>
 800a32c:	2000      	movs	r0, #0
 800a32e:	6070      	str	r0, [r6, #4]
 800a330:	b003      	add	sp, #12
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	462a      	mov	r2, r5
 800a338:	4648      	mov	r0, r9
 800a33a:	f000 f86d 	bl	800a418 <_realloc_r>
 800a33e:	4603      	mov	r3, r0
 800a340:	2800      	cmp	r0, #0
 800a342:	d1d6      	bne.n	800a2f2 <__ssprint_r+0x94>
 800a344:	6921      	ldr	r1, [r4, #16]
 800a346:	4648      	mov	r0, r9
 800a348:	f7ff f966 	bl	8009618 <_free_r>
 800a34c:	e7b3      	b.n	800a2b6 <__ssprint_r+0x58>

0800a34e <sysconf>:
 800a34e:	2808      	cmp	r0, #8
 800a350:	b508      	push	{r3, lr}
 800a352:	d006      	beq.n	800a362 <sysconf+0x14>
 800a354:	f7fc ffea 	bl	800732c <__errno>
 800a358:	2316      	movs	r3, #22
 800a35a:	6003      	str	r3, [r0, #0]
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	bd08      	pop	{r3, pc}
 800a362:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a366:	e7fb      	b.n	800a360 <sysconf+0x12>

0800a368 <_calloc_r>:
 800a368:	b510      	push	{r4, lr}
 800a36a:	4351      	muls	r1, r2
 800a36c:	f7ff fa1e 	bl	80097ac <_malloc_r>
 800a370:	4604      	mov	r4, r0
 800a372:	b198      	cbz	r0, 800a39c <_calloc_r+0x34>
 800a374:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a378:	f022 0203 	bic.w	r2, r2, #3
 800a37c:	3a04      	subs	r2, #4
 800a37e:	2a24      	cmp	r2, #36	; 0x24
 800a380:	d81b      	bhi.n	800a3ba <_calloc_r+0x52>
 800a382:	2a13      	cmp	r2, #19
 800a384:	d917      	bls.n	800a3b6 <_calloc_r+0x4e>
 800a386:	2100      	movs	r1, #0
 800a388:	2a1b      	cmp	r2, #27
 800a38a:	e9c0 1100 	strd	r1, r1, [r0]
 800a38e:	d807      	bhi.n	800a3a0 <_calloc_r+0x38>
 800a390:	f100 0308 	add.w	r3, r0, #8
 800a394:	2200      	movs	r2, #0
 800a396:	e9c3 2200 	strd	r2, r2, [r3]
 800a39a:	609a      	str	r2, [r3, #8]
 800a39c:	4620      	mov	r0, r4
 800a39e:	bd10      	pop	{r4, pc}
 800a3a0:	2a24      	cmp	r2, #36	; 0x24
 800a3a2:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800a3a6:	bf11      	iteee	ne
 800a3a8:	f100 0310 	addne.w	r3, r0, #16
 800a3ac:	6101      	streq	r1, [r0, #16]
 800a3ae:	f100 0318 	addeq.w	r3, r0, #24
 800a3b2:	6141      	streq	r1, [r0, #20]
 800a3b4:	e7ee      	b.n	800a394 <_calloc_r+0x2c>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	e7ec      	b.n	800a394 <_calloc_r+0x2c>
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	f7fc ffe0 	bl	8007380 <memset>
 800a3c0:	e7ec      	b.n	800a39c <_calloc_r+0x34>

0800a3c2 <__ascii_mbtowc>:
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	b901      	cbnz	r1, 800a3c8 <__ascii_mbtowc+0x6>
 800a3c6:	a901      	add	r1, sp, #4
 800a3c8:	b142      	cbz	r2, 800a3dc <__ascii_mbtowc+0x1a>
 800a3ca:	b14b      	cbz	r3, 800a3e0 <__ascii_mbtowc+0x1e>
 800a3cc:	7813      	ldrb	r3, [r2, #0]
 800a3ce:	600b      	str	r3, [r1, #0]
 800a3d0:	7812      	ldrb	r2, [r2, #0]
 800a3d2:	1c10      	adds	r0, r2, #0
 800a3d4:	bf18      	it	ne
 800a3d6:	2001      	movne	r0, #1
 800a3d8:	b002      	add	sp, #8
 800a3da:	4770      	bx	lr
 800a3dc:	4610      	mov	r0, r2
 800a3de:	e7fb      	b.n	800a3d8 <__ascii_mbtowc+0x16>
 800a3e0:	f06f 0001 	mvn.w	r0, #1
 800a3e4:	e7f8      	b.n	800a3d8 <__ascii_mbtowc+0x16>

0800a3e6 <memmove>:
 800a3e6:	4288      	cmp	r0, r1
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	eb01 0302 	add.w	r3, r1, r2
 800a3ee:	d807      	bhi.n	800a400 <memmove+0x1a>
 800a3f0:	1e42      	subs	r2, r0, #1
 800a3f2:	4299      	cmp	r1, r3
 800a3f4:	d00a      	beq.n	800a40c <memmove+0x26>
 800a3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a3fe:	e7f8      	b.n	800a3f2 <memmove+0xc>
 800a400:	4283      	cmp	r3, r0
 800a402:	d9f5      	bls.n	800a3f0 <memmove+0xa>
 800a404:	1881      	adds	r1, r0, r2
 800a406:	1ad2      	subs	r2, r2, r3
 800a408:	42d3      	cmn	r3, r2
 800a40a:	d100      	bne.n	800a40e <memmove+0x28>
 800a40c:	bd10      	pop	{r4, pc}
 800a40e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a412:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a416:	e7f7      	b.n	800a408 <memmove+0x22>

0800a418 <_realloc_r>:
 800a418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	4682      	mov	sl, r0
 800a41e:	460c      	mov	r4, r1
 800a420:	b929      	cbnz	r1, 800a42e <_realloc_r+0x16>
 800a422:	4611      	mov	r1, r2
 800a424:	b003      	add	sp, #12
 800a426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42a:	f7ff b9bf 	b.w	80097ac <_malloc_r>
 800a42e:	9201      	str	r2, [sp, #4]
 800a430:	f7ff fbfe 	bl	8009c30 <__malloc_lock>
 800a434:	9a01      	ldr	r2, [sp, #4]
 800a436:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a43a:	f102 080b 	add.w	r8, r2, #11
 800a43e:	f1b8 0f16 	cmp.w	r8, #22
 800a442:	f1a4 0908 	sub.w	r9, r4, #8
 800a446:	f025 0603 	bic.w	r6, r5, #3
 800a44a:	d90b      	bls.n	800a464 <_realloc_r+0x4c>
 800a44c:	f038 0807 	bics.w	r8, r8, #7
 800a450:	d50a      	bpl.n	800a468 <_realloc_r+0x50>
 800a452:	230c      	movs	r3, #12
 800a454:	f8ca 3000 	str.w	r3, [sl]
 800a458:	f04f 0b00 	mov.w	fp, #0
 800a45c:	4658      	mov	r0, fp
 800a45e:	b003      	add	sp, #12
 800a460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a464:	f04f 0810 	mov.w	r8, #16
 800a468:	4590      	cmp	r8, r2
 800a46a:	d3f2      	bcc.n	800a452 <_realloc_r+0x3a>
 800a46c:	45b0      	cmp	r8, r6
 800a46e:	f340 8170 	ble.w	800a752 <_realloc_r+0x33a>
 800a472:	49a9      	ldr	r1, [pc, #676]	; (800a718 <_realloc_r+0x300>)
 800a474:	9101      	str	r1, [sp, #4]
 800a476:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a47a:	eb09 0306 	add.w	r3, r9, r6
 800a47e:	459c      	cmp	ip, r3
 800a480:	6858      	ldr	r0, [r3, #4]
 800a482:	d005      	beq.n	800a490 <_realloc_r+0x78>
 800a484:	f020 0101 	bic.w	r1, r0, #1
 800a488:	4419      	add	r1, r3
 800a48a:	6849      	ldr	r1, [r1, #4]
 800a48c:	07cf      	lsls	r7, r1, #31
 800a48e:	d447      	bmi.n	800a520 <_realloc_r+0x108>
 800a490:	f020 0003 	bic.w	r0, r0, #3
 800a494:	459c      	cmp	ip, r3
 800a496:	eb06 0700 	add.w	r7, r6, r0
 800a49a:	d119      	bne.n	800a4d0 <_realloc_r+0xb8>
 800a49c:	f108 0110 	add.w	r1, r8, #16
 800a4a0:	42b9      	cmp	r1, r7
 800a4a2:	dc3f      	bgt.n	800a524 <_realloc_r+0x10c>
 800a4a4:	eb09 0308 	add.w	r3, r9, r8
 800a4a8:	9a01      	ldr	r2, [sp, #4]
 800a4aa:	eba7 0708 	sub.w	r7, r7, r8
 800a4ae:	f047 0701 	orr.w	r7, r7, #1
 800a4b2:	6093      	str	r3, [r2, #8]
 800a4b4:	605f      	str	r7, [r3, #4]
 800a4b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	ea43 0308 	orr.w	r3, r3, r8
 800a4c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4c6:	4650      	mov	r0, sl
 800a4c8:	f7ff fbb8 	bl	8009c3c <__malloc_unlock>
 800a4cc:	46a3      	mov	fp, r4
 800a4ce:	e7c5      	b.n	800a45c <_realloc_r+0x44>
 800a4d0:	45b8      	cmp	r8, r7
 800a4d2:	dc27      	bgt.n	800a524 <_realloc_r+0x10c>
 800a4d4:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a4d8:	60da      	str	r2, [r3, #12]
 800a4da:	6093      	str	r3, [r2, #8]
 800a4dc:	eba7 0008 	sub.w	r0, r7, r8
 800a4e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a4e4:	280f      	cmp	r0, #15
 800a4e6:	f002 0201 	and.w	r2, r2, #1
 800a4ea:	eb09 0307 	add.w	r3, r9, r7
 800a4ee:	f240 8132 	bls.w	800a756 <_realloc_r+0x33e>
 800a4f2:	eb09 0108 	add.w	r1, r9, r8
 800a4f6:	ea48 0202 	orr.w	r2, r8, r2
 800a4fa:	f040 0001 	orr.w	r0, r0, #1
 800a4fe:	f8c9 2004 	str.w	r2, [r9, #4]
 800a502:	6048      	str	r0, [r1, #4]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	f042 0201 	orr.w	r2, r2, #1
 800a50a:	605a      	str	r2, [r3, #4]
 800a50c:	3108      	adds	r1, #8
 800a50e:	4650      	mov	r0, sl
 800a510:	f7ff f882 	bl	8009618 <_free_r>
 800a514:	4650      	mov	r0, sl
 800a516:	f7ff fb91 	bl	8009c3c <__malloc_unlock>
 800a51a:	f109 0b08 	add.w	fp, r9, #8
 800a51e:	e79d      	b.n	800a45c <_realloc_r+0x44>
 800a520:	2000      	movs	r0, #0
 800a522:	4603      	mov	r3, r0
 800a524:	07e9      	lsls	r1, r5, #31
 800a526:	f100 80c6 	bmi.w	800a6b6 <_realloc_r+0x29e>
 800a52a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a52e:	eba9 0505 	sub.w	r5, r9, r5
 800a532:	6869      	ldr	r1, [r5, #4]
 800a534:	f021 0103 	bic.w	r1, r1, #3
 800a538:	eb01 0b06 	add.w	fp, r1, r6
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 8086 	beq.w	800a64e <_realloc_r+0x236>
 800a542:	459c      	cmp	ip, r3
 800a544:	eb00 070b 	add.w	r7, r0, fp
 800a548:	d149      	bne.n	800a5de <_realloc_r+0x1c6>
 800a54a:	f108 0310 	add.w	r3, r8, #16
 800a54e:	42bb      	cmp	r3, r7
 800a550:	dc7d      	bgt.n	800a64e <_realloc_r+0x236>
 800a552:	46ab      	mov	fp, r5
 800a554:	68eb      	ldr	r3, [r5, #12]
 800a556:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800a55a:	60d3      	str	r3, [r2, #12]
 800a55c:	609a      	str	r2, [r3, #8]
 800a55e:	1f32      	subs	r2, r6, #4
 800a560:	2a24      	cmp	r2, #36	; 0x24
 800a562:	d837      	bhi.n	800a5d4 <_realloc_r+0x1bc>
 800a564:	2a13      	cmp	r2, #19
 800a566:	d933      	bls.n	800a5d0 <_realloc_r+0x1b8>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	60ab      	str	r3, [r5, #8]
 800a56c:	6863      	ldr	r3, [r4, #4]
 800a56e:	60eb      	str	r3, [r5, #12]
 800a570:	2a1b      	cmp	r2, #27
 800a572:	d81b      	bhi.n	800a5ac <_realloc_r+0x194>
 800a574:	3408      	adds	r4, #8
 800a576:	f105 0310 	add.w	r3, r5, #16
 800a57a:	6822      	ldr	r2, [r4, #0]
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	6862      	ldr	r2, [r4, #4]
 800a580:	605a      	str	r2, [r3, #4]
 800a582:	68a2      	ldr	r2, [r4, #8]
 800a584:	609a      	str	r2, [r3, #8]
 800a586:	eb05 0308 	add.w	r3, r5, r8
 800a58a:	9a01      	ldr	r2, [sp, #4]
 800a58c:	eba7 0708 	sub.w	r7, r7, r8
 800a590:	f047 0701 	orr.w	r7, r7, #1
 800a594:	6093      	str	r3, [r2, #8]
 800a596:	605f      	str	r7, [r3, #4]
 800a598:	686b      	ldr	r3, [r5, #4]
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	ea43 0308 	orr.w	r3, r3, r8
 800a5a2:	606b      	str	r3, [r5, #4]
 800a5a4:	4650      	mov	r0, sl
 800a5a6:	f7ff fb49 	bl	8009c3c <__malloc_unlock>
 800a5aa:	e757      	b.n	800a45c <_realloc_r+0x44>
 800a5ac:	68a3      	ldr	r3, [r4, #8]
 800a5ae:	612b      	str	r3, [r5, #16]
 800a5b0:	68e3      	ldr	r3, [r4, #12]
 800a5b2:	616b      	str	r3, [r5, #20]
 800a5b4:	2a24      	cmp	r2, #36	; 0x24
 800a5b6:	bf01      	itttt	eq
 800a5b8:	6923      	ldreq	r3, [r4, #16]
 800a5ba:	61ab      	streq	r3, [r5, #24]
 800a5bc:	6962      	ldreq	r2, [r4, #20]
 800a5be:	61ea      	streq	r2, [r5, #28]
 800a5c0:	bf19      	ittee	ne
 800a5c2:	3410      	addne	r4, #16
 800a5c4:	f105 0318 	addne.w	r3, r5, #24
 800a5c8:	f105 0320 	addeq.w	r3, r5, #32
 800a5cc:	3418      	addeq	r4, #24
 800a5ce:	e7d4      	b.n	800a57a <_realloc_r+0x162>
 800a5d0:	465b      	mov	r3, fp
 800a5d2:	e7d2      	b.n	800a57a <_realloc_r+0x162>
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	4658      	mov	r0, fp
 800a5d8:	f7ff ff05 	bl	800a3e6 <memmove>
 800a5dc:	e7d3      	b.n	800a586 <_realloc_r+0x16e>
 800a5de:	45b8      	cmp	r8, r7
 800a5e0:	dc35      	bgt.n	800a64e <_realloc_r+0x236>
 800a5e2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	60da      	str	r2, [r3, #12]
 800a5ea:	6093      	str	r3, [r2, #8]
 800a5ec:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a5f0:	68eb      	ldr	r3, [r5, #12]
 800a5f2:	60d3      	str	r3, [r2, #12]
 800a5f4:	609a      	str	r2, [r3, #8]
 800a5f6:	1f32      	subs	r2, r6, #4
 800a5f8:	2a24      	cmp	r2, #36	; 0x24
 800a5fa:	d824      	bhi.n	800a646 <_realloc_r+0x22e>
 800a5fc:	2a13      	cmp	r2, #19
 800a5fe:	d908      	bls.n	800a612 <_realloc_r+0x1fa>
 800a600:	6823      	ldr	r3, [r4, #0]
 800a602:	60ab      	str	r3, [r5, #8]
 800a604:	6863      	ldr	r3, [r4, #4]
 800a606:	60eb      	str	r3, [r5, #12]
 800a608:	2a1b      	cmp	r2, #27
 800a60a:	d80a      	bhi.n	800a622 <_realloc_r+0x20a>
 800a60c:	3408      	adds	r4, #8
 800a60e:	f105 0010 	add.w	r0, r5, #16
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	6003      	str	r3, [r0, #0]
 800a616:	6863      	ldr	r3, [r4, #4]
 800a618:	6043      	str	r3, [r0, #4]
 800a61a:	68a3      	ldr	r3, [r4, #8]
 800a61c:	6083      	str	r3, [r0, #8]
 800a61e:	46a9      	mov	r9, r5
 800a620:	e75c      	b.n	800a4dc <_realloc_r+0xc4>
 800a622:	68a3      	ldr	r3, [r4, #8]
 800a624:	612b      	str	r3, [r5, #16]
 800a626:	68e3      	ldr	r3, [r4, #12]
 800a628:	616b      	str	r3, [r5, #20]
 800a62a:	2a24      	cmp	r2, #36	; 0x24
 800a62c:	bf01      	itttt	eq
 800a62e:	6923      	ldreq	r3, [r4, #16]
 800a630:	61ab      	streq	r3, [r5, #24]
 800a632:	6963      	ldreq	r3, [r4, #20]
 800a634:	61eb      	streq	r3, [r5, #28]
 800a636:	bf19      	ittee	ne
 800a638:	3410      	addne	r4, #16
 800a63a:	f105 0018 	addne.w	r0, r5, #24
 800a63e:	f105 0020 	addeq.w	r0, r5, #32
 800a642:	3418      	addeq	r4, #24
 800a644:	e7e5      	b.n	800a612 <_realloc_r+0x1fa>
 800a646:	4621      	mov	r1, r4
 800a648:	f7ff fecd 	bl	800a3e6 <memmove>
 800a64c:	e7e7      	b.n	800a61e <_realloc_r+0x206>
 800a64e:	45d8      	cmp	r8, fp
 800a650:	dc31      	bgt.n	800a6b6 <_realloc_r+0x29e>
 800a652:	4628      	mov	r0, r5
 800a654:	68eb      	ldr	r3, [r5, #12]
 800a656:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a65a:	60d3      	str	r3, [r2, #12]
 800a65c:	609a      	str	r2, [r3, #8]
 800a65e:	1f32      	subs	r2, r6, #4
 800a660:	2a24      	cmp	r2, #36	; 0x24
 800a662:	d824      	bhi.n	800a6ae <_realloc_r+0x296>
 800a664:	2a13      	cmp	r2, #19
 800a666:	d908      	bls.n	800a67a <_realloc_r+0x262>
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	60ab      	str	r3, [r5, #8]
 800a66c:	6863      	ldr	r3, [r4, #4]
 800a66e:	60eb      	str	r3, [r5, #12]
 800a670:	2a1b      	cmp	r2, #27
 800a672:	d80a      	bhi.n	800a68a <_realloc_r+0x272>
 800a674:	3408      	adds	r4, #8
 800a676:	f105 0010 	add.w	r0, r5, #16
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	6863      	ldr	r3, [r4, #4]
 800a680:	6043      	str	r3, [r0, #4]
 800a682:	68a3      	ldr	r3, [r4, #8]
 800a684:	6083      	str	r3, [r0, #8]
 800a686:	465f      	mov	r7, fp
 800a688:	e7c9      	b.n	800a61e <_realloc_r+0x206>
 800a68a:	68a3      	ldr	r3, [r4, #8]
 800a68c:	612b      	str	r3, [r5, #16]
 800a68e:	68e3      	ldr	r3, [r4, #12]
 800a690:	616b      	str	r3, [r5, #20]
 800a692:	2a24      	cmp	r2, #36	; 0x24
 800a694:	bf01      	itttt	eq
 800a696:	6923      	ldreq	r3, [r4, #16]
 800a698:	61ab      	streq	r3, [r5, #24]
 800a69a:	6963      	ldreq	r3, [r4, #20]
 800a69c:	61eb      	streq	r3, [r5, #28]
 800a69e:	bf19      	ittee	ne
 800a6a0:	3410      	addne	r4, #16
 800a6a2:	f105 0018 	addne.w	r0, r5, #24
 800a6a6:	f105 0020 	addeq.w	r0, r5, #32
 800a6aa:	3418      	addeq	r4, #24
 800a6ac:	e7e5      	b.n	800a67a <_realloc_r+0x262>
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	f7ff fe99 	bl	800a3e6 <memmove>
 800a6b4:	e7e7      	b.n	800a686 <_realloc_r+0x26e>
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	f7ff f877 	bl	80097ac <_malloc_r>
 800a6be:	4683      	mov	fp, r0
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	f43f af6f 	beq.w	800a5a4 <_realloc_r+0x18c>
 800a6c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a6ca:	f023 0301 	bic.w	r3, r3, #1
 800a6ce:	444b      	add	r3, r9
 800a6d0:	f1a0 0208 	sub.w	r2, r0, #8
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d105      	bne.n	800a6e4 <_realloc_r+0x2cc>
 800a6d8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a6dc:	f027 0703 	bic.w	r7, r7, #3
 800a6e0:	4437      	add	r7, r6
 800a6e2:	e6fb      	b.n	800a4dc <_realloc_r+0xc4>
 800a6e4:	1f32      	subs	r2, r6, #4
 800a6e6:	2a24      	cmp	r2, #36	; 0x24
 800a6e8:	d82f      	bhi.n	800a74a <_realloc_r+0x332>
 800a6ea:	2a13      	cmp	r2, #19
 800a6ec:	d92a      	bls.n	800a744 <_realloc_r+0x32c>
 800a6ee:	6823      	ldr	r3, [r4, #0]
 800a6f0:	6003      	str	r3, [r0, #0]
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	6043      	str	r3, [r0, #4]
 800a6f6:	2a1b      	cmp	r2, #27
 800a6f8:	d810      	bhi.n	800a71c <_realloc_r+0x304>
 800a6fa:	f104 0208 	add.w	r2, r4, #8
 800a6fe:	f100 0308 	add.w	r3, r0, #8
 800a702:	6811      	ldr	r1, [r2, #0]
 800a704:	6019      	str	r1, [r3, #0]
 800a706:	6851      	ldr	r1, [r2, #4]
 800a708:	6059      	str	r1, [r3, #4]
 800a70a:	6892      	ldr	r2, [r2, #8]
 800a70c:	609a      	str	r2, [r3, #8]
 800a70e:	4621      	mov	r1, r4
 800a710:	4650      	mov	r0, sl
 800a712:	f7fe ff81 	bl	8009618 <_free_r>
 800a716:	e745      	b.n	800a5a4 <_realloc_r+0x18c>
 800a718:	2000046c 	.word	0x2000046c
 800a71c:	68a3      	ldr	r3, [r4, #8]
 800a71e:	6083      	str	r3, [r0, #8]
 800a720:	68e3      	ldr	r3, [r4, #12]
 800a722:	60c3      	str	r3, [r0, #12]
 800a724:	2a24      	cmp	r2, #36	; 0x24
 800a726:	bf01      	itttt	eq
 800a728:	6923      	ldreq	r3, [r4, #16]
 800a72a:	6103      	streq	r3, [r0, #16]
 800a72c:	6961      	ldreq	r1, [r4, #20]
 800a72e:	6141      	streq	r1, [r0, #20]
 800a730:	bf19      	ittee	ne
 800a732:	f104 0210 	addne.w	r2, r4, #16
 800a736:	f100 0310 	addne.w	r3, r0, #16
 800a73a:	f104 0218 	addeq.w	r2, r4, #24
 800a73e:	f100 0318 	addeq.w	r3, r0, #24
 800a742:	e7de      	b.n	800a702 <_realloc_r+0x2ea>
 800a744:	4603      	mov	r3, r0
 800a746:	4622      	mov	r2, r4
 800a748:	e7db      	b.n	800a702 <_realloc_r+0x2ea>
 800a74a:	4621      	mov	r1, r4
 800a74c:	f7ff fe4b 	bl	800a3e6 <memmove>
 800a750:	e7dd      	b.n	800a70e <_realloc_r+0x2f6>
 800a752:	4637      	mov	r7, r6
 800a754:	e6c2      	b.n	800a4dc <_realloc_r+0xc4>
 800a756:	4317      	orrs	r7, r2
 800a758:	f8c9 7004 	str.w	r7, [r9, #4]
 800a75c:	685a      	ldr	r2, [r3, #4]
 800a75e:	f042 0201 	orr.w	r2, r2, #1
 800a762:	605a      	str	r2, [r3, #4]
 800a764:	e6d6      	b.n	800a514 <_realloc_r+0xfc>
 800a766:	bf00      	nop

0800a768 <__ascii_wctomb>:
 800a768:	b149      	cbz	r1, 800a77e <__ascii_wctomb+0x16>
 800a76a:	2aff      	cmp	r2, #255	; 0xff
 800a76c:	bf85      	ittet	hi
 800a76e:	238a      	movhi	r3, #138	; 0x8a
 800a770:	6003      	strhi	r3, [r0, #0]
 800a772:	700a      	strbls	r2, [r1, #0]
 800a774:	f04f 30ff 	movhi.w	r0, #4294967295
 800a778:	bf98      	it	ls
 800a77a:	2001      	movls	r0, #1
 800a77c:	4770      	bx	lr
 800a77e:	4608      	mov	r0, r1
 800a780:	4770      	bx	lr
	...

0800a784 <_init>:
 800a784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a786:	bf00      	nop
 800a788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78a:	bc08      	pop	{r3}
 800a78c:	469e      	mov	lr, r3
 800a78e:	4770      	bx	lr

0800a790 <_fini>:
 800a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a792:	bf00      	nop
 800a794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a796:	bc08      	pop	{r3}
 800a798:	469e      	mov	lr, r3
 800a79a:	4770      	bx	lr
